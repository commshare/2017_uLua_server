// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_protocol.proto

#ifndef PROTOBUF_server_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_server_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "server_base.pb.h"
#include "server_msg_type.pb.h"
// @@protoc_insertion_point(includes)

namespace server_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_5fprotocol_2eproto();
void protobuf_AssignDesc_server_5fprotocol_2eproto();
void protobuf_ShutdownFile_server_5fprotocol_2eproto();

class packet_server_register;
class packet_server_register_result;
class packet_other_server_connect;
class packet_other_server_disconnect;
class packet_updata_servers_info;
class packet_updata_self_info;
class packet_server_connect;
class packet_server_connect_result;
class packet_transmit_msg;
class packet_broadcast_msg;
class packet_broadcast_msg2;
class packet_heartbeat;
class packet_player_connect;
class packet_player_disconnect;
class packet_regedit_route_msg;
class packet_gate_setlogic_ok;
class packet_clear_session;
class packet_http_command;
class packet_get_ip;
class packet_get_ip_result;

enum packet_server_connect_result_e_server_connect_result {
  packet_server_connect_result_e_server_connect_result_e_scr_success = 0,
  packet_server_connect_result_e_server_connect_result_e_scr_fail = 1
};
bool packet_server_connect_result_e_server_connect_result_IsValid(int value);
const packet_server_connect_result_e_server_connect_result packet_server_connect_result_e_server_connect_result_e_server_connect_result_MIN = packet_server_connect_result_e_server_connect_result_e_scr_success;
const packet_server_connect_result_e_server_connect_result packet_server_connect_result_e_server_connect_result_e_server_connect_result_MAX = packet_server_connect_result_e_server_connect_result_e_scr_fail;
const int packet_server_connect_result_e_server_connect_result_e_server_connect_result_ARRAYSIZE = packet_server_connect_result_e_server_connect_result_e_server_connect_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* packet_server_connect_result_e_server_connect_result_descriptor();
inline const ::std::string& packet_server_connect_result_e_server_connect_result_Name(packet_server_connect_result_e_server_connect_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    packet_server_connect_result_e_server_connect_result_descriptor(), value);
}
inline bool packet_server_connect_result_e_server_connect_result_Parse(
    const ::std::string& name, packet_server_connect_result_e_server_connect_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<packet_server_connect_result_e_server_connect_result>(
    packet_server_connect_result_e_server_connect_result_descriptor(), name, value);
}
// ===================================================================

class packet_server_register : public ::google::protobuf::Message {
 public:
  packet_server_register();
  virtual ~packet_server_register();

  packet_server_register(const packet_server_register& from);

  inline packet_server_register& operator=(const packet_server_register& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_server_register& default_instance();

  void Swap(packet_server_register* other);

  // implements Message ----------------------------------------------

  packet_server_register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_server_register& from);
  void MergeFrom(const packet_server_register& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_register];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // optional .server_protocols.e_server_type server_type = 2;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 2;
  inline ::server_protocols::e_server_type server_type() const;
  inline void set_server_type(::server_protocols::e_server_type value);

  // optional fixed32 server_port = 3;
  inline bool has_server_port() const;
  inline void clear_server_port();
  static const int kServerPortFieldNumber = 3;
  inline ::google::protobuf::uint32 server_port() const;
  inline void set_server_port(::google::protobuf::uint32 value);

  // optional .server_protocols.server_attributes attributes = 4;
  inline bool has_attributes() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 4;
  inline const ::server_protocols::server_attributes& attributes() const;
  inline ::server_protocols::server_attributes* mutable_attributes();
  inline ::server_protocols::server_attributes* release_attributes();
  inline void set_allocated_attributes(::server_protocols::server_attributes* attributes);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_server_register)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_server_port();
  inline void clear_has_server_port();
  inline void set_has_attributes();
  inline void clear_has_attributes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int server_type_;
  ::server_protocols::server_attributes* attributes_;
  ::google::protobuf::uint32 server_port_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_server_register* default_instance_;
};
// -------------------------------------------------------------------

class packet_server_register_result : public ::google::protobuf::Message {
 public:
  packet_server_register_result();
  virtual ~packet_server_register_result();

  packet_server_register_result(const packet_server_register_result& from);

  inline packet_server_register_result& operator=(const packet_server_register_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_server_register_result& default_instance();

  void Swap(packet_server_register_result* other);

  // implements Message ----------------------------------------------

  packet_server_register_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_server_register_result& from);
  void MergeFrom(const packet_server_register_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_register_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // optional fixed64 server_time = 2;
  inline bool has_server_time() const;
  inline void clear_server_time();
  static const int kServerTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 server_time() const;
  inline void set_server_time(::google::protobuf::uint64 value);

  // optional fixed32 group_id = 3;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_server_register_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_server_time();
  inline void clear_has_server_time();
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_time_;
  int packet_id_;
  ::google::protobuf::uint32 group_id_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_server_register_result* default_instance_;
};
// -------------------------------------------------------------------

class packet_other_server_connect : public ::google::protobuf::Message {
 public:
  packet_other_server_connect();
  virtual ~packet_other_server_connect();

  packet_other_server_connect(const packet_other_server_connect& from);

  inline packet_other_server_connect& operator=(const packet_other_server_connect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_other_server_connect& default_instance();

  void Swap(packet_other_server_connect* other);

  // implements Message ----------------------------------------------

  packet_other_server_connect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_other_server_connect& from);
  void MergeFrom(const packet_other_server_connect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_other_server_connect];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // optional .server_protocols.server_info sinfo = 2;
  inline bool has_sinfo() const;
  inline void clear_sinfo();
  static const int kSinfoFieldNumber = 2;
  inline const ::server_protocols::server_info& sinfo() const;
  inline ::server_protocols::server_info* mutable_sinfo();
  inline ::server_protocols::server_info* release_sinfo();
  inline void set_allocated_sinfo(::server_protocols::server_info* sinfo);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_other_server_connect)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_sinfo();
  inline void clear_has_sinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::server_protocols::server_info* sinfo_;
  int packet_id_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_other_server_connect* default_instance_;
};
// -------------------------------------------------------------------

class packet_other_server_disconnect : public ::google::protobuf::Message {
 public:
  packet_other_server_disconnect();
  virtual ~packet_other_server_disconnect();

  packet_other_server_disconnect(const packet_other_server_disconnect& from);

  inline packet_other_server_disconnect& operator=(const packet_other_server_disconnect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_other_server_disconnect& default_instance();

  void Swap(packet_other_server_disconnect* other);

  // implements Message ----------------------------------------------

  packet_other_server_disconnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_other_server_disconnect& from);
  void MergeFrom(const packet_other_server_disconnect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_other_server_disconnect];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // optional fixed32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_other_server_disconnect)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::uint32 server_id_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_other_server_disconnect* default_instance_;
};
// -------------------------------------------------------------------

class packet_updata_servers_info : public ::google::protobuf::Message {
 public:
  packet_updata_servers_info();
  virtual ~packet_updata_servers_info();

  packet_updata_servers_info(const packet_updata_servers_info& from);

  inline packet_updata_servers_info& operator=(const packet_updata_servers_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_updata_servers_info& default_instance();

  void Swap(packet_updata_servers_info* other);

  // implements Message ----------------------------------------------

  packet_updata_servers_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_updata_servers_info& from);
  void MergeFrom(const packet_updata_servers_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_updata_servers_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // repeated .server_protocols.server_info sinfos = 2;
  inline int sinfos_size() const;
  inline void clear_sinfos();
  static const int kSinfosFieldNumber = 2;
  inline const ::server_protocols::server_info& sinfos(int index) const;
  inline ::server_protocols::server_info* mutable_sinfos(int index);
  inline ::server_protocols::server_info* add_sinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::server_protocols::server_info >&
      sinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::server_protocols::server_info >*
      mutable_sinfos();

  // @@protoc_insertion_point(class_scope:server_protocols.packet_updata_servers_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::server_protocols::server_info > sinfos_;
  int packet_id_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_updata_servers_info* default_instance_;
};
// -------------------------------------------------------------------

class packet_updata_self_info : public ::google::protobuf::Message {
 public:
  packet_updata_self_info();
  virtual ~packet_updata_self_info();

  packet_updata_self_info(const packet_updata_self_info& from);

  inline packet_updata_self_info& operator=(const packet_updata_self_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_updata_self_info& default_instance();

  void Swap(packet_updata_self_info* other);

  // implements Message ----------------------------------------------

  packet_updata_self_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_updata_self_info& from);
  void MergeFrom(const packet_updata_self_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_updata_self_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // optional .server_protocols.server_attributes attributes = 2;
  inline bool has_attributes() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 2;
  inline const ::server_protocols::server_attributes& attributes() const;
  inline ::server_protocols::server_attributes* mutable_attributes();
  inline ::server_protocols::server_attributes* release_attributes();
  inline void set_allocated_attributes(::server_protocols::server_attributes* attributes);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_updata_self_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_attributes();
  inline void clear_has_attributes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::server_protocols::server_attributes* attributes_;
  int packet_id_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_updata_self_info* default_instance_;
};
// -------------------------------------------------------------------

class packet_server_connect : public ::google::protobuf::Message {
 public:
  packet_server_connect();
  virtual ~packet_server_connect();

  packet_server_connect(const packet_server_connect& from);

  inline packet_server_connect& operator=(const packet_server_connect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_server_connect& default_instance();

  void Swap(packet_server_connect* other);

  // implements Message ----------------------------------------------

  packet_server_connect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_server_connect& from);
  void MergeFrom(const packet_server_connect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_connect];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // optional fixed32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional .server_protocols.e_server_type server_type = 3;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 3;
  inline ::server_protocols::e_server_type server_type() const;
  inline void set_server_type(::server_protocols::e_server_type value);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_server_connect)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_server_type();
  inline void clear_has_server_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::uint32 server_id_;
  int server_type_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_server_connect* default_instance_;
};
// -------------------------------------------------------------------

class packet_server_connect_result : public ::google::protobuf::Message {
 public:
  packet_server_connect_result();
  virtual ~packet_server_connect_result();

  packet_server_connect_result(const packet_server_connect_result& from);

  inline packet_server_connect_result& operator=(const packet_server_connect_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_server_connect_result& default_instance();

  void Swap(packet_server_connect_result* other);

  // implements Message ----------------------------------------------

  packet_server_connect_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_server_connect_result& from);
  void MergeFrom(const packet_server_connect_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef packet_server_connect_result_e_server_connect_result e_server_connect_result;
  static const e_server_connect_result e_scr_success = packet_server_connect_result_e_server_connect_result_e_scr_success;
  static const e_server_connect_result e_scr_fail = packet_server_connect_result_e_server_connect_result_e_scr_fail;
  static inline bool e_server_connect_result_IsValid(int value) {
    return packet_server_connect_result_e_server_connect_result_IsValid(value);
  }
  static const e_server_connect_result e_server_connect_result_MIN =
    packet_server_connect_result_e_server_connect_result_e_server_connect_result_MIN;
  static const e_server_connect_result e_server_connect_result_MAX =
    packet_server_connect_result_e_server_connect_result_e_server_connect_result_MAX;
  static const int e_server_connect_result_ARRAYSIZE =
    packet_server_connect_result_e_server_connect_result_e_server_connect_result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  e_server_connect_result_descriptor() {
    return packet_server_connect_result_e_server_connect_result_descriptor();
  }
  static inline const ::std::string& e_server_connect_result_Name(e_server_connect_result value) {
    return packet_server_connect_result_e_server_connect_result_Name(value);
  }
  static inline bool e_server_connect_result_Parse(const ::std::string& name,
      e_server_connect_result* value) {
    return packet_server_connect_result_e_server_connect_result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_connect_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // optional .server_protocols.e_server_type server_type = 2;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 2;
  inline ::server_protocols::e_server_type server_type() const;
  inline void set_server_type(::server_protocols::e_server_type value);

  // optional .server_protocols.packet_server_connect_result.e_server_connect_result ret = 3 [default = e_scr_success];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::server_protocols::packet_server_connect_result_e_server_connect_result ret() const;
  inline void set_ret(::server_protocols::packet_server_connect_result_e_server_connect_result value);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_server_connect_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int server_type_;
  int ret_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_server_connect_result* default_instance_;
};
// -------------------------------------------------------------------

class packet_transmit_msg : public ::google::protobuf::Message {
 public:
  packet_transmit_msg();
  virtual ~packet_transmit_msg();

  packet_transmit_msg(const packet_transmit_msg& from);

  inline packet_transmit_msg& operator=(const packet_transmit_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_transmit_msg& default_instance();

  void Swap(packet_transmit_msg* other);

  // implements Message ----------------------------------------------

  packet_transmit_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_transmit_msg& from);
  void MergeFrom(const packet_transmit_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_transmit_msg];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // optional fixed32 sessionid = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // optional .server_protocols.msg_packet msgpak = 3;
  inline bool has_msgpak() const;
  inline void clear_msgpak();
  static const int kMsgpakFieldNumber = 3;
  inline const ::server_protocols::msg_packet& msgpak() const;
  inline ::server_protocols::msg_packet* mutable_msgpak();
  inline ::server_protocols::msg_packet* release_msgpak();
  inline void set_allocated_msgpak(::server_protocols::msg_packet* msgpak);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_transmit_msg)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_msgpak();
  inline void clear_has_msgpak();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::uint32 sessionid_;
  ::server_protocols::msg_packet* msgpak_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_transmit_msg* default_instance_;
};
// -------------------------------------------------------------------

class packet_broadcast_msg : public ::google::protobuf::Message {
 public:
  packet_broadcast_msg();
  virtual ~packet_broadcast_msg();

  packet_broadcast_msg(const packet_broadcast_msg& from);

  inline packet_broadcast_msg& operator=(const packet_broadcast_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_broadcast_msg& default_instance();

  void Swap(packet_broadcast_msg* other);

  // implements Message ----------------------------------------------

  packet_broadcast_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_broadcast_msg& from);
  void MergeFrom(const packet_broadcast_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_broadcast_msg];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // repeated fixed32 sessionids = 2 [packed = true];
  inline int sessionids_size() const;
  inline void clear_sessionids();
  static const int kSessionidsFieldNumber = 2;
  inline ::google::protobuf::uint32 sessionids(int index) const;
  inline void set_sessionids(int index, ::google::protobuf::uint32 value);
  inline void add_sessionids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      sessionids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_sessionids();

  // optional .server_protocols.msg_packet msgpak = 3;
  inline bool has_msgpak() const;
  inline void clear_msgpak();
  static const int kMsgpakFieldNumber = 3;
  inline const ::server_protocols::msg_packet& msgpak() const;
  inline ::server_protocols::msg_packet* mutable_msgpak();
  inline ::server_protocols::msg_packet* release_msgpak();
  inline void set_allocated_msgpak(::server_protocols::msg_packet* msgpak);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_broadcast_msg)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_msgpak();
  inline void clear_has_msgpak();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > sessionids_;
  mutable int _sessionids_cached_byte_size_;
  ::server_protocols::msg_packet* msgpak_;
  int packet_id_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_broadcast_msg* default_instance_;
};
// -------------------------------------------------------------------

class packet_broadcast_msg2 : public ::google::protobuf::Message {
 public:
  packet_broadcast_msg2();
  virtual ~packet_broadcast_msg2();

  packet_broadcast_msg2(const packet_broadcast_msg2& from);

  inline packet_broadcast_msg2& operator=(const packet_broadcast_msg2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_broadcast_msg2& default_instance();

  void Swap(packet_broadcast_msg2* other);

  // implements Message ----------------------------------------------

  packet_broadcast_msg2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_broadcast_msg2& from);
  void MergeFrom(const packet_broadcast_msg2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_broadcast_msg2];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // optional fixed32 game_sid = 2 [default = 0];
  inline bool has_game_sid() const;
  inline void clear_game_sid();
  static const int kGameSidFieldNumber = 2;
  inline ::google::protobuf::uint32 game_sid() const;
  inline void set_game_sid(::google::protobuf::uint32 value);

  // optional .server_protocols.msg_packet msgpak = 3;
  inline bool has_msgpak() const;
  inline void clear_msgpak();
  static const int kMsgpakFieldNumber = 3;
  inline const ::server_protocols::msg_packet& msgpak() const;
  inline ::server_protocols::msg_packet* mutable_msgpak();
  inline ::server_protocols::msg_packet* release_msgpak();
  inline void set_allocated_msgpak(::server_protocols::msg_packet* msgpak);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_broadcast_msg2)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_game_sid();
  inline void clear_has_game_sid();
  inline void set_has_msgpak();
  inline void clear_has_msgpak();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::uint32 game_sid_;
  ::server_protocols::msg_packet* msgpak_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_broadcast_msg2* default_instance_;
};
// -------------------------------------------------------------------

class packet_heartbeat : public ::google::protobuf::Message {
 public:
  packet_heartbeat();
  virtual ~packet_heartbeat();

  packet_heartbeat(const packet_heartbeat& from);

  inline packet_heartbeat& operator=(const packet_heartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_heartbeat& default_instance();

  void Swap(packet_heartbeat* other);

  // implements Message ----------------------------------------------

  packet_heartbeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_heartbeat& from);
  void MergeFrom(const packet_heartbeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_heartbeat];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_heartbeat)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_heartbeat* default_instance_;
};
// -------------------------------------------------------------------

class packet_player_connect : public ::google::protobuf::Message {
 public:
  packet_player_connect();
  virtual ~packet_player_connect();

  packet_player_connect(const packet_player_connect& from);

  inline packet_player_connect& operator=(const packet_player_connect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_player_connect& default_instance();

  void Swap(packet_player_connect* other);

  // implements Message ----------------------------------------------

  packet_player_connect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_player_connect& from);
  void MergeFrom(const packet_player_connect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_connect];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // optional fixed32 sessionid = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // optional fixed32 logicid = 3;
  inline bool has_logicid() const;
  inline void clear_logicid();
  static const int kLogicidFieldNumber = 3;
  inline ::google::protobuf::uint32 logicid() const;
  inline void set_logicid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_player_connect)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_logicid();
  inline void clear_has_logicid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::uint32 sessionid_;
  ::google::protobuf::uint32 logicid_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_player_connect* default_instance_;
};
// -------------------------------------------------------------------

class packet_player_disconnect : public ::google::protobuf::Message {
 public:
  packet_player_disconnect();
  virtual ~packet_player_disconnect();

  packet_player_disconnect(const packet_player_disconnect& from);

  inline packet_player_disconnect& operator=(const packet_player_disconnect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_player_disconnect& default_instance();

  void Swap(packet_player_disconnect* other);

  // implements Message ----------------------------------------------

  packet_player_disconnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_player_disconnect& from);
  void MergeFrom(const packet_player_disconnect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_disconnect];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // optional fixed32 sessionid = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_player_disconnect)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::uint32 sessionid_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_player_disconnect* default_instance_;
};
// -------------------------------------------------------------------

class packet_regedit_route_msg : public ::google::protobuf::Message {
 public:
  packet_regedit_route_msg();
  virtual ~packet_regedit_route_msg();

  packet_regedit_route_msg(const packet_regedit_route_msg& from);

  inline packet_regedit_route_msg& operator=(const packet_regedit_route_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_regedit_route_msg& default_instance();

  void Swap(packet_regedit_route_msg* other);

  // implements Message ----------------------------------------------

  packet_regedit_route_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_regedit_route_msg& from);
  void MergeFrom(const packet_regedit_route_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_regedit_route_msg];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // repeated fixed32 msgids = 2 [packed = true];
  inline int msgids_size() const;
  inline void clear_msgids();
  static const int kMsgidsFieldNumber = 2;
  inline ::google::protobuf::uint32 msgids(int index) const;
  inline void set_msgids(int index, ::google::protobuf::uint32 value);
  inline void add_msgids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      msgids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_msgids();

  // @@protoc_insertion_point(class_scope:server_protocols.packet_regedit_route_msg)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > msgids_;
  mutable int _msgids_cached_byte_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_regedit_route_msg* default_instance_;
};
// -------------------------------------------------------------------

class packet_gate_setlogic_ok : public ::google::protobuf::Message {
 public:
  packet_gate_setlogic_ok();
  virtual ~packet_gate_setlogic_ok();

  packet_gate_setlogic_ok(const packet_gate_setlogic_ok& from);

  inline packet_gate_setlogic_ok& operator=(const packet_gate_setlogic_ok& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_gate_setlogic_ok& default_instance();

  void Swap(packet_gate_setlogic_ok* other);

  // implements Message ----------------------------------------------

  packet_gate_setlogic_ok* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_gate_setlogic_ok& from);
  void MergeFrom(const packet_gate_setlogic_ok& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gate_setlogic_ok];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // optional fixed32 sessionid = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_gate_setlogic_ok)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::uint32 sessionid_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_gate_setlogic_ok* default_instance_;
};
// -------------------------------------------------------------------

class packet_clear_session : public ::google::protobuf::Message {
 public:
  packet_clear_session();
  virtual ~packet_clear_session();

  packet_clear_session(const packet_clear_session& from);

  inline packet_clear_session& operator=(const packet_clear_session& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_clear_session& default_instance();

  void Swap(packet_clear_session* other);

  // implements Message ----------------------------------------------

  packet_clear_session* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_clear_session& from);
  void MergeFrom(const packet_clear_session& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_clear_session];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // optional fixed32 sessionid = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_clear_session)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::uint32 sessionid_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_clear_session* default_instance_;
};
// -------------------------------------------------------------------

class packet_http_command : public ::google::protobuf::Message {
 public:
  packet_http_command();
  virtual ~packet_http_command();

  packet_http_command(const packet_http_command& from);

  inline packet_http_command& operator=(const packet_http_command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_http_command& default_instance();

  void Swap(packet_http_command* other);

  // implements Message ----------------------------------------------

  packet_http_command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_http_command& from);
  void MergeFrom(const packet_http_command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_http_command];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // repeated string cmdstr = 2;
  inline int cmdstr_size() const;
  inline void clear_cmdstr();
  static const int kCmdstrFieldNumber = 2;
  inline const ::std::string& cmdstr(int index) const;
  inline ::std::string* mutable_cmdstr(int index);
  inline void set_cmdstr(int index, const ::std::string& value);
  inline void set_cmdstr(int index, const char* value);
  inline void set_cmdstr(int index, const char* value, size_t size);
  inline ::std::string* add_cmdstr();
  inline void add_cmdstr(const ::std::string& value);
  inline void add_cmdstr(const char* value);
  inline void add_cmdstr(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cmdstr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cmdstr();

  // @@protoc_insertion_point(class_scope:server_protocols.packet_http_command)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cmdstr_;
  int packet_id_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_http_command* default_instance_;
};
// -------------------------------------------------------------------

class packet_get_ip : public ::google::protobuf::Message {
 public:
  packet_get_ip();
  virtual ~packet_get_ip();

  packet_get_ip(const packet_get_ip& from);

  inline packet_get_ip& operator=(const packet_get_ip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_get_ip& default_instance();

  void Swap(packet_get_ip* other);

  // implements Message ----------------------------------------------

  packet_get_ip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_get_ip& from);
  void MergeFrom(const packet_get_ip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_ip];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // optional fixed32 sessionid = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_get_ip)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::uint32 sessionid_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_get_ip* default_instance_;
};
// -------------------------------------------------------------------

class packet_get_ip_result : public ::google::protobuf::Message {
 public:
  packet_get_ip_result();
  virtual ~packet_get_ip_result();

  packet_get_ip_result(const packet_get_ip_result& from);

  inline packet_get_ip_result& operator=(const packet_get_ip_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_get_ip_result& default_instance();

  void Swap(packet_get_ip_result* other);

  // implements Message ----------------------------------------------

  packet_get_ip_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_get_ip_result& from);
  void MergeFrom(const packet_get_ip_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_ip_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::server_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::server_protocols::e_server_msg_type value);

  // optional fixed32 sessionid = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional fixed32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server_protocols.packet_get_ip_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::uint32 sessionid_;
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_server_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_server_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_server_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_get_ip_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packet_server_register

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_register];
inline bool packet_server_register::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_server_register::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_server_register::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_server_register::clear_packet_id() {
  packet_id_ = 0;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_server_register::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_server_register.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_server_register::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_server_register.packet_id)
}

// optional .server_protocols.e_server_type server_type = 2;
inline bool packet_server_register::has_server_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_server_register::set_has_server_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_server_register::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_server_register::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::server_protocols::e_server_type packet_server_register::server_type() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_server_register.server_type)
  return static_cast< ::server_protocols::e_server_type >(server_type_);
}
inline void packet_server_register::set_server_type(::server_protocols::e_server_type value) {
  assert(::server_protocols::e_server_type_IsValid(value));
  set_has_server_type();
  server_type_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_server_register.server_type)
}

// optional fixed32 server_port = 3;
inline bool packet_server_register::has_server_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet_server_register::set_has_server_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet_server_register::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet_server_register::clear_server_port() {
  server_port_ = 0u;
  clear_has_server_port();
}
inline ::google::protobuf::uint32 packet_server_register::server_port() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_server_register.server_port)
  return server_port_;
}
inline void packet_server_register::set_server_port(::google::protobuf::uint32 value) {
  set_has_server_port();
  server_port_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_server_register.server_port)
}

// optional .server_protocols.server_attributes attributes = 4;
inline bool packet_server_register::has_attributes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packet_server_register::set_has_attributes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packet_server_register::clear_has_attributes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packet_server_register::clear_attributes() {
  if (attributes_ != NULL) attributes_->::server_protocols::server_attributes::Clear();
  clear_has_attributes();
}
inline const ::server_protocols::server_attributes& packet_server_register::attributes() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_server_register.attributes)
  return attributes_ != NULL ? *attributes_ : *default_instance_->attributes_;
}
inline ::server_protocols::server_attributes* packet_server_register::mutable_attributes() {
  set_has_attributes();
  if (attributes_ == NULL) attributes_ = new ::server_protocols::server_attributes;
  // @@protoc_insertion_point(field_mutable:server_protocols.packet_server_register.attributes)
  return attributes_;
}
inline ::server_protocols::server_attributes* packet_server_register::release_attributes() {
  clear_has_attributes();
  ::server_protocols::server_attributes* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
inline void packet_server_register::set_allocated_attributes(::server_protocols::server_attributes* attributes) {
  delete attributes_;
  attributes_ = attributes;
  if (attributes) {
    set_has_attributes();
  } else {
    clear_has_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:server_protocols.packet_server_register.attributes)
}

// -------------------------------------------------------------------

// packet_server_register_result

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_register_result];
inline bool packet_server_register_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_server_register_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_server_register_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_server_register_result::clear_packet_id() {
  packet_id_ = 1;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_server_register_result::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_server_register_result.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_server_register_result::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_server_register_result.packet_id)
}

// optional fixed64 server_time = 2;
inline bool packet_server_register_result::has_server_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_server_register_result::set_has_server_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_server_register_result::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_server_register_result::clear_server_time() {
  server_time_ = GOOGLE_ULONGLONG(0);
  clear_has_server_time();
}
inline ::google::protobuf::uint64 packet_server_register_result::server_time() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_server_register_result.server_time)
  return server_time_;
}
inline void packet_server_register_result::set_server_time(::google::protobuf::uint64 value) {
  set_has_server_time();
  server_time_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_server_register_result.server_time)
}

// optional fixed32 group_id = 3;
inline bool packet_server_register_result::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet_server_register_result::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet_server_register_result::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet_server_register_result::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 packet_server_register_result::group_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_server_register_result.group_id)
  return group_id_;
}
inline void packet_server_register_result::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_server_register_result.group_id)
}

// -------------------------------------------------------------------

// packet_other_server_connect

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_other_server_connect];
inline bool packet_other_server_connect::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_other_server_connect::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_other_server_connect::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_other_server_connect::clear_packet_id() {
  packet_id_ = 2;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_other_server_connect::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_other_server_connect.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_other_server_connect::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_other_server_connect.packet_id)
}

// optional .server_protocols.server_info sinfo = 2;
inline bool packet_other_server_connect::has_sinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_other_server_connect::set_has_sinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_other_server_connect::clear_has_sinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_other_server_connect::clear_sinfo() {
  if (sinfo_ != NULL) sinfo_->::server_protocols::server_info::Clear();
  clear_has_sinfo();
}
inline const ::server_protocols::server_info& packet_other_server_connect::sinfo() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_other_server_connect.sinfo)
  return sinfo_ != NULL ? *sinfo_ : *default_instance_->sinfo_;
}
inline ::server_protocols::server_info* packet_other_server_connect::mutable_sinfo() {
  set_has_sinfo();
  if (sinfo_ == NULL) sinfo_ = new ::server_protocols::server_info;
  // @@protoc_insertion_point(field_mutable:server_protocols.packet_other_server_connect.sinfo)
  return sinfo_;
}
inline ::server_protocols::server_info* packet_other_server_connect::release_sinfo() {
  clear_has_sinfo();
  ::server_protocols::server_info* temp = sinfo_;
  sinfo_ = NULL;
  return temp;
}
inline void packet_other_server_connect::set_allocated_sinfo(::server_protocols::server_info* sinfo) {
  delete sinfo_;
  sinfo_ = sinfo;
  if (sinfo) {
    set_has_sinfo();
  } else {
    clear_has_sinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:server_protocols.packet_other_server_connect.sinfo)
}

// -------------------------------------------------------------------

// packet_other_server_disconnect

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_other_server_disconnect];
inline bool packet_other_server_disconnect::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_other_server_disconnect::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_other_server_disconnect::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_other_server_disconnect::clear_packet_id() {
  packet_id_ = 3;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_other_server_disconnect::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_other_server_disconnect.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_other_server_disconnect::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_other_server_disconnect.packet_id)
}

// optional fixed32 server_id = 2;
inline bool packet_other_server_disconnect::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_other_server_disconnect::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_other_server_disconnect::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_other_server_disconnect::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 packet_other_server_disconnect::server_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_other_server_disconnect.server_id)
  return server_id_;
}
inline void packet_other_server_disconnect::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_other_server_disconnect.server_id)
}

// -------------------------------------------------------------------

// packet_updata_servers_info

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_updata_servers_info];
inline bool packet_updata_servers_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_updata_servers_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_updata_servers_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_updata_servers_info::clear_packet_id() {
  packet_id_ = 4;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_updata_servers_info::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_updata_servers_info.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_updata_servers_info::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_updata_servers_info.packet_id)
}

// repeated .server_protocols.server_info sinfos = 2;
inline int packet_updata_servers_info::sinfos_size() const {
  return sinfos_.size();
}
inline void packet_updata_servers_info::clear_sinfos() {
  sinfos_.Clear();
}
inline const ::server_protocols::server_info& packet_updata_servers_info::sinfos(int index) const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_updata_servers_info.sinfos)
  return sinfos_.Get(index);
}
inline ::server_protocols::server_info* packet_updata_servers_info::mutable_sinfos(int index) {
  // @@protoc_insertion_point(field_mutable:server_protocols.packet_updata_servers_info.sinfos)
  return sinfos_.Mutable(index);
}
inline ::server_protocols::server_info* packet_updata_servers_info::add_sinfos() {
  // @@protoc_insertion_point(field_add:server_protocols.packet_updata_servers_info.sinfos)
  return sinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::server_protocols::server_info >&
packet_updata_servers_info::sinfos() const {
  // @@protoc_insertion_point(field_list:server_protocols.packet_updata_servers_info.sinfos)
  return sinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::server_protocols::server_info >*
packet_updata_servers_info::mutable_sinfos() {
  // @@protoc_insertion_point(field_mutable_list:server_protocols.packet_updata_servers_info.sinfos)
  return &sinfos_;
}

// -------------------------------------------------------------------

// packet_updata_self_info

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_updata_self_info];
inline bool packet_updata_self_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_updata_self_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_updata_self_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_updata_self_info::clear_packet_id() {
  packet_id_ = 5;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_updata_self_info::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_updata_self_info.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_updata_self_info::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_updata_self_info.packet_id)
}

// optional .server_protocols.server_attributes attributes = 2;
inline bool packet_updata_self_info::has_attributes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_updata_self_info::set_has_attributes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_updata_self_info::clear_has_attributes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_updata_self_info::clear_attributes() {
  if (attributes_ != NULL) attributes_->::server_protocols::server_attributes::Clear();
  clear_has_attributes();
}
inline const ::server_protocols::server_attributes& packet_updata_self_info::attributes() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_updata_self_info.attributes)
  return attributes_ != NULL ? *attributes_ : *default_instance_->attributes_;
}
inline ::server_protocols::server_attributes* packet_updata_self_info::mutable_attributes() {
  set_has_attributes();
  if (attributes_ == NULL) attributes_ = new ::server_protocols::server_attributes;
  // @@protoc_insertion_point(field_mutable:server_protocols.packet_updata_self_info.attributes)
  return attributes_;
}
inline ::server_protocols::server_attributes* packet_updata_self_info::release_attributes() {
  clear_has_attributes();
  ::server_protocols::server_attributes* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
inline void packet_updata_self_info::set_allocated_attributes(::server_protocols::server_attributes* attributes) {
  delete attributes_;
  attributes_ = attributes;
  if (attributes) {
    set_has_attributes();
  } else {
    clear_has_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:server_protocols.packet_updata_self_info.attributes)
}

// -------------------------------------------------------------------

// packet_server_connect

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_connect];
inline bool packet_server_connect::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_server_connect::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_server_connect::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_server_connect::clear_packet_id() {
  packet_id_ = 10;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_server_connect::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_server_connect.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_server_connect::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_server_connect.packet_id)
}

// optional fixed32 server_id = 2;
inline bool packet_server_connect::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_server_connect::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_server_connect::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_server_connect::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 packet_server_connect::server_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_server_connect.server_id)
  return server_id_;
}
inline void packet_server_connect::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_server_connect.server_id)
}

// optional .server_protocols.e_server_type server_type = 3;
inline bool packet_server_connect::has_server_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet_server_connect::set_has_server_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet_server_connect::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet_server_connect::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::server_protocols::e_server_type packet_server_connect::server_type() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_server_connect.server_type)
  return static_cast< ::server_protocols::e_server_type >(server_type_);
}
inline void packet_server_connect::set_server_type(::server_protocols::e_server_type value) {
  assert(::server_protocols::e_server_type_IsValid(value));
  set_has_server_type();
  server_type_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_server_connect.server_type)
}

// -------------------------------------------------------------------

// packet_server_connect_result

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_server_connect_result];
inline bool packet_server_connect_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_server_connect_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_server_connect_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_server_connect_result::clear_packet_id() {
  packet_id_ = 11;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_server_connect_result::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_server_connect_result.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_server_connect_result::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_server_connect_result.packet_id)
}

// optional .server_protocols.e_server_type server_type = 2;
inline bool packet_server_connect_result::has_server_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_server_connect_result::set_has_server_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_server_connect_result::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_server_connect_result::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::server_protocols::e_server_type packet_server_connect_result::server_type() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_server_connect_result.server_type)
  return static_cast< ::server_protocols::e_server_type >(server_type_);
}
inline void packet_server_connect_result::set_server_type(::server_protocols::e_server_type value) {
  assert(::server_protocols::e_server_type_IsValid(value));
  set_has_server_type();
  server_type_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_server_connect_result.server_type)
}

// optional .server_protocols.packet_server_connect_result.e_server_connect_result ret = 3 [default = e_scr_success];
inline bool packet_server_connect_result::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet_server_connect_result::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet_server_connect_result::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet_server_connect_result::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::server_protocols::packet_server_connect_result_e_server_connect_result packet_server_connect_result::ret() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_server_connect_result.ret)
  return static_cast< ::server_protocols::packet_server_connect_result_e_server_connect_result >(ret_);
}
inline void packet_server_connect_result::set_ret(::server_protocols::packet_server_connect_result_e_server_connect_result value) {
  assert(::server_protocols::packet_server_connect_result_e_server_connect_result_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_server_connect_result.ret)
}

// -------------------------------------------------------------------

// packet_transmit_msg

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_transmit_msg];
inline bool packet_transmit_msg::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_transmit_msg::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_transmit_msg::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_transmit_msg::clear_packet_id() {
  packet_id_ = 6;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_transmit_msg::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_transmit_msg.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_transmit_msg::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_transmit_msg.packet_id)
}

// optional fixed32 sessionid = 2;
inline bool packet_transmit_msg::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_transmit_msg::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_transmit_msg::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_transmit_msg::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 packet_transmit_msg::sessionid() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_transmit_msg.sessionid)
  return sessionid_;
}
inline void packet_transmit_msg::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_transmit_msg.sessionid)
}

// optional .server_protocols.msg_packet msgpak = 3;
inline bool packet_transmit_msg::has_msgpak() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet_transmit_msg::set_has_msgpak() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet_transmit_msg::clear_has_msgpak() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet_transmit_msg::clear_msgpak() {
  if (msgpak_ != NULL) msgpak_->::server_protocols::msg_packet::Clear();
  clear_has_msgpak();
}
inline const ::server_protocols::msg_packet& packet_transmit_msg::msgpak() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_transmit_msg.msgpak)
  return msgpak_ != NULL ? *msgpak_ : *default_instance_->msgpak_;
}
inline ::server_protocols::msg_packet* packet_transmit_msg::mutable_msgpak() {
  set_has_msgpak();
  if (msgpak_ == NULL) msgpak_ = new ::server_protocols::msg_packet;
  // @@protoc_insertion_point(field_mutable:server_protocols.packet_transmit_msg.msgpak)
  return msgpak_;
}
inline ::server_protocols::msg_packet* packet_transmit_msg::release_msgpak() {
  clear_has_msgpak();
  ::server_protocols::msg_packet* temp = msgpak_;
  msgpak_ = NULL;
  return temp;
}
inline void packet_transmit_msg::set_allocated_msgpak(::server_protocols::msg_packet* msgpak) {
  delete msgpak_;
  msgpak_ = msgpak;
  if (msgpak) {
    set_has_msgpak();
  } else {
    clear_has_msgpak();
  }
  // @@protoc_insertion_point(field_set_allocated:server_protocols.packet_transmit_msg.msgpak)
}

// -------------------------------------------------------------------

// packet_broadcast_msg

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_broadcast_msg];
inline bool packet_broadcast_msg::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_broadcast_msg::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_broadcast_msg::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_broadcast_msg::clear_packet_id() {
  packet_id_ = 7;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_broadcast_msg::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_broadcast_msg.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_broadcast_msg::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_broadcast_msg.packet_id)
}

// repeated fixed32 sessionids = 2 [packed = true];
inline int packet_broadcast_msg::sessionids_size() const {
  return sessionids_.size();
}
inline void packet_broadcast_msg::clear_sessionids() {
  sessionids_.Clear();
}
inline ::google::protobuf::uint32 packet_broadcast_msg::sessionids(int index) const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_broadcast_msg.sessionids)
  return sessionids_.Get(index);
}
inline void packet_broadcast_msg::set_sessionids(int index, ::google::protobuf::uint32 value) {
  sessionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:server_protocols.packet_broadcast_msg.sessionids)
}
inline void packet_broadcast_msg::add_sessionids(::google::protobuf::uint32 value) {
  sessionids_.Add(value);
  // @@protoc_insertion_point(field_add:server_protocols.packet_broadcast_msg.sessionids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
packet_broadcast_msg::sessionids() const {
  // @@protoc_insertion_point(field_list:server_protocols.packet_broadcast_msg.sessionids)
  return sessionids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
packet_broadcast_msg::mutable_sessionids() {
  // @@protoc_insertion_point(field_mutable_list:server_protocols.packet_broadcast_msg.sessionids)
  return &sessionids_;
}

// optional .server_protocols.msg_packet msgpak = 3;
inline bool packet_broadcast_msg::has_msgpak() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet_broadcast_msg::set_has_msgpak() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet_broadcast_msg::clear_has_msgpak() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet_broadcast_msg::clear_msgpak() {
  if (msgpak_ != NULL) msgpak_->::server_protocols::msg_packet::Clear();
  clear_has_msgpak();
}
inline const ::server_protocols::msg_packet& packet_broadcast_msg::msgpak() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_broadcast_msg.msgpak)
  return msgpak_ != NULL ? *msgpak_ : *default_instance_->msgpak_;
}
inline ::server_protocols::msg_packet* packet_broadcast_msg::mutable_msgpak() {
  set_has_msgpak();
  if (msgpak_ == NULL) msgpak_ = new ::server_protocols::msg_packet;
  // @@protoc_insertion_point(field_mutable:server_protocols.packet_broadcast_msg.msgpak)
  return msgpak_;
}
inline ::server_protocols::msg_packet* packet_broadcast_msg::release_msgpak() {
  clear_has_msgpak();
  ::server_protocols::msg_packet* temp = msgpak_;
  msgpak_ = NULL;
  return temp;
}
inline void packet_broadcast_msg::set_allocated_msgpak(::server_protocols::msg_packet* msgpak) {
  delete msgpak_;
  msgpak_ = msgpak;
  if (msgpak) {
    set_has_msgpak();
  } else {
    clear_has_msgpak();
  }
  // @@protoc_insertion_point(field_set_allocated:server_protocols.packet_broadcast_msg.msgpak)
}

// -------------------------------------------------------------------

// packet_broadcast_msg2

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_broadcast_msg2];
inline bool packet_broadcast_msg2::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_broadcast_msg2::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_broadcast_msg2::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_broadcast_msg2::clear_packet_id() {
  packet_id_ = 17;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_broadcast_msg2::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_broadcast_msg2.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_broadcast_msg2::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_broadcast_msg2.packet_id)
}

// optional fixed32 game_sid = 2 [default = 0];
inline bool packet_broadcast_msg2::has_game_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_broadcast_msg2::set_has_game_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_broadcast_msg2::clear_has_game_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_broadcast_msg2::clear_game_sid() {
  game_sid_ = 0u;
  clear_has_game_sid();
}
inline ::google::protobuf::uint32 packet_broadcast_msg2::game_sid() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_broadcast_msg2.game_sid)
  return game_sid_;
}
inline void packet_broadcast_msg2::set_game_sid(::google::protobuf::uint32 value) {
  set_has_game_sid();
  game_sid_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_broadcast_msg2.game_sid)
}

// optional .server_protocols.msg_packet msgpak = 3;
inline bool packet_broadcast_msg2::has_msgpak() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet_broadcast_msg2::set_has_msgpak() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet_broadcast_msg2::clear_has_msgpak() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet_broadcast_msg2::clear_msgpak() {
  if (msgpak_ != NULL) msgpak_->::server_protocols::msg_packet::Clear();
  clear_has_msgpak();
}
inline const ::server_protocols::msg_packet& packet_broadcast_msg2::msgpak() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_broadcast_msg2.msgpak)
  return msgpak_ != NULL ? *msgpak_ : *default_instance_->msgpak_;
}
inline ::server_protocols::msg_packet* packet_broadcast_msg2::mutable_msgpak() {
  set_has_msgpak();
  if (msgpak_ == NULL) msgpak_ = new ::server_protocols::msg_packet;
  // @@protoc_insertion_point(field_mutable:server_protocols.packet_broadcast_msg2.msgpak)
  return msgpak_;
}
inline ::server_protocols::msg_packet* packet_broadcast_msg2::release_msgpak() {
  clear_has_msgpak();
  ::server_protocols::msg_packet* temp = msgpak_;
  msgpak_ = NULL;
  return temp;
}
inline void packet_broadcast_msg2::set_allocated_msgpak(::server_protocols::msg_packet* msgpak) {
  delete msgpak_;
  msgpak_ = msgpak;
  if (msgpak) {
    set_has_msgpak();
  } else {
    clear_has_msgpak();
  }
  // @@protoc_insertion_point(field_set_allocated:server_protocols.packet_broadcast_msg2.msgpak)
}

// -------------------------------------------------------------------

// packet_heartbeat

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_heartbeat];
inline bool packet_heartbeat::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_heartbeat::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_heartbeat::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_heartbeat::clear_packet_id() {
  packet_id_ = 9;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_heartbeat::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_heartbeat.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_heartbeat::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_heartbeat.packet_id)
}

// -------------------------------------------------------------------

// packet_player_connect

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_connect];
inline bool packet_player_connect::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_player_connect::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_player_connect::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_player_connect::clear_packet_id() {
  packet_id_ = 12;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_player_connect::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_player_connect.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_player_connect::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_player_connect.packet_id)
}

// optional fixed32 sessionid = 2;
inline bool packet_player_connect::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_player_connect::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_player_connect::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_player_connect::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 packet_player_connect::sessionid() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_player_connect.sessionid)
  return sessionid_;
}
inline void packet_player_connect::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_player_connect.sessionid)
}

// optional fixed32 logicid = 3;
inline bool packet_player_connect::has_logicid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet_player_connect::set_has_logicid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet_player_connect::clear_has_logicid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet_player_connect::clear_logicid() {
  logicid_ = 0u;
  clear_has_logicid();
}
inline ::google::protobuf::uint32 packet_player_connect::logicid() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_player_connect.logicid)
  return logicid_;
}
inline void packet_player_connect::set_logicid(::google::protobuf::uint32 value) {
  set_has_logicid();
  logicid_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_player_connect.logicid)
}

// -------------------------------------------------------------------

// packet_player_disconnect

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_player_disconnect];
inline bool packet_player_disconnect::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_player_disconnect::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_player_disconnect::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_player_disconnect::clear_packet_id() {
  packet_id_ = 13;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_player_disconnect::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_player_disconnect.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_player_disconnect::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_player_disconnect.packet_id)
}

// optional fixed32 sessionid = 2;
inline bool packet_player_disconnect::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_player_disconnect::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_player_disconnect::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_player_disconnect::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 packet_player_disconnect::sessionid() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_player_disconnect.sessionid)
  return sessionid_;
}
inline void packet_player_disconnect::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_player_disconnect.sessionid)
}

// -------------------------------------------------------------------

// packet_regedit_route_msg

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_regedit_route_msg];
inline bool packet_regedit_route_msg::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_regedit_route_msg::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_regedit_route_msg::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_regedit_route_msg::clear_packet_id() {
  packet_id_ = 14;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_regedit_route_msg::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_regedit_route_msg.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_regedit_route_msg::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_regedit_route_msg.packet_id)
}

// repeated fixed32 msgids = 2 [packed = true];
inline int packet_regedit_route_msg::msgids_size() const {
  return msgids_.size();
}
inline void packet_regedit_route_msg::clear_msgids() {
  msgids_.Clear();
}
inline ::google::protobuf::uint32 packet_regedit_route_msg::msgids(int index) const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_regedit_route_msg.msgids)
  return msgids_.Get(index);
}
inline void packet_regedit_route_msg::set_msgids(int index, ::google::protobuf::uint32 value) {
  msgids_.Set(index, value);
  // @@protoc_insertion_point(field_set:server_protocols.packet_regedit_route_msg.msgids)
}
inline void packet_regedit_route_msg::add_msgids(::google::protobuf::uint32 value) {
  msgids_.Add(value);
  // @@protoc_insertion_point(field_add:server_protocols.packet_regedit_route_msg.msgids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
packet_regedit_route_msg::msgids() const {
  // @@protoc_insertion_point(field_list:server_protocols.packet_regedit_route_msg.msgids)
  return msgids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
packet_regedit_route_msg::mutable_msgids() {
  // @@protoc_insertion_point(field_mutable_list:server_protocols.packet_regedit_route_msg.msgids)
  return &msgids_;
}

// -------------------------------------------------------------------

// packet_gate_setlogic_ok

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_gate_setlogic_ok];
inline bool packet_gate_setlogic_ok::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_gate_setlogic_ok::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_gate_setlogic_ok::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_gate_setlogic_ok::clear_packet_id() {
  packet_id_ = 15;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_gate_setlogic_ok::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_gate_setlogic_ok.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_gate_setlogic_ok::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_gate_setlogic_ok.packet_id)
}

// optional fixed32 sessionid = 2;
inline bool packet_gate_setlogic_ok::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_gate_setlogic_ok::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_gate_setlogic_ok::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_gate_setlogic_ok::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 packet_gate_setlogic_ok::sessionid() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_gate_setlogic_ok.sessionid)
  return sessionid_;
}
inline void packet_gate_setlogic_ok::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_gate_setlogic_ok.sessionid)
}

// -------------------------------------------------------------------

// packet_clear_session

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_clear_session];
inline bool packet_clear_session::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_clear_session::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_clear_session::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_clear_session::clear_packet_id() {
  packet_id_ = 16;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_clear_session::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_clear_session.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_clear_session::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_clear_session.packet_id)
}

// optional fixed32 sessionid = 2;
inline bool packet_clear_session::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_clear_session::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_clear_session::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_clear_session::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 packet_clear_session::sessionid() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_clear_session.sessionid)
  return sessionid_;
}
inline void packet_clear_session::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_clear_session.sessionid)
}

// -------------------------------------------------------------------

// packet_http_command

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_http_command];
inline bool packet_http_command::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_http_command::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_http_command::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_http_command::clear_packet_id() {
  packet_id_ = 18;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_http_command::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_http_command.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_http_command::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_http_command.packet_id)
}

// repeated string cmdstr = 2;
inline int packet_http_command::cmdstr_size() const {
  return cmdstr_.size();
}
inline void packet_http_command::clear_cmdstr() {
  cmdstr_.Clear();
}
inline const ::std::string& packet_http_command::cmdstr(int index) const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_http_command.cmdstr)
  return cmdstr_.Get(index);
}
inline ::std::string* packet_http_command::mutable_cmdstr(int index) {
  // @@protoc_insertion_point(field_mutable:server_protocols.packet_http_command.cmdstr)
  return cmdstr_.Mutable(index);
}
inline void packet_http_command::set_cmdstr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server_protocols.packet_http_command.cmdstr)
  cmdstr_.Mutable(index)->assign(value);
}
inline void packet_http_command::set_cmdstr(int index, const char* value) {
  cmdstr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server_protocols.packet_http_command.cmdstr)
}
inline void packet_http_command::set_cmdstr(int index, const char* value, size_t size) {
  cmdstr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server_protocols.packet_http_command.cmdstr)
}
inline ::std::string* packet_http_command::add_cmdstr() {
  return cmdstr_.Add();
}
inline void packet_http_command::add_cmdstr(const ::std::string& value) {
  cmdstr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server_protocols.packet_http_command.cmdstr)
}
inline void packet_http_command::add_cmdstr(const char* value) {
  cmdstr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server_protocols.packet_http_command.cmdstr)
}
inline void packet_http_command::add_cmdstr(const char* value, size_t size) {
  cmdstr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server_protocols.packet_http_command.cmdstr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
packet_http_command::cmdstr() const {
  // @@protoc_insertion_point(field_list:server_protocols.packet_http_command.cmdstr)
  return cmdstr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
packet_http_command::mutable_cmdstr() {
  // @@protoc_insertion_point(field_mutable_list:server_protocols.packet_http_command.cmdstr)
  return &cmdstr_;
}

// -------------------------------------------------------------------

// packet_get_ip

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_ip];
inline bool packet_get_ip::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_get_ip::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_get_ip::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_get_ip::clear_packet_id() {
  packet_id_ = 19;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_get_ip::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_get_ip.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_get_ip::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_get_ip.packet_id)
}

// optional fixed32 sessionid = 2;
inline bool packet_get_ip::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_get_ip::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_get_ip::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_get_ip::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 packet_get_ip::sessionid() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_get_ip.sessionid)
  return sessionid_;
}
inline void packet_get_ip::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_get_ip.sessionid)
}

// -------------------------------------------------------------------

// packet_get_ip_result

// optional .server_protocols.e_server_msg_type packet_id = 1 [default = e_mst_get_ip_result];
inline bool packet_get_ip_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_get_ip_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_get_ip_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_get_ip_result::clear_packet_id() {
  packet_id_ = 20;
  clear_has_packet_id();
}
inline ::server_protocols::e_server_msg_type packet_get_ip_result::packet_id() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_get_ip_result.packet_id)
  return static_cast< ::server_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_get_ip_result::set_packet_id(::server_protocols::e_server_msg_type value) {
  assert(::server_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_get_ip_result.packet_id)
}

// optional fixed32 sessionid = 2;
inline bool packet_get_ip_result::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_get_ip_result::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_get_ip_result::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_get_ip_result::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 packet_get_ip_result::sessionid() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_get_ip_result.sessionid)
  return sessionid_;
}
inline void packet_get_ip_result::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_get_ip_result.sessionid)
}

// optional string ip = 3;
inline bool packet_get_ip_result::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packet_get_ip_result::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packet_get_ip_result::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packet_get_ip_result::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& packet_get_ip_result::ip() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_get_ip_result.ip)
  return *ip_;
}
inline void packet_get_ip_result::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:server_protocols.packet_get_ip_result.ip)
}
inline void packet_get_ip_result::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:server_protocols.packet_get_ip_result.ip)
}
inline void packet_get_ip_result::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server_protocols.packet_get_ip_result.ip)
}
inline ::std::string* packet_get_ip_result::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:server_protocols.packet_get_ip_result.ip)
  return ip_;
}
inline ::std::string* packet_get_ip_result::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packet_get_ip_result::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:server_protocols.packet_get_ip_result.ip)
}

// optional fixed32 port = 4;
inline bool packet_get_ip_result::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packet_get_ip_result::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packet_get_ip_result::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packet_get_ip_result::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 packet_get_ip_result::port() const {
  // @@protoc_insertion_point(field_get:server_protocols.packet_get_ip_result.port)
  return port_;
}
inline void packet_get_ip_result::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.packet_get_ip_result.port)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server_protocols

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::server_protocols::packet_server_connect_result_e_server_connect_result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server_protocols::packet_server_connect_result_e_server_connect_result>() {
  return ::server_protocols::packet_server_connect_result_e_server_connect_result_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_5fprotocol_2eproto__INCLUDED
