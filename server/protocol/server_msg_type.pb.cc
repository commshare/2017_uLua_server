// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_msg_type.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server_msg_type.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace server_protocols {

namespace {

const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* http_command_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_5fmsg_5ftype_2eproto() {
  protobuf_AddDesc_server_5fmsg_5ftype_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server_msg_type.proto");
  GOOGLE_CHECK(file != NULL);
  e_server_msg_type_descriptor_ = file->enum_type(0);
  http_command_type_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_5fmsg_5ftype_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_server_5fmsg_5ftype_2eproto() {
}

void protobuf_AddDesc_server_5fmsg_5ftype_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025server_msg_type.proto\022\020server_protocol"
    "s*\312\004\n\021e_server_msg_type\022\031\n\025e_mst_server_"
    "register\020\000\022 \n\034e_mst_server_register_resu"
    "lt\020\001\022\036\n\032e_mst_other_server_connect\020\002\022!\n\035"
    "e_mst_other_server_disconnect\020\003\022\035\n\031e_mst"
    "_updata_servers_info\020\004\022\032\n\026e_mst_updata_s"
    "elf_info\020\005\022\026\n\022e_mst_transmit_msg\020\006\022\027\n\023e_"
    "mst_broadcast_msg\020\007\022\023\n\017e_mst_heartbeat\020\t"
    "\022\030\n\024e_mst_server_connect\020\n\022\037\n\033e_mst_serv"
    "er_connect_result\020\013\022\030\n\024e_mst_player_conn"
    "ect\020\014\022\033\n\027e_mst_player_disconnect\020\r\022\033\n\027e_"
    "mst_regedit_route_msg\020\016\022\032\n\026e_mst_gate_se"
    "tlogic_ok\020\017\022\027\n\023e_mst_clear_session\020\020\022\030\n\024"
    "e_mst_broadcast_msg2\020\021\022\026\n\022e_mst_http_com"
    "mand\020\022\022\020\n\014e_mst_get_ip\020\023\022\027\n\023e_mst_get_ip"
    "_result\020\024\022\023\n\016e_mst_maxcount\020\377\001*L\n\021http_c"
    "ommand_type\022\017\n\013e_cmd_order\020\001\022\022\n\016e_cmd_re"
    "charge\020\002\022\022\n\016e_cmd_addlucky\020\003", 708);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server_msg_type.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_5fmsg_5ftype_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_5fmsg_5ftype_2eproto {
  StaticDescriptorInitializer_server_5fmsg_5ftype_2eproto() {
    protobuf_AddDesc_server_5fmsg_5ftype_2eproto();
  }
} static_descriptor_initializer_server_5fmsg_5ftype_2eproto_;
const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_server_msg_type_descriptor_;
}
bool e_server_msg_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* http_command_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return http_command_type_descriptor_;
}
bool http_command_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server_protocols

// @@protoc_insertion_point(global_scope)
