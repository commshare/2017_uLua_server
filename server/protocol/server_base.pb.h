// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_base.proto

#ifndef PROTOBUF_server_5fbase_2eproto__INCLUDED
#define PROTOBUF_server_5fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace server_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_5fbase_2eproto();
void protobuf_AssignDesc_server_5fbase_2eproto();
void protobuf_ShutdownFile_server_5fbase_2eproto();

class server_attributes;
class server_info;
class msg_packet;

enum e_server_type {
  e_st_undefine = 0,
  e_st_gate = 1,
  e_st_login = 2,
  e_st_world = 3,
  e_st_center = 4,
  e_st_logic = 5,
  e_st_monitor = 6
};
bool e_server_type_IsValid(int value);
const e_server_type e_server_type_MIN = e_st_undefine;
const e_server_type e_server_type_MAX = e_st_monitor;
const int e_server_type_ARRAYSIZE = e_server_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_server_type_descriptor();
inline const ::std::string& e_server_type_Name(e_server_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_server_type_descriptor(), value);
}
inline bool e_server_type_Parse(
    const ::std::string& name, e_server_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_server_type>(
    e_server_type_descriptor(), name, value);
}
// ===================================================================

class server_attributes : public ::google::protobuf::Message {
 public:
  server_attributes();
  virtual ~server_attributes();

  server_attributes(const server_attributes& from);

  inline server_attributes& operator=(const server_attributes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const server_attributes& default_instance();

  void Swap(server_attributes* other);

  // implements Message ----------------------------------------------

  server_attributes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const server_attributes& from);
  void MergeFrom(const server_attributes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 client_count = 1 [default = 0];
  inline bool has_client_count() const;
  inline void clear_client_count();
  static const int kClientCountFieldNumber = 1;
  inline ::google::protobuf::int32 client_count() const;
  inline void set_client_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:server_protocols.server_attributes)
 private:
  inline void set_has_client_count();
  inline void clear_has_client_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_count_;
  friend void  protobuf_AddDesc_server_5fbase_2eproto();
  friend void protobuf_AssignDesc_server_5fbase_2eproto();
  friend void protobuf_ShutdownFile_server_5fbase_2eproto();

  void InitAsDefaultInstance();
  static server_attributes* default_instance_;
};
// -------------------------------------------------------------------

class server_info : public ::google::protobuf::Message {
 public:
  server_info();
  virtual ~server_info();

  server_info(const server_info& from);

  inline server_info& operator=(const server_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const server_info& default_instance();

  void Swap(server_info* other);

  // implements Message ----------------------------------------------

  server_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const server_info& from);
  void MergeFrom(const server_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .server_protocols.e_server_type server_type = 1;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 1;
  inline ::server_protocols::e_server_type server_type() const;
  inline void set_server_type(::server_protocols::e_server_type value);

  // optional string server_ip = 2;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 2;
  inline const ::std::string& server_ip() const;
  inline void set_server_ip(const ::std::string& value);
  inline void set_server_ip(const char* value);
  inline void set_server_ip(const char* value, size_t size);
  inline ::std::string* mutable_server_ip();
  inline ::std::string* release_server_ip();
  inline void set_allocated_server_ip(::std::string* server_ip);

  // optional fixed32 server_port = 3;
  inline bool has_server_port() const;
  inline void clear_server_port();
  static const int kServerPortFieldNumber = 3;
  inline ::google::protobuf::uint32 server_port() const;
  inline void set_server_port(::google::protobuf::uint32 value);

  // optional .server_protocols.server_attributes attributes = 4;
  inline bool has_attributes() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 4;
  inline const ::server_protocols::server_attributes& attributes() const;
  inline ::server_protocols::server_attributes* mutable_attributes();
  inline ::server_protocols::server_attributes* release_attributes();
  inline void set_allocated_attributes(::server_protocols::server_attributes* attributes);

  // @@protoc_insertion_point(class_scope:server_protocols.server_info)
 private:
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  inline void set_has_server_port();
  inline void clear_has_server_port();
  inline void set_has_attributes();
  inline void clear_has_attributes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* server_ip_;
  int server_type_;
  ::google::protobuf::uint32 server_port_;
  ::server_protocols::server_attributes* attributes_;
  friend void  protobuf_AddDesc_server_5fbase_2eproto();
  friend void protobuf_AssignDesc_server_5fbase_2eproto();
  friend void protobuf_ShutdownFile_server_5fbase_2eproto();

  void InitAsDefaultInstance();
  static server_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_packet : public ::google::protobuf::Message {
 public:
  msg_packet();
  virtual ~msg_packet();

  msg_packet(const msg_packet& from);

  inline msg_packet& operator=(const msg_packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_packet& default_instance();

  void Swap(msg_packet* other);

  // implements Message ----------------------------------------------

  msg_packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_packet& from);
  void MergeFrom(const msg_packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 msgid = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // optional bytes msginfo = 2;
  inline bool has_msginfo() const;
  inline void clear_msginfo();
  static const int kMsginfoFieldNumber = 2;
  inline const ::std::string& msginfo() const;
  inline void set_msginfo(const ::std::string& value);
  inline void set_msginfo(const char* value);
  inline void set_msginfo(const void* value, size_t size);
  inline ::std::string* mutable_msginfo();
  inline ::std::string* release_msginfo();
  inline void set_allocated_msginfo(::std::string* msginfo);

  // @@protoc_insertion_point(class_scope:server_protocols.msg_packet)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msginfo();
  inline void clear_has_msginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msginfo_;
  ::google::protobuf::uint32 msgid_;
  friend void  protobuf_AddDesc_server_5fbase_2eproto();
  friend void protobuf_AssignDesc_server_5fbase_2eproto();
  friend void protobuf_ShutdownFile_server_5fbase_2eproto();

  void InitAsDefaultInstance();
  static msg_packet* default_instance_;
};
// ===================================================================


// ===================================================================

// server_attributes

// optional int32 client_count = 1 [default = 0];
inline bool server_attributes::has_client_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void server_attributes::set_has_client_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void server_attributes::clear_has_client_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void server_attributes::clear_client_count() {
  client_count_ = 0;
  clear_has_client_count();
}
inline ::google::protobuf::int32 server_attributes::client_count() const {
  // @@protoc_insertion_point(field_get:server_protocols.server_attributes.client_count)
  return client_count_;
}
inline void server_attributes::set_client_count(::google::protobuf::int32 value) {
  set_has_client_count();
  client_count_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.server_attributes.client_count)
}

// -------------------------------------------------------------------

// server_info

// optional .server_protocols.e_server_type server_type = 1;
inline bool server_info::has_server_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void server_info::set_has_server_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void server_info::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void server_info::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::server_protocols::e_server_type server_info::server_type() const {
  // @@protoc_insertion_point(field_get:server_protocols.server_info.server_type)
  return static_cast< ::server_protocols::e_server_type >(server_type_);
}
inline void server_info::set_server_type(::server_protocols::e_server_type value) {
  assert(::server_protocols::e_server_type_IsValid(value));
  set_has_server_type();
  server_type_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.server_info.server_type)
}

// optional string server_ip = 2;
inline bool server_info::has_server_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void server_info::set_has_server_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void server_info::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void server_info::clear_server_ip() {
  if (server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_ip_->clear();
  }
  clear_has_server_ip();
}
inline const ::std::string& server_info::server_ip() const {
  // @@protoc_insertion_point(field_get:server_protocols.server_info.server_ip)
  return *server_ip_;
}
inline void server_info::set_server_ip(const ::std::string& value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
  // @@protoc_insertion_point(field_set:server_protocols.server_info.server_ip)
}
inline void server_info::set_server_ip(const char* value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:server_protocols.server_info.server_ip)
}
inline void server_info::set_server_ip(const char* value, size_t size) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server_protocols.server_info.server_ip)
}
inline ::std::string* server_info::mutable_server_ip() {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:server_protocols.server_info.server_ip)
  return server_ip_;
}
inline ::std::string* server_info::release_server_ip() {
  clear_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = server_ip_;
    server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void server_info::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_ip_;
  }
  if (server_ip) {
    set_has_server_ip();
    server_ip_ = server_ip;
  } else {
    clear_has_server_ip();
    server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:server_protocols.server_info.server_ip)
}

// optional fixed32 server_port = 3;
inline bool server_info::has_server_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void server_info::set_has_server_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void server_info::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void server_info::clear_server_port() {
  server_port_ = 0u;
  clear_has_server_port();
}
inline ::google::protobuf::uint32 server_info::server_port() const {
  // @@protoc_insertion_point(field_get:server_protocols.server_info.server_port)
  return server_port_;
}
inline void server_info::set_server_port(::google::protobuf::uint32 value) {
  set_has_server_port();
  server_port_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.server_info.server_port)
}

// optional .server_protocols.server_attributes attributes = 4;
inline bool server_info::has_attributes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void server_info::set_has_attributes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void server_info::clear_has_attributes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void server_info::clear_attributes() {
  if (attributes_ != NULL) attributes_->::server_protocols::server_attributes::Clear();
  clear_has_attributes();
}
inline const ::server_protocols::server_attributes& server_info::attributes() const {
  // @@protoc_insertion_point(field_get:server_protocols.server_info.attributes)
  return attributes_ != NULL ? *attributes_ : *default_instance_->attributes_;
}
inline ::server_protocols::server_attributes* server_info::mutable_attributes() {
  set_has_attributes();
  if (attributes_ == NULL) attributes_ = new ::server_protocols::server_attributes;
  // @@protoc_insertion_point(field_mutable:server_protocols.server_info.attributes)
  return attributes_;
}
inline ::server_protocols::server_attributes* server_info::release_attributes() {
  clear_has_attributes();
  ::server_protocols::server_attributes* temp = attributes_;
  attributes_ = NULL;
  return temp;
}
inline void server_info::set_allocated_attributes(::server_protocols::server_attributes* attributes) {
  delete attributes_;
  attributes_ = attributes;
  if (attributes) {
    set_has_attributes();
  } else {
    clear_has_attributes();
  }
  // @@protoc_insertion_point(field_set_allocated:server_protocols.server_info.attributes)
}

// -------------------------------------------------------------------

// msg_packet

// optional fixed32 msgid = 1;
inline bool msg_packet::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_packet::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_packet::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_packet::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 msg_packet::msgid() const {
  // @@protoc_insertion_point(field_get:server_protocols.msg_packet.msgid)
  return msgid_;
}
inline void msg_packet::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:server_protocols.msg_packet.msgid)
}

// optional bytes msginfo = 2;
inline bool msg_packet::has_msginfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_packet::set_has_msginfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_packet::clear_has_msginfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_packet::clear_msginfo() {
  if (msginfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msginfo_->clear();
  }
  clear_has_msginfo();
}
inline const ::std::string& msg_packet::msginfo() const {
  // @@protoc_insertion_point(field_get:server_protocols.msg_packet.msginfo)
  return *msginfo_;
}
inline void msg_packet::set_msginfo(const ::std::string& value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
  // @@protoc_insertion_point(field_set:server_protocols.msg_packet.msginfo)
}
inline void msg_packet::set_msginfo(const char* value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:server_protocols.msg_packet.msginfo)
}
inline void msg_packet::set_msginfo(const void* value, size_t size) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server_protocols.msg_packet.msginfo)
}
inline ::std::string* msg_packet::mutable_msginfo() {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msginfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:server_protocols.msg_packet.msginfo)
  return msginfo_;
}
inline ::std::string* msg_packet::release_msginfo() {
  clear_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msginfo_;
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void msg_packet::set_allocated_msginfo(::std::string* msginfo) {
  if (msginfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msginfo_;
  }
  if (msginfo) {
    set_has_msginfo();
    msginfo_ = msginfo;
  } else {
    clear_has_msginfo();
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:server_protocols.msg_packet.msginfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server_protocols

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::server_protocols::e_server_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server_protocols::e_server_type>() {
  return ::server_protocols::e_server_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_5fbase_2eproto__INCLUDED
