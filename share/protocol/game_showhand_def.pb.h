// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_showhand_def.proto

#ifndef PROTOBUF_game_5fshowhand_5fdef_2eproto__INCLUDED
#define PROTOBUF_game_5fshowhand_5fdef_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace game_showhand_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
void protobuf_AssignDesc_game_5fshowhand_5fdef_2eproto();
void protobuf_ShutdownFile_game_5fshowhand_5fdef_2eproto();

class msg_table_info;
class msg_player_info;
class msg_player_result;
class msg_result_point_info;
class msg_bet_result_info;
class msg_bet_info;
class p_bet_state;

enum e_server_msg_type {
  e_mst_start_c2l = 10000,
  e_mst_c2l_get_room_info = 10001,
  e_mst_c2l_enter_game_room = 10002,
  e_mst_c2l_quit_game_room = 10003,
  e_mst_c2l_desk_rule_setting = 10004,
  e_mst_c2l_choose_desk = 10005,
  e_mst_c2l_get_table_scene_info = 10006,
  e_mst_c2l_quit_desk = 10007,
  e_mst_c2l_player_ready = 10008,
  e_mst_c2l_view_card = 10009,
  e_mst_c2l_bet_info = 10010,
  e_mst_c2l_check_state = 10011,
  e_mst_c2l_gm_change_result = 11001,
  e_mst_start_l2c = 15000,
  e_mst_l2c_get_room_info_result = 15001,
  e_mst_l2c_enter_game_room_result = 15002,
  e_mst_l2c_desk_rule_setting_result = 15003,
  e_mst_l2c_choose_desk_result = 15004,
  e_mst_l2c_get_table_scene_info = 15005,
  e_mst_l2c_player_ready_result = 15006,
  e_mst_l2c_view_card_result = 15007,
  e_mst_l2c_bet_result = 15008,
  e_mst_l2c_quit_game_room_result = 15009,
  e_mst_l2c_quit_desk_result = 15010,
  e_mst_l2c_check_state_result = 15011,
  e_mst_l2c_notice_start_game_message = 15021,
  e_mst_l2c_notice_start_bet_message = 15022,
  e_mst_l2c_notice_sendcard_message = 15023,
  e_mst_l2c_notice_start_award_message = 15024,
  e_mst_l2c_notice_join_table_message = 15030,
  e_mst_l2c_notice_leave_table_message = 15031,
  e_mst_l2c_notice_table_player_message = 15032,
  e_mst_l2c_notice_gm_all_cards_info = 16001,
  e_mst_l2c_gm_change_result = 16002,
  e_mst_l2c_notice_gm_stock_info = 17001,
  e_mst_l2c_notice_gm_luck_info = 17002,
  e_mst_clend_index = 20000
};
bool e_server_msg_type_IsValid(int value);
const e_server_msg_type e_server_msg_type_MIN = e_mst_start_c2l;
const e_server_msg_type e_server_msg_type_MAX = e_mst_clend_index;
const int e_server_msg_type_ARRAYSIZE = e_server_msg_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor();
inline const ::std::string& e_server_msg_type_Name(e_server_msg_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_server_msg_type_descriptor(), value);
}
inline bool e_server_msg_type_Parse(
    const ::std::string& name, e_server_msg_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_server_msg_type>(
    e_server_msg_type_descriptor(), name, value);
}
enum e_game_state {
  e_state_game_none = 0,
  e_state_game_prepare = 1,
  e_state_game_start = 2,
  e_state_game_takecard = 3,
  e_state_game_bet = 4,
  e_state_game_award = 5
};
bool e_game_state_IsValid(int value);
const e_game_state e_game_state_MIN = e_state_game_none;
const e_game_state e_game_state_MAX = e_state_game_award;
const int e_game_state_ARRAYSIZE = e_game_state_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_game_state_descriptor();
inline const ::std::string& e_game_state_Name(e_game_state value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_game_state_descriptor(), value);
}
inline bool e_game_state_Parse(
    const ::std::string& name, e_game_state* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_game_state>(
    e_game_state_descriptor(), name, value);
}
enum e_bet_type {
  e_call_none = 0,
  e_call_common_add_1 = 1,
  e_call_common_add_2 = 2,
  e_call_common_add_3 = 3,
  e_call_common_follow = 4,
  e_call_abandon = 5,
  e_call_showhand = 6
};
bool e_bet_type_IsValid(int value);
const e_bet_type e_bet_type_MIN = e_call_none;
const e_bet_type e_bet_type_MAX = e_call_showhand;
const int e_bet_type_ARRAYSIZE = e_bet_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_bet_type_descriptor();
inline const ::std::string& e_bet_type_Name(e_bet_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_bet_type_descriptor(), value);
}
inline bool e_bet_type_Parse(
    const ::std::string& name, e_bet_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_bet_type>(
    e_bet_type_descriptor(), name, value);
}
// ===================================================================

class msg_table_info : public ::google::protobuf::Message {
 public:
  msg_table_info();
  virtual ~msg_table_info();

  msg_table_info(const msg_table_info& from);

  inline msg_table_info& operator=(const msg_table_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_table_info& default_instance();

  void Swap(msg_table_info* other);

  // implements Message ----------------------------------------------

  msg_table_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_table_info& from);
  void MergeFrom(const msg_table_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::uint32 tableid() const;
  inline void set_tableid(::google::protobuf::uint32 value);

  // optional .game_showhand_protocols.msg_player_info player_left = 2;
  inline bool has_player_left() const;
  inline void clear_player_left();
  static const int kPlayerLeftFieldNumber = 2;
  inline const ::game_showhand_protocols::msg_player_info& player_left() const;
  inline ::game_showhand_protocols::msg_player_info* mutable_player_left();
  inline ::game_showhand_protocols::msg_player_info* release_player_left();
  inline void set_allocated_player_left(::game_showhand_protocols::msg_player_info* player_left);

  // optional .game_showhand_protocols.msg_player_info player_right = 3;
  inline bool has_player_right() const;
  inline void clear_player_right();
  static const int kPlayerRightFieldNumber = 3;
  inline const ::game_showhand_protocols::msg_player_info& player_right() const;
  inline ::game_showhand_protocols::msg_player_info* mutable_player_right();
  inline ::game_showhand_protocols::msg_player_info* release_player_right();
  inline void set_allocated_player_right(::game_showhand_protocols::msg_player_info* player_right);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.msg_table_info)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_player_left();
  inline void clear_has_player_left();
  inline void set_has_player_right();
  inline void clear_has_player_right();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::game_showhand_protocols::msg_player_info* player_left_;
  ::game_showhand_protocols::msg_player_info* player_right_;
  ::google::protobuf::uint32 tableid_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fdef_2eproto();

  void InitAsDefaultInstance();
  static msg_table_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_player_info : public ::google::protobuf::Message {
 public:
  msg_player_info();
  virtual ~msg_player_info();

  msg_player_info(const msg_player_info& from);

  inline msg_player_info& operator=(const msg_player_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_info& default_instance();

  void Swap(msg_player_info* other);

  // implements Message ----------------------------------------------

  msg_player_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_info& from);
  void MergeFrom(const msg_player_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional string player_nickname = 2;
  inline bool has_player_nickname() const;
  inline void clear_player_nickname();
  static const int kPlayerNicknameFieldNumber = 2;
  inline const ::std::string& player_nickname() const;
  inline void set_player_nickname(const ::std::string& value);
  inline void set_player_nickname(const char* value);
  inline void set_player_nickname(const char* value, size_t size);
  inline ::std::string* mutable_player_nickname();
  inline ::std::string* release_player_nickname();
  inline void set_allocated_player_nickname(::std::string* player_nickname);

  // optional int32 player_head_frame = 3;
  inline bool has_player_head_frame() const;
  inline void clear_player_head_frame();
  static const int kPlayerHeadFrameFieldNumber = 3;
  inline ::google::protobuf::int32 player_head_frame() const;
  inline void set_player_head_frame(::google::protobuf::int32 value);

  // optional string player_head_custom = 4;
  inline bool has_player_head_custom() const;
  inline void clear_player_head_custom();
  static const int kPlayerHeadCustomFieldNumber = 4;
  inline const ::std::string& player_head_custom() const;
  inline void set_player_head_custom(const ::std::string& value);
  inline void set_player_head_custom(const char* value);
  inline void set_player_head_custom(const char* value, size_t size);
  inline ::std::string* mutable_player_head_custom();
  inline ::std::string* release_player_head_custom();
  inline void set_allocated_player_head_custom(::std::string* player_head_custom);

  // optional int64 player_gold = 5;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 5;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // optional int32 player_vip_lv = 6;
  inline bool has_player_vip_lv() const;
  inline void clear_player_vip_lv();
  static const int kPlayerVipLvFieldNumber = 6;
  inline ::google::protobuf::int32 player_vip_lv() const;
  inline void set_player_vip_lv(::google::protobuf::int32 value);

  // optional uint32 state = 7;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 7;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // repeated int32 cards = 8;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 8;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional bool is_left = 9;
  inline bool has_is_left() const;
  inline void clear_is_left();
  static const int kIsLeftFieldNumber = 9;
  inline bool is_left() const;
  inline void set_is_left(bool value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.msg_player_info)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_nickname();
  inline void clear_has_player_nickname();
  inline void set_has_player_head_frame();
  inline void clear_has_player_head_frame();
  inline void set_has_player_head_custom();
  inline void clear_has_player_head_custom();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();
  inline void set_has_player_vip_lv();
  inline void clear_has_player_vip_lv();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_is_left();
  inline void clear_has_is_left();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* player_nickname_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 player_head_frame_;
  ::std::string* player_head_custom_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 player_vip_lv_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  bool is_left_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fdef_2eproto();

  void InitAsDefaultInstance();
  static msg_player_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_player_result : public ::google::protobuf::Message {
 public:
  msg_player_result();
  virtual ~msg_player_result();

  msg_player_result(const msg_player_result& from);

  inline msg_player_result& operator=(const msg_player_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_player_result& default_instance();

  void Swap(msg_player_result* other);

  // implements Message ----------------------------------------------

  msg_player_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_player_result& from);
  void MergeFrom(const msg_player_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // optional int32 card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // optional int64 winGoldCount = 3;
  inline bool has_wingoldcount() const;
  inline void clear_wingoldcount();
  static const int kWinGoldCountFieldNumber = 3;
  inline ::google::protobuf::int64 wingoldcount() const;
  inline void set_wingoldcount(::google::protobuf::int64 value);

  // optional int32 combinecards_id = 4;
  inline bool has_combinecards_id() const;
  inline void clear_combinecards_id();
  static const int kCombinecardsIdFieldNumber = 4;
  inline ::google::protobuf::int32 combinecards_id() const;
  inline void set_combinecards_id(::google::protobuf::int32 value);

  // optional int64 synctotalGoldCount = 5;
  inline bool has_synctotalgoldcount() const;
  inline void clear_synctotalgoldcount();
  static const int kSynctotalGoldCountFieldNumber = 5;
  inline ::google::protobuf::int64 synctotalgoldcount() const;
  inline void set_synctotalgoldcount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.msg_player_result)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_wingoldcount();
  inline void clear_has_wingoldcount();
  inline void set_has_combinecards_id();
  inline void clear_has_combinecards_id();
  inline void set_has_synctotalgoldcount();
  inline void clear_has_synctotalgoldcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::int64 wingoldcount_;
  ::google::protobuf::int64 synctotalgoldcount_;
  ::google::protobuf::int32 combinecards_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fdef_2eproto();

  void InitAsDefaultInstance();
  static msg_player_result* default_instance_;
};
// -------------------------------------------------------------------

class msg_result_point_info : public ::google::protobuf::Message {
 public:
  msg_result_point_info();
  virtual ~msg_result_point_info();

  msg_result_point_info(const msg_result_point_info& from);

  inline msg_result_point_info& operator=(const msg_result_point_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_result_point_info& default_instance();

  void Swap(msg_result_point_info* other);

  // implements Message ----------------------------------------------

  msg_result_point_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_result_point_info& from);
  void MergeFrom(const msg_result_point_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 combinecardId = 1 [default = 0];
  inline bool has_combinecardid() const;
  inline void clear_combinecardid();
  static const int kCombinecardIdFieldNumber = 1;
  inline ::google::protobuf::uint32 combinecardid() const;
  inline void set_combinecardid(::google::protobuf::uint32 value);

  // optional uint32 owner = 2;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 2;
  inline ::google::protobuf::uint32 owner() const;
  inline void set_owner(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.msg_result_point_info)
 private:
  inline void set_has_combinecardid();
  inline void clear_has_combinecardid();
  inline void set_has_owner();
  inline void clear_has_owner();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 combinecardid_;
  ::google::protobuf::uint32 owner_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fdef_2eproto();

  void InitAsDefaultInstance();
  static msg_result_point_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_bet_result_info : public ::google::protobuf::Message {
 public:
  msg_bet_result_info();
  virtual ~msg_bet_result_info();

  msg_bet_result_info(const msg_bet_result_info& from);

  inline msg_bet_result_info& operator=(const msg_bet_result_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_bet_result_info& default_instance();

  void Swap(msg_bet_result_info* other);

  // implements Message ----------------------------------------------

  msg_bet_result_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_bet_result_info& from);
  void MergeFrom(const msg_bet_result_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_bet_type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::game_showhand_protocols::e_bet_type type() const;
  inline void set_type(::game_showhand_protocols::e_bet_type value);

  // optional int64 bet_count = 2;
  inline bool has_bet_count() const;
  inline void clear_bet_count();
  static const int kBetCountFieldNumber = 2;
  inline ::google::protobuf::int64 bet_count() const;
  inline void set_bet_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.msg_bet_result_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_bet_count();
  inline void clear_has_bet_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 bet_count_;
  int type_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fdef_2eproto();

  void InitAsDefaultInstance();
  static msg_bet_result_info* default_instance_;
};
// -------------------------------------------------------------------

class msg_bet_info : public ::google::protobuf::Message {
 public:
  msg_bet_info();
  virtual ~msg_bet_info();

  msg_bet_info(const msg_bet_info& from);

  inline msg_bet_info& operator=(const msg_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_bet_info& default_instance();

  void Swap(msg_bet_info* other);

  // implements Message ----------------------------------------------

  msg_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_bet_info& from);
  void MergeFrom(const msg_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_bet_type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::game_showhand_protocols::e_bet_type type() const;
  inline void set_type(::game_showhand_protocols::e_bet_type value);

  // optional int64 bet_count = 2;
  inline bool has_bet_count() const;
  inline void clear_bet_count();
  static const int kBetCountFieldNumber = 2;
  inline ::google::protobuf::int64 bet_count() const;
  inline void set_bet_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.msg_bet_info)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_bet_count();
  inline void clear_has_bet_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 bet_count_;
  int type_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fdef_2eproto();

  void InitAsDefaultInstance();
  static msg_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class p_bet_state : public ::google::protobuf::Message {
 public:
  p_bet_state();
  virtual ~p_bet_state();

  p_bet_state(const p_bet_state& from);

  inline p_bet_state& operator=(const p_bet_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const p_bet_state& default_instance();

  void Swap(p_bet_state* other);

  // implements Message ----------------------------------------------

  p_bet_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const p_bet_state& from);
  void MergeFrom(const p_bet_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // repeated .game_showhand_protocols.e_bet_type bet_type_list = 2;
  inline int bet_type_list_size() const;
  inline void clear_bet_type_list();
  static const int kBetTypeListFieldNumber = 2;
  inline ::game_showhand_protocols::e_bet_type bet_type_list(int index) const;
  inline void set_bet_type_list(int index, ::game_showhand_protocols::e_bet_type value);
  inline void add_bet_type_list(::game_showhand_protocols::e_bet_type value);
  inline const ::google::protobuf::RepeatedField<int>& bet_type_list() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_bet_type_list();

  // optional int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional .game_showhand_protocols.msg_bet_info last_betinfo = 4;
  inline bool has_last_betinfo() const;
  inline void clear_last_betinfo();
  static const int kLastBetinfoFieldNumber = 4;
  inline const ::game_showhand_protocols::msg_bet_info& last_betinfo() const;
  inline ::game_showhand_protocols::msg_bet_info* mutable_last_betinfo();
  inline ::game_showhand_protocols::msg_bet_info* release_last_betinfo();
  inline void set_allocated_last_betinfo(::game_showhand_protocols::msg_bet_info* last_betinfo);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.p_bet_state)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_last_betinfo();
  inline void clear_has_last_betinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> bet_type_list_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 state_;
  ::game_showhand_protocols::msg_bet_info* last_betinfo_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fdef_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fdef_2eproto();

  void InitAsDefaultInstance();
  static p_bet_state* default_instance_;
};
// ===================================================================


// ===================================================================

// msg_table_info

// optional uint32 tableid = 1;
inline bool msg_table_info::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_table_info::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_table_info::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_table_info::clear_tableid() {
  tableid_ = 0u;
  clear_has_tableid();
}
inline ::google::protobuf::uint32 msg_table_info::tableid() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_table_info.tableid)
  return tableid_;
}
inline void msg_table_info::set_tableid(::google::protobuf::uint32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_table_info.tableid)
}

// optional .game_showhand_protocols.msg_player_info player_left = 2;
inline bool msg_table_info::has_player_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_table_info::set_has_player_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_table_info::clear_has_player_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_table_info::clear_player_left() {
  if (player_left_ != NULL) player_left_->::game_showhand_protocols::msg_player_info::Clear();
  clear_has_player_left();
}
inline const ::game_showhand_protocols::msg_player_info& msg_table_info::player_left() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_table_info.player_left)
  return player_left_ != NULL ? *player_left_ : *default_instance_->player_left_;
}
inline ::game_showhand_protocols::msg_player_info* msg_table_info::mutable_player_left() {
  set_has_player_left();
  if (player_left_ == NULL) player_left_ = new ::game_showhand_protocols::msg_player_info;
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.msg_table_info.player_left)
  return player_left_;
}
inline ::game_showhand_protocols::msg_player_info* msg_table_info::release_player_left() {
  clear_has_player_left();
  ::game_showhand_protocols::msg_player_info* temp = player_left_;
  player_left_ = NULL;
  return temp;
}
inline void msg_table_info::set_allocated_player_left(::game_showhand_protocols::msg_player_info* player_left) {
  delete player_left_;
  player_left_ = player_left;
  if (player_left) {
    set_has_player_left();
  } else {
    clear_has_player_left();
  }
  // @@protoc_insertion_point(field_set_allocated:game_showhand_protocols.msg_table_info.player_left)
}

// optional .game_showhand_protocols.msg_player_info player_right = 3;
inline bool msg_table_info::has_player_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_table_info::set_has_player_right() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_table_info::clear_has_player_right() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_table_info::clear_player_right() {
  if (player_right_ != NULL) player_right_->::game_showhand_protocols::msg_player_info::Clear();
  clear_has_player_right();
}
inline const ::game_showhand_protocols::msg_player_info& msg_table_info::player_right() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_table_info.player_right)
  return player_right_ != NULL ? *player_right_ : *default_instance_->player_right_;
}
inline ::game_showhand_protocols::msg_player_info* msg_table_info::mutable_player_right() {
  set_has_player_right();
  if (player_right_ == NULL) player_right_ = new ::game_showhand_protocols::msg_player_info;
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.msg_table_info.player_right)
  return player_right_;
}
inline ::game_showhand_protocols::msg_player_info* msg_table_info::release_player_right() {
  clear_has_player_right();
  ::game_showhand_protocols::msg_player_info* temp = player_right_;
  player_right_ = NULL;
  return temp;
}
inline void msg_table_info::set_allocated_player_right(::game_showhand_protocols::msg_player_info* player_right) {
  delete player_right_;
  player_right_ = player_right;
  if (player_right) {
    set_has_player_right();
  } else {
    clear_has_player_right();
  }
  // @@protoc_insertion_point(field_set_allocated:game_showhand_protocols.msg_table_info.player_right)
}

// -------------------------------------------------------------------

// msg_player_info

// optional int32 player_id = 1;
inline bool msg_player_info::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_info::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_info::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_info::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_info::player_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_player_info.player_id)
  return player_id_;
}
inline void msg_player_info::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_player_info.player_id)
}

// optional string player_nickname = 2;
inline bool msg_player_info::has_player_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_info::set_has_player_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_info::clear_has_player_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_info::clear_player_nickname() {
  if (player_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_nickname_->clear();
  }
  clear_has_player_nickname();
}
inline const ::std::string& msg_player_info::player_nickname() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_player_info.player_nickname)
  return *player_nickname_;
}
inline void msg_player_info::set_player_nickname(const ::std::string& value) {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_nickname_ = new ::std::string;
  }
  player_nickname_->assign(value);
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_player_info.player_nickname)
}
inline void msg_player_info::set_player_nickname(const char* value) {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_nickname_ = new ::std::string;
  }
  player_nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:game_showhand_protocols.msg_player_info.player_nickname)
}
inline void msg_player_info::set_player_nickname(const char* value, size_t size) {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_nickname_ = new ::std::string;
  }
  player_nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game_showhand_protocols.msg_player_info.player_nickname)
}
inline ::std::string* msg_player_info::mutable_player_nickname() {
  set_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.msg_player_info.player_nickname)
  return player_nickname_;
}
inline ::std::string* msg_player_info::release_player_nickname() {
  clear_has_player_nickname();
  if (player_nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = player_nickname_;
    player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void msg_player_info::set_allocated_player_nickname(::std::string* player_nickname) {
  if (player_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_nickname_;
  }
  if (player_nickname) {
    set_has_player_nickname();
    player_nickname_ = player_nickname;
  } else {
    clear_has_player_nickname();
    player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game_showhand_protocols.msg_player_info.player_nickname)
}

// optional int32 player_head_frame = 3;
inline bool msg_player_info::has_player_head_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_player_info::set_has_player_head_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_player_info::clear_has_player_head_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_player_info::clear_player_head_frame() {
  player_head_frame_ = 0;
  clear_has_player_head_frame();
}
inline ::google::protobuf::int32 msg_player_info::player_head_frame() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_player_info.player_head_frame)
  return player_head_frame_;
}
inline void msg_player_info::set_player_head_frame(::google::protobuf::int32 value) {
  set_has_player_head_frame();
  player_head_frame_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_player_info.player_head_frame)
}

// optional string player_head_custom = 4;
inline bool msg_player_info::has_player_head_custom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_info::set_has_player_head_custom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_info::clear_has_player_head_custom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_info::clear_player_head_custom() {
  if (player_head_custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_head_custom_->clear();
  }
  clear_has_player_head_custom();
}
inline const ::std::string& msg_player_info::player_head_custom() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_player_info.player_head_custom)
  return *player_head_custom_;
}
inline void msg_player_info::set_player_head_custom(const ::std::string& value) {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_head_custom_ = new ::std::string;
  }
  player_head_custom_->assign(value);
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_player_info.player_head_custom)
}
inline void msg_player_info::set_player_head_custom(const char* value) {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_head_custom_ = new ::std::string;
  }
  player_head_custom_->assign(value);
  // @@protoc_insertion_point(field_set_char:game_showhand_protocols.msg_player_info.player_head_custom)
}
inline void msg_player_info::set_player_head_custom(const char* value, size_t size) {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_head_custom_ = new ::std::string;
  }
  player_head_custom_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game_showhand_protocols.msg_player_info.player_head_custom)
}
inline ::std::string* msg_player_info::mutable_player_head_custom() {
  set_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    player_head_custom_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.msg_player_info.player_head_custom)
  return player_head_custom_;
}
inline ::std::string* msg_player_info::release_player_head_custom() {
  clear_has_player_head_custom();
  if (player_head_custom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = player_head_custom_;
    player_head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void msg_player_info::set_allocated_player_head_custom(::std::string* player_head_custom) {
  if (player_head_custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_head_custom_;
  }
  if (player_head_custom) {
    set_has_player_head_custom();
    player_head_custom_ = player_head_custom;
  } else {
    clear_has_player_head_custom();
    player_head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:game_showhand_protocols.msg_player_info.player_head_custom)
}

// optional int64 player_gold = 5;
inline bool msg_player_info::has_player_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_player_info::set_has_player_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_player_info::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_player_info::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 msg_player_info::player_gold() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_player_info.player_gold)
  return player_gold_;
}
inline void msg_player_info::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_player_info.player_gold)
}

// optional int32 player_vip_lv = 6;
inline bool msg_player_info::has_player_vip_lv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_player_info::set_has_player_vip_lv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_player_info::clear_has_player_vip_lv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_player_info::clear_player_vip_lv() {
  player_vip_lv_ = 0;
  clear_has_player_vip_lv();
}
inline ::google::protobuf::int32 msg_player_info::player_vip_lv() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_player_info.player_vip_lv)
  return player_vip_lv_;
}
inline void msg_player_info::set_player_vip_lv(::google::protobuf::int32 value) {
  set_has_player_vip_lv();
  player_vip_lv_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_player_info.player_vip_lv)
}

// optional uint32 state = 7;
inline bool msg_player_info::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_player_info::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_player_info::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_player_info::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 msg_player_info::state() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_player_info.state)
  return state_;
}
inline void msg_player_info::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_player_info.state)
}

// repeated int32 cards = 8;
inline int msg_player_info::cards_size() const {
  return cards_.size();
}
inline void msg_player_info::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 msg_player_info::cards(int index) const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_player_info.cards)
  return cards_.Get(index);
}
inline void msg_player_info::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_player_info.cards)
}
inline void msg_player_info::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:game_showhand_protocols.msg_player_info.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_player_info::cards() const {
  // @@protoc_insertion_point(field_list:game_showhand_protocols.msg_player_info.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_player_info::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:game_showhand_protocols.msg_player_info.cards)
  return &cards_;
}

// optional bool is_left = 9;
inline bool msg_player_info::has_is_left() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_player_info::set_has_is_left() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_player_info::clear_has_is_left() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_player_info::clear_is_left() {
  is_left_ = false;
  clear_has_is_left();
}
inline bool msg_player_info::is_left() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_player_info.is_left)
  return is_left_;
}
inline void msg_player_info::set_is_left(bool value) {
  set_has_is_left();
  is_left_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_player_info.is_left)
}

// -------------------------------------------------------------------

// msg_player_result

// optional int32 player_id = 1;
inline bool msg_player_result::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_player_result::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_player_result::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_player_result::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 msg_player_result::player_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_player_result.player_id)
  return player_id_;
}
inline void msg_player_result::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_player_result.player_id)
}

// optional int32 card = 2;
inline bool msg_player_result::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_player_result::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_player_result::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_player_result::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 msg_player_result::card() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_player_result.card)
  return card_;
}
inline void msg_player_result::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_player_result.card)
}

// optional int64 winGoldCount = 3;
inline bool msg_player_result::has_wingoldcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_player_result::set_has_wingoldcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_player_result::clear_has_wingoldcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_player_result::clear_wingoldcount() {
  wingoldcount_ = GOOGLE_LONGLONG(0);
  clear_has_wingoldcount();
}
inline ::google::protobuf::int64 msg_player_result::wingoldcount() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_player_result.winGoldCount)
  return wingoldcount_;
}
inline void msg_player_result::set_wingoldcount(::google::protobuf::int64 value) {
  set_has_wingoldcount();
  wingoldcount_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_player_result.winGoldCount)
}

// optional int32 combinecards_id = 4;
inline bool msg_player_result::has_combinecards_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_player_result::set_has_combinecards_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_player_result::clear_has_combinecards_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_player_result::clear_combinecards_id() {
  combinecards_id_ = 0;
  clear_has_combinecards_id();
}
inline ::google::protobuf::int32 msg_player_result::combinecards_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_player_result.combinecards_id)
  return combinecards_id_;
}
inline void msg_player_result::set_combinecards_id(::google::protobuf::int32 value) {
  set_has_combinecards_id();
  combinecards_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_player_result.combinecards_id)
}

// optional int64 synctotalGoldCount = 5;
inline bool msg_player_result::has_synctotalgoldcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_player_result::set_has_synctotalgoldcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_player_result::clear_has_synctotalgoldcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_player_result::clear_synctotalgoldcount() {
  synctotalgoldcount_ = GOOGLE_LONGLONG(0);
  clear_has_synctotalgoldcount();
}
inline ::google::protobuf::int64 msg_player_result::synctotalgoldcount() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_player_result.synctotalGoldCount)
  return synctotalgoldcount_;
}
inline void msg_player_result::set_synctotalgoldcount(::google::protobuf::int64 value) {
  set_has_synctotalgoldcount();
  synctotalgoldcount_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_player_result.synctotalGoldCount)
}

// -------------------------------------------------------------------

// msg_result_point_info

// optional uint32 combinecardId = 1 [default = 0];
inline bool msg_result_point_info::has_combinecardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_result_point_info::set_has_combinecardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_result_point_info::clear_has_combinecardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_result_point_info::clear_combinecardid() {
  combinecardid_ = 0u;
  clear_has_combinecardid();
}
inline ::google::protobuf::uint32 msg_result_point_info::combinecardid() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_result_point_info.combinecardId)
  return combinecardid_;
}
inline void msg_result_point_info::set_combinecardid(::google::protobuf::uint32 value) {
  set_has_combinecardid();
  combinecardid_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_result_point_info.combinecardId)
}

// optional uint32 owner = 2;
inline bool msg_result_point_info::has_owner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_result_point_info::set_has_owner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_result_point_info::clear_has_owner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_result_point_info::clear_owner() {
  owner_ = 0u;
  clear_has_owner();
}
inline ::google::protobuf::uint32 msg_result_point_info::owner() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_result_point_info.owner)
  return owner_;
}
inline void msg_result_point_info::set_owner(::google::protobuf::uint32 value) {
  set_has_owner();
  owner_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_result_point_info.owner)
}

// -------------------------------------------------------------------

// msg_bet_result_info

// optional .game_showhand_protocols.e_bet_type type = 1;
inline bool msg_bet_result_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_bet_result_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_bet_result_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_bet_result_info::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::game_showhand_protocols::e_bet_type msg_bet_result_info::type() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_bet_result_info.type)
  return static_cast< ::game_showhand_protocols::e_bet_type >(type_);
}
inline void msg_bet_result_info::set_type(::game_showhand_protocols::e_bet_type value) {
  assert(::game_showhand_protocols::e_bet_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_bet_result_info.type)
}

// optional int64 bet_count = 2;
inline bool msg_bet_result_info::has_bet_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_bet_result_info::set_has_bet_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_bet_result_info::clear_has_bet_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_bet_result_info::clear_bet_count() {
  bet_count_ = GOOGLE_LONGLONG(0);
  clear_has_bet_count();
}
inline ::google::protobuf::int64 msg_bet_result_info::bet_count() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_bet_result_info.bet_count)
  return bet_count_;
}
inline void msg_bet_result_info::set_bet_count(::google::protobuf::int64 value) {
  set_has_bet_count();
  bet_count_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_bet_result_info.bet_count)
}

// -------------------------------------------------------------------

// msg_bet_info

// optional .game_showhand_protocols.e_bet_type type = 1;
inline bool msg_bet_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_bet_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_bet_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_bet_info::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::game_showhand_protocols::e_bet_type msg_bet_info::type() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_bet_info.type)
  return static_cast< ::game_showhand_protocols::e_bet_type >(type_);
}
inline void msg_bet_info::set_type(::game_showhand_protocols::e_bet_type value) {
  assert(::game_showhand_protocols::e_bet_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_bet_info.type)
}

// optional int64 bet_count = 2;
inline bool msg_bet_info::has_bet_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_bet_info::set_has_bet_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_bet_info::clear_has_bet_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_bet_info::clear_bet_count() {
  bet_count_ = GOOGLE_LONGLONG(0);
  clear_has_bet_count();
}
inline ::google::protobuf::int64 msg_bet_info::bet_count() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.msg_bet_info.bet_count)
  return bet_count_;
}
inline void msg_bet_info::set_bet_count(::google::protobuf::int64 value) {
  set_has_bet_count();
  bet_count_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.msg_bet_info.bet_count)
}

// -------------------------------------------------------------------

// p_bet_state

// optional int32 player_id = 1;
inline bool p_bet_state::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void p_bet_state::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void p_bet_state::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void p_bet_state::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 p_bet_state::player_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.p_bet_state.player_id)
  return player_id_;
}
inline void p_bet_state::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.p_bet_state.player_id)
}

// repeated .game_showhand_protocols.e_bet_type bet_type_list = 2;
inline int p_bet_state::bet_type_list_size() const {
  return bet_type_list_.size();
}
inline void p_bet_state::clear_bet_type_list() {
  bet_type_list_.Clear();
}
inline ::game_showhand_protocols::e_bet_type p_bet_state::bet_type_list(int index) const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.p_bet_state.bet_type_list)
  return static_cast< ::game_showhand_protocols::e_bet_type >(bet_type_list_.Get(index));
}
inline void p_bet_state::set_bet_type_list(int index, ::game_showhand_protocols::e_bet_type value) {
  assert(::game_showhand_protocols::e_bet_type_IsValid(value));
  bet_type_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:game_showhand_protocols.p_bet_state.bet_type_list)
}
inline void p_bet_state::add_bet_type_list(::game_showhand_protocols::e_bet_type value) {
  assert(::game_showhand_protocols::e_bet_type_IsValid(value));
  bet_type_list_.Add(value);
  // @@protoc_insertion_point(field_add:game_showhand_protocols.p_bet_state.bet_type_list)
}
inline const ::google::protobuf::RepeatedField<int>&
p_bet_state::bet_type_list() const {
  // @@protoc_insertion_point(field_list:game_showhand_protocols.p_bet_state.bet_type_list)
  return bet_type_list_;
}
inline ::google::protobuf::RepeatedField<int>*
p_bet_state::mutable_bet_type_list() {
  // @@protoc_insertion_point(field_mutable_list:game_showhand_protocols.p_bet_state.bet_type_list)
  return &bet_type_list_;
}

// optional int32 state = 3;
inline bool p_bet_state::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void p_bet_state::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void p_bet_state::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void p_bet_state::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 p_bet_state::state() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.p_bet_state.state)
  return state_;
}
inline void p_bet_state::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.p_bet_state.state)
}

// optional .game_showhand_protocols.msg_bet_info last_betinfo = 4;
inline bool p_bet_state::has_last_betinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void p_bet_state::set_has_last_betinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void p_bet_state::clear_has_last_betinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void p_bet_state::clear_last_betinfo() {
  if (last_betinfo_ != NULL) last_betinfo_->::game_showhand_protocols::msg_bet_info::Clear();
  clear_has_last_betinfo();
}
inline const ::game_showhand_protocols::msg_bet_info& p_bet_state::last_betinfo() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.p_bet_state.last_betinfo)
  return last_betinfo_ != NULL ? *last_betinfo_ : *default_instance_->last_betinfo_;
}
inline ::game_showhand_protocols::msg_bet_info* p_bet_state::mutable_last_betinfo() {
  set_has_last_betinfo();
  if (last_betinfo_ == NULL) last_betinfo_ = new ::game_showhand_protocols::msg_bet_info;
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.p_bet_state.last_betinfo)
  return last_betinfo_;
}
inline ::game_showhand_protocols::msg_bet_info* p_bet_state::release_last_betinfo() {
  clear_has_last_betinfo();
  ::game_showhand_protocols::msg_bet_info* temp = last_betinfo_;
  last_betinfo_ = NULL;
  return temp;
}
inline void p_bet_state::set_allocated_last_betinfo(::game_showhand_protocols::msg_bet_info* last_betinfo) {
  delete last_betinfo_;
  last_betinfo_ = last_betinfo;
  if (last_betinfo) {
    set_has_last_betinfo();
  } else {
    clear_has_last_betinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:game_showhand_protocols.p_bet_state.last_betinfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_showhand_protocols

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::game_showhand_protocols::e_server_msg_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_showhand_protocols::e_server_msg_type>() {
  return ::game_showhand_protocols::e_server_msg_type_descriptor();
}
template <> struct is_proto_enum< ::game_showhand_protocols::e_game_state> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_showhand_protocols::e_game_state>() {
  return ::game_showhand_protocols::e_game_state_descriptor();
}
template <> struct is_proto_enum< ::game_showhand_protocols::e_bet_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_showhand_protocols::e_bet_type>() {
  return ::game_showhand_protocols::e_bet_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fshowhand_5fdef_2eproto__INCLUDED
