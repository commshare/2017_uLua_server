// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_landlord_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_landlord_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_landlord_protocol {

namespace {

const ::google::protobuf::Descriptor* packetc2l_enter_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_enter_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_enter_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_enter_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_room_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_room_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_room_scene_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_room_scene_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_check_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_check_state_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_check_state_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_start_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_start_game_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5flandlord_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_landlord_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2l_enter_room_descriptor_ = file->message_type(0);
  static const int packetc2l_enter_room_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, room_id_),
  };
  packetc2l_enter_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_enter_room_descriptor_,
      packetc2l_enter_room::default_instance_,
      packetc2l_enter_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_enter_room));
  packetl2c_enter_room_result_descriptor_ = file->message_type(1);
  static const int packetl2c_enter_room_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, wait_time_),
  };
  packetl2c_enter_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_enter_room_result_descriptor_,
      packetl2c_enter_room_result::default_instance_,
      packetl2c_enter_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_enter_room_result));
  packetc2l_get_room_scene_info_descriptor_ = file->message_type(2);
  static const int packetc2l_get_room_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, packet_id_),
  };
  packetc2l_get_room_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_room_scene_info_descriptor_,
      packetc2l_get_room_scene_info::default_instance_,
      packetc2l_get_room_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_room_scene_info));
  packetl2c_get_room_scene_info_result_descriptor_ = file->message_type(3);
  static const int packetl2c_get_room_scene_info_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, room_id_),
  };
  packetl2c_get_room_scene_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_room_scene_info_result_descriptor_,
      packetl2c_get_room_scene_info_result::default_instance_,
      packetl2c_get_room_scene_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_room_scene_info_result));
  packetc2l_check_state_descriptor_ = file->message_type(4);
  static const int packetc2l_check_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, packet_id_),
  };
  packetc2l_check_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_descriptor_,
      packetc2l_check_state::default_instance_,
      packetc2l_check_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state));
  packetl2c_check_state_result_descriptor_ = file->message_type(5);
  static const int packetl2c_check_state_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, or_gameing_),
  };
  packetl2c_check_state_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_check_state_result_descriptor_,
      packetl2c_check_state_result::default_instance_,
      packetl2c_check_state_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_check_state_result));
  packetl2c_notice_start_game_descriptor_ = file->message_type(6);
  static const int packetl2c_notice_start_game_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_start_game, packet_id_),
  };
  packetl2c_notice_start_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_start_game_descriptor_,
      packetl2c_notice_start_game::default_instance_,
      packetl2c_notice_start_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_start_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_start_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_start_game));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5flandlord_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_enter_room_descriptor_, &packetc2l_enter_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_enter_room_result_descriptor_, &packetl2c_enter_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_room_scene_info_descriptor_, &packetc2l_get_room_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_room_scene_info_result_descriptor_, &packetl2c_get_room_scene_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_descriptor_, &packetc2l_check_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_check_state_result_descriptor_, &packetl2c_check_state_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_start_game_descriptor_, &packetl2c_notice_start_game::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5flandlord_5fprotocol_2eproto() {
  delete packetc2l_enter_room::default_instance_;
  delete packetc2l_enter_room_reflection_;
  delete packetl2c_enter_room_result::default_instance_;
  delete packetl2c_enter_room_result_reflection_;
  delete packetc2l_get_room_scene_info::default_instance_;
  delete packetc2l_get_room_scene_info_reflection_;
  delete packetl2c_get_room_scene_info_result::default_instance_;
  delete packetl2c_get_room_scene_info_result_reflection_;
  delete packetc2l_check_state::default_instance_;
  delete packetc2l_check_state_reflection_;
  delete packetl2c_check_state_result::default_instance_;
  delete packetl2c_check_state_result_reflection_;
  delete packetl2c_notice_start_game::default_instance_;
  delete packetl2c_notice_start_game_reflection_;
}

void protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game_landlord_protocol::protobuf_AddDesc_game_5flandlord_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034game_landlord_protocol.proto\022\026game_lan"
    "dlord_protocol\032\027game_landlord_def.proto\032"
    "\022msg_type_def.proto\"{\n\024packetc2l_enter_r"
    "oom\022R\n\tpacket_id\030\001 \001(\0162).game_landlord_p"
    "rotocol.e_server_msg_type:\024e_mst_c2l_ent"
    "er_room\022\017\n\007room_id\030\002 \001(\005\"\301\001\n\033packetl2c_e"
    "nter_room_result\022R\n\tpacket_id\030\001 \001(\0162).ga"
    "me_landlord_protocol.e_server_msg_type:\024"
    "e_mst_l2c_enter_room\022;\n\006result\030\002 \001(\0162+.g"
    "ame_landlord_protocol.e_server_error_cod"
    "e\022\021\n\twait_time\030\003 \001(\005\"|\n\035packetc2l_get_ro"
    "om_scene_info\022[\n\tpacket_id\030\001 \001(\0162).game_"
    "landlord_protocol.e_server_msg_type:\035e_m"
    "st_c2l_get_room_scene_info\"\224\001\n$packetl2c"
    "_get_room_scene_info_result\022[\n\tpacket_id"
    "\030\001 \001(\0162).game_landlord_protocol.e_server"
    "_msg_type:\035e_mst_l2c_get_room_scene_info"
    "\022\017\n\007room_id\030\002 \001(\005\"l\n\025packetc2l_check_sta"
    "te\022S\n\tpacket_id\030\001 \001(\0162).game_landlord_pr"
    "otocol.e_server_msg_type:\025e_mst_c2l_chec"
    "k_state\"\207\001\n\034packetl2c_check_state_result"
    "\022S\n\tpacket_id\030\001 \001(\0162).game_landlord_prot"
    "ocol.e_server_msg_type:\025e_mst_l2c_check_"
    "state\022\022\n\nor_Gameing\030\002 \001(\010\"q\n\033packetl2c_n"
    "otice_start_game\022R\n\tpacket_id\030\001 \001(\0162).ga"
    "me_landlord_protocol.e_server_msg_type:\024"
    "e_mst_l2c_start_game", 1060);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_landlord_protocol.proto", &protobuf_RegisterTypes);
  packetc2l_enter_room::default_instance_ = new packetc2l_enter_room();
  packetl2c_enter_room_result::default_instance_ = new packetl2c_enter_room_result();
  packetc2l_get_room_scene_info::default_instance_ = new packetc2l_get_room_scene_info();
  packetl2c_get_room_scene_info_result::default_instance_ = new packetl2c_get_room_scene_info_result();
  packetc2l_check_state::default_instance_ = new packetc2l_check_state();
  packetl2c_check_state_result::default_instance_ = new packetl2c_check_state_result();
  packetl2c_notice_start_game::default_instance_ = new packetl2c_notice_start_game();
  packetc2l_enter_room::default_instance_->InitAsDefaultInstance();
  packetl2c_enter_room_result::default_instance_->InitAsDefaultInstance();
  packetc2l_get_room_scene_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_room_scene_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_check_state::default_instance_->InitAsDefaultInstance();
  packetl2c_check_state_result::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_start_game::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5flandlord_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5flandlord_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5flandlord_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5flandlord_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2l_enter_room::kPacketIdFieldNumber;
const int packetc2l_enter_room::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_enter_room::packetc2l_enter_room()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetc2l_enter_room)
}

void packetc2l_enter_room::InitAsDefaultInstance() {
}

packetc2l_enter_room::packetc2l_enter_room(const packetc2l_enter_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetc2l_enter_room)
}

void packetc2l_enter_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10001;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_enter_room::~packetc2l_enter_room() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetc2l_enter_room)
  SharedDtor();
}

void packetc2l_enter_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_enter_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_enter_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_enter_room_descriptor_;
}

const packetc2l_enter_room& packetc2l_enter_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_enter_room* packetc2l_enter_room::default_instance_ = NULL;

packetc2l_enter_room* packetc2l_enter_room::New() const {
  return new packetc2l_enter_room;
}

void packetc2l_enter_room::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 10001;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_enter_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetc2l_enter_room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (tag == 16) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetc2l_enter_room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetc2l_enter_room)
  return false;
#undef DO_
}

void packetc2l_enter_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetc2l_enter_room)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetc2l_enter_room)
}

::google::protobuf::uint8* packetc2l_enter_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetc2l_enter_room)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetc2l_enter_room)
  return target;
}

int packetc2l_enter_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_enter_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_enter_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_enter_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_enter_room::MergeFrom(const packetc2l_enter_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_enter_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_enter_room::CopyFrom(const packetc2l_enter_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_enter_room::IsInitialized() const {

  return true;
}

void packetc2l_enter_room::Swap(packetc2l_enter_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_enter_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_enter_room_descriptor_;
  metadata.reflection = packetc2l_enter_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_enter_room_result::kPacketIdFieldNumber;
const int packetl2c_enter_room_result::kResultFieldNumber;
const int packetl2c_enter_room_result::kWaitTimeFieldNumber;
#endif  // !_MSC_VER

packetl2c_enter_room_result::packetl2c_enter_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_enter_room_result)
}

void packetl2c_enter_room_result::InitAsDefaultInstance() {
}

packetl2c_enter_room_result::packetl2c_enter_room_result(const packetl2c_enter_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_enter_room_result)
}

void packetl2c_enter_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15001;
  result_ = 1;
  wait_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_enter_room_result::~packetl2c_enter_room_result() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_enter_room_result)
  SharedDtor();
}

void packetl2c_enter_room_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_enter_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_enter_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_enter_room_result_descriptor_;
}

const packetl2c_enter_room_result& packetl2c_enter_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_enter_room_result* packetl2c_enter_room_result::default_instance_ = NULL;

packetl2c_enter_room_result* packetl2c_enter_room_result::New() const {
  return new packetl2c_enter_room_result;
}

void packetl2c_enter_room_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 15001;
    result_ = 1;
    wait_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_enter_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_enter_room_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .game_landlord_protocol.e_server_error_code result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_error_code_IsValid(value)) {
            set_result(static_cast< ::game_landlord_protocol::e_server_error_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wait_time;
        break;
      }

      // optional int32 wait_time = 3;
      case 3: {
        if (tag == 24) {
         parse_wait_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_time_)));
          set_has_wait_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_enter_room_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_enter_room_result)
  return false;
#undef DO_
}

void packetl2c_enter_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_enter_room_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_landlord_protocol.e_server_error_code result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 wait_time = 3;
  if (has_wait_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wait_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_enter_room_result)
}

::google::protobuf::uint8* packetl2c_enter_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_enter_room_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_landlord_protocol.e_server_error_code result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 wait_time = 3;
  if (has_wait_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wait_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_enter_room_result)
  return target;
}

int packetl2c_enter_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_landlord_protocol.e_server_error_code result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 wait_time = 3;
    if (has_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_enter_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_enter_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_enter_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_enter_room_result::MergeFrom(const packetl2c_enter_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_wait_time()) {
      set_wait_time(from.wait_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_enter_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_enter_room_result::CopyFrom(const packetl2c_enter_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_enter_room_result::IsInitialized() const {

  return true;
}

void packetl2c_enter_room_result::Swap(packetl2c_enter_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(wait_time_, other->wait_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_enter_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_enter_room_result_descriptor_;
  metadata.reflection = packetl2c_enter_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_room_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_room_scene_info::packetc2l_get_room_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetc2l_get_room_scene_info)
}

void packetc2l_get_room_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_room_scene_info::packetc2l_get_room_scene_info(const packetc2l_get_room_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetc2l_get_room_scene_info)
}

void packetc2l_get_room_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10002;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_room_scene_info::~packetc2l_get_room_scene_info() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetc2l_get_room_scene_info)
  SharedDtor();
}

void packetc2l_get_room_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_room_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_room_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_room_scene_info_descriptor_;
}

const packetc2l_get_room_scene_info& packetc2l_get_room_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_room_scene_info* packetc2l_get_room_scene_info::default_instance_ = NULL;

packetc2l_get_room_scene_info* packetc2l_get_room_scene_info::New() const {
  return new packetc2l_get_room_scene_info;
}

void packetc2l_get_room_scene_info::Clear() {
  packet_id_ = 10002;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_room_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetc2l_get_room_scene_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetc2l_get_room_scene_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetc2l_get_room_scene_info)
  return false;
#undef DO_
}

void packetc2l_get_room_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetc2l_get_room_scene_info)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetc2l_get_room_scene_info)
}

::google::protobuf::uint8* packetc2l_get_room_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetc2l_get_room_scene_info)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetc2l_get_room_scene_info)
  return target;
}

int packetc2l_get_room_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_room_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_room_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_room_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_room_scene_info::MergeFrom(const packetc2l_get_room_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_room_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_room_scene_info::CopyFrom(const packetc2l_get_room_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_room_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_room_scene_info::Swap(packetc2l_get_room_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_room_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_room_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_room_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_room_scene_info_result::kPacketIdFieldNumber;
const int packetl2c_get_room_scene_info_result::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_room_scene_info_result::packetl2c_get_room_scene_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_get_room_scene_info_result)
}

void packetl2c_get_room_scene_info_result::InitAsDefaultInstance() {
}

packetl2c_get_room_scene_info_result::packetl2c_get_room_scene_info_result(const packetl2c_get_room_scene_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_get_room_scene_info_result)
}

void packetl2c_get_room_scene_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15002;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_room_scene_info_result::~packetl2c_get_room_scene_info_result() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_get_room_scene_info_result)
  SharedDtor();
}

void packetl2c_get_room_scene_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_get_room_scene_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_room_scene_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_room_scene_info_result_descriptor_;
}

const packetl2c_get_room_scene_info_result& packetl2c_get_room_scene_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_room_scene_info_result* packetl2c_get_room_scene_info_result::default_instance_ = NULL;

packetl2c_get_room_scene_info_result* packetl2c_get_room_scene_info_result::New() const {
  return new packetl2c_get_room_scene_info_result;
}

void packetl2c_get_room_scene_info_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 15002;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_room_scene_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_get_room_scene_info_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (tag == 16) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_get_room_scene_info_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_get_room_scene_info_result)
  return false;
#undef DO_
}

void packetl2c_get_room_scene_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_get_room_scene_info_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_get_room_scene_info_result)
}

::google::protobuf::uint8* packetl2c_get_room_scene_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_get_room_scene_info_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_get_room_scene_info_result)
  return target;
}

int packetl2c_get_room_scene_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_room_scene_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_room_scene_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_room_scene_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_room_scene_info_result::MergeFrom(const packetl2c_get_room_scene_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_room_scene_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_room_scene_info_result::CopyFrom(const packetl2c_get_room_scene_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_room_scene_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_room_scene_info_result::Swap(packetl2c_get_room_scene_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_room_scene_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_room_scene_info_result_descriptor_;
  metadata.reflection = packetl2c_get_room_scene_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state::packetc2l_check_state()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetc2l_check_state)
}

void packetc2l_check_state::InitAsDefaultInstance() {
}

packetc2l_check_state::packetc2l_check_state(const packetc2l_check_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetc2l_check_state)
}

void packetc2l_check_state::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state::~packetc2l_check_state() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetc2l_check_state)
  SharedDtor();
}

void packetc2l_check_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_descriptor_;
}

const packetc2l_check_state& packetc2l_check_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state* packetc2l_check_state::default_instance_ = NULL;

packetc2l_check_state* packetc2l_check_state::New() const {
  return new packetc2l_check_state;
}

void packetc2l_check_state::Clear() {
  packet_id_ = 10003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetc2l_check_state)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetc2l_check_state)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetc2l_check_state)
  return false;
#undef DO_
}

void packetc2l_check_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetc2l_check_state)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetc2l_check_state)
}

::google::protobuf::uint8* packetc2l_check_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetc2l_check_state)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetc2l_check_state)
  return target;
}

int packetc2l_check_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state::MergeFrom(const packetc2l_check_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state::CopyFrom(const packetc2l_check_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state::IsInitialized() const {

  return true;
}

void packetc2l_check_state::Swap(packetc2l_check_state* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_descriptor_;
  metadata.reflection = packetc2l_check_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_check_state_result::kPacketIdFieldNumber;
const int packetl2c_check_state_result::kOrGameingFieldNumber;
#endif  // !_MSC_VER

packetl2c_check_state_result::packetl2c_check_state_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_check_state_result)
}

void packetl2c_check_state_result::InitAsDefaultInstance() {
}

packetl2c_check_state_result::packetl2c_check_state_result(const packetl2c_check_state_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_check_state_result)
}

void packetl2c_check_state_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15003;
  or_gameing_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_check_state_result::~packetl2c_check_state_result() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_check_state_result)
  SharedDtor();
}

void packetl2c_check_state_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_check_state_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_check_state_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_check_state_result_descriptor_;
}

const packetl2c_check_state_result& packetl2c_check_state_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_check_state_result* packetl2c_check_state_result::default_instance_ = NULL;

packetl2c_check_state_result* packetl2c_check_state_result::New() const {
  return new packetl2c_check_state_result;
}

void packetl2c_check_state_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 15003;
    or_gameing_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_check_state_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_check_state_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_or_Gameing;
        break;
      }

      // optional bool or_Gameing = 2;
      case 2: {
        if (tag == 16) {
         parse_or_Gameing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &or_gameing_)));
          set_has_or_gameing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_check_state_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_check_state_result)
  return false;
#undef DO_
}

void packetl2c_check_state_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_check_state_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool or_Gameing = 2;
  if (has_or_gameing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->or_gameing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_check_state_result)
}

::google::protobuf::uint8* packetl2c_check_state_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_check_state_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool or_Gameing = 2;
  if (has_or_gameing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->or_gameing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_check_state_result)
  return target;
}

int packetl2c_check_state_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool or_Gameing = 2;
    if (has_or_gameing()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_check_state_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_check_state_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_check_state_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_check_state_result::MergeFrom(const packetl2c_check_state_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_or_gameing()) {
      set_or_gameing(from.or_gameing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_check_state_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_check_state_result::CopyFrom(const packetl2c_check_state_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_check_state_result::IsInitialized() const {

  return true;
}

void packetl2c_check_state_result::Swap(packetl2c_check_state_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(or_gameing_, other->or_gameing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_check_state_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_check_state_result_descriptor_;
  metadata.reflection = packetl2c_check_state_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_start_game::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_start_game::packetl2c_notice_start_game()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_notice_start_game)
}

void packetl2c_notice_start_game::InitAsDefaultInstance() {
}

packetl2c_notice_start_game::packetl2c_notice_start_game(const packetl2c_notice_start_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_notice_start_game)
}

void packetl2c_notice_start_game::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15101;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_start_game::~packetl2c_notice_start_game() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_notice_start_game)
  SharedDtor();
}

void packetl2c_notice_start_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_start_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_start_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_start_game_descriptor_;
}

const packetl2c_notice_start_game& packetl2c_notice_start_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_start_game* packetl2c_notice_start_game::default_instance_ = NULL;

packetl2c_notice_start_game* packetl2c_notice_start_game::New() const {
  return new packetl2c_notice_start_game;
}

void packetl2c_notice_start_game::Clear() {
  packet_id_ = 15101;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_start_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_notice_start_game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_start_game];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_notice_start_game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_notice_start_game)
  return false;
#undef DO_
}

void packetl2c_notice_start_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_notice_start_game)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_start_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_notice_start_game)
}

::google::protobuf::uint8* packetl2c_notice_start_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_notice_start_game)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_start_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_notice_start_game)
  return target;
}

int packetl2c_notice_start_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_start_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_start_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_start_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_start_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_start_game::MergeFrom(const packetl2c_notice_start_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_start_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_start_game::CopyFrom(const packetl2c_notice_start_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_start_game::IsInitialized() const {

  return true;
}

void packetl2c_notice_start_game::Swap(packetl2c_notice_start_game* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_start_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_start_game_descriptor_;
  metadata.reflection = packetl2c_notice_start_game_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_landlord_protocol

// @@protoc_insertion_point(global_scope)
