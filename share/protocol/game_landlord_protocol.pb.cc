// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_landlord_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_landlord_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_landlord_protocol {

namespace {

const ::google::protobuf::Descriptor* packetc2l_enter_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_enter_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_enter_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_enter_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_start_match_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_start_match_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_start_match_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_start_match_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_leave_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_leave_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_leave_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_leave_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_room_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_room_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_room_scene_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_room_scene_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_check_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_check_state_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_check_state_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* card_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  card_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_rob_landlord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_rob_landlord_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_rob_landlord_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_rob_landlord_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_playhand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_playhand_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_playhand_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_playhand_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_startgame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_startgame_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_who_playhand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_who_playhand_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_playhand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_playhand_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_rob_landlord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_rob_landlord_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_rob_landlord_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_rob_landlord_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_winlose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_winlose_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5flandlord_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_landlord_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2l_enter_room_descriptor_ = file->message_type(0);
  static const int packetc2l_enter_room_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, room_id_),
  };
  packetc2l_enter_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_enter_room_descriptor_,
      packetc2l_enter_room::default_instance_,
      packetc2l_enter_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_enter_room));
  packetl2c_enter_room_result_descriptor_ = file->message_type(1);
  static const int packetl2c_enter_room_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, room_id_),
  };
  packetl2c_enter_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_enter_room_result_descriptor_,
      packetl2c_enter_room_result::default_instance_,
      packetl2c_enter_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_enter_room_result));
  packetc2l_start_match_descriptor_ = file->message_type(2);
  static const int packetc2l_start_match_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_start_match, packet_id_),
  };
  packetc2l_start_match_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_start_match_descriptor_,
      packetc2l_start_match::default_instance_,
      packetc2l_start_match_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_start_match, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_start_match, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_start_match));
  packetl2c_start_match_result_descriptor_ = file->message_type(3);
  static const int packetl2c_start_match_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_start_match_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_start_match_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_start_match_result, wait_time_),
  };
  packetl2c_start_match_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_start_match_result_descriptor_,
      packetl2c_start_match_result::default_instance_,
      packetl2c_start_match_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_start_match_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_start_match_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_start_match_result));
  packetc2l_leave_room_descriptor_ = file->message_type(4);
  static const int packetc2l_leave_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, packet_id_),
  };
  packetc2l_leave_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_leave_room_descriptor_,
      packetc2l_leave_room::default_instance_,
      packetc2l_leave_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_leave_room));
  packetl2c_leave_room_result_descriptor_ = file->message_type(5);
  static const int packetl2c_leave_room_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, result_),
  };
  packetl2c_leave_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_leave_room_result_descriptor_,
      packetl2c_leave_room_result::default_instance_,
      packetl2c_leave_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_leave_room_result));
  packetc2l_get_room_scene_info_descriptor_ = file->message_type(6);
  static const int packetc2l_get_room_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, packet_id_),
  };
  packetc2l_get_room_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_room_scene_info_descriptor_,
      packetc2l_get_room_scene_info::default_instance_,
      packetc2l_get_room_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_room_scene_info));
  packetl2c_get_room_scene_info_result_descriptor_ = file->message_type(7);
  static const int packetl2c_get_room_scene_info_result_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, gamestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, opencard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, playerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, landlord_id_),
  };
  packetl2c_get_room_scene_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_room_scene_info_result_descriptor_,
      packetl2c_get_room_scene_info_result::default_instance_,
      packetl2c_get_room_scene_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_room_scene_info_result));
  packetc2l_check_state_descriptor_ = file->message_type(8);
  static const int packetc2l_check_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, packet_id_),
  };
  packetc2l_check_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_descriptor_,
      packetc2l_check_state::default_instance_,
      packetc2l_check_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state));
  packetl2c_check_state_result_descriptor_ = file->message_type(9);
  static const int packetl2c_check_state_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, is_intable_),
  };
  packetl2c_check_state_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_check_state_result_descriptor_,
      packetl2c_check_state_result::default_instance_,
      packetl2c_check_state_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_check_state_result));
  card_Info_descriptor_ = file->message_type(10);
  static const int card_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_Info, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_Info, cards_),
  };
  card_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      card_Info_descriptor_,
      card_Info::default_instance_,
      card_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(card_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(card_Info));
  player_info_descriptor_ = file->message_type(11);
  static const int player_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_head_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_head_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_vip_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, deskid_),
  };
  player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_info_descriptor_,
      player_info::default_instance_,
      player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_info));
  packetc2l_rob_landlord_descriptor_ = file->message_type(12);
  static const int packetc2l_rob_landlord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_rob_landlord, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_rob_landlord, or_rob_),
  };
  packetc2l_rob_landlord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_rob_landlord_descriptor_,
      packetc2l_rob_landlord::default_instance_,
      packetc2l_rob_landlord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_rob_landlord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_rob_landlord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_rob_landlord));
  packetl2c_rob_landlord_result_descriptor_ = file->message_type(13);
  static const int packetl2c_rob_landlord_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_rob_landlord_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_rob_landlord_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_rob_landlord_result, or_rob_),
  };
  packetl2c_rob_landlord_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_rob_landlord_result_descriptor_,
      packetl2c_rob_landlord_result::default_instance_,
      packetl2c_rob_landlord_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_rob_landlord_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_rob_landlord_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_rob_landlord_result));
  packetc2l_playhand_descriptor_ = file->message_type(14);
  static const int packetc2l_playhand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_playhand, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_playhand, cards_),
  };
  packetc2l_playhand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_playhand_descriptor_,
      packetc2l_playhand::default_instance_,
      packetc2l_playhand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_playhand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_playhand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_playhand));
  packetl2c_playhand_result_descriptor_ = file->message_type(15);
  static const int packetl2c_playhand_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_playhand_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_playhand_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_playhand_result, cards_),
  };
  packetl2c_playhand_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_playhand_result_descriptor_,
      packetl2c_playhand_result::default_instance_,
      packetl2c_playhand_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_playhand_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_playhand_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_playhand_result));
  packetl2c_notice_startgame_descriptor_ = file->message_type(16);
  static const int packetl2c_notice_startgame_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_startgame, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_startgame, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_startgame, opencard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_startgame, cards_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_startgame, playerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_startgame, landlord_id_),
  };
  packetl2c_notice_startgame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_startgame_descriptor_,
      packetl2c_notice_startgame::default_instance_,
      packetl2c_notice_startgame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_startgame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_startgame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_startgame));
  packetl2c_notice_who_playhand_descriptor_ = file->message_type(17);
  static const int packetl2c_notice_who_playhand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_who_playhand, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_who_playhand, deskid_),
  };
  packetl2c_notice_who_playhand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_who_playhand_descriptor_,
      packetl2c_notice_who_playhand::default_instance_,
      packetl2c_notice_who_playhand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_who_playhand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_who_playhand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_who_playhand));
  packetl2c_notice_playhand_descriptor_ = file->message_type(18);
  static const int packetl2c_notice_playhand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_playhand, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_playhand, cards_),
  };
  packetl2c_notice_playhand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_playhand_descriptor_,
      packetl2c_notice_playhand::default_instance_,
      packetl2c_notice_playhand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_playhand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_playhand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_playhand));
  packetl2c_notice_rob_landlord_descriptor_ = file->message_type(19);
  static const int packetl2c_notice_rob_landlord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_rob_landlord, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_rob_landlord, deskid_),
  };
  packetl2c_notice_rob_landlord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_rob_landlord_descriptor_,
      packetl2c_notice_rob_landlord::default_instance_,
      packetl2c_notice_rob_landlord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_rob_landlord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_rob_landlord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_rob_landlord));
  packetl2c_notice_rob_landlord_result_descriptor_ = file->message_type(20);
  static const int packetl2c_notice_rob_landlord_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_rob_landlord_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_rob_landlord_result, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_rob_landlord_result, or_rob_),
  };
  packetl2c_notice_rob_landlord_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_rob_landlord_result_descriptor_,
      packetl2c_notice_rob_landlord_result::default_instance_,
      packetl2c_notice_rob_landlord_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_rob_landlord_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_rob_landlord_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_rob_landlord_result));
  packetl2c_notice_winlose_descriptor_ = file->message_type(21);
  static const int packetl2c_notice_winlose_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_winlose, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_winlose, win_deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_winlose, win_gold_),
  };
  packetl2c_notice_winlose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_winlose_descriptor_,
      packetl2c_notice_winlose::default_instance_,
      packetl2c_notice_winlose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_winlose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_winlose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_winlose));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5flandlord_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_enter_room_descriptor_, &packetc2l_enter_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_enter_room_result_descriptor_, &packetl2c_enter_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_start_match_descriptor_, &packetc2l_start_match::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_start_match_result_descriptor_, &packetl2c_start_match_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_leave_room_descriptor_, &packetc2l_leave_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_leave_room_result_descriptor_, &packetl2c_leave_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_room_scene_info_descriptor_, &packetc2l_get_room_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_room_scene_info_result_descriptor_, &packetl2c_get_room_scene_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_descriptor_, &packetc2l_check_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_check_state_result_descriptor_, &packetl2c_check_state_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    card_Info_descriptor_, &card_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_info_descriptor_, &player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_rob_landlord_descriptor_, &packetc2l_rob_landlord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_rob_landlord_result_descriptor_, &packetl2c_rob_landlord_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_playhand_descriptor_, &packetc2l_playhand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_playhand_result_descriptor_, &packetl2c_playhand_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_startgame_descriptor_, &packetl2c_notice_startgame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_who_playhand_descriptor_, &packetl2c_notice_who_playhand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_playhand_descriptor_, &packetl2c_notice_playhand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_rob_landlord_descriptor_, &packetl2c_notice_rob_landlord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_rob_landlord_result_descriptor_, &packetl2c_notice_rob_landlord_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_winlose_descriptor_, &packetl2c_notice_winlose::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5flandlord_5fprotocol_2eproto() {
  delete packetc2l_enter_room::default_instance_;
  delete packetc2l_enter_room_reflection_;
  delete packetl2c_enter_room_result::default_instance_;
  delete packetl2c_enter_room_result_reflection_;
  delete packetc2l_start_match::default_instance_;
  delete packetc2l_start_match_reflection_;
  delete packetl2c_start_match_result::default_instance_;
  delete packetl2c_start_match_result_reflection_;
  delete packetc2l_leave_room::default_instance_;
  delete packetc2l_leave_room_reflection_;
  delete packetl2c_leave_room_result::default_instance_;
  delete packetl2c_leave_room_result_reflection_;
  delete packetc2l_get_room_scene_info::default_instance_;
  delete packetc2l_get_room_scene_info_reflection_;
  delete packetl2c_get_room_scene_info_result::default_instance_;
  delete packetl2c_get_room_scene_info_result_reflection_;
  delete packetc2l_check_state::default_instance_;
  delete packetc2l_check_state_reflection_;
  delete packetl2c_check_state_result::default_instance_;
  delete packetl2c_check_state_result_reflection_;
  delete card_Info::default_instance_;
  delete card_Info_reflection_;
  delete player_info::default_instance_;
  delete player_info_reflection_;
  delete packetc2l_rob_landlord::default_instance_;
  delete packetc2l_rob_landlord_reflection_;
  delete packetl2c_rob_landlord_result::default_instance_;
  delete packetl2c_rob_landlord_result_reflection_;
  delete packetc2l_playhand::default_instance_;
  delete packetc2l_playhand_reflection_;
  delete packetl2c_playhand_result::default_instance_;
  delete packetl2c_playhand_result_reflection_;
  delete packetl2c_notice_startgame::default_instance_;
  delete packetl2c_notice_startgame_reflection_;
  delete packetl2c_notice_who_playhand::default_instance_;
  delete packetl2c_notice_who_playhand_reflection_;
  delete packetl2c_notice_playhand::default_instance_;
  delete packetl2c_notice_playhand_reflection_;
  delete packetl2c_notice_rob_landlord::default_instance_;
  delete packetl2c_notice_rob_landlord_reflection_;
  delete packetl2c_notice_rob_landlord_result::default_instance_;
  delete packetl2c_notice_rob_landlord_result_reflection_;
  delete packetl2c_notice_winlose::default_instance_;
  delete packetl2c_notice_winlose_reflection_;
}

void protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game_landlord_protocol::protobuf_AddDesc_game_5flandlord_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034game_landlord_protocol.proto\022\026game_lan"
    "dlord_protocol\032\027game_landlord_def.proto\032"
    "\022msg_type_def.proto\"{\n\024packetc2l_enter_r"
    "oom\022R\n\tpacket_id\030\001 \001(\0162).game_landlord_p"
    "rotocol.e_server_msg_type:\024e_mst_c2l_ent"
    "er_room\022\017\n\007room_id\030\002 \001(\005\"\277\001\n\033packetl2c_e"
    "nter_room_result\022R\n\tpacket_id\030\001 \001(\0162).ga"
    "me_landlord_protocol.e_server_msg_type:\024"
    "e_mst_l2c_enter_room\022;\n\006result\030\002 \001(\0162+.g"
    "ame_landlord_protocol.e_server_error_cod"
    "e\022\017\n\007room_id\030\003 \001(\005\"l\n\025packetc2l_start_ma"
    "tch\022S\n\tpacket_id\030\001 \001(\0162).game_landlord_p"
    "rotocol.e_server_msg_type:\025e_mst_c2l_sta"
    "rt_match\"\312\001\n\034packetl2c_start_match_resul"
    "t\022Z\n\tpacket_id\030\001 \001(\0162).game_landlord_pro"
    "tocol.e_server_msg_type:\034e_mst_l2c_start"
    "_match_result\022;\n\006result\030\002 \001(\0162+.game_lan"
    "dlord_protocol.e_server_error_code\022\021\n\twa"
    "it_time\030\003 \001(\005\"j\n\024packetc2l_leave_room\022R\n"
    "\tpacket_id\030\001 \001(\0162).game_landlord_protoco"
    "l.e_server_msg_type:\024e_mst_c2l_leave_roo"
    "m\"\256\001\n\033packetl2c_leave_room_result\022R\n\tpac"
    "ket_id\030\001 \001(\0162).game_landlord_protocol.e_"
    "server_msg_type:\024e_mst_l2c_leave_room\022;\n"
    "\006result\030\002 \001(\0162+.game_landlord_protocol.e"
    "_server_error_code\"|\n\035packetc2l_get_room"
    "_scene_info\022[\n\tpacket_id\030\001 \001(\0162).game_la"
    "ndlord_protocol.e_server_msg_type:\035e_mst"
    "_c2l_get_room_scene_info\"\337\002\n$packetl2c_g"
    "et_room_scene_info_result\022[\n\tpacket_id\030\001"
    " \001(\0162).game_landlord_protocol.e_server_m"
    "sg_type:\035e_mst_l2c_get_room_scene_info\022\017"
    "\n\007room_id\030\002 \001(\005\0227\n\tgameState\030\003 \001(\0162$.gam"
    "e_landlord_protocol.e_game_state\0220\n\005card"
    "s\030\004 \003(\0132!.game_landlord_protocol.card_In"
    "fo\022\020\n\010opencard\030\005 \001(\005\0227\n\nplayerList\030\006 \003(\013"
    "2#.game_landlord_protocol.player_info\022\023\n"
    "\013landlord_Id\030\007 \001(\005\"l\n\025packetc2l_check_st"
    "ate\022S\n\tpacket_id\030\001 \001(\0162).game_landlord_p"
    "rotocol.e_server_msg_type:\025e_mst_c2l_che"
    "ck_state\"\207\001\n\034packetl2c_check_state_resul"
    "t\022S\n\tpacket_id\030\001 \001(\0162).game_landlord_pro"
    "tocol.e_server_msg_type:\025e_mst_l2c_check"
    "_state\022\022\n\nis_intable\030\002 \001(\010\"*\n\tcard_Info\022"
    "\016\n\006deskId\030\001 \001(\005\022\r\n\005cards\030\002 \003(\005\"\300\001\n\013playe"
    "r_info\022\021\n\tplayer_id\030\001 \001(\005\022\027\n\017player_nick"
    "name\030\002 \001(\t\022\031\n\021player_head_frame\030\003 \001(\005\022\032\n"
    "\022player_head_custom\030\004 \001(\t\022\023\n\013player_gold"
    "\030\005 \001(\003\022\022\n\nplayer_sex\030\006 \001(\005\022\025\n\rplayer_vip"
    "_lv\030\007 \001(\005\022\016\n\006deskId\030\010 \001(\005\"~\n\026packetc2l_r"
    "ob_landlord\022T\n\tpacket_id\030\001 \001(\0162).game_la"
    "ndlord_protocol.e_server_msg_type:\026e_mst"
    "_c2l_rob_landlord\022\016\n\006or_Rob\030\002 \001(\005\"\311\001\n\035pa"
    "cketl2c_rob_landlord_result\022[\n\tpacket_id"
    "\030\001 \001(\0162).game_landlord_protocol.e_server"
    "_msg_type:\035e_mst_l2c_rob_landlord_result"
    "\022;\n\006result\030\002 \001(\0162+.game_landlord_protoco"
    "l.e_server_error_code\022\016\n\006or_Rob\030\003 \001(\005\"\230\001"
    "\n\022packetc2l_playhand\022P\n\tpacket_id\030\001 \001(\0162"
    ").game_landlord_protocol.e_server_msg_ty"
    "pe:\022e_mst_c2l_playhand\0220\n\005cards\030\002 \001(\0132!."
    "game_landlord_protocol.card_Info\"\334\001\n\031pac"
    "ketl2c_playhand_result\022P\n\tpacket_id\030\001 \001("
    "\0162).game_landlord_protocol.e_server_msg_"
    "type:\022e_mst_l2c_playhand\022;\n\006result\030\002 \001(\016"
    "2+.game_landlord_protocol.e_server_error"
    "_code\0220\n\005cards\030\003 \001(\0132!.game_landlord_pro"
    "tocol.card_Info\"\366\001\n\032packetl2c_notice_sta"
    "rtgame\022X\n\tpacket_id\030\001 \001(\0162).game_landlor"
    "d_protocol.e_server_msg_type:\032e_mst_l2c_"
    "notice_startgame\022\r\n\005cards\030\002 \003(\005\022\020\n\010openc"
    "ard\030\003 \001(\005\022\017\n\007cards_1\030\004 \003(\005\0227\n\nplayerList"
    "\030\005 \003(\0132#.game_landlord_protocol.player_i"
    "nfo\022\023\n\013landlord_Id\030\006 \001(\005\"\214\001\n\035packetl2c_n"
    "otice_who_playhand\022[\n\tpacket_id\030\001 \001(\0162)."
    "game_landlord_protocol.e_server_msg_type"
    ":\035e_mst_l2c_notice_who_playhand\022\016\n\006deskI"
    "d\030\002 \001(\005\"\246\001\n\031packetl2c_notice_playhand\022W\n"
    "\tpacket_id\030\001 \001(\0162).game_landlord_protoco"
    "l.e_server_msg_type:\031e_mst_l2c_notice_pl"
    "ayhand\0220\n\005cards\030\002 \001(\0132!.game_landlord_pr"
    "otocol.card_Info\"\214\001\n\035packetl2c_notice_ro"
    "b_landlord\022[\n\tpacket_id\030\001 \001(\0162).game_lan"
    "dlord_protocol.e_server_msg_type:\035e_mst_"
    "l2c_notice_rob_landlord\022\016\n\006deskId\030\002 \001(\005\""
    "\252\001\n$packetl2c_notice_rob_landlord_result"
    "\022b\n\tpacket_id\030\001 \001(\0162).game_landlord_prot"
    "ocol.e_server_msg_type:$e_mst_l2c_notice"
    "_rob_landlord_result\022\016\n\006deskId\030\002 \001(\005\022\016\n\006"
    "or_Rob\030\003 \001(\005\"\230\001\n\030packetl2c_notice_winlos"
    "e\022V\n\tpacket_id\030\001 \001(\0162).game_landlord_pro"
    "tocol.e_server_msg_type:\030e_mst_l2c_notic"
    "e_winlose\022\022\n\nwin_deskId\030\002 \001(\005\022\020\n\010win_gol"
    "d\030\003 \001(\005", 3727);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_landlord_protocol.proto", &protobuf_RegisterTypes);
  packetc2l_enter_room::default_instance_ = new packetc2l_enter_room();
  packetl2c_enter_room_result::default_instance_ = new packetl2c_enter_room_result();
  packetc2l_start_match::default_instance_ = new packetc2l_start_match();
  packetl2c_start_match_result::default_instance_ = new packetl2c_start_match_result();
  packetc2l_leave_room::default_instance_ = new packetc2l_leave_room();
  packetl2c_leave_room_result::default_instance_ = new packetl2c_leave_room_result();
  packetc2l_get_room_scene_info::default_instance_ = new packetc2l_get_room_scene_info();
  packetl2c_get_room_scene_info_result::default_instance_ = new packetl2c_get_room_scene_info_result();
  packetc2l_check_state::default_instance_ = new packetc2l_check_state();
  packetl2c_check_state_result::default_instance_ = new packetl2c_check_state_result();
  card_Info::default_instance_ = new card_Info();
  player_info::default_instance_ = new player_info();
  packetc2l_rob_landlord::default_instance_ = new packetc2l_rob_landlord();
  packetl2c_rob_landlord_result::default_instance_ = new packetl2c_rob_landlord_result();
  packetc2l_playhand::default_instance_ = new packetc2l_playhand();
  packetl2c_playhand_result::default_instance_ = new packetl2c_playhand_result();
  packetl2c_notice_startgame::default_instance_ = new packetl2c_notice_startgame();
  packetl2c_notice_who_playhand::default_instance_ = new packetl2c_notice_who_playhand();
  packetl2c_notice_playhand::default_instance_ = new packetl2c_notice_playhand();
  packetl2c_notice_rob_landlord::default_instance_ = new packetl2c_notice_rob_landlord();
  packetl2c_notice_rob_landlord_result::default_instance_ = new packetl2c_notice_rob_landlord_result();
  packetl2c_notice_winlose::default_instance_ = new packetl2c_notice_winlose();
  packetc2l_enter_room::default_instance_->InitAsDefaultInstance();
  packetl2c_enter_room_result::default_instance_->InitAsDefaultInstance();
  packetc2l_start_match::default_instance_->InitAsDefaultInstance();
  packetl2c_start_match_result::default_instance_->InitAsDefaultInstance();
  packetc2l_leave_room::default_instance_->InitAsDefaultInstance();
  packetl2c_leave_room_result::default_instance_->InitAsDefaultInstance();
  packetc2l_get_room_scene_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_room_scene_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_check_state::default_instance_->InitAsDefaultInstance();
  packetl2c_check_state_result::default_instance_->InitAsDefaultInstance();
  card_Info::default_instance_->InitAsDefaultInstance();
  player_info::default_instance_->InitAsDefaultInstance();
  packetc2l_rob_landlord::default_instance_->InitAsDefaultInstance();
  packetl2c_rob_landlord_result::default_instance_->InitAsDefaultInstance();
  packetc2l_playhand::default_instance_->InitAsDefaultInstance();
  packetl2c_playhand_result::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_startgame::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_who_playhand::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_playhand::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_rob_landlord::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_rob_landlord_result::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_winlose::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5flandlord_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5flandlord_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5flandlord_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5flandlord_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2l_enter_room::kPacketIdFieldNumber;
const int packetc2l_enter_room::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_enter_room::packetc2l_enter_room()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetc2l_enter_room)
}

void packetc2l_enter_room::InitAsDefaultInstance() {
}

packetc2l_enter_room::packetc2l_enter_room(const packetc2l_enter_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetc2l_enter_room)
}

void packetc2l_enter_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10001;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_enter_room::~packetc2l_enter_room() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetc2l_enter_room)
  SharedDtor();
}

void packetc2l_enter_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_enter_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_enter_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_enter_room_descriptor_;
}

const packetc2l_enter_room& packetc2l_enter_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_enter_room* packetc2l_enter_room::default_instance_ = NULL;

packetc2l_enter_room* packetc2l_enter_room::New() const {
  return new packetc2l_enter_room;
}

void packetc2l_enter_room::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 10001;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_enter_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetc2l_enter_room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (tag == 16) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetc2l_enter_room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetc2l_enter_room)
  return false;
#undef DO_
}

void packetc2l_enter_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetc2l_enter_room)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetc2l_enter_room)
}

::google::protobuf::uint8* packetc2l_enter_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetc2l_enter_room)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetc2l_enter_room)
  return target;
}

int packetc2l_enter_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_enter_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_enter_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_enter_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_enter_room::MergeFrom(const packetc2l_enter_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_enter_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_enter_room::CopyFrom(const packetc2l_enter_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_enter_room::IsInitialized() const {

  return true;
}

void packetc2l_enter_room::Swap(packetc2l_enter_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_enter_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_enter_room_descriptor_;
  metadata.reflection = packetc2l_enter_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_enter_room_result::kPacketIdFieldNumber;
const int packetl2c_enter_room_result::kResultFieldNumber;
const int packetl2c_enter_room_result::kRoomIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_enter_room_result::packetl2c_enter_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_enter_room_result)
}

void packetl2c_enter_room_result::InitAsDefaultInstance() {
}

packetl2c_enter_room_result::packetl2c_enter_room_result(const packetl2c_enter_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_enter_room_result)
}

void packetl2c_enter_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15001;
  result_ = 1;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_enter_room_result::~packetl2c_enter_room_result() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_enter_room_result)
  SharedDtor();
}

void packetl2c_enter_room_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_enter_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_enter_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_enter_room_result_descriptor_;
}

const packetl2c_enter_room_result& packetl2c_enter_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_enter_room_result* packetl2c_enter_room_result::default_instance_ = NULL;

packetl2c_enter_room_result* packetl2c_enter_room_result::New() const {
  return new packetl2c_enter_room_result;
}

void packetl2c_enter_room_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 15001;
    result_ = 1;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_enter_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_enter_room_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .game_landlord_protocol.e_server_error_code result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_error_code_IsValid(value)) {
            set_result(static_cast< ::game_landlord_protocol::e_server_error_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (tag == 24) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_enter_room_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_enter_room_result)
  return false;
#undef DO_
}

void packetl2c_enter_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_enter_room_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_landlord_protocol.e_server_error_code result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_enter_room_result)
}

::google::protobuf::uint8* packetl2c_enter_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_enter_room_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_landlord_protocol.e_server_error_code result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_enter_room_result)
  return target;
}

int packetl2c_enter_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_landlord_protocol.e_server_error_code result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_enter_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_enter_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_enter_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_enter_room_result::MergeFrom(const packetl2c_enter_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_enter_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_enter_room_result::CopyFrom(const packetl2c_enter_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_enter_room_result::IsInitialized() const {

  return true;
}

void packetl2c_enter_room_result::Swap(packetl2c_enter_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_enter_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_enter_room_result_descriptor_;
  metadata.reflection = packetl2c_enter_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_start_match::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_start_match::packetc2l_start_match()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetc2l_start_match)
}

void packetc2l_start_match::InitAsDefaultInstance() {
}

packetc2l_start_match::packetc2l_start_match(const packetc2l_start_match& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetc2l_start_match)
}

void packetc2l_start_match::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10007;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_start_match::~packetc2l_start_match() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetc2l_start_match)
  SharedDtor();
}

void packetc2l_start_match::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_start_match::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_start_match::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_start_match_descriptor_;
}

const packetc2l_start_match& packetc2l_start_match::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_start_match* packetc2l_start_match::default_instance_ = NULL;

packetc2l_start_match* packetc2l_start_match::New() const {
  return new packetc2l_start_match;
}

void packetc2l_start_match::Clear() {
  packet_id_ = 10007;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_start_match::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetc2l_start_match)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_start_match];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetc2l_start_match)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetc2l_start_match)
  return false;
#undef DO_
}

void packetc2l_start_match::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetc2l_start_match)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_start_match];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetc2l_start_match)
}

::google::protobuf::uint8* packetc2l_start_match::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetc2l_start_match)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_start_match];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetc2l_start_match)
  return target;
}

int packetc2l_start_match::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_start_match];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_start_match::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_start_match* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_start_match*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_start_match::MergeFrom(const packetc2l_start_match& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_start_match::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_start_match::CopyFrom(const packetc2l_start_match& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_start_match::IsInitialized() const {

  return true;
}

void packetc2l_start_match::Swap(packetc2l_start_match* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_start_match::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_start_match_descriptor_;
  metadata.reflection = packetc2l_start_match_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_start_match_result::kPacketIdFieldNumber;
const int packetl2c_start_match_result::kResultFieldNumber;
const int packetl2c_start_match_result::kWaitTimeFieldNumber;
#endif  // !_MSC_VER

packetl2c_start_match_result::packetl2c_start_match_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_start_match_result)
}

void packetl2c_start_match_result::InitAsDefaultInstance() {
}

packetl2c_start_match_result::packetl2c_start_match_result(const packetl2c_start_match_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_start_match_result)
}

void packetl2c_start_match_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15006;
  result_ = 1;
  wait_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_start_match_result::~packetl2c_start_match_result() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_start_match_result)
  SharedDtor();
}

void packetl2c_start_match_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_start_match_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_start_match_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_start_match_result_descriptor_;
}

const packetl2c_start_match_result& packetl2c_start_match_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_start_match_result* packetl2c_start_match_result::default_instance_ = NULL;

packetl2c_start_match_result* packetl2c_start_match_result::New() const {
  return new packetl2c_start_match_result;
}

void packetl2c_start_match_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 15006;
    result_ = 1;
    wait_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_start_match_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_start_match_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_start_match_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .game_landlord_protocol.e_server_error_code result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_error_code_IsValid(value)) {
            set_result(static_cast< ::game_landlord_protocol::e_server_error_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wait_time;
        break;
      }

      // optional int32 wait_time = 3;
      case 3: {
        if (tag == 24) {
         parse_wait_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_time_)));
          set_has_wait_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_start_match_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_start_match_result)
  return false;
#undef DO_
}

void packetl2c_start_match_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_start_match_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_start_match_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_landlord_protocol.e_server_error_code result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 wait_time = 3;
  if (has_wait_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wait_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_start_match_result)
}

::google::protobuf::uint8* packetl2c_start_match_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_start_match_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_start_match_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_landlord_protocol.e_server_error_code result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 wait_time = 3;
  if (has_wait_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wait_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_start_match_result)
  return target;
}

int packetl2c_start_match_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_start_match_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_landlord_protocol.e_server_error_code result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 wait_time = 3;
    if (has_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_start_match_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_start_match_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_start_match_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_start_match_result::MergeFrom(const packetl2c_start_match_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_wait_time()) {
      set_wait_time(from.wait_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_start_match_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_start_match_result::CopyFrom(const packetl2c_start_match_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_start_match_result::IsInitialized() const {

  return true;
}

void packetl2c_start_match_result::Swap(packetl2c_start_match_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(wait_time_, other->wait_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_start_match_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_start_match_result_descriptor_;
  metadata.reflection = packetl2c_start_match_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_leave_room::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_leave_room::packetc2l_leave_room()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetc2l_leave_room)
}

void packetc2l_leave_room::InitAsDefaultInstance() {
}

packetc2l_leave_room::packetc2l_leave_room(const packetc2l_leave_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetc2l_leave_room)
}

void packetc2l_leave_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10004;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_leave_room::~packetc2l_leave_room() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetc2l_leave_room)
  SharedDtor();
}

void packetc2l_leave_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_leave_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_leave_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_leave_room_descriptor_;
}

const packetc2l_leave_room& packetc2l_leave_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_leave_room* packetc2l_leave_room::default_instance_ = NULL;

packetc2l_leave_room* packetc2l_leave_room::New() const {
  return new packetc2l_leave_room;
}

void packetc2l_leave_room::Clear() {
  packet_id_ = 10004;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_leave_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetc2l_leave_room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetc2l_leave_room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetc2l_leave_room)
  return false;
#undef DO_
}

void packetc2l_leave_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetc2l_leave_room)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetc2l_leave_room)
}

::google::protobuf::uint8* packetc2l_leave_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetc2l_leave_room)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetc2l_leave_room)
  return target;
}

int packetc2l_leave_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_leave_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_leave_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_leave_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_leave_room::MergeFrom(const packetc2l_leave_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_leave_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_leave_room::CopyFrom(const packetc2l_leave_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_leave_room::IsInitialized() const {

  return true;
}

void packetc2l_leave_room::Swap(packetc2l_leave_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_leave_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_leave_room_descriptor_;
  metadata.reflection = packetc2l_leave_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_leave_room_result::kPacketIdFieldNumber;
const int packetl2c_leave_room_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_leave_room_result::packetl2c_leave_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_leave_room_result)
}

void packetl2c_leave_room_result::InitAsDefaultInstance() {
}

packetl2c_leave_room_result::packetl2c_leave_room_result(const packetl2c_leave_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_leave_room_result)
}

void packetl2c_leave_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15004;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_leave_room_result::~packetl2c_leave_room_result() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_leave_room_result)
  SharedDtor();
}

void packetl2c_leave_room_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_leave_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_leave_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_leave_room_result_descriptor_;
}

const packetl2c_leave_room_result& packetl2c_leave_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_leave_room_result* packetl2c_leave_room_result::default_instance_ = NULL;

packetl2c_leave_room_result* packetl2c_leave_room_result::New() const {
  return new packetl2c_leave_room_result;
}

void packetl2c_leave_room_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 15004;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_leave_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_leave_room_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .game_landlord_protocol.e_server_error_code result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_error_code_IsValid(value)) {
            set_result(static_cast< ::game_landlord_protocol::e_server_error_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_leave_room_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_leave_room_result)
  return false;
#undef DO_
}

void packetl2c_leave_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_leave_room_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_landlord_protocol.e_server_error_code result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_leave_room_result)
}

::google::protobuf::uint8* packetl2c_leave_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_leave_room_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_landlord_protocol.e_server_error_code result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_leave_room_result)
  return target;
}

int packetl2c_leave_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_landlord_protocol.e_server_error_code result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_leave_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_leave_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_leave_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_leave_room_result::MergeFrom(const packetl2c_leave_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_leave_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_leave_room_result::CopyFrom(const packetl2c_leave_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_leave_room_result::IsInitialized() const {

  return true;
}

void packetl2c_leave_room_result::Swap(packetl2c_leave_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_leave_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_leave_room_result_descriptor_;
  metadata.reflection = packetl2c_leave_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_room_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_room_scene_info::packetc2l_get_room_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetc2l_get_room_scene_info)
}

void packetc2l_get_room_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_room_scene_info::packetc2l_get_room_scene_info(const packetc2l_get_room_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetc2l_get_room_scene_info)
}

void packetc2l_get_room_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10002;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_room_scene_info::~packetc2l_get_room_scene_info() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetc2l_get_room_scene_info)
  SharedDtor();
}

void packetc2l_get_room_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_room_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_room_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_room_scene_info_descriptor_;
}

const packetc2l_get_room_scene_info& packetc2l_get_room_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_room_scene_info* packetc2l_get_room_scene_info::default_instance_ = NULL;

packetc2l_get_room_scene_info* packetc2l_get_room_scene_info::New() const {
  return new packetc2l_get_room_scene_info;
}

void packetc2l_get_room_scene_info::Clear() {
  packet_id_ = 10002;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_room_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetc2l_get_room_scene_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetc2l_get_room_scene_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetc2l_get_room_scene_info)
  return false;
#undef DO_
}

void packetc2l_get_room_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetc2l_get_room_scene_info)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetc2l_get_room_scene_info)
}

::google::protobuf::uint8* packetc2l_get_room_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetc2l_get_room_scene_info)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetc2l_get_room_scene_info)
  return target;
}

int packetc2l_get_room_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_room_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_room_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_room_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_room_scene_info::MergeFrom(const packetc2l_get_room_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_room_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_room_scene_info::CopyFrom(const packetc2l_get_room_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_room_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_room_scene_info::Swap(packetc2l_get_room_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_room_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_room_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_room_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_room_scene_info_result::kPacketIdFieldNumber;
const int packetl2c_get_room_scene_info_result::kRoomIdFieldNumber;
const int packetl2c_get_room_scene_info_result::kGameStateFieldNumber;
const int packetl2c_get_room_scene_info_result::kCardsFieldNumber;
const int packetl2c_get_room_scene_info_result::kOpencardFieldNumber;
const int packetl2c_get_room_scene_info_result::kPlayerListFieldNumber;
const int packetl2c_get_room_scene_info_result::kLandlordIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_room_scene_info_result::packetl2c_get_room_scene_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_get_room_scene_info_result)
}

void packetl2c_get_room_scene_info_result::InitAsDefaultInstance() {
}

packetl2c_get_room_scene_info_result::packetl2c_get_room_scene_info_result(const packetl2c_get_room_scene_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_get_room_scene_info_result)
}

void packetl2c_get_room_scene_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15002;
  room_id_ = 0;
  gamestate_ = 0;
  opencard_ = 0;
  landlord_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_room_scene_info_result::~packetl2c_get_room_scene_info_result() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_get_room_scene_info_result)
  SharedDtor();
}

void packetl2c_get_room_scene_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_get_room_scene_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_room_scene_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_room_scene_info_result_descriptor_;
}

const packetl2c_get_room_scene_info_result& packetl2c_get_room_scene_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_room_scene_info_result* packetl2c_get_room_scene_info_result::default_instance_ = NULL;

packetl2c_get_room_scene_info_result* packetl2c_get_room_scene_info_result::New() const {
  return new packetl2c_get_room_scene_info_result;
}

void packetl2c_get_room_scene_info_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetl2c_get_room_scene_info_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 87) {
    ZR_(gamestate_, opencard_);
    packet_id_ = 15002;
    room_id_ = 0;
    landlord_id_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cards_.Clear();
  playerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_room_scene_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_get_room_scene_info_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (tag == 16) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gameState;
        break;
      }

      // optional .game_landlord_protocol.e_game_state gameState = 3;
      case 3: {
        if (tag == 24) {
         parse_gameState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_game_state_IsValid(value)) {
            set_gamestate(static_cast< ::game_landlord_protocol::e_game_state >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cards;
        break;
      }

      // repeated .game_landlord_protocol.card_Info cards = 4;
      case 4: {
        if (tag == 34) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cards;
        if (input->ExpectTag(40)) goto parse_opencard;
        break;
      }

      // optional int32 opencard = 5;
      case 5: {
        if (tag == 40) {
         parse_opencard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opencard_)));
          set_has_opencard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_playerList;
        break;
      }

      // repeated .game_landlord_protocol.player_info playerList = 6;
      case 6: {
        if (tag == 50) {
         parse_playerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_playerList;
        if (input->ExpectTag(56)) goto parse_landlord_Id;
        break;
      }

      // optional int32 landlord_Id = 7;
      case 7: {
        if (tag == 56) {
         parse_landlord_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &landlord_id_)));
          set_has_landlord_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_get_room_scene_info_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_get_room_scene_info_result)
  return false;
#undef DO_
}

void packetl2c_get_room_scene_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_get_room_scene_info_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // optional .game_landlord_protocol.e_game_state gameState = 3;
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gamestate(), output);
  }

  // repeated .game_landlord_protocol.card_Info cards = 4;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cards(i), output);
  }

  // optional int32 opencard = 5;
  if (has_opencard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->opencard(), output);
  }

  // repeated .game_landlord_protocol.player_info playerList = 6;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->playerlist(i), output);
  }

  // optional int32 landlord_Id = 7;
  if (has_landlord_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->landlord_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_get_room_scene_info_result)
}

::google::protobuf::uint8* packetl2c_get_room_scene_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_get_room_scene_info_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // optional .game_landlord_protocol.e_game_state gameState = 3;
  if (has_gamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gamestate(), target);
  }

  // repeated .game_landlord_protocol.card_Info cards = 4;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cards(i), target);
  }

  // optional int32 opencard = 5;
  if (has_opencard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->opencard(), target);
  }

  // repeated .game_landlord_protocol.player_info playerList = 6;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->playerlist(i), target);
  }

  // optional int32 landlord_Id = 7;
  if (has_landlord_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->landlord_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_get_room_scene_info_result)
  return target;
}

int packetl2c_get_room_scene_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional .game_landlord_protocol.e_game_state gameState = 3;
    if (has_gamestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
    }

    // optional int32 opencard = 5;
    if (has_opencard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opencard());
    }

    // optional int32 landlord_Id = 7;
    if (has_landlord_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landlord_id());
    }

  }
  // repeated .game_landlord_protocol.card_Info cards = 4;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  // repeated .game_landlord_protocol.player_info playerList = 6;
  total_size += 1 * this->playerlist_size();
  for (int i = 0; i < this->playerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_room_scene_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_room_scene_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_room_scene_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_room_scene_info_result::MergeFrom(const packetl2c_get_room_scene_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  playerlist_.MergeFrom(from.playerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
    if (from.has_opencard()) {
      set_opencard(from.opencard());
    }
    if (from.has_landlord_id()) {
      set_landlord_id(from.landlord_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_room_scene_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_room_scene_info_result::CopyFrom(const packetl2c_get_room_scene_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_room_scene_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_room_scene_info_result::Swap(packetl2c_get_room_scene_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(gamestate_, other->gamestate_);
    cards_.Swap(&other->cards_);
    std::swap(opencard_, other->opencard_);
    playerlist_.Swap(&other->playerlist_);
    std::swap(landlord_id_, other->landlord_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_room_scene_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_room_scene_info_result_descriptor_;
  metadata.reflection = packetl2c_get_room_scene_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state::packetc2l_check_state()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetc2l_check_state)
}

void packetc2l_check_state::InitAsDefaultInstance() {
}

packetc2l_check_state::packetc2l_check_state(const packetc2l_check_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetc2l_check_state)
}

void packetc2l_check_state::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state::~packetc2l_check_state() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetc2l_check_state)
  SharedDtor();
}

void packetc2l_check_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_descriptor_;
}

const packetc2l_check_state& packetc2l_check_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state* packetc2l_check_state::default_instance_ = NULL;

packetc2l_check_state* packetc2l_check_state::New() const {
  return new packetc2l_check_state;
}

void packetc2l_check_state::Clear() {
  packet_id_ = 10003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetc2l_check_state)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetc2l_check_state)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetc2l_check_state)
  return false;
#undef DO_
}

void packetc2l_check_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetc2l_check_state)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetc2l_check_state)
}

::google::protobuf::uint8* packetc2l_check_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetc2l_check_state)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetc2l_check_state)
  return target;
}

int packetc2l_check_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state::MergeFrom(const packetc2l_check_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state::CopyFrom(const packetc2l_check_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state::IsInitialized() const {

  return true;
}

void packetc2l_check_state::Swap(packetc2l_check_state* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_descriptor_;
  metadata.reflection = packetc2l_check_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_check_state_result::kPacketIdFieldNumber;
const int packetl2c_check_state_result::kIsIntableFieldNumber;
#endif  // !_MSC_VER

packetl2c_check_state_result::packetl2c_check_state_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_check_state_result)
}

void packetl2c_check_state_result::InitAsDefaultInstance() {
}

packetl2c_check_state_result::packetl2c_check_state_result(const packetl2c_check_state_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_check_state_result)
}

void packetl2c_check_state_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15003;
  is_intable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_check_state_result::~packetl2c_check_state_result() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_check_state_result)
  SharedDtor();
}

void packetl2c_check_state_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_check_state_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_check_state_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_check_state_result_descriptor_;
}

const packetl2c_check_state_result& packetl2c_check_state_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_check_state_result* packetl2c_check_state_result::default_instance_ = NULL;

packetl2c_check_state_result* packetl2c_check_state_result::New() const {
  return new packetl2c_check_state_result;
}

void packetl2c_check_state_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 15003;
    is_intable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_check_state_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_check_state_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_intable;
        break;
      }

      // optional bool is_intable = 2;
      case 2: {
        if (tag == 16) {
         parse_is_intable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_intable_)));
          set_has_is_intable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_check_state_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_check_state_result)
  return false;
#undef DO_
}

void packetl2c_check_state_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_check_state_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool is_intable = 2;
  if (has_is_intable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_intable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_check_state_result)
}

::google::protobuf::uint8* packetl2c_check_state_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_check_state_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool is_intable = 2;
  if (has_is_intable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_intable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_check_state_result)
  return target;
}

int packetl2c_check_state_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool is_intable = 2;
    if (has_is_intable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_check_state_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_check_state_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_check_state_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_check_state_result::MergeFrom(const packetl2c_check_state_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_is_intable()) {
      set_is_intable(from.is_intable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_check_state_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_check_state_result::CopyFrom(const packetl2c_check_state_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_check_state_result::IsInitialized() const {

  return true;
}

void packetl2c_check_state_result::Swap(packetl2c_check_state_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(is_intable_, other->is_intable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_check_state_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_check_state_result_descriptor_;
  metadata.reflection = packetl2c_check_state_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int card_Info::kDeskIdFieldNumber;
const int card_Info::kCardsFieldNumber;
#endif  // !_MSC_VER

card_Info::card_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.card_Info)
}

void card_Info::InitAsDefaultInstance() {
}

card_Info::card_Info(const card_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.card_Info)
}

void card_Info::SharedCtor() {
  _cached_size_ = 0;
  deskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

card_Info::~card_Info() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.card_Info)
  SharedDtor();
}

void card_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void card_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* card_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return card_Info_descriptor_;
}

const card_Info& card_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

card_Info* card_Info::default_instance_ = NULL;

card_Info* card_Info::New() const {
  return new card_Info;
}

void card_Info::Clear() {
  deskid_ = 0;
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool card_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.card_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 2;
      case 2: {
        if (tag == 16) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cards())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.card_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.card_Info)
  return false;
#undef DO_
}

void card_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.card_Info)
  // optional int32 deskId = 1;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deskid(), output);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.card_Info)
}

::google::protobuf::uint8* card_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.card_Info)
  // optional int32 deskId = 1;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deskid(), target);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.card_Info)
  return target;
}

int card_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 deskId = 1;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

  }
  // repeated int32 cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void card_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const card_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const card_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void card_Info::MergeFrom(const card_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void card_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void card_Info::CopyFrom(const card_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool card_Info::IsInitialized() const {

  return true;
}

void card_Info::Swap(card_Info* other) {
  if (other != this) {
    std::swap(deskid_, other->deskid_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata card_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = card_Info_descriptor_;
  metadata.reflection = card_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_info::kPlayerIdFieldNumber;
const int player_info::kPlayerNicknameFieldNumber;
const int player_info::kPlayerHeadFrameFieldNumber;
const int player_info::kPlayerHeadCustomFieldNumber;
const int player_info::kPlayerGoldFieldNumber;
const int player_info::kPlayerSexFieldNumber;
const int player_info::kPlayerVipLvFieldNumber;
const int player_info::kDeskIdFieldNumber;
#endif  // !_MSC_VER

player_info::player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.player_info)
}

void player_info::InitAsDefaultInstance() {
}

player_info::player_info(const player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.player_info)
}

void player_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0;
  player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_head_frame_ = 0;
  player_head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_gold_ = GOOGLE_LONGLONG(0);
  player_sex_ = 0;
  player_vip_lv_ = 0;
  deskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_info::~player_info() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.player_info)
  SharedDtor();
}

void player_info::SharedDtor() {
  if (player_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_nickname_;
  }
  if (player_head_custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_head_custom_;
  }
  if (this != default_instance_) {
  }
}

void player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_info_descriptor_;
}

const player_info& player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

player_info* player_info::default_instance_ = NULL;

player_info* player_info::New() const {
  return new player_info;
}

void player_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<player_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(player_id_, player_head_frame_);
    ZR_(player_gold_, deskid_);
    if (has_player_nickname()) {
      if (player_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_nickname_->clear();
      }
    }
    if (has_player_head_custom()) {
      if (player_head_custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_head_custom_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.player_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_nickname;
        break;
      }

      // optional string player_nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_player_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_nickname().data(), this->player_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_head_frame;
        break;
      }

      // optional int32 player_head_frame = 3;
      case 3: {
        if (tag == 24) {
         parse_player_head_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_head_frame_)));
          set_has_player_head_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_head_custom;
        break;
      }

      // optional string player_head_custom = 4;
      case 4: {
        if (tag == 34) {
         parse_player_head_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_head_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_head_custom().data(), this->player_head_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_head_custom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 5;
      case 5: {
        if (tag == 40) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_player_sex;
        break;
      }

      // optional int32 player_sex = 6;
      case 6: {
        if (tag == 48) {
         parse_player_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_sex_)));
          set_has_player_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_player_vip_lv;
        break;
      }

      // optional int32 player_vip_lv = 7;
      case 7: {
        if (tag == 56) {
         parse_player_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_vip_lv_)));
          set_has_player_vip_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_deskId;
        break;
      }

      // optional int32 deskId = 8;
      case 8: {
        if (tag == 64) {
         parse_deskId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.player_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.player_info)
  return false;
#undef DO_
}

void player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.player_info)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string player_nickname = 2;
  if (has_player_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_nickname().data(), this->player_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_nickname(), output);
  }

  // optional int32 player_head_frame = 3;
  if (has_player_head_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_head_frame(), output);
  }

  // optional string player_head_custom = 4;
  if (has_player_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_head_custom().data(), this->player_head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_head_custom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->player_head_custom(), output);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->player_gold(), output);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_sex(), output);
  }

  // optional int32 player_vip_lv = 7;
  if (has_player_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->player_vip_lv(), output);
  }

  // optional int32 deskId = 8;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->deskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.player_info)
}

::google::protobuf::uint8* player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.player_info)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string player_nickname = 2;
  if (has_player_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_nickname().data(), this->player_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_nickname(), target);
  }

  // optional int32 player_head_frame = 3;
  if (has_player_head_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_head_frame(), target);
  }

  // optional string player_head_custom = 4;
  if (has_player_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_head_custom().data(), this->player_head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_head_custom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->player_head_custom(), target);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->player_gold(), target);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_sex(), target);
  }

  // optional int32 player_vip_lv = 7;
  if (has_player_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->player_vip_lv(), target);
  }

  // optional int32 deskId = 8;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->deskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.player_info)
  return target;
}

int player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string player_nickname = 2;
    if (has_player_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_nickname());
    }

    // optional int32 player_head_frame = 3;
    if (has_player_head_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_head_frame());
    }

    // optional string player_head_custom = 4;
    if (has_player_head_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_head_custom());
    }

    // optional int64 player_gold = 5;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional int32 player_sex = 6;
    if (has_player_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_sex());
    }

    // optional int32 player_vip_lv = 7;
    if (has_player_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_vip_lv());
    }

    // optional int32 deskId = 8;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_info::MergeFrom(const player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_nickname()) {
      set_player_nickname(from.player_nickname());
    }
    if (from.has_player_head_frame()) {
      set_player_head_frame(from.player_head_frame());
    }
    if (from.has_player_head_custom()) {
      set_player_head_custom(from.player_head_custom());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_player_sex()) {
      set_player_sex(from.player_sex());
    }
    if (from.has_player_vip_lv()) {
      set_player_vip_lv(from.player_vip_lv());
    }
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_info::CopyFrom(const player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_info::IsInitialized() const {

  return true;
}

void player_info::Swap(player_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_nickname_, other->player_nickname_);
    std::swap(player_head_frame_, other->player_head_frame_);
    std::swap(player_head_custom_, other->player_head_custom_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(player_sex_, other->player_sex_);
    std::swap(player_vip_lv_, other->player_vip_lv_);
    std::swap(deskid_, other->deskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_info_descriptor_;
  metadata.reflection = player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_rob_landlord::kPacketIdFieldNumber;
const int packetc2l_rob_landlord::kOrRobFieldNumber;
#endif  // !_MSC_VER

packetc2l_rob_landlord::packetc2l_rob_landlord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetc2l_rob_landlord)
}

void packetc2l_rob_landlord::InitAsDefaultInstance() {
}

packetc2l_rob_landlord::packetc2l_rob_landlord(const packetc2l_rob_landlord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetc2l_rob_landlord)
}

void packetc2l_rob_landlord::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10005;
  or_rob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_rob_landlord::~packetc2l_rob_landlord() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetc2l_rob_landlord)
  SharedDtor();
}

void packetc2l_rob_landlord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_rob_landlord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_rob_landlord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_rob_landlord_descriptor_;
}

const packetc2l_rob_landlord& packetc2l_rob_landlord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_rob_landlord* packetc2l_rob_landlord::default_instance_ = NULL;

packetc2l_rob_landlord* packetc2l_rob_landlord::New() const {
  return new packetc2l_rob_landlord;
}

void packetc2l_rob_landlord::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 10005;
    or_rob_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_rob_landlord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetc2l_rob_landlord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_rob_landlord];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_or_Rob;
        break;
      }

      // optional int32 or_Rob = 2;
      case 2: {
        if (tag == 16) {
         parse_or_Rob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &or_rob_)));
          set_has_or_rob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetc2l_rob_landlord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetc2l_rob_landlord)
  return false;
#undef DO_
}

void packetc2l_rob_landlord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetc2l_rob_landlord)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_rob_landlord];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 or_Rob = 2;
  if (has_or_rob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->or_rob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetc2l_rob_landlord)
}

::google::protobuf::uint8* packetc2l_rob_landlord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetc2l_rob_landlord)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_rob_landlord];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 or_Rob = 2;
  if (has_or_rob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->or_rob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetc2l_rob_landlord)
  return target;
}

int packetc2l_rob_landlord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_rob_landlord];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 or_Rob = 2;
    if (has_or_rob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->or_rob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_rob_landlord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_rob_landlord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_rob_landlord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_rob_landlord::MergeFrom(const packetc2l_rob_landlord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_or_rob()) {
      set_or_rob(from.or_rob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_rob_landlord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_rob_landlord::CopyFrom(const packetc2l_rob_landlord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_rob_landlord::IsInitialized() const {

  return true;
}

void packetc2l_rob_landlord::Swap(packetc2l_rob_landlord* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(or_rob_, other->or_rob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_rob_landlord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_rob_landlord_descriptor_;
  metadata.reflection = packetc2l_rob_landlord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_rob_landlord_result::kPacketIdFieldNumber;
const int packetl2c_rob_landlord_result::kResultFieldNumber;
const int packetl2c_rob_landlord_result::kOrRobFieldNumber;
#endif  // !_MSC_VER

packetl2c_rob_landlord_result::packetl2c_rob_landlord_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_rob_landlord_result)
}

void packetl2c_rob_landlord_result::InitAsDefaultInstance() {
}

packetl2c_rob_landlord_result::packetl2c_rob_landlord_result(const packetl2c_rob_landlord_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_rob_landlord_result)
}

void packetl2c_rob_landlord_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15007;
  result_ = 1;
  or_rob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_rob_landlord_result::~packetl2c_rob_landlord_result() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_rob_landlord_result)
  SharedDtor();
}

void packetl2c_rob_landlord_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_rob_landlord_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_rob_landlord_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_rob_landlord_result_descriptor_;
}

const packetl2c_rob_landlord_result& packetl2c_rob_landlord_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_rob_landlord_result* packetl2c_rob_landlord_result::default_instance_ = NULL;

packetl2c_rob_landlord_result* packetl2c_rob_landlord_result::New() const {
  return new packetl2c_rob_landlord_result;
}

void packetl2c_rob_landlord_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 15007;
    result_ = 1;
    or_rob_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_rob_landlord_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_rob_landlord_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_rob_landlord_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .game_landlord_protocol.e_server_error_code result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_error_code_IsValid(value)) {
            set_result(static_cast< ::game_landlord_protocol::e_server_error_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_or_Rob;
        break;
      }

      // optional int32 or_Rob = 3;
      case 3: {
        if (tag == 24) {
         parse_or_Rob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &or_rob_)));
          set_has_or_rob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_rob_landlord_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_rob_landlord_result)
  return false;
#undef DO_
}

void packetl2c_rob_landlord_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_rob_landlord_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_rob_landlord_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_landlord_protocol.e_server_error_code result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 or_Rob = 3;
  if (has_or_rob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->or_rob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_rob_landlord_result)
}

::google::protobuf::uint8* packetl2c_rob_landlord_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_rob_landlord_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_rob_landlord_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_landlord_protocol.e_server_error_code result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 or_Rob = 3;
  if (has_or_rob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->or_rob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_rob_landlord_result)
  return target;
}

int packetl2c_rob_landlord_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_rob_landlord_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_landlord_protocol.e_server_error_code result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 or_Rob = 3;
    if (has_or_rob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->or_rob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_rob_landlord_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_rob_landlord_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_rob_landlord_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_rob_landlord_result::MergeFrom(const packetl2c_rob_landlord_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_or_rob()) {
      set_or_rob(from.or_rob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_rob_landlord_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_rob_landlord_result::CopyFrom(const packetl2c_rob_landlord_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_rob_landlord_result::IsInitialized() const {

  return true;
}

void packetl2c_rob_landlord_result::Swap(packetl2c_rob_landlord_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(or_rob_, other->or_rob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_rob_landlord_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_rob_landlord_result_descriptor_;
  metadata.reflection = packetl2c_rob_landlord_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_playhand::kPacketIdFieldNumber;
const int packetc2l_playhand::kCardsFieldNumber;
#endif  // !_MSC_VER

packetc2l_playhand::packetc2l_playhand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetc2l_playhand)
}

void packetc2l_playhand::InitAsDefaultInstance() {
  cards_ = const_cast< ::game_landlord_protocol::card_Info*>(&::game_landlord_protocol::card_Info::default_instance());
}

packetc2l_playhand::packetc2l_playhand(const packetc2l_playhand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetc2l_playhand)
}

void packetc2l_playhand::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10006;
  cards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_playhand::~packetc2l_playhand() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetc2l_playhand)
  SharedDtor();
}

void packetc2l_playhand::SharedDtor() {
  if (this != default_instance_) {
    delete cards_;
  }
}

void packetc2l_playhand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_playhand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_playhand_descriptor_;
}

const packetc2l_playhand& packetc2l_playhand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_playhand* packetc2l_playhand::default_instance_ = NULL;

packetc2l_playhand* packetc2l_playhand::New() const {
  return new packetc2l_playhand;
}

void packetc2l_playhand::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 10006;
    if (has_cards()) {
      if (cards_ != NULL) cards_->::game_landlord_protocol::card_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_playhand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetc2l_playhand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_playhand];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        break;
      }

      // optional .game_landlord_protocol.card_Info cards = 2;
      case 2: {
        if (tag == 18) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetc2l_playhand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetc2l_playhand)
  return false;
#undef DO_
}

void packetc2l_playhand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetc2l_playhand)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_playhand];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_landlord_protocol.card_Info cards = 2;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cards(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetc2l_playhand)
}

::google::protobuf::uint8* packetc2l_playhand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetc2l_playhand)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_playhand];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_landlord_protocol.card_Info cards = 2;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cards(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetc2l_playhand)
  return target;
}

int packetc2l_playhand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_c2l_playhand];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_landlord_protocol.card_Info cards = 2;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_playhand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_playhand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_playhand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_playhand::MergeFrom(const packetc2l_playhand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_cards()) {
      mutable_cards()->::game_landlord_protocol::card_Info::MergeFrom(from.cards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_playhand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_playhand::CopyFrom(const packetc2l_playhand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_playhand::IsInitialized() const {

  return true;
}

void packetc2l_playhand::Swap(packetc2l_playhand* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(cards_, other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_playhand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_playhand_descriptor_;
  metadata.reflection = packetc2l_playhand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_playhand_result::kPacketIdFieldNumber;
const int packetl2c_playhand_result::kResultFieldNumber;
const int packetl2c_playhand_result::kCardsFieldNumber;
#endif  // !_MSC_VER

packetl2c_playhand_result::packetl2c_playhand_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_playhand_result)
}

void packetl2c_playhand_result::InitAsDefaultInstance() {
  cards_ = const_cast< ::game_landlord_protocol::card_Info*>(&::game_landlord_protocol::card_Info::default_instance());
}

packetl2c_playhand_result::packetl2c_playhand_result(const packetl2c_playhand_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_playhand_result)
}

void packetl2c_playhand_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15005;
  result_ = 1;
  cards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_playhand_result::~packetl2c_playhand_result() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_playhand_result)
  SharedDtor();
}

void packetl2c_playhand_result::SharedDtor() {
  if (this != default_instance_) {
    delete cards_;
  }
}

void packetl2c_playhand_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_playhand_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_playhand_result_descriptor_;
}

const packetl2c_playhand_result& packetl2c_playhand_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_playhand_result* packetl2c_playhand_result::default_instance_ = NULL;

packetl2c_playhand_result* packetl2c_playhand_result::New() const {
  return new packetl2c_playhand_result;
}

void packetl2c_playhand_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 15005;
    result_ = 1;
    if (has_cards()) {
      if (cards_ != NULL) cards_->::game_landlord_protocol::card_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_playhand_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_playhand_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_playhand];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .game_landlord_protocol.e_server_error_code result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_error_code_IsValid(value)) {
            set_result(static_cast< ::game_landlord_protocol::e_server_error_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cards;
        break;
      }

      // optional .game_landlord_protocol.card_Info cards = 3;
      case 3: {
        if (tag == 26) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_playhand_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_playhand_result)
  return false;
#undef DO_
}

void packetl2c_playhand_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_playhand_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_playhand];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_landlord_protocol.e_server_error_code result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional .game_landlord_protocol.card_Info cards = 3;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cards(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_playhand_result)
}

::google::protobuf::uint8* packetl2c_playhand_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_playhand_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_playhand];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_landlord_protocol.e_server_error_code result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional .game_landlord_protocol.card_Info cards = 3;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cards(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_playhand_result)
  return target;
}

int packetl2c_playhand_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_playhand];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_landlord_protocol.e_server_error_code result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .game_landlord_protocol.card_Info cards = 3;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_playhand_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_playhand_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_playhand_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_playhand_result::MergeFrom(const packetl2c_playhand_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cards()) {
      mutable_cards()->::game_landlord_protocol::card_Info::MergeFrom(from.cards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_playhand_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_playhand_result::CopyFrom(const packetl2c_playhand_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_playhand_result::IsInitialized() const {

  return true;
}

void packetl2c_playhand_result::Swap(packetl2c_playhand_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(cards_, other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_playhand_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_playhand_result_descriptor_;
  metadata.reflection = packetl2c_playhand_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_startgame::kPacketIdFieldNumber;
const int packetl2c_notice_startgame::kCardsFieldNumber;
const int packetl2c_notice_startgame::kOpencardFieldNumber;
const int packetl2c_notice_startgame::kCards1FieldNumber;
const int packetl2c_notice_startgame::kPlayerListFieldNumber;
const int packetl2c_notice_startgame::kLandlordIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_startgame::packetl2c_notice_startgame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_notice_startgame)
}

void packetl2c_notice_startgame::InitAsDefaultInstance() {
}

packetl2c_notice_startgame::packetl2c_notice_startgame(const packetl2c_notice_startgame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_notice_startgame)
}

void packetl2c_notice_startgame::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15101;
  opencard_ = 0;
  landlord_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_startgame::~packetl2c_notice_startgame() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_notice_startgame)
  SharedDtor();
}

void packetl2c_notice_startgame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_startgame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_startgame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_startgame_descriptor_;
}

const packetl2c_notice_startgame& packetl2c_notice_startgame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_startgame* packetl2c_notice_startgame::default_instance_ = NULL;

packetl2c_notice_startgame* packetl2c_notice_startgame::New() const {
  return new packetl2c_notice_startgame;
}

void packetl2c_notice_startgame::Clear() {
  if (_has_bits_[0 / 32] & 37) {
    packet_id_ = 15101;
    opencard_ = 0;
    landlord_id_ = 0;
  }
  cards_.Clear();
  cards_1_.Clear();
  playerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_startgame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_notice_startgame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_startgame];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 2;
      case 2: {
        if (tag == 16) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cards())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        if (input->ExpectTag(24)) goto parse_opencard;
        break;
      }

      // optional int32 opencard = 3;
      case 3: {
        if (tag == 24) {
         parse_opencard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opencard_)));
          set_has_opencard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cards_1;
        break;
      }

      // repeated int32 cards_1 = 4;
      case 4: {
        if (tag == 32) {
         parse_cards_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cards_1())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards_1())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cards_1;
        if (input->ExpectTag(42)) goto parse_playerList;
        break;
      }

      // repeated .game_landlord_protocol.player_info playerList = 5;
      case 5: {
        if (tag == 42) {
         parse_playerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_playerList;
        if (input->ExpectTag(48)) goto parse_landlord_Id;
        break;
      }

      // optional int32 landlord_Id = 6;
      case 6: {
        if (tag == 48) {
         parse_landlord_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &landlord_id_)));
          set_has_landlord_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_notice_startgame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_notice_startgame)
  return false;
#undef DO_
}

void packetl2c_notice_startgame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_notice_startgame)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_startgame];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cards(i), output);
  }

  // optional int32 opencard = 3;
  if (has_opencard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opencard(), output);
  }

  // repeated int32 cards_1 = 4;
  for (int i = 0; i < this->cards_1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cards_1(i), output);
  }

  // repeated .game_landlord_protocol.player_info playerList = 5;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->playerlist(i), output);
  }

  // optional int32 landlord_Id = 6;
  if (has_landlord_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->landlord_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_notice_startgame)
}

::google::protobuf::uint8* packetl2c_notice_startgame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_notice_startgame)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_startgame];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cards(i), target);
  }

  // optional int32 opencard = 3;
  if (has_opencard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opencard(), target);
  }

  // repeated int32 cards_1 = 4;
  for (int i = 0; i < this->cards_1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cards_1(i), target);
  }

  // repeated .game_landlord_protocol.player_info playerList = 5;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->playerlist(i), target);
  }

  // optional int32 landlord_Id = 6;
  if (has_landlord_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->landlord_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_notice_startgame)
  return target;
}

int packetl2c_notice_startgame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_startgame];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 opencard = 3;
    if (has_opencard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opencard());
    }

    // optional int32 landlord_Id = 6;
    if (has_landlord_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landlord_id());
    }

  }
  // repeated int32 cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  // repeated int32 cards_1 = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards_1(i));
    }
    total_size += 1 * this->cards_1_size() + data_size;
  }

  // repeated .game_landlord_protocol.player_info playerList = 5;
  total_size += 1 * this->playerlist_size();
  for (int i = 0; i < this->playerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_startgame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_startgame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_startgame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_startgame::MergeFrom(const packetl2c_notice_startgame& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  cards_1_.MergeFrom(from.cards_1_);
  playerlist_.MergeFrom(from.playerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_opencard()) {
      set_opencard(from.opencard());
    }
    if (from.has_landlord_id()) {
      set_landlord_id(from.landlord_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_startgame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_startgame::CopyFrom(const packetl2c_notice_startgame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_startgame::IsInitialized() const {

  return true;
}

void packetl2c_notice_startgame::Swap(packetl2c_notice_startgame* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    cards_.Swap(&other->cards_);
    std::swap(opencard_, other->opencard_);
    cards_1_.Swap(&other->cards_1_);
    playerlist_.Swap(&other->playerlist_);
    std::swap(landlord_id_, other->landlord_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_startgame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_startgame_descriptor_;
  metadata.reflection = packetl2c_notice_startgame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_who_playhand::kPacketIdFieldNumber;
const int packetl2c_notice_who_playhand::kDeskIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_who_playhand::packetl2c_notice_who_playhand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_notice_who_playhand)
}

void packetl2c_notice_who_playhand::InitAsDefaultInstance() {
}

packetl2c_notice_who_playhand::packetl2c_notice_who_playhand(const packetl2c_notice_who_playhand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_notice_who_playhand)
}

void packetl2c_notice_who_playhand::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15106;
  deskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_who_playhand::~packetl2c_notice_who_playhand() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_notice_who_playhand)
  SharedDtor();
}

void packetl2c_notice_who_playhand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_who_playhand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_who_playhand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_who_playhand_descriptor_;
}

const packetl2c_notice_who_playhand& packetl2c_notice_who_playhand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_who_playhand* packetl2c_notice_who_playhand::default_instance_ = NULL;

packetl2c_notice_who_playhand* packetl2c_notice_who_playhand::New() const {
  return new packetl2c_notice_who_playhand;
}

void packetl2c_notice_who_playhand::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 15106;
    deskid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_who_playhand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_notice_who_playhand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_who_playhand];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deskId;
        break;
      }

      // optional int32 deskId = 2;
      case 2: {
        if (tag == 16) {
         parse_deskId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_notice_who_playhand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_notice_who_playhand)
  return false;
#undef DO_
}

void packetl2c_notice_who_playhand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_notice_who_playhand)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_who_playhand];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 deskId = 2;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->deskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_notice_who_playhand)
}

::google::protobuf::uint8* packetl2c_notice_who_playhand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_notice_who_playhand)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_who_playhand];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 deskId = 2;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->deskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_notice_who_playhand)
  return target;
}

int packetl2c_notice_who_playhand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_who_playhand];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 deskId = 2;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_who_playhand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_who_playhand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_who_playhand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_who_playhand::MergeFrom(const packetl2c_notice_who_playhand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_who_playhand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_who_playhand::CopyFrom(const packetl2c_notice_who_playhand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_who_playhand::IsInitialized() const {

  return true;
}

void packetl2c_notice_who_playhand::Swap(packetl2c_notice_who_playhand* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(deskid_, other->deskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_who_playhand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_who_playhand_descriptor_;
  metadata.reflection = packetl2c_notice_who_playhand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_playhand::kPacketIdFieldNumber;
const int packetl2c_notice_playhand::kCardsFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_playhand::packetl2c_notice_playhand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_notice_playhand)
}

void packetl2c_notice_playhand::InitAsDefaultInstance() {
  cards_ = const_cast< ::game_landlord_protocol::card_Info*>(&::game_landlord_protocol::card_Info::default_instance());
}

packetl2c_notice_playhand::packetl2c_notice_playhand(const packetl2c_notice_playhand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_notice_playhand)
}

void packetl2c_notice_playhand::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15102;
  cards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_playhand::~packetl2c_notice_playhand() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_notice_playhand)
  SharedDtor();
}

void packetl2c_notice_playhand::SharedDtor() {
  if (this != default_instance_) {
    delete cards_;
  }
}

void packetl2c_notice_playhand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_playhand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_playhand_descriptor_;
}

const packetl2c_notice_playhand& packetl2c_notice_playhand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_playhand* packetl2c_notice_playhand::default_instance_ = NULL;

packetl2c_notice_playhand* packetl2c_notice_playhand::New() const {
  return new packetl2c_notice_playhand;
}

void packetl2c_notice_playhand::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 15102;
    if (has_cards()) {
      if (cards_ != NULL) cards_->::game_landlord_protocol::card_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_playhand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_notice_playhand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_playhand];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        break;
      }

      // optional .game_landlord_protocol.card_Info cards = 2;
      case 2: {
        if (tag == 18) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_notice_playhand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_notice_playhand)
  return false;
#undef DO_
}

void packetl2c_notice_playhand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_notice_playhand)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_playhand];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_landlord_protocol.card_Info cards = 2;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cards(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_notice_playhand)
}

::google::protobuf::uint8* packetl2c_notice_playhand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_notice_playhand)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_playhand];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_landlord_protocol.card_Info cards = 2;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cards(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_notice_playhand)
  return target;
}

int packetl2c_notice_playhand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_playhand];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_landlord_protocol.card_Info cards = 2;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_playhand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_playhand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_playhand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_playhand::MergeFrom(const packetl2c_notice_playhand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_cards()) {
      mutable_cards()->::game_landlord_protocol::card_Info::MergeFrom(from.cards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_playhand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_playhand::CopyFrom(const packetl2c_notice_playhand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_playhand::IsInitialized() const {

  return true;
}

void packetl2c_notice_playhand::Swap(packetl2c_notice_playhand* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(cards_, other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_playhand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_playhand_descriptor_;
  metadata.reflection = packetl2c_notice_playhand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_rob_landlord::kPacketIdFieldNumber;
const int packetl2c_notice_rob_landlord::kDeskIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_rob_landlord::packetl2c_notice_rob_landlord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_notice_rob_landlord)
}

void packetl2c_notice_rob_landlord::InitAsDefaultInstance() {
}

packetl2c_notice_rob_landlord::packetl2c_notice_rob_landlord(const packetl2c_notice_rob_landlord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_notice_rob_landlord)
}

void packetl2c_notice_rob_landlord::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15103;
  deskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_rob_landlord::~packetl2c_notice_rob_landlord() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_notice_rob_landlord)
  SharedDtor();
}

void packetl2c_notice_rob_landlord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_rob_landlord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_rob_landlord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_rob_landlord_descriptor_;
}

const packetl2c_notice_rob_landlord& packetl2c_notice_rob_landlord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_rob_landlord* packetl2c_notice_rob_landlord::default_instance_ = NULL;

packetl2c_notice_rob_landlord* packetl2c_notice_rob_landlord::New() const {
  return new packetl2c_notice_rob_landlord;
}

void packetl2c_notice_rob_landlord::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 15103;
    deskid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_rob_landlord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_notice_rob_landlord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_rob_landlord];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deskId;
        break;
      }

      // optional int32 deskId = 2;
      case 2: {
        if (tag == 16) {
         parse_deskId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_notice_rob_landlord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_notice_rob_landlord)
  return false;
#undef DO_
}

void packetl2c_notice_rob_landlord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_notice_rob_landlord)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_rob_landlord];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 deskId = 2;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->deskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_notice_rob_landlord)
}

::google::protobuf::uint8* packetl2c_notice_rob_landlord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_notice_rob_landlord)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_rob_landlord];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 deskId = 2;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->deskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_notice_rob_landlord)
  return target;
}

int packetl2c_notice_rob_landlord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_rob_landlord];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 deskId = 2;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_rob_landlord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_rob_landlord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_rob_landlord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_rob_landlord::MergeFrom(const packetl2c_notice_rob_landlord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_rob_landlord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_rob_landlord::CopyFrom(const packetl2c_notice_rob_landlord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_rob_landlord::IsInitialized() const {

  return true;
}

void packetl2c_notice_rob_landlord::Swap(packetl2c_notice_rob_landlord* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(deskid_, other->deskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_rob_landlord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_rob_landlord_descriptor_;
  metadata.reflection = packetl2c_notice_rob_landlord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_rob_landlord_result::kPacketIdFieldNumber;
const int packetl2c_notice_rob_landlord_result::kDeskIdFieldNumber;
const int packetl2c_notice_rob_landlord_result::kOrRobFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_rob_landlord_result::packetl2c_notice_rob_landlord_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_notice_rob_landlord_result)
}

void packetl2c_notice_rob_landlord_result::InitAsDefaultInstance() {
}

packetl2c_notice_rob_landlord_result::packetl2c_notice_rob_landlord_result(const packetl2c_notice_rob_landlord_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_notice_rob_landlord_result)
}

void packetl2c_notice_rob_landlord_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15105;
  deskid_ = 0;
  or_rob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_rob_landlord_result::~packetl2c_notice_rob_landlord_result() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_notice_rob_landlord_result)
  SharedDtor();
}

void packetl2c_notice_rob_landlord_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_rob_landlord_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_rob_landlord_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_rob_landlord_result_descriptor_;
}

const packetl2c_notice_rob_landlord_result& packetl2c_notice_rob_landlord_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_rob_landlord_result* packetl2c_notice_rob_landlord_result::default_instance_ = NULL;

packetl2c_notice_rob_landlord_result* packetl2c_notice_rob_landlord_result::New() const {
  return new packetl2c_notice_rob_landlord_result;
}

void packetl2c_notice_rob_landlord_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetl2c_notice_rob_landlord_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(deskid_, or_rob_);
    packet_id_ = 15105;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_rob_landlord_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_notice_rob_landlord_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_rob_landlord_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deskId;
        break;
      }

      // optional int32 deskId = 2;
      case 2: {
        if (tag == 16) {
         parse_deskId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_or_Rob;
        break;
      }

      // optional int32 or_Rob = 3;
      case 3: {
        if (tag == 24) {
         parse_or_Rob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &or_rob_)));
          set_has_or_rob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_notice_rob_landlord_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_notice_rob_landlord_result)
  return false;
#undef DO_
}

void packetl2c_notice_rob_landlord_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_notice_rob_landlord_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_rob_landlord_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 deskId = 2;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->deskid(), output);
  }

  // optional int32 or_Rob = 3;
  if (has_or_rob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->or_rob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_notice_rob_landlord_result)
}

::google::protobuf::uint8* packetl2c_notice_rob_landlord_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_notice_rob_landlord_result)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_rob_landlord_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 deskId = 2;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->deskid(), target);
  }

  // optional int32 or_Rob = 3;
  if (has_or_rob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->or_rob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_notice_rob_landlord_result)
  return target;
}

int packetl2c_notice_rob_landlord_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_rob_landlord_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 deskId = 2;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

    // optional int32 or_Rob = 3;
    if (has_or_rob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->or_rob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_rob_landlord_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_rob_landlord_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_rob_landlord_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_rob_landlord_result::MergeFrom(const packetl2c_notice_rob_landlord_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
    if (from.has_or_rob()) {
      set_or_rob(from.or_rob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_rob_landlord_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_rob_landlord_result::CopyFrom(const packetl2c_notice_rob_landlord_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_rob_landlord_result::IsInitialized() const {

  return true;
}

void packetl2c_notice_rob_landlord_result::Swap(packetl2c_notice_rob_landlord_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(deskid_, other->deskid_);
    std::swap(or_rob_, other->or_rob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_rob_landlord_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_rob_landlord_result_descriptor_;
  metadata.reflection = packetl2c_notice_rob_landlord_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_winlose::kPacketIdFieldNumber;
const int packetl2c_notice_winlose::kWinDeskIdFieldNumber;
const int packetl2c_notice_winlose::kWinGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_winlose::packetl2c_notice_winlose()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_landlord_protocol.packetl2c_notice_winlose)
}

void packetl2c_notice_winlose::InitAsDefaultInstance() {
}

packetl2c_notice_winlose::packetl2c_notice_winlose(const packetl2c_notice_winlose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_landlord_protocol.packetl2c_notice_winlose)
}

void packetl2c_notice_winlose::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15104;
  win_deskid_ = 0;
  win_gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_winlose::~packetl2c_notice_winlose() {
  // @@protoc_insertion_point(destructor:game_landlord_protocol.packetl2c_notice_winlose)
  SharedDtor();
}

void packetl2c_notice_winlose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_winlose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_winlose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_winlose_descriptor_;
}

const packetl2c_notice_winlose& packetl2c_notice_winlose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5flandlord_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_winlose* packetl2c_notice_winlose::default_instance_ = NULL;

packetl2c_notice_winlose* packetl2c_notice_winlose::New() const {
  return new packetl2c_notice_winlose;
}

void packetl2c_notice_winlose::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetl2c_notice_winlose*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(win_deskid_, win_gold_);
    packet_id_ = 15104;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_winlose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_landlord_protocol.packetl2c_notice_winlose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_winlose];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_landlord_protocol::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_landlord_protocol::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_win_deskId;
        break;
      }

      // optional int32 win_deskId = 2;
      case 2: {
        if (tag == 16) {
         parse_win_deskId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_deskid_)));
          set_has_win_deskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_win_gold;
        break;
      }

      // optional int32 win_gold = 3;
      case 3: {
        if (tag == 24) {
         parse_win_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_gold_)));
          set_has_win_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_landlord_protocol.packetl2c_notice_winlose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_landlord_protocol.packetl2c_notice_winlose)
  return false;
#undef DO_
}

void packetl2c_notice_winlose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_landlord_protocol.packetl2c_notice_winlose)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_winlose];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 win_deskId = 2;
  if (has_win_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->win_deskid(), output);
  }

  // optional int32 win_gold = 3;
  if (has_win_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_landlord_protocol.packetl2c_notice_winlose)
}

::google::protobuf::uint8* packetl2c_notice_winlose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_landlord_protocol.packetl2c_notice_winlose)
  // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_winlose];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 win_deskId = 2;
  if (has_win_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->win_deskid(), target);
  }

  // optional int32 win_gold = 3;
  if (has_win_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_landlord_protocol.packetl2c_notice_winlose)
  return target;
}

int packetl2c_notice_winlose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_landlord_protocol.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_winlose];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 win_deskId = 2;
    if (has_win_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_deskid());
    }

    // optional int32 win_gold = 3;
    if (has_win_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_winlose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_winlose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_winlose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_winlose::MergeFrom(const packetl2c_notice_winlose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_win_deskid()) {
      set_win_deskid(from.win_deskid());
    }
    if (from.has_win_gold()) {
      set_win_gold(from.win_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_winlose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_winlose::CopyFrom(const packetl2c_notice_winlose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_winlose::IsInitialized() const {

  return true;
}

void packetl2c_notice_winlose::Swap(packetl2c_notice_winlose* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(win_deskid_, other->win_deskid_);
    std::swap(win_gold_, other->win_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_winlose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_winlose_descriptor_;
  metadata.reflection = packetl2c_notice_winlose_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_landlord_protocol

// @@protoc_insertion_point(global_scope)
