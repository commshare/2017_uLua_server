// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_type_def.proto

#ifndef PROTOBUF_msg_5ftype_5fdef_2eproto__INCLUDED
#define PROTOBUF_msg_5ftype_5fdef_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace msg_type_def {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
void protobuf_AssignDesc_msg_5ftype_5fdef_2eproto();
void protobuf_ShutdownFile_msg_5ftype_5fdef_2eproto();


enum e_msg_result_def {
  e_rmt_unknow = 0,
  e_rmt_success = 1,
  e_rmt_fail = 2,
  e_rmt_change_gate = 3,
  e_rmt_connect_full = 4,
  e_rmt_player_max = 5,
  e_rmt_has_dial_lottery = 6,
  e_rmt_error_nickname = 7,
  e_rmt_same_nickname = 8,
  e_rmt_length_beyond_range = 9,
  e_rmt_gold_not_enough = 10,
  e_rmt_ticket_not_enough = 11,
  e_rmt_room_full = 12,
  e_rmt_vip_under = 13,
  e_rmt_level_under = 14,
  e_rmt_friend_full = 15,
  e_rmt_exists_friend = 16,
  e_rmt_player_not_exists = 17,
  e_rmt_runout_count = 18,
  e_rmt_time_not_arrive = 19,
  e_rmt_no_can_bet = 20,
  e_rmt_bet_index_error = 21,
  e_rmt_outof_bet_limit = 22,
  e_rmt_no_find_table = 23,
  e_rmt_pwd_not_same = 24,
  e_rmt_format_invalid = 25,
  e_rmt_need_set_pwd = 26,
  e_rmt_pwd_error = 27,
  e_rmt_not_find_item = 28,
  e_rmt_friend_offline = 29,
  e_rmt_not_in_game = 30,
  e_rmt_cant_buyitem = 31,
  e_rmt_cannot_add_self = 32,
  e_rmt_chat_too_often = 33,
  e_rmt_exp_not_enough = 34,
  e_rmt_level_max = 35,
  e_rmt_cannot_collect = 36,
  e_rmt_has_bind_phone = 37,
  e_rmt_code_error = 38,
  e_rmt_beyond_limit = 39,
  e_rmt_not_bind_phone = 40,
  e_rmt_cannot_sendto_self = 41,
  e_rmt_room_notopen = 42,
  e_rmt_bet_full = 43,
  e_rmt_game_begun = 44,
  e_rmt_banker_not_bet = 45,
  e_rmt_banker_is_full = 46,
  e_rmt_can_not_leave = 47,
  e_rmt_has_receive_reward = 48,
  e_rmt_not_recharge = 49,
  e_rmt_custom_head_freezing = 50,
  e_rmt_now_banker_first = 51,
  e_rmt_has_in_banker_list = 52,
  e_rmt_now_is_banker = 53,
  e_rmt_is_not_banker = 54,
  e_rmt_haven_apply_leave = 55,
  e_rmt_banker_not_enough = 56,
  e_rmt_banker_betgold_is_full = 57,
  e_rmt_other_betgold_is_full = 58,
  e_rmt_error_game_state = 59,
  e_rmt_box_not_exist = 60,
  e_rmt_box_has_opened = 61,
  e_rmt_thank_you_not_enough = 62,
  e_rmt_now_is_you = 63,
  e_rmt_banker_protect = 64,
  e_rmt_snatch_is_you = 65,
  e_rmt_snatch_is_low = 66,
  e_rmt_last_speaker_not_finish = 67,
  e_rmt_speaker_beyond_max_count = 68,
  e_rmt_roping_over = 69,
  e_rmt_activity_outofdate = 70,
  e_rmt_activity_not_satisfy_cond = 71,
  e_rmt_time_over = 72,
  e_rmt_not_follow = 73,
  e_rmt_not_follow_roping = 74,
  e_rmt_chip_not_enough = 75,
  e_rmt_month_card_out_date = 76,
  e_rmt_not_follow_prize_claw = 77,
  e_rmt_no_empty_seat = 78,
  e_rmt_player_prohibit = 79,
  e_rmt_can_not_change_table_setting = 80,
  e_rmt_player_have_no_enough_gold = 81,
  e_rmt_player_absent_room = 82,
  e_rmt_player_absent_desk = 83
};
bool e_msg_result_def_IsValid(int value);
const e_msg_result_def e_msg_result_def_MIN = e_rmt_unknow;
const e_msg_result_def e_msg_result_def_MAX = e_rmt_player_absent_desk;
const int e_msg_result_def_ARRAYSIZE = e_msg_result_def_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_msg_result_def_descriptor();
inline const ::std::string& e_msg_result_def_Name(e_msg_result_def value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_msg_result_def_descriptor(), value);
}
inline bool e_msg_result_def_Parse(
    const ::std::string& name, e_msg_result_def* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_msg_result_def>(
    e_msg_result_def_descriptor(), name, value);
}
enum e_item_type_def {
  e_itd_gold = 1,
  e_itd_ticket = 2,
  e_itd_gift = 3,
  e_itd_exchange = 4,
  e_itd_photoframe = 5,
  e_itd_sex = 6,
  e_itd_vip = 7,
  e_itd_iconcustom = 8,
  e_itd_nickname = 9,
  e_itd_monthcard = 10,
  e_itd_chip = 11,
  e_itd_lucky = 12,
  e_itd_tempincome = 13,
  e_itd_totalincome = 14,
  e_itd_privilege = 15,
  e_itd_firstgift = 99,
  e_itd_vip_experience_card = 100
};
bool e_item_type_def_IsValid(int value);
const e_item_type_def e_item_type_def_MIN = e_itd_gold;
const e_item_type_def e_item_type_def_MAX = e_itd_vip_experience_card;
const int e_item_type_def_ARRAYSIZE = e_item_type_def_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_item_type_def_descriptor();
inline const ::std::string& e_item_type_def_Name(e_item_type_def value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_item_type_def_descriptor(), value);
}
inline bool e_item_type_def_Parse(
    const ::std::string& name, e_item_type_def* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_item_type_def>(
    e_item_type_def_descriptor(), name, value);
}
enum e_sex_def {
  sex_unknown = 0,
  sex_boy = 1,
  sex_girl = 2,
  sex_max = 3
};
bool e_sex_def_IsValid(int value);
const e_sex_def e_sex_def_MIN = sex_unknown;
const e_sex_def e_sex_def_MAX = sex_max;
const int e_sex_def_ARRAYSIZE = e_sex_def_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_sex_def_descriptor();
inline const ::std::string& e_sex_def_Name(e_sex_def value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_sex_def_descriptor(), value);
}
inline bool e_sex_def_Parse(
    const ::std::string& name, e_sex_def* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_sex_def>(
    e_sex_def_descriptor(), name, value);
}
enum ENotifyType {
  NotifyTypeSys = 200,
  NotifyTypePlayerSpeaker = 199,
  NotifyTypeWinningPrize = 198,
  NotifyTypeImportantConsume = 197,
  NotifyTypeRobot = 196
};
bool ENotifyType_IsValid(int value);
const ENotifyType ENotifyType_MIN = NotifyTypeRobot;
const ENotifyType ENotifyType_MAX = NotifyTypeSys;
const int ENotifyType_ARRAYSIZE = ENotifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENotifyType_descriptor();
inline const ::std::string& ENotifyType_Name(ENotifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENotifyType_descriptor(), value);
}
inline bool ENotifyType_Parse(
    const ::std::string& name, ENotifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENotifyType>(
    ENotifyType_descriptor(), name, value);
}
enum BoxLotteryResult {
  result_big_prize = 0,
  result_samll_prize = 1,
  result_thank_you = 2
};
bool BoxLotteryResult_IsValid(int value);
const BoxLotteryResult BoxLotteryResult_MIN = result_big_prize;
const BoxLotteryResult BoxLotteryResult_MAX = result_thank_you;
const int BoxLotteryResult_ARRAYSIZE = BoxLotteryResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* BoxLotteryResult_descriptor();
inline const ::std::string& BoxLotteryResult_Name(BoxLotteryResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    BoxLotteryResult_descriptor(), value);
}
inline bool BoxLotteryResult_Parse(
    const ::std::string& name, BoxLotteryResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BoxLotteryResult>(
    BoxLotteryResult_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg_type_def

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::msg_type_def::e_msg_result_def> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg_type_def::e_msg_result_def>() {
  return ::msg_type_def::e_msg_result_def_descriptor();
}
template <> struct is_proto_enum< ::msg_type_def::e_item_type_def> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg_type_def::e_item_type_def>() {
  return ::msg_type_def::e_item_type_def_descriptor();
}
template <> struct is_proto_enum< ::msg_type_def::e_sex_def> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg_type_def::e_sex_def>() {
  return ::msg_type_def::e_sex_def_descriptor();
}
template <> struct is_proto_enum< ::msg_type_def::ENotifyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg_type_def::ENotifyType>() {
  return ::msg_type_def::ENotifyType_descriptor();
}
template <> struct is_proto_enum< ::msg_type_def::BoxLotteryResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg_type_def::BoxLotteryResult>() {
  return ::msg_type_def::BoxLotteryResult_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_5ftype_5fdef_2eproto__INCLUDED
