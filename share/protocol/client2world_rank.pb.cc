// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_rank.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_rank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* RankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_coin_rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_coin_rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_coin_rank_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_coin_rank_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_recharge_rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_recharge_rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_recharge_rank_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_recharge_rank_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_coin_growth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_coin_growth_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_coin_growth_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_coin_growth_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5frank_2eproto() {
  protobuf_AddDesc_client2world_5frank_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_rank.proto");
  GOOGLE_CHECK(file != NULL);
  RankInfo_descriptor_ = file->message_type(0);
  static const int RankInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, viplevel_),
  };
  RankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankInfo_descriptor_,
      RankInfo::default_instance_,
      RankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankInfo));
  packetc2w_req_coin_rank_descriptor_ = file->message_type(1);
  static const int packetc2w_req_coin_rank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_coin_rank, packet_id_),
  };
  packetc2w_req_coin_rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_coin_rank_descriptor_,
      packetc2w_req_coin_rank::default_instance_,
      packetc2w_req_coin_rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_coin_rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_coin_rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_coin_rank));
  packetw2c_req_coin_rank_result_descriptor_ = file->message_type(2);
  static const int packetw2c_req_coin_rank_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_coin_rank_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_coin_rank_result, ranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_coin_rank_result, selfrank_),
  };
  packetw2c_req_coin_rank_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_coin_rank_result_descriptor_,
      packetw2c_req_coin_rank_result::default_instance_,
      packetw2c_req_coin_rank_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_coin_rank_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_coin_rank_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_coin_rank_result));
  RechargeInfo_descriptor_ = file->message_type(3);
  static const int RechargeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeInfo, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeInfo, viplevel_),
  };
  RechargeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeInfo_descriptor_,
      RechargeInfo::default_instance_,
      RechargeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeInfo));
  packetc2w_req_recharge_rank_descriptor_ = file->message_type(4);
  static const int packetc2w_req_recharge_rank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_recharge_rank, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_recharge_rank, is_yesterday_),
  };
  packetc2w_req_recharge_rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_recharge_rank_descriptor_,
      packetc2w_req_recharge_rank::default_instance_,
      packetc2w_req_recharge_rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_recharge_rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_recharge_rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_recharge_rank));
  packetw2c_req_recharge_rank_result_descriptor_ = file->message_type(5);
  static const int packetw2c_req_recharge_rank_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_recharge_rank_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_recharge_rank_result, ranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_recharge_rank_result, selfrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_recharge_rank_result, selfrmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_recharge_rank_result, is_yesterday_),
  };
  packetw2c_req_recharge_rank_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_recharge_rank_result_descriptor_,
      packetw2c_req_recharge_rank_result::default_instance_,
      packetw2c_req_recharge_rank_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_recharge_rank_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_recharge_rank_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_recharge_rank_result));
  packetc2w_req_coin_growth_descriptor_ = file->message_type(6);
  static const int packetc2w_req_coin_growth_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_coin_growth, packet_id_),
  };
  packetc2w_req_coin_growth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_coin_growth_descriptor_,
      packetc2w_req_coin_growth::default_instance_,
      packetc2w_req_coin_growth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_coin_growth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_coin_growth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_coin_growth));
  packetw2c_req_coin_growth_result_descriptor_ = file->message_type(7);
  static const int packetw2c_req_coin_growth_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_coin_growth_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_coin_growth_result, ranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_coin_growth_result, selfrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_coin_growth_result, selfgold_),
  };
  packetw2c_req_coin_growth_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_coin_growth_result_descriptor_,
      packetw2c_req_coin_growth_result::default_instance_,
      packetw2c_req_coin_growth_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_coin_growth_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_coin_growth_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_coin_growth_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5frank_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankInfo_descriptor_, &RankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_coin_rank_descriptor_, &packetc2w_req_coin_rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_coin_rank_result_descriptor_, &packetw2c_req_coin_rank_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeInfo_descriptor_, &RechargeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_recharge_rank_descriptor_, &packetc2w_req_recharge_rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_recharge_rank_result_descriptor_, &packetw2c_req_recharge_rank_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_coin_growth_descriptor_, &packetc2w_req_coin_growth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_coin_growth_result_descriptor_, &packetw2c_req_coin_growth_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5frank_2eproto() {
  delete RankInfo::default_instance_;
  delete RankInfo_reflection_;
  delete packetc2w_req_coin_rank::default_instance_;
  delete packetc2w_req_coin_rank_reflection_;
  delete packetw2c_req_coin_rank_result::default_instance_;
  delete packetw2c_req_coin_rank_result_reflection_;
  delete RechargeInfo::default_instance_;
  delete RechargeInfo_reflection_;
  delete packetc2w_req_recharge_rank::default_instance_;
  delete packetc2w_req_recharge_rank_reflection_;
  delete packetw2c_req_recharge_rank_result::default_instance_;
  delete packetw2c_req_recharge_rank_result_reflection_;
  delete packetc2w_req_coin_growth::default_instance_;
  delete packetc2w_req_coin_growth_reflection_;
  delete packetw2c_req_coin_growth_result::default_instance_;
  delete packetw2c_req_coin_growth_result_reflection_;
}

void protobuf_AddDesc_client2world_5frank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027client2world_rank.proto\022\026client2world_"
    "protocols\032\033client2world_msg_type.proto\032\022"
    "msg_type_def.proto\032\022msg_info_def.proto\"N"
    "\n\010RankInfo\022\020\n\010playerId\030\001 \001(\005\022\020\n\010nickName"
    "\030\002 \001(\t\022\014\n\004gold\030\003 \001(\003\022\020\n\010vipLevel\030\004 \001(\005\"p"
    "\n\027packetc2w_req_coin_rank\022U\n\tpacket_id\030\001"
    " \001(\0162).client2world_protocols.e_server_m"
    "sg_type:\027e_mst_c2w_req_coin_rank\"\304\001\n\036pac"
    "ketw2c_req_coin_rank_result\022\\\n\tpacket_id"
    "\030\001 \001(\0162).client2world_protocols.e_server"
    "_msg_type:\036e_mst_w2c_req_coin_rank_resul"
    "t\0222\n\010rankList\030\002 \003(\0132 .client2world_proto"
    "cols.RankInfo\022\020\n\010selfRank\030\003 \001(\005\"Q\n\014Recha"
    "rgeInfo\022\020\n\010playerId\030\001 \001(\005\022\020\n\010nickName\030\002 "
    "\001(\t\022\013\n\003rmb\030\003 \001(\005\022\020\n\010vipLevel\030\004 \001(\005\"\225\001\n\033p"
    "acketc2w_req_recharge_rank\022Y\n\tpacket_id\030"
    "\001 \001(\0162).client2world_protocols.e_server_"
    "msg_type:\033e_mst_c2w_req_recharge_rank\022\033\n"
    "\014is_yesterday\030\002 \001(\010:\005false\"\376\001\n\"packetw2c"
    "_req_recharge_rank_result\022`\n\tpacket_id\030\001"
    " \001(\0162).client2world_protocols.e_server_m"
    "sg_type:\"e_mst_w2c_req_recharge_rank_res"
    "ult\0226\n\010rankList\030\002 \003(\0132$.client2world_pro"
    "tocols.RechargeInfo\022\020\n\010selfRank\030\003 \001(\005\022\017\n"
    "\007selfrmb\030\004 \001(\005\022\033\n\014is_yesterday\030\005 \001(\010:\005fa"
    "lse\"t\n\031packetc2w_req_coin_growth\022W\n\tpack"
    "et_id\030\001 \001(\0162).client2world_protocols.e_s"
    "erver_msg_type:\031e_mst_c2w_req_coin_growt"
    "h\"\332\001\n packetw2c_req_coin_growth_result\022^"
    "\n\tpacket_id\030\001 \001(\0162).client2world_protoco"
    "ls.e_server_msg_type: e_mst_w2c_req_coin"
    "_growth_result\0222\n\010rankList\030\002 \003(\0132 .clien"
    "t2world_protocols.RankInfo\022\020\n\010selfRank\030\003"
    " \001(\005\022\020\n\010selfGold\030\004 \001(\003", 1342);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_rank.proto", &protobuf_RegisterTypes);
  RankInfo::default_instance_ = new RankInfo();
  packetc2w_req_coin_rank::default_instance_ = new packetc2w_req_coin_rank();
  packetw2c_req_coin_rank_result::default_instance_ = new packetw2c_req_coin_rank_result();
  RechargeInfo::default_instance_ = new RechargeInfo();
  packetc2w_req_recharge_rank::default_instance_ = new packetc2w_req_recharge_rank();
  packetw2c_req_recharge_rank_result::default_instance_ = new packetw2c_req_recharge_rank_result();
  packetc2w_req_coin_growth::default_instance_ = new packetc2w_req_coin_growth();
  packetw2c_req_coin_growth_result::default_instance_ = new packetw2c_req_coin_growth_result();
  RankInfo::default_instance_->InitAsDefaultInstance();
  packetc2w_req_coin_rank::default_instance_->InitAsDefaultInstance();
  packetw2c_req_coin_rank_result::default_instance_->InitAsDefaultInstance();
  RechargeInfo::default_instance_->InitAsDefaultInstance();
  packetc2w_req_recharge_rank::default_instance_->InitAsDefaultInstance();
  packetw2c_req_recharge_rank_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_coin_growth::default_instance_->InitAsDefaultInstance();
  packetw2c_req_coin_growth_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5frank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5frank_2eproto {
  StaticDescriptorInitializer_client2world_5frank_2eproto() {
    protobuf_AddDesc_client2world_5frank_2eproto();
  }
} static_descriptor_initializer_client2world_5frank_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RankInfo::kPlayerIdFieldNumber;
const int RankInfo::kNickNameFieldNumber;
const int RankInfo::kGoldFieldNumber;
const int RankInfo::kVipLevelFieldNumber;
#endif  // !_MSC_VER

RankInfo::RankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.RankInfo)
}

void RankInfo::InitAsDefaultInstance() {
}

RankInfo::RankInfo(const RankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.RankInfo)
}

void RankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gold_ = GOOGLE_LONGLONG(0);
  viplevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankInfo::~RankInfo() {
  // @@protoc_insertion_point(destructor:client2world_protocols.RankInfo)
  SharedDtor();
}

void RankInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void RankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankInfo_descriptor_;
}

const RankInfo& RankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5frank_2eproto();
  return *default_instance_;
}

RankInfo* RankInfo::default_instance_ = NULL;

RankInfo* RankInfo::New() const {
  return new RankInfo;
}

void RankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(playerid_, gold_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.RankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // optional string nickName = 2;
      case 2: {
        if (tag == 18) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional int64 gold = 3;
      case 3: {
        if (tag == 24) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.RankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.RankInfo)
  return false;
#undef DO_
}

void RankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.RankInfo)
  // optional int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gold(), output);
  }

  // optional int32 vipLevel = 4;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->viplevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.RankInfo)
}

::google::protobuf::uint8* RankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.RankInfo)
  // optional int32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int64 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gold(), target);
  }

  // optional int32 vipLevel = 4;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->viplevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.RankInfo)
  return target;
}

int RankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int64 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int32 vipLevel = 4;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankInfo::MergeFrom(const RankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankInfo::CopyFrom(const RankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankInfo::IsInitialized() const {

  return true;
}

void RankInfo::Swap(RankInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(nickname_, other->nickname_);
    std::swap(gold_, other->gold_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankInfo_descriptor_;
  metadata.reflection = RankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_coin_rank::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_coin_rank::packetc2w_req_coin_rank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_coin_rank)
}

void packetc2w_req_coin_rank::InitAsDefaultInstance() {
}

packetc2w_req_coin_rank::packetc2w_req_coin_rank(const packetc2w_req_coin_rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_coin_rank)
}

void packetc2w_req_coin_rank::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5020;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_coin_rank::~packetc2w_req_coin_rank() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_coin_rank)
  SharedDtor();
}

void packetc2w_req_coin_rank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_coin_rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_coin_rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_coin_rank_descriptor_;
}

const packetc2w_req_coin_rank& packetc2w_req_coin_rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5frank_2eproto();
  return *default_instance_;
}

packetc2w_req_coin_rank* packetc2w_req_coin_rank::default_instance_ = NULL;

packetc2w_req_coin_rank* packetc2w_req_coin_rank::New() const {
  return new packetc2w_req_coin_rank;
}

void packetc2w_req_coin_rank::Clear() {
  packet_id_ = 5020;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_coin_rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_coin_rank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_coin_rank];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_coin_rank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_coin_rank)
  return false;
#undef DO_
}

void packetc2w_req_coin_rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_coin_rank)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_coin_rank];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_coin_rank)
}

::google::protobuf::uint8* packetc2w_req_coin_rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_coin_rank)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_coin_rank];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_coin_rank)
  return target;
}

int packetc2w_req_coin_rank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_coin_rank];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_coin_rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_coin_rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_coin_rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_coin_rank::MergeFrom(const packetc2w_req_coin_rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_coin_rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_coin_rank::CopyFrom(const packetc2w_req_coin_rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_coin_rank::IsInitialized() const {

  return true;
}

void packetc2w_req_coin_rank::Swap(packetc2w_req_coin_rank* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_coin_rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_coin_rank_descriptor_;
  metadata.reflection = packetc2w_req_coin_rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_coin_rank_result::kPacketIdFieldNumber;
const int packetw2c_req_coin_rank_result::kRankListFieldNumber;
const int packetw2c_req_coin_rank_result::kSelfRankFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_coin_rank_result::packetw2c_req_coin_rank_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_req_coin_rank_result)
}

void packetw2c_req_coin_rank_result::InitAsDefaultInstance() {
}

packetw2c_req_coin_rank_result::packetw2c_req_coin_rank_result(const packetw2c_req_coin_rank_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_req_coin_rank_result)
}

void packetw2c_req_coin_rank_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7521;
  selfrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_coin_rank_result::~packetw2c_req_coin_rank_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_req_coin_rank_result)
  SharedDtor();
}

void packetw2c_req_coin_rank_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_coin_rank_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_coin_rank_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_coin_rank_result_descriptor_;
}

const packetw2c_req_coin_rank_result& packetw2c_req_coin_rank_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5frank_2eproto();
  return *default_instance_;
}

packetw2c_req_coin_rank_result* packetw2c_req_coin_rank_result::default_instance_ = NULL;

packetw2c_req_coin_rank_result* packetw2c_req_coin_rank_result::New() const {
  return new packetw2c_req_coin_rank_result;
}

void packetw2c_req_coin_rank_result::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    packet_id_ = 7521;
    selfrank_ = 0;
  }
  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_coin_rank_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_req_coin_rank_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_coin_rank_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rankList;
        break;
      }

      // repeated .client2world_protocols.RankInfo rankList = 2;
      case 2: {
        if (tag == 18) {
         parse_rankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rankList;
        if (input->ExpectTag(24)) goto parse_selfRank;
        break;
      }

      // optional int32 selfRank = 3;
      case 3: {
        if (tag == 24) {
         parse_selfRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrank_)));
          set_has_selfrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_req_coin_rank_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_req_coin_rank_result)
  return false;
#undef DO_
}

void packetw2c_req_coin_rank_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_req_coin_rank_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_coin_rank_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.RankInfo rankList = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranklist(i), output);
  }

  // optional int32 selfRank = 3;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->selfrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_req_coin_rank_result)
}

::google::protobuf::uint8* packetw2c_req_coin_rank_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_req_coin_rank_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_coin_rank_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.RankInfo rankList = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranklist(i), target);
  }

  // optional int32 selfRank = 3;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->selfrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_req_coin_rank_result)
  return target;
}

int packetw2c_req_coin_rank_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_coin_rank_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 selfRank = 3;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrank());
    }

  }
  // repeated .client2world_protocols.RankInfo rankList = 2;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_coin_rank_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_coin_rank_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_coin_rank_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_coin_rank_result::MergeFrom(const packetw2c_req_coin_rank_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_selfrank()) {
      set_selfrank(from.selfrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_coin_rank_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_coin_rank_result::CopyFrom(const packetw2c_req_coin_rank_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_coin_rank_result::IsInitialized() const {

  return true;
}

void packetw2c_req_coin_rank_result::Swap(packetw2c_req_coin_rank_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    ranklist_.Swap(&other->ranklist_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_coin_rank_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_coin_rank_result_descriptor_;
  metadata.reflection = packetw2c_req_coin_rank_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeInfo::kPlayerIdFieldNumber;
const int RechargeInfo::kNickNameFieldNumber;
const int RechargeInfo::kRmbFieldNumber;
const int RechargeInfo::kVipLevelFieldNumber;
#endif  // !_MSC_VER

RechargeInfo::RechargeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.RechargeInfo)
}

void RechargeInfo::InitAsDefaultInstance() {
}

RechargeInfo::RechargeInfo(const RechargeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.RechargeInfo)
}

void RechargeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rmb_ = 0;
  viplevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeInfo::~RechargeInfo() {
  // @@protoc_insertion_point(destructor:client2world_protocols.RechargeInfo)
  SharedDtor();
}

void RechargeInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void RechargeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeInfo_descriptor_;
}

const RechargeInfo& RechargeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5frank_2eproto();
  return *default_instance_;
}

RechargeInfo* RechargeInfo::default_instance_ = NULL;

RechargeInfo* RechargeInfo::New() const {
  return new RechargeInfo;
}

void RechargeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RechargeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(playerid_, viplevel_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.RechargeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // optional string nickName = 2;
      case 2: {
        if (tag == 18) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rmb;
        break;
      }

      // optional int32 rmb = 3;
      case 3: {
        if (tag == 24) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.RechargeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.RechargeInfo)
  return false;
#undef DO_
}

void RechargeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.RechargeInfo)
  // optional int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int32 rmb = 3;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rmb(), output);
  }

  // optional int32 vipLevel = 4;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->viplevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.RechargeInfo)
}

::google::protobuf::uint8* RechargeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.RechargeInfo)
  // optional int32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 rmb = 3;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rmb(), target);
  }

  // optional int32 vipLevel = 4;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->viplevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.RechargeInfo)
  return target;
}

int RechargeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 rmb = 3;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }

    // optional int32 vipLevel = 4;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeInfo::MergeFrom(const RechargeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeInfo::CopyFrom(const RechargeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeInfo::IsInitialized() const {

  return true;
}

void RechargeInfo::Swap(RechargeInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(nickname_, other->nickname_);
    std::swap(rmb_, other->rmb_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeInfo_descriptor_;
  metadata.reflection = RechargeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_recharge_rank::kPacketIdFieldNumber;
const int packetc2w_req_recharge_rank::kIsYesterdayFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_recharge_rank::packetc2w_req_recharge_rank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_recharge_rank)
}

void packetc2w_req_recharge_rank::InitAsDefaultInstance() {
}

packetc2w_req_recharge_rank::packetc2w_req_recharge_rank(const packetc2w_req_recharge_rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_recharge_rank)
}

void packetc2w_req_recharge_rank::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5051;
  is_yesterday_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_recharge_rank::~packetc2w_req_recharge_rank() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_recharge_rank)
  SharedDtor();
}

void packetc2w_req_recharge_rank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_recharge_rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_recharge_rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_recharge_rank_descriptor_;
}

const packetc2w_req_recharge_rank& packetc2w_req_recharge_rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5frank_2eproto();
  return *default_instance_;
}

packetc2w_req_recharge_rank* packetc2w_req_recharge_rank::default_instance_ = NULL;

packetc2w_req_recharge_rank* packetc2w_req_recharge_rank::New() const {
  return new packetc2w_req_recharge_rank;
}

void packetc2w_req_recharge_rank::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5051;
    is_yesterday_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_recharge_rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_recharge_rank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_recharge_rank];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_yesterday;
        break;
      }

      // optional bool is_yesterday = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_is_yesterday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_yesterday_)));
          set_has_is_yesterday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_recharge_rank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_recharge_rank)
  return false;
#undef DO_
}

void packetc2w_req_recharge_rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_recharge_rank)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_recharge_rank];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool is_yesterday = 2 [default = false];
  if (has_is_yesterday()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_yesterday(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_recharge_rank)
}

::google::protobuf::uint8* packetc2w_req_recharge_rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_recharge_rank)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_recharge_rank];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool is_yesterday = 2 [default = false];
  if (has_is_yesterday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_yesterday(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_recharge_rank)
  return target;
}

int packetc2w_req_recharge_rank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_recharge_rank];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool is_yesterday = 2 [default = false];
    if (has_is_yesterday()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_recharge_rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_recharge_rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_recharge_rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_recharge_rank::MergeFrom(const packetc2w_req_recharge_rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_is_yesterday()) {
      set_is_yesterday(from.is_yesterday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_recharge_rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_recharge_rank::CopyFrom(const packetc2w_req_recharge_rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_recharge_rank::IsInitialized() const {

  return true;
}

void packetc2w_req_recharge_rank::Swap(packetc2w_req_recharge_rank* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(is_yesterday_, other->is_yesterday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_recharge_rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_recharge_rank_descriptor_;
  metadata.reflection = packetc2w_req_recharge_rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_recharge_rank_result::kPacketIdFieldNumber;
const int packetw2c_req_recharge_rank_result::kRankListFieldNumber;
const int packetw2c_req_recharge_rank_result::kSelfRankFieldNumber;
const int packetw2c_req_recharge_rank_result::kSelfrmbFieldNumber;
const int packetw2c_req_recharge_rank_result::kIsYesterdayFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_recharge_rank_result::packetw2c_req_recharge_rank_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_req_recharge_rank_result)
}

void packetw2c_req_recharge_rank_result::InitAsDefaultInstance() {
}

packetw2c_req_recharge_rank_result::packetw2c_req_recharge_rank_result(const packetw2c_req_recharge_rank_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_req_recharge_rank_result)
}

void packetw2c_req_recharge_rank_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7554;
  selfrank_ = 0;
  selfrmb_ = 0;
  is_yesterday_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_recharge_rank_result::~packetw2c_req_recharge_rank_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_req_recharge_rank_result)
  SharedDtor();
}

void packetw2c_req_recharge_rank_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_recharge_rank_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_recharge_rank_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_recharge_rank_result_descriptor_;
}

const packetw2c_req_recharge_rank_result& packetw2c_req_recharge_rank_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5frank_2eproto();
  return *default_instance_;
}

packetw2c_req_recharge_rank_result* packetw2c_req_recharge_rank_result::default_instance_ = NULL;

packetw2c_req_recharge_rank_result* packetw2c_req_recharge_rank_result::New() const {
  return new packetw2c_req_recharge_rank_result;
}

void packetw2c_req_recharge_rank_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_req_recharge_rank_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 29) {
    ZR_(selfrank_, is_yesterday_);
    packet_id_ = 7554;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_recharge_rank_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_req_recharge_rank_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_recharge_rank_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rankList;
        break;
      }

      // repeated .client2world_protocols.RechargeInfo rankList = 2;
      case 2: {
        if (tag == 18) {
         parse_rankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rankList;
        if (input->ExpectTag(24)) goto parse_selfRank;
        break;
      }

      // optional int32 selfRank = 3;
      case 3: {
        if (tag == 24) {
         parse_selfRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrank_)));
          set_has_selfrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_selfrmb;
        break;
      }

      // optional int32 selfrmb = 4;
      case 4: {
        if (tag == 32) {
         parse_selfrmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrmb_)));
          set_has_selfrmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_yesterday;
        break;
      }

      // optional bool is_yesterday = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_is_yesterday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_yesterday_)));
          set_has_is_yesterday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_req_recharge_rank_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_req_recharge_rank_result)
  return false;
#undef DO_
}

void packetw2c_req_recharge_rank_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_req_recharge_rank_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_recharge_rank_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.RechargeInfo rankList = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranklist(i), output);
  }

  // optional int32 selfRank = 3;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->selfrank(), output);
  }

  // optional int32 selfrmb = 4;
  if (has_selfrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->selfrmb(), output);
  }

  // optional bool is_yesterday = 5 [default = false];
  if (has_is_yesterday()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_yesterday(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_req_recharge_rank_result)
}

::google::protobuf::uint8* packetw2c_req_recharge_rank_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_req_recharge_rank_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_recharge_rank_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.RechargeInfo rankList = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranklist(i), target);
  }

  // optional int32 selfRank = 3;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->selfrank(), target);
  }

  // optional int32 selfrmb = 4;
  if (has_selfrmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->selfrmb(), target);
  }

  // optional bool is_yesterday = 5 [default = false];
  if (has_is_yesterday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_yesterday(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_req_recharge_rank_result)
  return target;
}

int packetw2c_req_recharge_rank_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_recharge_rank_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 selfRank = 3;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrank());
    }

    // optional int32 selfrmb = 4;
    if (has_selfrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrmb());
    }

    // optional bool is_yesterday = 5 [default = false];
    if (has_is_yesterday()) {
      total_size += 1 + 1;
    }

  }
  // repeated .client2world_protocols.RechargeInfo rankList = 2;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_recharge_rank_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_recharge_rank_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_recharge_rank_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_recharge_rank_result::MergeFrom(const packetw2c_req_recharge_rank_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_selfrank()) {
      set_selfrank(from.selfrank());
    }
    if (from.has_selfrmb()) {
      set_selfrmb(from.selfrmb());
    }
    if (from.has_is_yesterday()) {
      set_is_yesterday(from.is_yesterday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_recharge_rank_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_recharge_rank_result::CopyFrom(const packetw2c_req_recharge_rank_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_recharge_rank_result::IsInitialized() const {

  return true;
}

void packetw2c_req_recharge_rank_result::Swap(packetw2c_req_recharge_rank_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    ranklist_.Swap(&other->ranklist_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(selfrmb_, other->selfrmb_);
    std::swap(is_yesterday_, other->is_yesterday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_recharge_rank_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_recharge_rank_result_descriptor_;
  metadata.reflection = packetw2c_req_recharge_rank_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_coin_growth::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_coin_growth::packetc2w_req_coin_growth()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_coin_growth)
}

void packetc2w_req_coin_growth::InitAsDefaultInstance() {
}

packetc2w_req_coin_growth::packetc2w_req_coin_growth(const packetc2w_req_coin_growth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_coin_growth)
}

void packetc2w_req_coin_growth::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5054;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_coin_growth::~packetc2w_req_coin_growth() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_coin_growth)
  SharedDtor();
}

void packetc2w_req_coin_growth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_coin_growth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_coin_growth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_coin_growth_descriptor_;
}

const packetc2w_req_coin_growth& packetc2w_req_coin_growth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5frank_2eproto();
  return *default_instance_;
}

packetc2w_req_coin_growth* packetc2w_req_coin_growth::default_instance_ = NULL;

packetc2w_req_coin_growth* packetc2w_req_coin_growth::New() const {
  return new packetc2w_req_coin_growth;
}

void packetc2w_req_coin_growth::Clear() {
  packet_id_ = 5054;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_coin_growth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_coin_growth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_coin_growth];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_coin_growth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_coin_growth)
  return false;
#undef DO_
}

void packetc2w_req_coin_growth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_coin_growth)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_coin_growth];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_coin_growth)
}

::google::protobuf::uint8* packetc2w_req_coin_growth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_coin_growth)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_coin_growth];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_coin_growth)
  return target;
}

int packetc2w_req_coin_growth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_coin_growth];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_coin_growth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_coin_growth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_coin_growth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_coin_growth::MergeFrom(const packetc2w_req_coin_growth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_coin_growth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_coin_growth::CopyFrom(const packetc2w_req_coin_growth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_coin_growth::IsInitialized() const {

  return true;
}

void packetc2w_req_coin_growth::Swap(packetc2w_req_coin_growth* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_coin_growth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_coin_growth_descriptor_;
  metadata.reflection = packetc2w_req_coin_growth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_coin_growth_result::kPacketIdFieldNumber;
const int packetw2c_req_coin_growth_result::kRankListFieldNumber;
const int packetw2c_req_coin_growth_result::kSelfRankFieldNumber;
const int packetw2c_req_coin_growth_result::kSelfGoldFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_coin_growth_result::packetw2c_req_coin_growth_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_req_coin_growth_result)
}

void packetw2c_req_coin_growth_result::InitAsDefaultInstance() {
}

packetw2c_req_coin_growth_result::packetw2c_req_coin_growth_result(const packetw2c_req_coin_growth_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_req_coin_growth_result)
}

void packetw2c_req_coin_growth_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7557;
  selfrank_ = 0;
  selfgold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_coin_growth_result::~packetw2c_req_coin_growth_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_req_coin_growth_result)
  SharedDtor();
}

void packetw2c_req_coin_growth_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_coin_growth_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_coin_growth_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_coin_growth_result_descriptor_;
}

const packetw2c_req_coin_growth_result& packetw2c_req_coin_growth_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5frank_2eproto();
  return *default_instance_;
}

packetw2c_req_coin_growth_result* packetw2c_req_coin_growth_result::default_instance_ = NULL;

packetw2c_req_coin_growth_result* packetw2c_req_coin_growth_result::New() const {
  return new packetw2c_req_coin_growth_result;
}

void packetw2c_req_coin_growth_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_req_coin_growth_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(selfrank_, selfgold_);
    packet_id_ = 7557;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_coin_growth_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_req_coin_growth_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_coin_growth_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rankList;
        break;
      }

      // repeated .client2world_protocols.RankInfo rankList = 2;
      case 2: {
        if (tag == 18) {
         parse_rankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rankList;
        if (input->ExpectTag(24)) goto parse_selfRank;
        break;
      }

      // optional int32 selfRank = 3;
      case 3: {
        if (tag == 24) {
         parse_selfRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrank_)));
          set_has_selfrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_selfGold;
        break;
      }

      // optional int64 selfGold = 4;
      case 4: {
        if (tag == 32) {
         parse_selfGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &selfgold_)));
          set_has_selfgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_req_coin_growth_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_req_coin_growth_result)
  return false;
#undef DO_
}

void packetw2c_req_coin_growth_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_req_coin_growth_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_coin_growth_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.RankInfo rankList = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranklist(i), output);
  }

  // optional int32 selfRank = 3;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->selfrank(), output);
  }

  // optional int64 selfGold = 4;
  if (has_selfgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->selfgold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_req_coin_growth_result)
}

::google::protobuf::uint8* packetw2c_req_coin_growth_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_req_coin_growth_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_coin_growth_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.RankInfo rankList = 2;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranklist(i), target);
  }

  // optional int32 selfRank = 3;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->selfrank(), target);
  }

  // optional int64 selfGold = 4;
  if (has_selfgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->selfgold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_req_coin_growth_result)
  return target;
}

int packetw2c_req_coin_growth_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_coin_growth_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 selfRank = 3;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrank());
    }

    // optional int64 selfGold = 4;
    if (has_selfgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->selfgold());
    }

  }
  // repeated .client2world_protocols.RankInfo rankList = 2;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_coin_growth_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_coin_growth_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_coin_growth_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_coin_growth_result::MergeFrom(const packetw2c_req_coin_growth_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_selfrank()) {
      set_selfrank(from.selfrank());
    }
    if (from.has_selfgold()) {
      set_selfgold(from.selfgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_coin_growth_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_coin_growth_result::CopyFrom(const packetw2c_req_coin_growth_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_coin_growth_result::IsInitialized() const {

  return true;
}

void packetw2c_req_coin_growth_result::Swap(packetw2c_req_coin_growth_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    ranklist_.Swap(&other->ranklist_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(selfgold_, other->selfgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_coin_growth_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_coin_growth_result_descriptor_;
  metadata.reflection = packetw2c_req_coin_growth_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
