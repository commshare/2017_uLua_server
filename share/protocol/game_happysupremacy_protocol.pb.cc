// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_happysupremacy_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_happysupremacy_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_happysupremacy_protocols {

namespace {

const ::google::protobuf::Descriptor* msg_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_room_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_room_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_room_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_enter_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_enter_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_enter_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_enter_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* history_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  history_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_get_room_scene_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_get_room_scene_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_get_room_scene_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_get_room_scene_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_leave_room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_leave_room_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_leave_room_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_leave_room_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_add_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_add_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_add_bet_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_add_bet_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_repeat_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_repeat_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_repeat_bet_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_repeat_bet_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_clear_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_clear_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_clear_bet_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_clear_bet_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ask_for_banker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ask_for_banker_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_ask_for_banker_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_ask_for_banker_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_leave_banker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_leave_banker_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_leave_banker_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_leave_banker_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ask_for_first_banker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ask_for_first_banker_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_ask_for_first_banker_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_ask_for_first_banker_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ask_for_player_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ask_for_player_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_ask_for_player_list_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_ask_for_player_list_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ask_for_banker_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ask_for_banker_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_ask_for_banker_list_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_ask_for_banker_list_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_ask_for_history_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_ask_for_history_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_ask_for_history_list_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_ask_for_history_list_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_begin_bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_begin_bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_card_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_card_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_result_point_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_result_point_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_bet_result_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_bet_result_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_begin_award_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_begin_award_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_total_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_total_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_rob_banker_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_rob_banker_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_change_banker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_change_banker_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_check_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_check_state_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_check_state_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_check_state_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_bc_accept_gift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_bc_accept_gift_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_gm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_gm_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_gm_talk_server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_gm_talk_server_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_gm_talk_server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_gm_talk_server_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_msg_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_msg_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_gm_all_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_gm_all_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2l_gm_change_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2l_gm_change_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_gm_change_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_gm_change_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetl2c_notice_gm_stock_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetl2c_notice_gm_stock_info_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fhappysupremacy_5fprotocol_2eproto() {
  protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_happysupremacy_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  msg_room_info_descriptor_ = file->message_type(0);
  static const int msg_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, roomid_),
  };
  msg_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_room_info_descriptor_,
      msg_room_info::default_instance_,
      msg_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_room_info));
  packetc2l_get_room_info_descriptor_ = file->message_type(1);
  static const int packetc2l_get_room_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, packet_id_),
  };
  packetc2l_get_room_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_room_info_descriptor_,
      packetc2l_get_room_info::default_instance_,
      packetc2l_get_room_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_room_info));
  packetl2c_get_room_info_result_descriptor_ = file->message_type(2);
  static const int packetl2c_get_room_info_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, room_list_),
  };
  packetl2c_get_room_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_room_info_result_descriptor_,
      packetl2c_get_room_info_result::default_instance_,
      packetl2c_get_room_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_room_info_result));
  packetc2l_enter_room_descriptor_ = file->message_type(3);
  static const int packetc2l_enter_room_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, roomid_),
  };
  packetc2l_enter_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_enter_room_descriptor_,
      packetc2l_enter_room::default_instance_,
      packetc2l_enter_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_enter_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_enter_room));
  packetl2c_enter_room_result_descriptor_ = file->message_type(4);
  static const int packetl2c_enter_room_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, result_),
  };
  packetl2c_enter_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_enter_room_result_descriptor_,
      packetl2c_enter_room_result::default_instance_,
      packetl2c_enter_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_enter_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_enter_room_result));
  history_info_descriptor_ = file->message_type(5);
  static const int history_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, result_list_),
  };
  history_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      history_info_descriptor_,
      history_info::default_instance_,
      history_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(history_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(history_info));
  packetc2l_get_room_scene_info_descriptor_ = file->message_type(6);
  static const int packetc2l_get_room_scene_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, packet_id_),
  };
  packetc2l_get_room_scene_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_get_room_scene_info_descriptor_,
      packetc2l_get_room_scene_info::default_instance_,
      packetc2l_get_room_scene_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_get_room_scene_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_get_room_scene_info));
  packetl2c_get_room_scene_info_result_descriptor_ = file->message_type(7);
  static const int packetl2c_get_room_scene_info_result_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, room_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, bet_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, remain_card_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, banker_continue_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, history_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, banker_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, banker_win_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, is_can_rob_banker_),
  };
  packetl2c_get_room_scene_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_get_room_scene_info_result_descriptor_,
      packetl2c_get_room_scene_info_result::default_instance_,
      packetl2c_get_room_scene_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_get_room_scene_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_get_room_scene_info_result));
  packetc2l_leave_room_descriptor_ = file->message_type(8);
  static const int packetc2l_leave_room_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, packet_id_),
  };
  packetc2l_leave_room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_leave_room_descriptor_,
      packetc2l_leave_room::default_instance_,
      packetc2l_leave_room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_leave_room));
  packetl2c_leave_room_result_descriptor_ = file->message_type(9);
  static const int packetl2c_leave_room_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, player_gold_),
  };
  packetl2c_leave_room_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_leave_room_result_descriptor_,
      packetl2c_leave_room_result::default_instance_,
      packetl2c_leave_room_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_room_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_leave_room_result));
  packetc2l_add_bet_descriptor_ = file->message_type(10);
  static const int packetc2l_add_bet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_add_bet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_add_bet, betinfo_),
  };
  packetc2l_add_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_add_bet_descriptor_,
      packetc2l_add_bet::default_instance_,
      packetc2l_add_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_add_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_add_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_add_bet));
  packetl2c_add_bet_result_descriptor_ = file->message_type(11);
  static const int packetl2c_add_bet_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_add_bet_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_add_bet_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_add_bet_result, betinfo_),
  };
  packetl2c_add_bet_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_add_bet_result_descriptor_,
      packetl2c_add_bet_result::default_instance_,
      packetl2c_add_bet_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_add_bet_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_add_bet_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_add_bet_result));
  packetc2l_repeat_bet_descriptor_ = file->message_type(12);
  static const int packetc2l_repeat_bet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_repeat_bet, packet_id_),
  };
  packetc2l_repeat_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_repeat_bet_descriptor_,
      packetc2l_repeat_bet::default_instance_,
      packetc2l_repeat_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_repeat_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_repeat_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_repeat_bet));
  packetl2c_repeat_bet_result_descriptor_ = file->message_type(13);
  static const int packetl2c_repeat_bet_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_repeat_bet_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_repeat_bet_result, result_),
  };
  packetl2c_repeat_bet_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_repeat_bet_result_descriptor_,
      packetl2c_repeat_bet_result::default_instance_,
      packetl2c_repeat_bet_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_repeat_bet_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_repeat_bet_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_repeat_bet_result));
  packetc2l_clear_bet_descriptor_ = file->message_type(14);
  static const int packetc2l_clear_bet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_clear_bet, packet_id_),
  };
  packetc2l_clear_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_clear_bet_descriptor_,
      packetc2l_clear_bet::default_instance_,
      packetc2l_clear_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_clear_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_clear_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_clear_bet));
  packetl2c_clear_bet_result_descriptor_ = file->message_type(15);
  static const int packetl2c_clear_bet_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_clear_bet_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_clear_bet_result, result_),
  };
  packetl2c_clear_bet_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_clear_bet_result_descriptor_,
      packetl2c_clear_bet_result::default_instance_,
      packetl2c_clear_bet_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_clear_bet_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_clear_bet_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_clear_bet_result));
  packetc2l_ask_for_banker_descriptor_ = file->message_type(16);
  static const int packetc2l_ask_for_banker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_banker, packet_id_),
  };
  packetc2l_ask_for_banker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ask_for_banker_descriptor_,
      packetc2l_ask_for_banker::default_instance_,
      packetc2l_ask_for_banker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_banker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_banker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ask_for_banker));
  packetl2c_ask_for_banker_result_descriptor_ = file->message_type(17);
  static const int packetl2c_ask_for_banker_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_banker_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_banker_result, result_),
  };
  packetl2c_ask_for_banker_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_ask_for_banker_result_descriptor_,
      packetl2c_ask_for_banker_result::default_instance_,
      packetl2c_ask_for_banker_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_banker_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_banker_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_ask_for_banker_result));
  packetc2l_leave_banker_descriptor_ = file->message_type(18);
  static const int packetc2l_leave_banker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_banker, packet_id_),
  };
  packetc2l_leave_banker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_leave_banker_descriptor_,
      packetc2l_leave_banker::default_instance_,
      packetc2l_leave_banker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_banker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_leave_banker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_leave_banker));
  packetl2c_leave_banker_result_descriptor_ = file->message_type(19);
  static const int packetl2c_leave_banker_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_banker_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_banker_result, result_),
  };
  packetl2c_leave_banker_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_leave_banker_result_descriptor_,
      packetl2c_leave_banker_result::default_instance_,
      packetl2c_leave_banker_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_banker_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_leave_banker_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_leave_banker_result));
  packetc2l_ask_for_first_banker_descriptor_ = file->message_type(20);
  static const int packetc2l_ask_for_first_banker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_first_banker, packet_id_),
  };
  packetc2l_ask_for_first_banker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ask_for_first_banker_descriptor_,
      packetc2l_ask_for_first_banker::default_instance_,
      packetc2l_ask_for_first_banker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_first_banker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_first_banker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ask_for_first_banker));
  packetl2c_ask_for_first_banker_result_descriptor_ = file->message_type(21);
  static const int packetl2c_ask_for_first_banker_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_first_banker_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_first_banker_result, result_),
  };
  packetl2c_ask_for_first_banker_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_ask_for_first_banker_result_descriptor_,
      packetl2c_ask_for_first_banker_result::default_instance_,
      packetl2c_ask_for_first_banker_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_first_banker_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_first_banker_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_ask_for_first_banker_result));
  player_info_descriptor_ = file->message_type(22);
  static const int player_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_head_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_head_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, player_vip_lv_),
  };
  player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      player_info_descriptor_,
      player_info::default_instance_,
      player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(player_info));
  packetc2l_ask_for_player_list_descriptor_ = file->message_type(23);
  static const int packetc2l_ask_for_player_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_player_list, packet_id_),
  };
  packetc2l_ask_for_player_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ask_for_player_list_descriptor_,
      packetc2l_ask_for_player_list::default_instance_,
      packetc2l_ask_for_player_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_player_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_player_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ask_for_player_list));
  packetl2c_ask_for_player_list_result_descriptor_ = file->message_type(24);
  static const int packetl2c_ask_for_player_list_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_player_list_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_player_list_result, player_list_),
  };
  packetl2c_ask_for_player_list_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_ask_for_player_list_result_descriptor_,
      packetl2c_ask_for_player_list_result::default_instance_,
      packetl2c_ask_for_player_list_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_player_list_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_player_list_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_ask_for_player_list_result));
  packetc2l_ask_for_banker_list_descriptor_ = file->message_type(25);
  static const int packetc2l_ask_for_banker_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_banker_list, packet_id_),
  };
  packetc2l_ask_for_banker_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ask_for_banker_list_descriptor_,
      packetc2l_ask_for_banker_list::default_instance_,
      packetc2l_ask_for_banker_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_banker_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_banker_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ask_for_banker_list));
  packetl2c_ask_for_banker_list_result_descriptor_ = file->message_type(26);
  static const int packetl2c_ask_for_banker_list_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_banker_list_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_banker_list_result, banker_list_),
  };
  packetl2c_ask_for_banker_list_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_ask_for_banker_list_result_descriptor_,
      packetl2c_ask_for_banker_list_result::default_instance_,
      packetl2c_ask_for_banker_list_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_banker_list_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_banker_list_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_ask_for_banker_list_result));
  packetc2l_ask_for_history_list_descriptor_ = file->message_type(27);
  static const int packetc2l_ask_for_history_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_history_list, packet_id_),
  };
  packetc2l_ask_for_history_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_ask_for_history_list_descriptor_,
      packetc2l_ask_for_history_list::default_instance_,
      packetc2l_ask_for_history_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_history_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_ask_for_history_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_ask_for_history_list));
  packetl2c_ask_for_history_list_result_descriptor_ = file->message_type(28);
  static const int packetl2c_ask_for_history_list_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_history_list_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_history_list_result, history_list_),
  };
  packetl2c_ask_for_history_list_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_ask_for_history_list_result_descriptor_,
      packetl2c_ask_for_history_list_result::default_instance_,
      packetl2c_ask_for_history_list_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_history_list_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_ask_for_history_list_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_ask_for_history_list_result));
  packetl2c_bc_begin_bet_descriptor_ = file->message_type(29);
  static const int packetl2c_bc_begin_bet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_bet, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_bet, is_can_rob_banker_),
  };
  packetl2c_bc_begin_bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_begin_bet_descriptor_,
      packetl2c_bc_begin_bet::default_instance_,
      packetl2c_bc_begin_bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_begin_bet));
  msg_card_info_descriptor_ = file->message_type(30);
  static const int msg_card_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_card_info, card_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_card_info, card_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_card_info, owner_),
  };
  msg_card_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_card_info_descriptor_,
      msg_card_info::default_instance_,
      msg_card_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_card_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_card_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_card_info));
  msg_result_point_info_descriptor_ = file->message_type(31);
  static const int msg_result_point_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_point_info, combinecardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_point_info, owner_),
  };
  msg_result_point_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_result_point_info_descriptor_,
      msg_result_point_info::default_instance_,
      msg_result_point_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_point_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_point_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_result_point_info));
  msg_bet_result_info_descriptor_ = file->message_type(32);
  static const int msg_bet_result_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_result_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_result_info, result_),
  };
  msg_bet_result_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_bet_result_info_descriptor_,
      msg_bet_result_info::default_instance_,
      msg_bet_result_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_result_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_result_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_bet_result_info));
  msg_bet_info_descriptor_ = file->message_type(33);
  static const int msg_bet_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, bet_count_),
  };
  msg_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_bet_info_descriptor_,
      msg_bet_info::default_instance_,
      msg_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_bet_info));
  packetl2c_bc_begin_award_descriptor_ = file->message_type(34);
  static const int packetl2c_bc_begin_award_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, result_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, player_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, result_point_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, self_win_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, banker_win_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, banker_gold_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, is_refresh_history_),
  };
  packetl2c_bc_begin_award_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_begin_award_descriptor_,
      packetl2c_bc_begin_award::default_instance_,
      packetl2c_bc_begin_award_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_begin_award, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_begin_award));
  packetl2c_bc_total_bet_info_descriptor_ = file->message_type(35);
  static const int packetl2c_bc_total_bet_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_total_bet_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_total_bet_info, bet_info_list_),
  };
  packetl2c_bc_total_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_total_bet_info_descriptor_,
      packetl2c_bc_total_bet_info::default_instance_,
      packetl2c_bc_total_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_total_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_total_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_total_bet_info));
  packetl2c_bc_rob_banker_info_descriptor_ = file->message_type(36);
  static const int packetl2c_bc_rob_banker_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_rob_banker_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_rob_banker_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_rob_banker_info, pay_count_),
  };
  packetl2c_bc_rob_banker_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_rob_banker_info_descriptor_,
      packetl2c_bc_rob_banker_info::default_instance_,
      packetl2c_bc_rob_banker_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_rob_banker_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_rob_banker_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_rob_banker_info));
  packetl2c_bc_change_banker_descriptor_ = file->message_type(37);
  static const int packetl2c_bc_change_banker_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_banker, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_banker, banker_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_banker, is_rob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_banker, old_banker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_banker, system_draw_water_),
  };
  packetl2c_bc_change_banker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_change_banker_descriptor_,
      packetl2c_bc_change_banker::default_instance_,
      packetl2c_bc_change_banker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_banker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_change_banker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_change_banker));
  packetc2l_check_state_descriptor_ = file->message_type(38);
  static const int packetc2l_check_state_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, packet_id_),
  };
  packetc2l_check_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_check_state_descriptor_,
      packetc2l_check_state::default_instance_,
      packetc2l_check_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_check_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_check_state));
  packetl2c_check_state_result_descriptor_ = file->message_type(39);
  static const int packetl2c_check_state_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, is_intable_),
  };
  packetl2c_check_state_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_check_state_result_descriptor_,
      packetl2c_check_state_result::default_instance_,
      packetl2c_check_state_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_check_state_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_check_state_result));
  packetl2c_bc_accept_gift_descriptor_ = file->message_type(40);
  static const int packetl2c_bc_accept_gift_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_accept_gift, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_accept_gift, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_accept_gift, gift_id_),
  };
  packetl2c_bc_accept_gift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_bc_accept_gift_descriptor_,
      packetl2c_bc_accept_gift::default_instance_,
      packetl2c_bc_accept_gift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_accept_gift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_bc_accept_gift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_bc_accept_gift));
  packetc2l_gm_descriptor_ = file->message_type(41);
  static const int packetc2l_gm_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm, gm_max_),
  };
  packetc2l_gm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_gm_descriptor_,
      packetc2l_gm::default_instance_,
      packetc2l_gm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_gm));
  packetc2l_gm_talk_server_descriptor_ = file->message_type(42);
  static const int packetc2l_gm_talk_server_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_talk_server, packet_id_),
  };
  packetc2l_gm_talk_server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_gm_talk_server_descriptor_,
      packetc2l_gm_talk_server::default_instance_,
      packetc2l_gm_talk_server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_talk_server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_talk_server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_gm_talk_server));
  packetl2c_gm_talk_server_descriptor_ = file->message_type(43);
  static const int packetl2c_gm_talk_server_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_talk_server, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_talk_server, result_),
  };
  packetl2c_gm_talk_server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_gm_talk_server_descriptor_,
      packetl2c_gm_talk_server::default_instance_,
      packetl2c_gm_talk_server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_talk_server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_talk_server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_gm_talk_server));
  gm_msg_bet_info_descriptor_ = file->message_type(44);
  static const int gm_msg_bet_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_msg_bet_info, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_msg_bet_info, bet_info_),
  };
  gm_msg_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_msg_bet_info_descriptor_,
      gm_msg_bet_info::default_instance_,
      gm_msg_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_msg_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_msg_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_msg_bet_info));
  packetl2c_notice_gm_all_bet_info_descriptor_ = file->message_type(45);
  static const int packetl2c_notice_gm_all_bet_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_all_bet_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_all_bet_info, bet_info_list_),
  };
  packetl2c_notice_gm_all_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_gm_all_bet_info_descriptor_,
      packetl2c_notice_gm_all_bet_info::default_instance_,
      packetl2c_notice_gm_all_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_all_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_all_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_gm_all_bet_info));
  packetc2l_gm_change_result_descriptor_ = file->message_type(46);
  static const int packetc2l_gm_change_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_change_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_change_result, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_change_result, bet_type_list_),
  };
  packetc2l_gm_change_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2l_gm_change_result_descriptor_,
      packetc2l_gm_change_result::default_instance_,
      packetc2l_gm_change_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_change_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2l_gm_change_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2l_gm_change_result));
  packetl2c_gm_change_result_descriptor_ = file->message_type(47);
  static const int packetl2c_gm_change_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_change_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_change_result, result_),
  };
  packetl2c_gm_change_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_gm_change_result_descriptor_,
      packetl2c_gm_change_result::default_instance_,
      packetl2c_gm_change_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_change_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_gm_change_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_gm_change_result));
  packetl2c_notice_gm_stock_info_descriptor_ = file->message_type(48);
  static const int packetl2c_notice_gm_stock_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_stock_info, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_stock_info, stock_total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_stock_info, stock_add_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_stock_info, stock_earnrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_stock_info, stock_total_earnrate_income_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_stock_info, stock_add_earnrate_income_),
  };
  packetl2c_notice_gm_stock_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetl2c_notice_gm_stock_info_descriptor_,
      packetl2c_notice_gm_stock_info::default_instance_,
      packetl2c_notice_gm_stock_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_stock_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetl2c_notice_gm_stock_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetl2c_notice_gm_stock_info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fhappysupremacy_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_room_info_descriptor_, &msg_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_room_info_descriptor_, &packetc2l_get_room_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_room_info_result_descriptor_, &packetl2c_get_room_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_enter_room_descriptor_, &packetc2l_enter_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_enter_room_result_descriptor_, &packetl2c_enter_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    history_info_descriptor_, &history_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_get_room_scene_info_descriptor_, &packetc2l_get_room_scene_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_get_room_scene_info_result_descriptor_, &packetl2c_get_room_scene_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_leave_room_descriptor_, &packetc2l_leave_room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_leave_room_result_descriptor_, &packetl2c_leave_room_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_add_bet_descriptor_, &packetc2l_add_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_add_bet_result_descriptor_, &packetl2c_add_bet_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_repeat_bet_descriptor_, &packetc2l_repeat_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_repeat_bet_result_descriptor_, &packetl2c_repeat_bet_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_clear_bet_descriptor_, &packetc2l_clear_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_clear_bet_result_descriptor_, &packetl2c_clear_bet_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ask_for_banker_descriptor_, &packetc2l_ask_for_banker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_ask_for_banker_result_descriptor_, &packetl2c_ask_for_banker_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_leave_banker_descriptor_, &packetc2l_leave_banker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_leave_banker_result_descriptor_, &packetl2c_leave_banker_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ask_for_first_banker_descriptor_, &packetc2l_ask_for_first_banker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_ask_for_first_banker_result_descriptor_, &packetl2c_ask_for_first_banker_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    player_info_descriptor_, &player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ask_for_player_list_descriptor_, &packetc2l_ask_for_player_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_ask_for_player_list_result_descriptor_, &packetl2c_ask_for_player_list_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ask_for_banker_list_descriptor_, &packetc2l_ask_for_banker_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_ask_for_banker_list_result_descriptor_, &packetl2c_ask_for_banker_list_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_ask_for_history_list_descriptor_, &packetc2l_ask_for_history_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_ask_for_history_list_result_descriptor_, &packetl2c_ask_for_history_list_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_begin_bet_descriptor_, &packetl2c_bc_begin_bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_card_info_descriptor_, &msg_card_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_result_point_info_descriptor_, &msg_result_point_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_bet_result_info_descriptor_, &msg_bet_result_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_bet_info_descriptor_, &msg_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_begin_award_descriptor_, &packetl2c_bc_begin_award::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_total_bet_info_descriptor_, &packetl2c_bc_total_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_rob_banker_info_descriptor_, &packetl2c_bc_rob_banker_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_change_banker_descriptor_, &packetl2c_bc_change_banker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_check_state_descriptor_, &packetc2l_check_state::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_check_state_result_descriptor_, &packetl2c_check_state_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_bc_accept_gift_descriptor_, &packetl2c_bc_accept_gift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_gm_descriptor_, &packetc2l_gm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_gm_talk_server_descriptor_, &packetc2l_gm_talk_server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_gm_talk_server_descriptor_, &packetl2c_gm_talk_server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_msg_bet_info_descriptor_, &gm_msg_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_gm_all_bet_info_descriptor_, &packetl2c_notice_gm_all_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2l_gm_change_result_descriptor_, &packetc2l_gm_change_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_gm_change_result_descriptor_, &packetl2c_gm_change_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetl2c_notice_gm_stock_info_descriptor_, &packetl2c_notice_gm_stock_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fhappysupremacy_5fprotocol_2eproto() {
  delete msg_room_info::default_instance_;
  delete msg_room_info_reflection_;
  delete packetc2l_get_room_info::default_instance_;
  delete packetc2l_get_room_info_reflection_;
  delete packetl2c_get_room_info_result::default_instance_;
  delete packetl2c_get_room_info_result_reflection_;
  delete packetc2l_enter_room::default_instance_;
  delete packetc2l_enter_room_reflection_;
  delete packetl2c_enter_room_result::default_instance_;
  delete packetl2c_enter_room_result_reflection_;
  delete history_info::default_instance_;
  delete history_info_reflection_;
  delete packetc2l_get_room_scene_info::default_instance_;
  delete packetc2l_get_room_scene_info_reflection_;
  delete packetl2c_get_room_scene_info_result::default_instance_;
  delete packetl2c_get_room_scene_info_result_reflection_;
  delete packetc2l_leave_room::default_instance_;
  delete packetc2l_leave_room_reflection_;
  delete packetl2c_leave_room_result::default_instance_;
  delete packetl2c_leave_room_result_reflection_;
  delete packetc2l_add_bet::default_instance_;
  delete packetc2l_add_bet_reflection_;
  delete packetl2c_add_bet_result::default_instance_;
  delete packetl2c_add_bet_result_reflection_;
  delete packetc2l_repeat_bet::default_instance_;
  delete packetc2l_repeat_bet_reflection_;
  delete packetl2c_repeat_bet_result::default_instance_;
  delete packetl2c_repeat_bet_result_reflection_;
  delete packetc2l_clear_bet::default_instance_;
  delete packetc2l_clear_bet_reflection_;
  delete packetl2c_clear_bet_result::default_instance_;
  delete packetl2c_clear_bet_result_reflection_;
  delete packetc2l_ask_for_banker::default_instance_;
  delete packetc2l_ask_for_banker_reflection_;
  delete packetl2c_ask_for_banker_result::default_instance_;
  delete packetl2c_ask_for_banker_result_reflection_;
  delete packetc2l_leave_banker::default_instance_;
  delete packetc2l_leave_banker_reflection_;
  delete packetl2c_leave_banker_result::default_instance_;
  delete packetl2c_leave_banker_result_reflection_;
  delete packetc2l_ask_for_first_banker::default_instance_;
  delete packetc2l_ask_for_first_banker_reflection_;
  delete packetl2c_ask_for_first_banker_result::default_instance_;
  delete packetl2c_ask_for_first_banker_result_reflection_;
  delete player_info::default_instance_;
  delete player_info_reflection_;
  delete packetc2l_ask_for_player_list::default_instance_;
  delete packetc2l_ask_for_player_list_reflection_;
  delete packetl2c_ask_for_player_list_result::default_instance_;
  delete packetl2c_ask_for_player_list_result_reflection_;
  delete packetc2l_ask_for_banker_list::default_instance_;
  delete packetc2l_ask_for_banker_list_reflection_;
  delete packetl2c_ask_for_banker_list_result::default_instance_;
  delete packetl2c_ask_for_banker_list_result_reflection_;
  delete packetc2l_ask_for_history_list::default_instance_;
  delete packetc2l_ask_for_history_list_reflection_;
  delete packetl2c_ask_for_history_list_result::default_instance_;
  delete packetl2c_ask_for_history_list_result_reflection_;
  delete packetl2c_bc_begin_bet::default_instance_;
  delete packetl2c_bc_begin_bet_reflection_;
  delete msg_card_info::default_instance_;
  delete msg_card_info_reflection_;
  delete msg_result_point_info::default_instance_;
  delete msg_result_point_info_reflection_;
  delete msg_bet_result_info::default_instance_;
  delete msg_bet_result_info_reflection_;
  delete msg_bet_info::default_instance_;
  delete msg_bet_info_reflection_;
  delete packetl2c_bc_begin_award::default_instance_;
  delete packetl2c_bc_begin_award_reflection_;
  delete packetl2c_bc_total_bet_info::default_instance_;
  delete packetl2c_bc_total_bet_info_reflection_;
  delete packetl2c_bc_rob_banker_info::default_instance_;
  delete packetl2c_bc_rob_banker_info_reflection_;
  delete packetl2c_bc_change_banker::default_instance_;
  delete packetl2c_bc_change_banker_reflection_;
  delete packetc2l_check_state::default_instance_;
  delete packetc2l_check_state_reflection_;
  delete packetl2c_check_state_result::default_instance_;
  delete packetl2c_check_state_result_reflection_;
  delete packetl2c_bc_accept_gift::default_instance_;
  delete packetl2c_bc_accept_gift_reflection_;
  delete packetc2l_gm::default_instance_;
  delete packetc2l_gm_reflection_;
  delete packetc2l_gm_talk_server::default_instance_;
  delete packetc2l_gm_talk_server_reflection_;
  delete packetl2c_gm_talk_server::default_instance_;
  delete packetl2c_gm_talk_server_reflection_;
  delete gm_msg_bet_info::default_instance_;
  delete gm_msg_bet_info_reflection_;
  delete packetl2c_notice_gm_all_bet_info::default_instance_;
  delete packetl2c_notice_gm_all_bet_info_reflection_;
  delete packetc2l_gm_change_result::default_instance_;
  delete packetc2l_gm_change_result_reflection_;
  delete packetl2c_gm_change_result::default_instance_;
  delete packetl2c_gm_change_result_reflection_;
  delete packetl2c_notice_gm_stock_info::default_instance_;
  delete packetl2c_notice_gm_stock_info_reflection_;
}

void protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::game_happysupremacy_protocols::protobuf_AddDesc_game_5fhappysupremacy_5fdef_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"game_happysupremacy_protocol.proto\022\035ga"
    "me_happysupremacy_protocols\032\035game_happys"
    "upremacy_def.proto\032\022msg_type_def.proto\"\037"
    "\n\rmsg_room_info\022\016\n\006roomid\030\001 \001(\005\"w\n\027packe"
    "tc2l_get_room_info\022\\\n\tpacket_id\030\001 \001(\01620."
    "game_happysupremacy_protocols.e_server_m"
    "sg_type:\027e_mst_c2l_get_room_info\"\306\001\n\036pac"
    "ketl2c_get_room_info_result\022c\n\tpacket_id"
    "\030\001 \001(\01620.game_happysupremacy_protocols.e"
    "_server_msg_type:\036e_mst_l2c_get_room_inf"
    "o_result\022\?\n\troom_list\030\002 \003(\0132,.game_happy"
    "supremacy_protocols.msg_room_info\"\201\001\n\024pa"
    "cketc2l_enter_room\022Y\n\tpacket_id\030\001 \001(\01620."
    "game_happysupremacy_protocols.e_server_m"
    "sg_type:\024e_mst_c2l_enter_room\022\016\n\006roomid\030"
    "\002 \001(\005\"\273\001\n\033packetl2c_enter_room_result\022`\n"
    "\tpacket_id\030\001 \001(\01620.game_happysupremacy_p"
    "rotocols.e_server_msg_type:\033e_mst_l2c_en"
    "ter_room_result\022:\n\006result\030\002 \001(\0162\036.msg_ty"
    "pe_def.e_msg_result_def:\ne_rmt_fail\"W\n\014h"
    "istory_info\022G\n\013result_list\030\001 \003(\01322.game_"
    "happysupremacy_protocols.msg_bet_result_"
    "info\"\203\001\n\035packetc2l_get_room_scene_info\022b"
    "\n\tpacket_id\030\001 \001(\01620.game_happysupremacy_"
    "protocols.e_server_msg_type:\035e_mst_c2l_g"
    "et_room_scene_info\"\243\004\n$packetl2c_get_roo"
    "m_scene_info_result\022b\n\tpacket_id\030\001 \001(\01620"
    ".game_happysupremacy_protocols.e_server_"
    "msg_type:\035e_mst_l2c_get_room_scene_info\022"
    "\017\n\007room_id\030\002 \001(\005\022\?\n\nroom_state\030\003 \001(\0162+.g"
    "ame_happysupremacy_protocols.e_game_stat"
    "e\022\017\n\007cd_time\030\004 \001(\005\022B\n\rbet_info_list\030\005 \003("
    "\0132+.game_happysupremacy_protocols.msg_be"
    "t_info\022\031\n\021remain_card_count\030\006 \001(\005\022\035\n\025ban"
    "ker_continue_count\030\007 \001(\005\022A\n\014history_list"
    "\030\010 \003(\0132+.game_happysupremacy_protocols.h"
    "istory_info\022\?\n\013banker_info\030\t \001(\0132*.game_"
    "happysupremacy_protocols.player_info\022\027\n\017"
    "banker_win_gold\030\n \001(\003\022\031\n\021is_can_rob_bank"
    "er\030\013 \001(\010\"q\n\024packetc2l_leave_room\022Y\n\tpack"
    "et_id\030\001 \001(\01620.game_happysupremacy_protoc"
    "ols.e_server_msg_type:\024e_mst_c2l_leave_r"
    "oom\"\323\001\n\033packetl2c_leave_room_result\022`\n\tp"
    "acket_id\030\001 \001(\01620.game_happysupremacy_pro"
    "tocols.e_server_msg_type:\033e_mst_l2c_leav"
    "e_room_result\022=\n\006result\030\002 \001(\0162\036.msg_type"
    "_def.e_msg_result_def:\re_rmt_success\022\023\n\013"
    "player_gold\030\003 \001(\003\"\251\001\n\021packetc2l_add_bet\022"
    "V\n\tpacket_id\030\001 \001(\01620.game_happysupremacy"
    "_protocols.e_server_msg_type:\021e_mst_c2l_"
    "add_bet\022<\n\007betinfo\030\002 \001(\0132+.game_happysup"
    "remacy_protocols.msg_bet_info\"\354\001\n\030packet"
    "l2c_add_bet_result\022V\n\tpacket_id\030\001 \001(\01620."
    "game_happysupremacy_protocols.e_server_m"
    "sg_type:\021e_mst_l2c_add_bet\022:\n\006result\030\002 \001"
    "(\0162\036.msg_type_def.e_msg_result_def:\ne_rm"
    "t_fail\022<\n\007betinfo\030\003 \001(\0132+.game_happysupr"
    "emacy_protocols.msg_bet_info\"q\n\024packetc2"
    "l_repeat_bet\022Y\n\tpacket_id\030\001 \001(\01620.game_h"
    "appysupremacy_protocols.e_server_msg_typ"
    "e:\024e_mst_c2l_repeat_bet\"\264\001\n\033packetl2c_re"
    "peat_bet_result\022Y\n\tpacket_id\030\001 \001(\01620.gam"
    "e_happysupremacy_protocols.e_server_msg_"
    "type:\024e_mst_l2c_repeat_bet\022:\n\006result\030\002 \001"
    "(\0162\036.msg_type_def.e_msg_result_def:\ne_rm"
    "t_fail\"o\n\023packetc2l_clear_bet\022X\n\tpacket_"
    "id\030\001 \001(\01620.game_happysupremacy_protocols"
    ".e_server_msg_type:\023e_mst_c2l_clear_bet\""
    "\265\001\n\032packetl2c_clear_bet_result\022X\n\tpacket"
    "_id\030\001 \001(\01620.game_happysupremacy_protocol"
    "s.e_server_msg_type:\023e_mst_l2c_clear_bet"
    "\022=\n\006result\030\002 \001(\0162\036.msg_type_def.e_msg_re"
    "sult_def:\re_rmt_success\"y\n\030packetc2l_ask"
    "_for_banker\022]\n\tpacket_id\030\001 \001(\01620.game_ha"
    "ppysupremacy_protocols.e_server_msg_type"
    ":\030e_mst_c2l_ask_for_banker\"\277\001\n\037packetl2c"
    "_ask_for_banker_result\022]\n\tpacket_id\030\001 \001("
    "\01620.game_happysupremacy_protocols.e_serv"
    "er_msg_type:\030e_mst_l2c_ask_for_banker\022=\n"
    "\006result\030\002 \001(\0162\036.msg_type_def.e_msg_resul"
    "t_def:\re_rmt_success\"u\n\026packetc2l_leave_"
    "banker\022[\n\tpacket_id\030\001 \001(\01620.game_happysu"
    "premacy_protocols.e_server_msg_type:\026e_m"
    "st_c2l_leave_banker\"\273\001\n\035packetl2c_leave_"
    "banker_result\022[\n\tpacket_id\030\001 \001(\01620.game_"
    "happysupremacy_protocols.e_server_msg_ty"
    "pe:\026e_mst_l2c_leave_banker\022=\n\006result\030\002 \001"
    "(\0162\036.msg_type_def.e_msg_result_def:\re_rm"
    "t_success\"\205\001\n\036packetc2l_ask_for_first_ba"
    "nker\022c\n\tpacket_id\030\001 \001(\01620.game_happysupr"
    "emacy_protocols.e_server_msg_type:\036e_mst"
    "_c2l_ask_first_for_banker\"\313\001\n%packetl2c_"
    "ask_for_first_banker_result\022c\n\tpacket_id"
    "\030\001 \001(\01620.game_happysupremacy_protocols.e"
    "_server_msg_type:\036e_mst_l2c_ask_first_fo"
    "r_banker\022=\n\006result\030\002 \001(\0162\036.msg_type_def."
    "e_msg_result_def:\re_rmt_success\"\260\001\n\013play"
    "er_info\022\021\n\tplayer_id\030\001 \001(\005\022\027\n\017player_nic"
    "kname\030\002 \001(\t\022\031\n\021player_head_frame\030\003 \001(\005\022\032"
    "\n\022player_head_custom\030\004 \001(\t\022\023\n\013player_gol"
    "d\030\005 \001(\003\022\022\n\nplayer_sex\030\006 \001(\005\022\025\n\rplayer_vi"
    "p_lv\030\007 \001(\005\"\177\n\035packetc2l_ask_for_player_l"
    "ist\022^\n\tpacket_id\030\001 \001(\01620.game_happysupre"
    "macy_protocols.e_server_msg_type:\031e_mst_"
    "c2l_ask_player_list\"\307\001\n$packetl2c_ask_fo"
    "r_player_list_result\022^\n\tpacket_id\030\001 \001(\0162"
    "0.game_happysupremacy_protocols.e_server"
    "_msg_type:\031e_mst_l2c_ask_player_list\022\?\n\013"
    "player_list\030\002 \003(\0132*.game_happysupremacy_"
    "protocols.player_info\"\177\n\035packetc2l_ask_f"
    "or_banker_list\022^\n\tpacket_id\030\001 \001(\01620.game"
    "_happysupremacy_protocols.e_server_msg_t"
    "ype:\031e_mst_c2l_ask_banker_list\"\307\001\n$packe"
    "tl2c_ask_for_banker_list_result\022^\n\tpacke"
    "t_id\030\001 \001(\01620.game_happysupremacy_protoco"
    "ls.e_server_msg_type:\031e_mst_l2c_ask_bank"
    "er_list\022\?\n\013banker_list\030\002 \003(\0132*.game_happ"
    "ysupremacy_protocols.player_info\"\201\001\n\036pac"
    "ketc2l_ask_for_history_list\022_\n\tpacket_id"
    "\030\001 \001(\01620.game_happysupremacy_protocols.e"
    "_server_msg_type:\032e_mst_c2l_ask_history_"
    "list\"\313\001\n%packetl2c_ask_for_history_list_"
    "result\022_\n\tpacket_id\030\001 \001(\01620.game_happysu"
    "premacy_protocols.e_server_msg_type:\032e_m"
    "st_l2c_ask_history_list\022A\n\014history_list\030"
    "\002 \003(\0132+.game_happysupremacy_protocols.hi"
    "story_info\"\220\001\n\026packetl2c_bc_begin_bet\022[\n"
    "\tpacket_id\030\001 \001(\01620.game_happysupremacy_p"
    "rotocols.e_server_msg_type:\026e_mst_l2c_bc"
    "_begin_bet\022\031\n\021is_can_rob_banker\030\002 \001(\010\"\242\001"
    "\n\rmsg_card_info\022A\n\013card_flower\030\001 \001(\0162,.g"
    "ame_happysupremacy_protocols.e_card_flow"
    "er\022\022\n\ncard_point\030\002 \001(\005\022:\n\005owner\030\003 \001(\0162+."
    "game_happysupremacy_protocols.e_card_own"
    "er\"m\n\025msg_result_point_info\022\030\n\rcombineca"
    "rdId\030\001 \001(\r:\0010\022:\n\005owner\030\002 \001(\0162+.game_happ"
    "ysupremacy_protocols.e_card_owner\"\213\001\n\023ms"
    "g_bet_result_info\0227\n\004type\030\001 \001(\0162).game_h"
    "appysupremacy_protocols.e_bet_type\022;\n\006re"
    "sult\030\002 \001(\0162+.game_happysupremacy_protoco"
    "ls.e_bet_result\"Z\n\014msg_bet_info\0227\n\004type\030"
    "\001 \001(\0162).game_happysupremacy_protocols.e_"
    "bet_type\022\021\n\tbet_count\030\002 \001(\003\"\275\003\n\030packetl2"
    "c_bc_begin_award\022]\n\tpacket_id\030\001 \001(\01620.ga"
    "me_happysupremacy_protocols.e_server_msg"
    "_type:\030e_mst_l2c_bc_begin_award\022G\n\013resul"
    "t_list\030\002 \003(\01322.game_happysupremacy_proto"
    "cols.msg_bet_result_info\022A\n\013player_card\030"
    "\003 \003(\0132,.game_happysupremacy_protocols.ms"
    "g_card_info\022O\n\021result_point_info\030\004 \003(\01324"
    ".game_happysupremacy_protocols.msg_resul"
    "t_point_info\022\025\n\rself_win_gold\030\005 \001(\003\022\027\n\017b"
    "anker_win_gold\030\006 \001(\003\022\031\n\021banker_gold_coun"
    "t\030\007 \001(\003\022\032\n\022is_refresh_history\030\010 \001(\010\"\303\001\n\033"
    "packetl2c_bc_total_bet_info\022`\n\tpacket_id"
    "\030\001 \001(\01620.game_happysupremacy_protocols.e"
    "_server_msg_type:\033e_mst_l2c_bc_total_bet"
    "_info\022B\n\rbet_info_list\030\002 \003(\0132+.game_happ"
    "ysupremacy_protocols.msg_bet_info\"\247\001\n\034pa"
    "cketl2c_bc_rob_banker_info\022a\n\tpacket_id\030"
    "\001 \001(\01620.game_happysupremacy_protocols.e_"
    "server_msg_type:\034e_mst_l2c_bc_rob_banker"
    "_info\022\021\n\tplayer_id\030\002 \001(\005\022\021\n\tpay_count\030\003 "
    "\001(\005\"\200\002\n\032packetl2c_bc_change_banker\022_\n\tpa"
    "cket_id\030\001 \001(\01620.game_happysupremacy_prot"
    "ocols.e_server_msg_type:\032e_mst_l2c_bc_ch"
    "ange_banker\022\?\n\013banker_info\030\002 \001(\0132*.game_"
    "happysupremacy_protocols.player_info\022\016\n\006"
    "is_rob\030\003 \001(\010\022\025\n\rold_banker_id\030\004 \001(\005\022\031\n\021s"
    "ystem_draw_water\030\005 \001(\005\"s\n\025packetc2l_chec"
    "k_state\022Z\n\tpacket_id\030\001 \001(\01620.game_happys"
    "upremacy_protocols.e_server_msg_type:\025e_"
    "mst_c2l_check_state\"\234\001\n\034packetl2c_check_"
    "state_result\022a\n\tpacket_id\030\001 \001(\01620.game_h"
    "appysupremacy_protocols.e_server_msg_typ"
    "e:\034e_mst_l2c_check_state_result\022\031\n\nis_in"
    "table\030\002 \001(\010:\005false\"\235\001\n\030packetl2c_bc_acce"
    "pt_gift\022]\n\tpacket_id\030\001 \001(\01620.game_happys"
    "upremacy_protocols.e_server_msg_type:\030e_"
    "mst_l2c_bc_accept_gift\022\021\n\tplayer_id\030\002 \001("
    "\005\022\017\n\007gift_id\030\003 \001(\005\"q\n\014packetc2l_gm\022Q\n\tpa"
    "cket_id\030\001 \001(\01620.game_happysupremacy_prot"
    "ocols.e_server_msg_type:\014e_mst_c2l_gm\022\016\n"
    "\006gm_max\030\002 \001(\005\"y\n\030packetc2l_gm_talk_serve"
    "r\022]\n\tpacket_id\030\001 \001(\01620.game_happysuprema"
    "cy_protocols.e_server_msg_type:\030e_mst_c2"
    "l_gm_talk_server\"\270\001\n\030packetl2c_gm_talk_s"
    "erver\022]\n\tpacket_id\030\001 \001(\01620.game_happysup"
    "remacy_protocols.e_server_msg_type:\030e_ms"
    "t_l2c_gm_talk_server\022=\n\006result\030\002 \001(\0162\036.m"
    "sg_type_def.e_msg_result_def:\re_rmt_succ"
    "ess\"\221\001\n\017gm_msg_bet_info\022\?\n\013player_info\030\001"
    " \001(\0132*.game_happysupremacy_protocols.pla"
    "yer_info\022=\n\010bet_info\030\002 \003(\0132+.game_happys"
    "upremacy_protocols.msg_bet_info\"\320\001\n pack"
    "etl2c_notice_gm_all_bet_info\022e\n\tpacket_i"
    "d\030\001 \001(\01620.game_happysupremacy_protocols."
    "e_server_msg_type: e_mst_l2c_notice_gm_a"
    "ll_bet_info\022E\n\rbet_info_list\030\002 \003(\0132..gam"
    "e_happysupremacy_protocols.gm_msg_bet_in"
    "fo\"\320\001\n\032packetc2l_gm_change_result\022_\n\tpac"
    "ket_id\030\001 \001(\01620.game_happysupremacy_proto"
    "cols.e_server_msg_type:\032e_mst_c2l_gm_cha"
    "nge_result\022\017\n\007command\030\002 \001(\005\022@\n\rbet_type_"
    "list\030\003 \003(\0162).game_happysupremacy_protoco"
    "ls.e_bet_type\"\274\001\n\032packetl2c_gm_change_re"
    "sult\022_\n\tpacket_id\030\001 \001(\01620.game_happysupr"
    "emacy_protocols.e_server_msg_type:\032e_mst"
    "_l2c_gm_change_result\022=\n\006result\030\002 \001(\0162\036."
    "msg_type_def.e_msg_result_def:\re_rmt_suc"
    "cess\"\231\002\n\036packetl2c_notice_gm_stock_info\022"
    "c\n\tpacket_id\030\001 \001(\01620.game_happysupremacy"
    "_protocols.e_server_msg_type:\036e_mst_l2c_"
    "notice_gm_stock_info\022\031\n\021stock_total_coun"
    "t\030\002 \001(\003\022\027\n\017stock_add_count\030\003 \001(\003\022\026\n\016stoc"
    "k_earnRate\030\004 \001(\001\022#\n\033stock_total_earnRate"
    "_income\030\005 \001(\003\022!\n\031stock_add_earnRate_inco"
    "me\030\006 \001(\003", 8688);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_happysupremacy_protocol.proto", &protobuf_RegisterTypes);
  msg_room_info::default_instance_ = new msg_room_info();
  packetc2l_get_room_info::default_instance_ = new packetc2l_get_room_info();
  packetl2c_get_room_info_result::default_instance_ = new packetl2c_get_room_info_result();
  packetc2l_enter_room::default_instance_ = new packetc2l_enter_room();
  packetl2c_enter_room_result::default_instance_ = new packetl2c_enter_room_result();
  history_info::default_instance_ = new history_info();
  packetc2l_get_room_scene_info::default_instance_ = new packetc2l_get_room_scene_info();
  packetl2c_get_room_scene_info_result::default_instance_ = new packetl2c_get_room_scene_info_result();
  packetc2l_leave_room::default_instance_ = new packetc2l_leave_room();
  packetl2c_leave_room_result::default_instance_ = new packetl2c_leave_room_result();
  packetc2l_add_bet::default_instance_ = new packetc2l_add_bet();
  packetl2c_add_bet_result::default_instance_ = new packetl2c_add_bet_result();
  packetc2l_repeat_bet::default_instance_ = new packetc2l_repeat_bet();
  packetl2c_repeat_bet_result::default_instance_ = new packetl2c_repeat_bet_result();
  packetc2l_clear_bet::default_instance_ = new packetc2l_clear_bet();
  packetl2c_clear_bet_result::default_instance_ = new packetl2c_clear_bet_result();
  packetc2l_ask_for_banker::default_instance_ = new packetc2l_ask_for_banker();
  packetl2c_ask_for_banker_result::default_instance_ = new packetl2c_ask_for_banker_result();
  packetc2l_leave_banker::default_instance_ = new packetc2l_leave_banker();
  packetl2c_leave_banker_result::default_instance_ = new packetl2c_leave_banker_result();
  packetc2l_ask_for_first_banker::default_instance_ = new packetc2l_ask_for_first_banker();
  packetl2c_ask_for_first_banker_result::default_instance_ = new packetl2c_ask_for_first_banker_result();
  player_info::default_instance_ = new player_info();
  packetc2l_ask_for_player_list::default_instance_ = new packetc2l_ask_for_player_list();
  packetl2c_ask_for_player_list_result::default_instance_ = new packetl2c_ask_for_player_list_result();
  packetc2l_ask_for_banker_list::default_instance_ = new packetc2l_ask_for_banker_list();
  packetl2c_ask_for_banker_list_result::default_instance_ = new packetl2c_ask_for_banker_list_result();
  packetc2l_ask_for_history_list::default_instance_ = new packetc2l_ask_for_history_list();
  packetl2c_ask_for_history_list_result::default_instance_ = new packetl2c_ask_for_history_list_result();
  packetl2c_bc_begin_bet::default_instance_ = new packetl2c_bc_begin_bet();
  msg_card_info::default_instance_ = new msg_card_info();
  msg_result_point_info::default_instance_ = new msg_result_point_info();
  msg_bet_result_info::default_instance_ = new msg_bet_result_info();
  msg_bet_info::default_instance_ = new msg_bet_info();
  packetl2c_bc_begin_award::default_instance_ = new packetl2c_bc_begin_award();
  packetl2c_bc_total_bet_info::default_instance_ = new packetl2c_bc_total_bet_info();
  packetl2c_bc_rob_banker_info::default_instance_ = new packetl2c_bc_rob_banker_info();
  packetl2c_bc_change_banker::default_instance_ = new packetl2c_bc_change_banker();
  packetc2l_check_state::default_instance_ = new packetc2l_check_state();
  packetl2c_check_state_result::default_instance_ = new packetl2c_check_state_result();
  packetl2c_bc_accept_gift::default_instance_ = new packetl2c_bc_accept_gift();
  packetc2l_gm::default_instance_ = new packetc2l_gm();
  packetc2l_gm_talk_server::default_instance_ = new packetc2l_gm_talk_server();
  packetl2c_gm_talk_server::default_instance_ = new packetl2c_gm_talk_server();
  gm_msg_bet_info::default_instance_ = new gm_msg_bet_info();
  packetl2c_notice_gm_all_bet_info::default_instance_ = new packetl2c_notice_gm_all_bet_info();
  packetc2l_gm_change_result::default_instance_ = new packetc2l_gm_change_result();
  packetl2c_gm_change_result::default_instance_ = new packetl2c_gm_change_result();
  packetl2c_notice_gm_stock_info::default_instance_ = new packetl2c_notice_gm_stock_info();
  msg_room_info::default_instance_->InitAsDefaultInstance();
  packetc2l_get_room_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_room_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_enter_room::default_instance_->InitAsDefaultInstance();
  packetl2c_enter_room_result::default_instance_->InitAsDefaultInstance();
  history_info::default_instance_->InitAsDefaultInstance();
  packetc2l_get_room_scene_info::default_instance_->InitAsDefaultInstance();
  packetl2c_get_room_scene_info_result::default_instance_->InitAsDefaultInstance();
  packetc2l_leave_room::default_instance_->InitAsDefaultInstance();
  packetl2c_leave_room_result::default_instance_->InitAsDefaultInstance();
  packetc2l_add_bet::default_instance_->InitAsDefaultInstance();
  packetl2c_add_bet_result::default_instance_->InitAsDefaultInstance();
  packetc2l_repeat_bet::default_instance_->InitAsDefaultInstance();
  packetl2c_repeat_bet_result::default_instance_->InitAsDefaultInstance();
  packetc2l_clear_bet::default_instance_->InitAsDefaultInstance();
  packetl2c_clear_bet_result::default_instance_->InitAsDefaultInstance();
  packetc2l_ask_for_banker::default_instance_->InitAsDefaultInstance();
  packetl2c_ask_for_banker_result::default_instance_->InitAsDefaultInstance();
  packetc2l_leave_banker::default_instance_->InitAsDefaultInstance();
  packetl2c_leave_banker_result::default_instance_->InitAsDefaultInstance();
  packetc2l_ask_for_first_banker::default_instance_->InitAsDefaultInstance();
  packetl2c_ask_for_first_banker_result::default_instance_->InitAsDefaultInstance();
  player_info::default_instance_->InitAsDefaultInstance();
  packetc2l_ask_for_player_list::default_instance_->InitAsDefaultInstance();
  packetl2c_ask_for_player_list_result::default_instance_->InitAsDefaultInstance();
  packetc2l_ask_for_banker_list::default_instance_->InitAsDefaultInstance();
  packetl2c_ask_for_banker_list_result::default_instance_->InitAsDefaultInstance();
  packetc2l_ask_for_history_list::default_instance_->InitAsDefaultInstance();
  packetl2c_ask_for_history_list_result::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_begin_bet::default_instance_->InitAsDefaultInstance();
  msg_card_info::default_instance_->InitAsDefaultInstance();
  msg_result_point_info::default_instance_->InitAsDefaultInstance();
  msg_bet_result_info::default_instance_->InitAsDefaultInstance();
  msg_bet_info::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_begin_award::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_total_bet_info::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_rob_banker_info::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_change_banker::default_instance_->InitAsDefaultInstance();
  packetc2l_check_state::default_instance_->InitAsDefaultInstance();
  packetl2c_check_state_result::default_instance_->InitAsDefaultInstance();
  packetl2c_bc_accept_gift::default_instance_->InitAsDefaultInstance();
  packetc2l_gm::default_instance_->InitAsDefaultInstance();
  packetc2l_gm_talk_server::default_instance_->InitAsDefaultInstance();
  packetl2c_gm_talk_server::default_instance_->InitAsDefaultInstance();
  gm_msg_bet_info::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_gm_all_bet_info::default_instance_->InitAsDefaultInstance();
  packetc2l_gm_change_result::default_instance_->InitAsDefaultInstance();
  packetl2c_gm_change_result::default_instance_->InitAsDefaultInstance();
  packetl2c_notice_gm_stock_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fhappysupremacy_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fhappysupremacy_5fprotocol_2eproto {
  StaticDescriptorInitializer_game_5fhappysupremacy_5fprotocol_2eproto() {
    protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  }
} static_descriptor_initializer_game_5fhappysupremacy_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_room_info::kRoomidFieldNumber;
#endif  // !_MSC_VER

msg_room_info::msg_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.msg_room_info)
}

void msg_room_info::InitAsDefaultInstance() {
}

msg_room_info::msg_room_info(const msg_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.msg_room_info)
}

void msg_room_info::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_room_info::~msg_room_info() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.msg_room_info)
  SharedDtor();
}

void msg_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_room_info_descriptor_;
}

const msg_room_info& msg_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

msg_room_info* msg_room_info::default_instance_ = NULL;

msg_room_info* msg_room_info::New() const {
  return new msg_room_info;
}

void msg_room_info::Clear() {
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.msg_room_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.msg_room_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.msg_room_info)
  return false;
#undef DO_
}

void msg_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.msg_room_info)
  // optional int32 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.msg_room_info)
}

::google::protobuf::uint8* msg_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.msg_room_info)
  // optional int32 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.msg_room_info)
  return target;
}

int msg_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_room_info::MergeFrom(const msg_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_room_info::CopyFrom(const msg_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_room_info::IsInitialized() const {

  return true;
}

void msg_room_info::Swap(msg_room_info* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_room_info_descriptor_;
  metadata.reflection = msg_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_room_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_room_info::packetc2l_get_room_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_get_room_info)
}

void packetc2l_get_room_info::InitAsDefaultInstance() {
}

packetc2l_get_room_info::packetc2l_get_room_info(const packetc2l_get_room_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_get_room_info)
}

void packetc2l_get_room_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_room_info::~packetc2l_get_room_info() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_get_room_info)
  SharedDtor();
}

void packetc2l_get_room_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_room_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_room_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_room_info_descriptor_;
}

const packetc2l_get_room_info& packetc2l_get_room_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_room_info* packetc2l_get_room_info::default_instance_ = NULL;

packetc2l_get_room_info* packetc2l_get_room_info::New() const {
  return new packetc2l_get_room_info;
}

void packetc2l_get_room_info::Clear() {
  packet_id_ = 10001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_room_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_get_room_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_get_room_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_get_room_info)
  return false;
#undef DO_
}

void packetc2l_get_room_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_get_room_info)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_get_room_info)
}

::google::protobuf::uint8* packetc2l_get_room_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_get_room_info)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_get_room_info)
  return target;
}

int packetc2l_get_room_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_room_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_room_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_room_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_room_info::MergeFrom(const packetc2l_get_room_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_room_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_room_info::CopyFrom(const packetc2l_get_room_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_room_info::IsInitialized() const {

  return true;
}

void packetc2l_get_room_info::Swap(packetc2l_get_room_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_room_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_room_info_descriptor_;
  metadata.reflection = packetc2l_get_room_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_room_info_result::kPacketIdFieldNumber;
const int packetl2c_get_room_info_result::kRoomListFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_room_info_result::packetl2c_get_room_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_get_room_info_result)
}

void packetl2c_get_room_info_result::InitAsDefaultInstance() {
}

packetl2c_get_room_info_result::packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_get_room_info_result)
}

void packetl2c_get_room_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_room_info_result::~packetl2c_get_room_info_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_get_room_info_result)
  SharedDtor();
}

void packetl2c_get_room_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_get_room_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_room_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_room_info_result_descriptor_;
}

const packetl2c_get_room_info_result& packetl2c_get_room_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_room_info_result* packetl2c_get_room_info_result::default_instance_ = NULL;

packetl2c_get_room_info_result* packetl2c_get_room_info_result::New() const {
  return new packetl2c_get_room_info_result;
}

void packetl2c_get_room_info_result::Clear() {
  packet_id_ = 15001;
  room_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_room_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_get_room_info_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_list;
        break;
      }

      // repeated .game_happysupremacy_protocols.msg_room_info room_list = 2;
      case 2: {
        if (tag == 18) {
         parse_room_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_get_room_info_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_get_room_info_result)
  return false;
#undef DO_
}

void packetl2c_get_room_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_get_room_info_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_happysupremacy_protocols.msg_room_info room_list = 2;
  for (int i = 0; i < this->room_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_get_room_info_result)
}

::google::protobuf::uint8* packetl2c_get_room_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_get_room_info_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_happysupremacy_protocols.msg_room_info room_list = 2;
  for (int i = 0; i < this->room_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_get_room_info_result)
  return target;
}

int packetl2c_get_room_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_happysupremacy_protocols.msg_room_info room_list = 2;
  total_size += 1 * this->room_list_size();
  for (int i = 0; i < this->room_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_room_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_room_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_room_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_room_info_result::MergeFrom(const packetl2c_get_room_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_list_.MergeFrom(from.room_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_room_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_room_info_result::CopyFrom(const packetl2c_get_room_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_room_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_room_info_result::Swap(packetl2c_get_room_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    room_list_.Swap(&other->room_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_room_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_room_info_result_descriptor_;
  metadata.reflection = packetl2c_get_room_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_enter_room::kPacketIdFieldNumber;
const int packetc2l_enter_room::kRoomidFieldNumber;
#endif  // !_MSC_VER

packetc2l_enter_room::packetc2l_enter_room()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_enter_room)
}

void packetc2l_enter_room::InitAsDefaultInstance() {
}

packetc2l_enter_room::packetc2l_enter_room(const packetc2l_enter_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_enter_room)
}

void packetc2l_enter_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10002;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_enter_room::~packetc2l_enter_room() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_enter_room)
  SharedDtor();
}

void packetc2l_enter_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_enter_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_enter_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_enter_room_descriptor_;
}

const packetc2l_enter_room& packetc2l_enter_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_enter_room* packetc2l_enter_room::default_instance_ = NULL;

packetc2l_enter_room* packetc2l_enter_room::New() const {
  return new packetc2l_enter_room;
}

void packetc2l_enter_room::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 10002;
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_enter_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_enter_room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 2;
      case 2: {
        if (tag == 16) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_enter_room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_enter_room)
  return false;
#undef DO_
}

void packetc2l_enter_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_enter_room)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_enter_room)
}

::google::protobuf::uint8* packetc2l_enter_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_enter_room)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_enter_room)
  return target;
}

int packetc2l_enter_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_enter_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_enter_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_enter_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_enter_room::MergeFrom(const packetc2l_enter_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_enter_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_enter_room::CopyFrom(const packetc2l_enter_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_enter_room::IsInitialized() const {

  return true;
}

void packetc2l_enter_room::Swap(packetc2l_enter_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_enter_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_enter_room_descriptor_;
  metadata.reflection = packetc2l_enter_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_enter_room_result::kPacketIdFieldNumber;
const int packetl2c_enter_room_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_enter_room_result::packetl2c_enter_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_enter_room_result)
}

void packetl2c_enter_room_result::InitAsDefaultInstance() {
}

packetl2c_enter_room_result::packetl2c_enter_room_result(const packetl2c_enter_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_enter_room_result)
}

void packetl2c_enter_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15002;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_enter_room_result::~packetl2c_enter_room_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_enter_room_result)
  SharedDtor();
}

void packetl2c_enter_room_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_enter_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_enter_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_enter_room_result_descriptor_;
}

const packetl2c_enter_room_result& packetl2c_enter_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_enter_room_result* packetl2c_enter_room_result::default_instance_ = NULL;

packetl2c_enter_room_result* packetl2c_enter_room_result::New() const {
  return new packetl2c_enter_room_result;
}

void packetl2c_enter_room_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 15002;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_enter_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_enter_room_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_enter_room_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_enter_room_result)
  return false;
#undef DO_
}

void packetl2c_enter_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_enter_room_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_enter_room_result)
}

::google::protobuf::uint8* packetl2c_enter_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_enter_room_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_enter_room_result)
  return target;
}

int packetl2c_enter_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_room_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_enter_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_enter_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_enter_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_enter_room_result::MergeFrom(const packetl2c_enter_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_enter_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_enter_room_result::CopyFrom(const packetl2c_enter_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_enter_room_result::IsInitialized() const {

  return true;
}

void packetl2c_enter_room_result::Swap(packetl2c_enter_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_enter_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_enter_room_result_descriptor_;
  metadata.reflection = packetl2c_enter_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int history_info::kResultListFieldNumber;
#endif  // !_MSC_VER

history_info::history_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.history_info)
}

void history_info::InitAsDefaultInstance() {
}

history_info::history_info(const history_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.history_info)
}

void history_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

history_info::~history_info() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.history_info)
  SharedDtor();
}

void history_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void history_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* history_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return history_info_descriptor_;
}

const history_info& history_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

history_info* history_info::default_instance_ = NULL;

history_info* history_info::New() const {
  return new history_info;
}

void history_info::Clear() {
  result_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool history_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.history_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .game_happysupremacy_protocols.msg_bet_result_info result_list = 1;
      case 1: {
        if (tag == 10) {
         parse_result_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_result_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.history_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.history_info)
  return false;
#undef DO_
}

void history_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.history_info)
  // repeated .game_happysupremacy_protocols.msg_bet_result_info result_list = 1;
  for (int i = 0; i < this->result_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.history_info)
}

::google::protobuf::uint8* history_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.history_info)
  // repeated .game_happysupremacy_protocols.msg_bet_result_info result_list = 1;
  for (int i = 0; i < this->result_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.history_info)
  return target;
}

int history_info::ByteSize() const {
  int total_size = 0;

  // repeated .game_happysupremacy_protocols.msg_bet_result_info result_list = 1;
  total_size += 1 * this->result_list_size();
  for (int i = 0; i < this->result_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void history_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const history_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const history_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void history_info::MergeFrom(const history_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_list_.MergeFrom(from.result_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void history_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void history_info::CopyFrom(const history_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool history_info::IsInitialized() const {

  return true;
}

void history_info::Swap(history_info* other) {
  if (other != this) {
    result_list_.Swap(&other->result_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata history_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = history_info_descriptor_;
  metadata.reflection = history_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_get_room_scene_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_get_room_scene_info::packetc2l_get_room_scene_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_get_room_scene_info)
}

void packetc2l_get_room_scene_info::InitAsDefaultInstance() {
}

packetc2l_get_room_scene_info::packetc2l_get_room_scene_info(const packetc2l_get_room_scene_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_get_room_scene_info)
}

void packetc2l_get_room_scene_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10007;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_get_room_scene_info::~packetc2l_get_room_scene_info() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_get_room_scene_info)
  SharedDtor();
}

void packetc2l_get_room_scene_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_get_room_scene_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_get_room_scene_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_get_room_scene_info_descriptor_;
}

const packetc2l_get_room_scene_info& packetc2l_get_room_scene_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_get_room_scene_info* packetc2l_get_room_scene_info::default_instance_ = NULL;

packetc2l_get_room_scene_info* packetc2l_get_room_scene_info::New() const {
  return new packetc2l_get_room_scene_info;
}

void packetc2l_get_room_scene_info::Clear() {
  packet_id_ = 10007;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_get_room_scene_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_get_room_scene_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_get_room_scene_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_get_room_scene_info)
  return false;
#undef DO_
}

void packetc2l_get_room_scene_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_get_room_scene_info)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_get_room_scene_info)
}

::google::protobuf::uint8* packetc2l_get_room_scene_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_get_room_scene_info)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_get_room_scene_info)
  return target;
}

int packetc2l_get_room_scene_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_get_room_scene_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_get_room_scene_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_get_room_scene_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_get_room_scene_info::MergeFrom(const packetc2l_get_room_scene_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_get_room_scene_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_get_room_scene_info::CopyFrom(const packetc2l_get_room_scene_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_get_room_scene_info::IsInitialized() const {

  return true;
}

void packetc2l_get_room_scene_info::Swap(packetc2l_get_room_scene_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_get_room_scene_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_get_room_scene_info_descriptor_;
  metadata.reflection = packetc2l_get_room_scene_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_get_room_scene_info_result::kPacketIdFieldNumber;
const int packetl2c_get_room_scene_info_result::kRoomIdFieldNumber;
const int packetl2c_get_room_scene_info_result::kRoomStateFieldNumber;
const int packetl2c_get_room_scene_info_result::kCdTimeFieldNumber;
const int packetl2c_get_room_scene_info_result::kBetInfoListFieldNumber;
const int packetl2c_get_room_scene_info_result::kRemainCardCountFieldNumber;
const int packetl2c_get_room_scene_info_result::kBankerContinueCountFieldNumber;
const int packetl2c_get_room_scene_info_result::kHistoryListFieldNumber;
const int packetl2c_get_room_scene_info_result::kBankerInfoFieldNumber;
const int packetl2c_get_room_scene_info_result::kBankerWinGoldFieldNumber;
const int packetl2c_get_room_scene_info_result::kIsCanRobBankerFieldNumber;
#endif  // !_MSC_VER

packetl2c_get_room_scene_info_result::packetl2c_get_room_scene_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_get_room_scene_info_result)
}

void packetl2c_get_room_scene_info_result::InitAsDefaultInstance() {
  banker_info_ = const_cast< ::game_happysupremacy_protocols::player_info*>(&::game_happysupremacy_protocols::player_info::default_instance());
}

packetl2c_get_room_scene_info_result::packetl2c_get_room_scene_info_result(const packetl2c_get_room_scene_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_get_room_scene_info_result)
}

void packetl2c_get_room_scene_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15010;
  room_id_ = 0;
  room_state_ = 0;
  cd_time_ = 0;
  remain_card_count_ = 0;
  banker_continue_count_ = 0;
  banker_info_ = NULL;
  banker_win_gold_ = GOOGLE_LONGLONG(0);
  is_can_rob_banker_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_get_room_scene_info_result::~packetl2c_get_room_scene_info_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_get_room_scene_info_result)
  SharedDtor();
}

void packetl2c_get_room_scene_info_result::SharedDtor() {
  if (this != default_instance_) {
    delete banker_info_;
  }
}

void packetl2c_get_room_scene_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_get_room_scene_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_get_room_scene_info_result_descriptor_;
}

const packetl2c_get_room_scene_info_result& packetl2c_get_room_scene_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_get_room_scene_info_result* packetl2c_get_room_scene_info_result::default_instance_ = NULL;

packetl2c_get_room_scene_info_result* packetl2c_get_room_scene_info_result::New() const {
  return new packetl2c_get_room_scene_info_result;
}

void packetl2c_get_room_scene_info_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetl2c_get_room_scene_info_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(room_id_, cd_time_);
    ZR_(remain_card_count_, banker_continue_count_);
    packet_id_ = 15010;
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(banker_win_gold_, is_can_rob_banker_);
    if (has_banker_info()) {
      if (banker_info_ != NULL) banker_info_->::game_happysupremacy_protocols::player_info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  bet_info_list_.Clear();
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_get_room_scene_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_get_room_scene_info_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (tag == 16) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_room_state;
        break;
      }

      // optional .game_happysupremacy_protocols.e_game_state room_state = 3;
      case 3: {
        if (tag == 24) {
         parse_room_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_game_state_IsValid(value)) {
            set_room_state(static_cast< ::game_happysupremacy_protocols::e_game_state >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cd_time;
        break;
      }

      // optional int32 cd_time = 4;
      case 4: {
        if (tag == 32) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bet_info_list;
        break;
      }

      // repeated .game_happysupremacy_protocols.msg_bet_info bet_info_list = 5;
      case 5: {
        if (tag == 42) {
         parse_bet_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bet_info_list;
        if (input->ExpectTag(48)) goto parse_remain_card_count;
        break;
      }

      // optional int32 remain_card_count = 6;
      case 6: {
        if (tag == 48) {
         parse_remain_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_card_count_)));
          set_has_remain_card_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_banker_continue_count;
        break;
      }

      // optional int32 banker_continue_count = 7;
      case 7: {
        if (tag == 56) {
         parse_banker_continue_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_continue_count_)));
          set_has_banker_continue_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_history_list;
        break;
      }

      // repeated .game_happysupremacy_protocols.history_info history_list = 8;
      case 8: {
        if (tag == 66) {
         parse_history_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_history_list;
        if (input->ExpectTag(74)) goto parse_banker_info;
        break;
      }

      // optional .game_happysupremacy_protocols.player_info banker_info = 9;
      case 9: {
        if (tag == 74) {
         parse_banker_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banker_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_banker_win_gold;
        break;
      }

      // optional int64 banker_win_gold = 10;
      case 10: {
        if (tag == 80) {
         parse_banker_win_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_win_gold_)));
          set_has_banker_win_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_can_rob_banker;
        break;
      }

      // optional bool is_can_rob_banker = 11;
      case 11: {
        if (tag == 88) {
         parse_is_can_rob_banker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_can_rob_banker_)));
          set_has_is_can_rob_banker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_get_room_scene_info_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_get_room_scene_info_result)
  return false;
#undef DO_
}

void packetl2c_get_room_scene_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_get_room_scene_info_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // optional .game_happysupremacy_protocols.e_game_state room_state = 3;
  if (has_room_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->room_state(), output);
  }

  // optional int32 cd_time = 4;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cd_time(), output);
  }

  // repeated .game_happysupremacy_protocols.msg_bet_info bet_info_list = 5;
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bet_info_list(i), output);
  }

  // optional int32 remain_card_count = 6;
  if (has_remain_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->remain_card_count(), output);
  }

  // optional int32 banker_continue_count = 7;
  if (has_banker_continue_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->banker_continue_count(), output);
  }

  // repeated .game_happysupremacy_protocols.history_info history_list = 8;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->history_list(i), output);
  }

  // optional .game_happysupremacy_protocols.player_info banker_info = 9;
  if (has_banker_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->banker_info(), output);
  }

  // optional int64 banker_win_gold = 10;
  if (has_banker_win_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->banker_win_gold(), output);
  }

  // optional bool is_can_rob_banker = 11;
  if (has_is_can_rob_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_can_rob_banker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_get_room_scene_info_result)
}

::google::protobuf::uint8* packetl2c_get_room_scene_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_get_room_scene_info_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // optional .game_happysupremacy_protocols.e_game_state room_state = 3;
  if (has_room_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->room_state(), target);
  }

  // optional int32 cd_time = 4;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cd_time(), target);
  }

  // repeated .game_happysupremacy_protocols.msg_bet_info bet_info_list = 5;
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bet_info_list(i), target);
  }

  // optional int32 remain_card_count = 6;
  if (has_remain_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->remain_card_count(), target);
  }

  // optional int32 banker_continue_count = 7;
  if (has_banker_continue_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->banker_continue_count(), target);
  }

  // repeated .game_happysupremacy_protocols.history_info history_list = 8;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->history_list(i), target);
  }

  // optional .game_happysupremacy_protocols.player_info banker_info = 9;
  if (has_banker_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->banker_info(), target);
  }

  // optional int64 banker_win_gold = 10;
  if (has_banker_win_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->banker_win_gold(), target);
  }

  // optional bool is_can_rob_banker = 11;
  if (has_is_can_rob_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_can_rob_banker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_get_room_scene_info_result)
  return target;
}

int packetl2c_get_room_scene_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_scene_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional .game_happysupremacy_protocols.e_game_state room_state = 3;
    if (has_room_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_state());
    }

    // optional int32 cd_time = 4;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_time());
    }

    // optional int32 remain_card_count = 6;
    if (has_remain_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_card_count());
    }

    // optional int32 banker_continue_count = 7;
    if (has_banker_continue_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_continue_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .game_happysupremacy_protocols.player_info banker_info = 9;
    if (has_banker_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banker_info());
    }

    // optional int64 banker_win_gold = 10;
    if (has_banker_win_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_win_gold());
    }

    // optional bool is_can_rob_banker = 11;
    if (has_is_can_rob_banker()) {
      total_size += 1 + 1;
    }

  }
  // repeated .game_happysupremacy_protocols.msg_bet_info bet_info_list = 5;
  total_size += 1 * this->bet_info_list_size();
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_info_list(i));
  }

  // repeated .game_happysupremacy_protocols.history_info history_list = 8;
  total_size += 1 * this->history_list_size();
  for (int i = 0; i < this->history_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_get_room_scene_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_get_room_scene_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_get_room_scene_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_get_room_scene_info_result::MergeFrom(const packetl2c_get_room_scene_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_info_list_.MergeFrom(from.bet_info_list_);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_state()) {
      set_room_state(from.room_state());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
    if (from.has_remain_card_count()) {
      set_remain_card_count(from.remain_card_count());
    }
    if (from.has_banker_continue_count()) {
      set_banker_continue_count(from.banker_continue_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_banker_info()) {
      mutable_banker_info()->::game_happysupremacy_protocols::player_info::MergeFrom(from.banker_info());
    }
    if (from.has_banker_win_gold()) {
      set_banker_win_gold(from.banker_win_gold());
    }
    if (from.has_is_can_rob_banker()) {
      set_is_can_rob_banker(from.is_can_rob_banker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_get_room_scene_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_get_room_scene_info_result::CopyFrom(const packetl2c_get_room_scene_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_get_room_scene_info_result::IsInitialized() const {

  return true;
}

void packetl2c_get_room_scene_info_result::Swap(packetl2c_get_room_scene_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_state_, other->room_state_);
    std::swap(cd_time_, other->cd_time_);
    bet_info_list_.Swap(&other->bet_info_list_);
    std::swap(remain_card_count_, other->remain_card_count_);
    std::swap(banker_continue_count_, other->banker_continue_count_);
    history_list_.Swap(&other->history_list_);
    std::swap(banker_info_, other->banker_info_);
    std::swap(banker_win_gold_, other->banker_win_gold_);
    std::swap(is_can_rob_banker_, other->is_can_rob_banker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_get_room_scene_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_get_room_scene_info_result_descriptor_;
  metadata.reflection = packetl2c_get_room_scene_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_leave_room::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_leave_room::packetc2l_leave_room()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_leave_room)
}

void packetc2l_leave_room::InitAsDefaultInstance() {
}

packetc2l_leave_room::packetc2l_leave_room(const packetc2l_leave_room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_leave_room)
}

void packetc2l_leave_room::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_leave_room::~packetc2l_leave_room() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_leave_room)
  SharedDtor();
}

void packetc2l_leave_room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_leave_room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_leave_room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_leave_room_descriptor_;
}

const packetc2l_leave_room& packetc2l_leave_room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_leave_room* packetc2l_leave_room::default_instance_ = NULL;

packetc2l_leave_room* packetc2l_leave_room::New() const {
  return new packetc2l_leave_room;
}

void packetc2l_leave_room::Clear() {
  packet_id_ = 10003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_leave_room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_leave_room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_leave_room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_leave_room)
  return false;
#undef DO_
}

void packetc2l_leave_room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_leave_room)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_leave_room)
}

::google::protobuf::uint8* packetc2l_leave_room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_leave_room)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_leave_room)
  return target;
}

int packetc2l_leave_room::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_room];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_leave_room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_leave_room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_leave_room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_leave_room::MergeFrom(const packetc2l_leave_room& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_leave_room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_leave_room::CopyFrom(const packetc2l_leave_room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_leave_room::IsInitialized() const {

  return true;
}

void packetc2l_leave_room::Swap(packetc2l_leave_room* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_leave_room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_leave_room_descriptor_;
  metadata.reflection = packetc2l_leave_room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_leave_room_result::kPacketIdFieldNumber;
const int packetl2c_leave_room_result::kResultFieldNumber;
const int packetl2c_leave_room_result::kPlayerGoldFieldNumber;
#endif  // !_MSC_VER

packetl2c_leave_room_result::packetl2c_leave_room_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_leave_room_result)
}

void packetl2c_leave_room_result::InitAsDefaultInstance() {
}

packetl2c_leave_room_result::packetl2c_leave_room_result(const packetl2c_leave_room_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_leave_room_result)
}

void packetl2c_leave_room_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15003;
  result_ = 1;
  player_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_leave_room_result::~packetl2c_leave_room_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_leave_room_result)
  SharedDtor();
}

void packetl2c_leave_room_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_leave_room_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_leave_room_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_leave_room_result_descriptor_;
}

const packetl2c_leave_room_result& packetl2c_leave_room_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_leave_room_result* packetl2c_leave_room_result::default_instance_ = NULL;

packetl2c_leave_room_result* packetl2c_leave_room_result::New() const {
  return new packetl2c_leave_room_result;
}

void packetl2c_leave_room_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 15003;
    result_ = 1;
    player_gold_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_leave_room_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_leave_room_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 3;
      case 3: {
        if (tag == 24) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_leave_room_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_leave_room_result)
  return false;
#undef DO_
}

void packetl2c_leave_room_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_leave_room_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int64 player_gold = 3;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->player_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_leave_room_result)
}

::google::protobuf::uint8* packetl2c_leave_room_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_leave_room_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int64 player_gold = 3;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->player_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_leave_room_result)
  return target;
}

int packetl2c_leave_room_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_room_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 player_gold = 3;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_leave_room_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_leave_room_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_leave_room_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_leave_room_result::MergeFrom(const packetl2c_leave_room_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_leave_room_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_leave_room_result::CopyFrom(const packetl2c_leave_room_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_leave_room_result::IsInitialized() const {

  return true;
}

void packetl2c_leave_room_result::Swap(packetl2c_leave_room_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_leave_room_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_leave_room_result_descriptor_;
  metadata.reflection = packetl2c_leave_room_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_add_bet::kPacketIdFieldNumber;
const int packetc2l_add_bet::kBetinfoFieldNumber;
#endif  // !_MSC_VER

packetc2l_add_bet::packetc2l_add_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_add_bet)
}

void packetc2l_add_bet::InitAsDefaultInstance() {
  betinfo_ = const_cast< ::game_happysupremacy_protocols::msg_bet_info*>(&::game_happysupremacy_protocols::msg_bet_info::default_instance());
}

packetc2l_add_bet::packetc2l_add_bet(const packetc2l_add_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_add_bet)
}

void packetc2l_add_bet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10004;
  betinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_add_bet::~packetc2l_add_bet() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_add_bet)
  SharedDtor();
}

void packetc2l_add_bet::SharedDtor() {
  if (this != default_instance_) {
    delete betinfo_;
  }
}

void packetc2l_add_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_add_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_add_bet_descriptor_;
}

const packetc2l_add_bet& packetc2l_add_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_add_bet* packetc2l_add_bet::default_instance_ = NULL;

packetc2l_add_bet* packetc2l_add_bet::New() const {
  return new packetc2l_add_bet;
}

void packetc2l_add_bet::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 10004;
    if (has_betinfo()) {
      if (betinfo_ != NULL) betinfo_->::game_happysupremacy_protocols::msg_bet_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_add_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_add_bet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_bet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_betinfo;
        break;
      }

      // optional .game_happysupremacy_protocols.msg_bet_info betinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_betinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_betinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_add_bet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_add_bet)
  return false;
#undef DO_
}

void packetc2l_add_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_add_bet)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_happysupremacy_protocols.msg_bet_info betinfo = 2;
  if (has_betinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->betinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_add_bet)
}

::google::protobuf::uint8* packetc2l_add_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_add_bet)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_happysupremacy_protocols.msg_bet_info betinfo = 2;
  if (has_betinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->betinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_add_bet)
  return target;
}

int packetc2l_add_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_add_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_happysupremacy_protocols.msg_bet_info betinfo = 2;
    if (has_betinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->betinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_add_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_add_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_add_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_add_bet::MergeFrom(const packetc2l_add_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_betinfo()) {
      mutable_betinfo()->::game_happysupremacy_protocols::msg_bet_info::MergeFrom(from.betinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_add_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_add_bet::CopyFrom(const packetc2l_add_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_add_bet::IsInitialized() const {

  return true;
}

void packetc2l_add_bet::Swap(packetc2l_add_bet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(betinfo_, other->betinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_add_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_add_bet_descriptor_;
  metadata.reflection = packetc2l_add_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_add_bet_result::kPacketIdFieldNumber;
const int packetl2c_add_bet_result::kResultFieldNumber;
const int packetl2c_add_bet_result::kBetinfoFieldNumber;
#endif  // !_MSC_VER

packetl2c_add_bet_result::packetl2c_add_bet_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_add_bet_result)
}

void packetl2c_add_bet_result::InitAsDefaultInstance() {
  betinfo_ = const_cast< ::game_happysupremacy_protocols::msg_bet_info*>(&::game_happysupremacy_protocols::msg_bet_info::default_instance());
}

packetl2c_add_bet_result::packetl2c_add_bet_result(const packetl2c_add_bet_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_add_bet_result)
}

void packetl2c_add_bet_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15004;
  result_ = 2;
  betinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_add_bet_result::~packetl2c_add_bet_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_add_bet_result)
  SharedDtor();
}

void packetl2c_add_bet_result::SharedDtor() {
  if (this != default_instance_) {
    delete betinfo_;
  }
}

void packetl2c_add_bet_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_add_bet_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_add_bet_result_descriptor_;
}

const packetl2c_add_bet_result& packetl2c_add_bet_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_add_bet_result* packetl2c_add_bet_result::default_instance_ = NULL;

packetl2c_add_bet_result* packetl2c_add_bet_result::New() const {
  return new packetl2c_add_bet_result;
}

void packetl2c_add_bet_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 15004;
    result_ = 2;
    if (has_betinfo()) {
      if (betinfo_ != NULL) betinfo_->::game_happysupremacy_protocols::msg_bet_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_add_bet_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_add_bet_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_bet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_betinfo;
        break;
      }

      // optional .game_happysupremacy_protocols.msg_bet_info betinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_betinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_betinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_add_bet_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_add_bet_result)
  return false;
#undef DO_
}

void packetl2c_add_bet_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_add_bet_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional .game_happysupremacy_protocols.msg_bet_info betinfo = 3;
  if (has_betinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->betinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_add_bet_result)
}

::google::protobuf::uint8* packetl2c_add_bet_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_add_bet_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional .game_happysupremacy_protocols.msg_bet_info betinfo = 3;
  if (has_betinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->betinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_add_bet_result)
  return target;
}

int packetl2c_add_bet_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_add_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .game_happysupremacy_protocols.msg_bet_info betinfo = 3;
    if (has_betinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->betinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_add_bet_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_add_bet_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_add_bet_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_add_bet_result::MergeFrom(const packetl2c_add_bet_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_betinfo()) {
      mutable_betinfo()->::game_happysupremacy_protocols::msg_bet_info::MergeFrom(from.betinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_add_bet_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_add_bet_result::CopyFrom(const packetl2c_add_bet_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_add_bet_result::IsInitialized() const {

  return true;
}

void packetl2c_add_bet_result::Swap(packetl2c_add_bet_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(betinfo_, other->betinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_add_bet_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_add_bet_result_descriptor_;
  metadata.reflection = packetl2c_add_bet_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_repeat_bet::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_repeat_bet::packetc2l_repeat_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_repeat_bet)
}

void packetc2l_repeat_bet::InitAsDefaultInstance() {
}

packetc2l_repeat_bet::packetc2l_repeat_bet(const packetc2l_repeat_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_repeat_bet)
}

void packetc2l_repeat_bet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10005;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_repeat_bet::~packetc2l_repeat_bet() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_repeat_bet)
  SharedDtor();
}

void packetc2l_repeat_bet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_repeat_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_repeat_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_repeat_bet_descriptor_;
}

const packetc2l_repeat_bet& packetc2l_repeat_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_repeat_bet* packetc2l_repeat_bet::default_instance_ = NULL;

packetc2l_repeat_bet* packetc2l_repeat_bet::New() const {
  return new packetc2l_repeat_bet;
}

void packetc2l_repeat_bet::Clear() {
  packet_id_ = 10005;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_repeat_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_repeat_bet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_repeat_bet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_repeat_bet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_repeat_bet)
  return false;
#undef DO_
}

void packetc2l_repeat_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_repeat_bet)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_repeat_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_repeat_bet)
}

::google::protobuf::uint8* packetc2l_repeat_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_repeat_bet)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_repeat_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_repeat_bet)
  return target;
}

int packetc2l_repeat_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_repeat_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_repeat_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_repeat_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_repeat_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_repeat_bet::MergeFrom(const packetc2l_repeat_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_repeat_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_repeat_bet::CopyFrom(const packetc2l_repeat_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_repeat_bet::IsInitialized() const {

  return true;
}

void packetc2l_repeat_bet::Swap(packetc2l_repeat_bet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_repeat_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_repeat_bet_descriptor_;
  metadata.reflection = packetc2l_repeat_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_repeat_bet_result::kPacketIdFieldNumber;
const int packetl2c_repeat_bet_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_repeat_bet_result::packetl2c_repeat_bet_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_repeat_bet_result)
}

void packetl2c_repeat_bet_result::InitAsDefaultInstance() {
}

packetl2c_repeat_bet_result::packetl2c_repeat_bet_result(const packetl2c_repeat_bet_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_repeat_bet_result)
}

void packetl2c_repeat_bet_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15005;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_repeat_bet_result::~packetl2c_repeat_bet_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_repeat_bet_result)
  SharedDtor();
}

void packetl2c_repeat_bet_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_repeat_bet_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_repeat_bet_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_repeat_bet_result_descriptor_;
}

const packetl2c_repeat_bet_result& packetl2c_repeat_bet_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_repeat_bet_result* packetl2c_repeat_bet_result::default_instance_ = NULL;

packetl2c_repeat_bet_result* packetl2c_repeat_bet_result::New() const {
  return new packetl2c_repeat_bet_result;
}

void packetl2c_repeat_bet_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 15005;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_repeat_bet_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_repeat_bet_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_repeat_bet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_repeat_bet_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_repeat_bet_result)
  return false;
#undef DO_
}

void packetl2c_repeat_bet_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_repeat_bet_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_repeat_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_repeat_bet_result)
}

::google::protobuf::uint8* packetl2c_repeat_bet_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_repeat_bet_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_repeat_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_repeat_bet_result)
  return target;
}

int packetl2c_repeat_bet_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_repeat_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_repeat_bet_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_repeat_bet_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_repeat_bet_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_repeat_bet_result::MergeFrom(const packetl2c_repeat_bet_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_repeat_bet_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_repeat_bet_result::CopyFrom(const packetl2c_repeat_bet_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_repeat_bet_result::IsInitialized() const {

  return true;
}

void packetl2c_repeat_bet_result::Swap(packetl2c_repeat_bet_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_repeat_bet_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_repeat_bet_result_descriptor_;
  metadata.reflection = packetl2c_repeat_bet_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_clear_bet::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_clear_bet::packetc2l_clear_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_clear_bet)
}

void packetc2l_clear_bet::InitAsDefaultInstance() {
}

packetc2l_clear_bet::packetc2l_clear_bet(const packetc2l_clear_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_clear_bet)
}

void packetc2l_clear_bet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10006;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_clear_bet::~packetc2l_clear_bet() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_clear_bet)
  SharedDtor();
}

void packetc2l_clear_bet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_clear_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_clear_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_clear_bet_descriptor_;
}

const packetc2l_clear_bet& packetc2l_clear_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_clear_bet* packetc2l_clear_bet::default_instance_ = NULL;

packetc2l_clear_bet* packetc2l_clear_bet::New() const {
  return new packetc2l_clear_bet;
}

void packetc2l_clear_bet::Clear() {
  packet_id_ = 10006;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_clear_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_clear_bet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_clear_bet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_clear_bet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_clear_bet)
  return false;
#undef DO_
}

void packetc2l_clear_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_clear_bet)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_clear_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_clear_bet)
}

::google::protobuf::uint8* packetc2l_clear_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_clear_bet)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_clear_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_clear_bet)
  return target;
}

int packetc2l_clear_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_clear_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_clear_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_clear_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_clear_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_clear_bet::MergeFrom(const packetc2l_clear_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_clear_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_clear_bet::CopyFrom(const packetc2l_clear_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_clear_bet::IsInitialized() const {

  return true;
}

void packetc2l_clear_bet::Swap(packetc2l_clear_bet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_clear_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_clear_bet_descriptor_;
  metadata.reflection = packetc2l_clear_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_clear_bet_result::kPacketIdFieldNumber;
const int packetl2c_clear_bet_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_clear_bet_result::packetl2c_clear_bet_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_clear_bet_result)
}

void packetl2c_clear_bet_result::InitAsDefaultInstance() {
}

packetl2c_clear_bet_result::packetl2c_clear_bet_result(const packetl2c_clear_bet_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_clear_bet_result)
}

void packetl2c_clear_bet_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15006;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_clear_bet_result::~packetl2c_clear_bet_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_clear_bet_result)
  SharedDtor();
}

void packetl2c_clear_bet_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_clear_bet_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_clear_bet_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_clear_bet_result_descriptor_;
}

const packetl2c_clear_bet_result& packetl2c_clear_bet_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_clear_bet_result* packetl2c_clear_bet_result::default_instance_ = NULL;

packetl2c_clear_bet_result* packetl2c_clear_bet_result::New() const {
  return new packetl2c_clear_bet_result;
}

void packetl2c_clear_bet_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 15006;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_clear_bet_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_clear_bet_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_clear_bet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_clear_bet_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_clear_bet_result)
  return false;
#undef DO_
}

void packetl2c_clear_bet_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_clear_bet_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_clear_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_clear_bet_result)
}

::google::protobuf::uint8* packetl2c_clear_bet_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_clear_bet_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_clear_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_clear_bet_result)
  return target;
}

int packetl2c_clear_bet_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_clear_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_clear_bet_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_clear_bet_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_clear_bet_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_clear_bet_result::MergeFrom(const packetl2c_clear_bet_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_clear_bet_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_clear_bet_result::CopyFrom(const packetl2c_clear_bet_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_clear_bet_result::IsInitialized() const {

  return true;
}

void packetl2c_clear_bet_result::Swap(packetl2c_clear_bet_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_clear_bet_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_clear_bet_result_descriptor_;
  metadata.reflection = packetl2c_clear_bet_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ask_for_banker::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_ask_for_banker::packetc2l_ask_for_banker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_ask_for_banker)
}

void packetc2l_ask_for_banker::InitAsDefaultInstance() {
}

packetc2l_ask_for_banker::packetc2l_ask_for_banker(const packetc2l_ask_for_banker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_ask_for_banker)
}

void packetc2l_ask_for_banker::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10010;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ask_for_banker::~packetc2l_ask_for_banker() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_ask_for_banker)
  SharedDtor();
}

void packetc2l_ask_for_banker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ask_for_banker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ask_for_banker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ask_for_banker_descriptor_;
}

const packetc2l_ask_for_banker& packetc2l_ask_for_banker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_ask_for_banker* packetc2l_ask_for_banker::default_instance_ = NULL;

packetc2l_ask_for_banker* packetc2l_ask_for_banker::New() const {
  return new packetc2l_ask_for_banker;
}

void packetc2l_ask_for_banker::Clear() {
  packet_id_ = 10010;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ask_for_banker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_ask_for_banker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_for_banker];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_ask_for_banker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_ask_for_banker)
  return false;
#undef DO_
}

void packetc2l_ask_for_banker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_ask_for_banker)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_for_banker];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_ask_for_banker)
}

::google::protobuf::uint8* packetc2l_ask_for_banker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_ask_for_banker)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_for_banker];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_ask_for_banker)
  return target;
}

int packetc2l_ask_for_banker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_for_banker];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ask_for_banker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ask_for_banker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ask_for_banker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ask_for_banker::MergeFrom(const packetc2l_ask_for_banker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ask_for_banker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ask_for_banker::CopyFrom(const packetc2l_ask_for_banker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ask_for_banker::IsInitialized() const {

  return true;
}

void packetc2l_ask_for_banker::Swap(packetc2l_ask_for_banker* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ask_for_banker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ask_for_banker_descriptor_;
  metadata.reflection = packetc2l_ask_for_banker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_ask_for_banker_result::kPacketIdFieldNumber;
const int packetl2c_ask_for_banker_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_ask_for_banker_result::packetl2c_ask_for_banker_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_ask_for_banker_result)
}

void packetl2c_ask_for_banker_result::InitAsDefaultInstance() {
}

packetl2c_ask_for_banker_result::packetl2c_ask_for_banker_result(const packetl2c_ask_for_banker_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_ask_for_banker_result)
}

void packetl2c_ask_for_banker_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15016;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_ask_for_banker_result::~packetl2c_ask_for_banker_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_ask_for_banker_result)
  SharedDtor();
}

void packetl2c_ask_for_banker_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_ask_for_banker_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_ask_for_banker_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_ask_for_banker_result_descriptor_;
}

const packetl2c_ask_for_banker_result& packetl2c_ask_for_banker_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_ask_for_banker_result* packetl2c_ask_for_banker_result::default_instance_ = NULL;

packetl2c_ask_for_banker_result* packetl2c_ask_for_banker_result::New() const {
  return new packetl2c_ask_for_banker_result;
}

void packetl2c_ask_for_banker_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 15016;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_ask_for_banker_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_ask_for_banker_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_for_banker];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_ask_for_banker_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_ask_for_banker_result)
  return false;
#undef DO_
}

void packetl2c_ask_for_banker_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_ask_for_banker_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_for_banker];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_ask_for_banker_result)
}

::google::protobuf::uint8* packetl2c_ask_for_banker_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_ask_for_banker_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_for_banker];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_ask_for_banker_result)
  return target;
}

int packetl2c_ask_for_banker_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_for_banker];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_ask_for_banker_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_ask_for_banker_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_ask_for_banker_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_ask_for_banker_result::MergeFrom(const packetl2c_ask_for_banker_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_ask_for_banker_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_ask_for_banker_result::CopyFrom(const packetl2c_ask_for_banker_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_ask_for_banker_result::IsInitialized() const {

  return true;
}

void packetl2c_ask_for_banker_result::Swap(packetl2c_ask_for_banker_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_ask_for_banker_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_ask_for_banker_result_descriptor_;
  metadata.reflection = packetl2c_ask_for_banker_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_leave_banker::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_leave_banker::packetc2l_leave_banker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_leave_banker)
}

void packetc2l_leave_banker::InitAsDefaultInstance() {
}

packetc2l_leave_banker::packetc2l_leave_banker(const packetc2l_leave_banker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_leave_banker)
}

void packetc2l_leave_banker::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10011;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_leave_banker::~packetc2l_leave_banker() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_leave_banker)
  SharedDtor();
}

void packetc2l_leave_banker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_leave_banker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_leave_banker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_leave_banker_descriptor_;
}

const packetc2l_leave_banker& packetc2l_leave_banker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_leave_banker* packetc2l_leave_banker::default_instance_ = NULL;

packetc2l_leave_banker* packetc2l_leave_banker::New() const {
  return new packetc2l_leave_banker;
}

void packetc2l_leave_banker::Clear() {
  packet_id_ = 10011;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_leave_banker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_leave_banker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_banker];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_leave_banker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_leave_banker)
  return false;
#undef DO_
}

void packetc2l_leave_banker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_leave_banker)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_banker];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_leave_banker)
}

::google::protobuf::uint8* packetc2l_leave_banker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_leave_banker)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_banker];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_leave_banker)
  return target;
}

int packetc2l_leave_banker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_leave_banker];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_leave_banker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_leave_banker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_leave_banker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_leave_banker::MergeFrom(const packetc2l_leave_banker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_leave_banker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_leave_banker::CopyFrom(const packetc2l_leave_banker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_leave_banker::IsInitialized() const {

  return true;
}

void packetc2l_leave_banker::Swap(packetc2l_leave_banker* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_leave_banker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_leave_banker_descriptor_;
  metadata.reflection = packetc2l_leave_banker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_leave_banker_result::kPacketIdFieldNumber;
const int packetl2c_leave_banker_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_leave_banker_result::packetl2c_leave_banker_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_leave_banker_result)
}

void packetl2c_leave_banker_result::InitAsDefaultInstance() {
}

packetl2c_leave_banker_result::packetl2c_leave_banker_result(const packetl2c_leave_banker_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_leave_banker_result)
}

void packetl2c_leave_banker_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15017;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_leave_banker_result::~packetl2c_leave_banker_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_leave_banker_result)
  SharedDtor();
}

void packetl2c_leave_banker_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_leave_banker_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_leave_banker_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_leave_banker_result_descriptor_;
}

const packetl2c_leave_banker_result& packetl2c_leave_banker_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_leave_banker_result* packetl2c_leave_banker_result::default_instance_ = NULL;

packetl2c_leave_banker_result* packetl2c_leave_banker_result::New() const {
  return new packetl2c_leave_banker_result;
}

void packetl2c_leave_banker_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 15017;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_leave_banker_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_leave_banker_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_banker];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_leave_banker_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_leave_banker_result)
  return false;
#undef DO_
}

void packetl2c_leave_banker_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_leave_banker_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_banker];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_leave_banker_result)
}

::google::protobuf::uint8* packetl2c_leave_banker_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_leave_banker_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_banker];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_leave_banker_result)
  return target;
}

int packetl2c_leave_banker_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_leave_banker];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_leave_banker_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_leave_banker_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_leave_banker_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_leave_banker_result::MergeFrom(const packetl2c_leave_banker_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_leave_banker_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_leave_banker_result::CopyFrom(const packetl2c_leave_banker_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_leave_banker_result::IsInitialized() const {

  return true;
}

void packetl2c_leave_banker_result::Swap(packetl2c_leave_banker_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_leave_banker_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_leave_banker_result_descriptor_;
  metadata.reflection = packetl2c_leave_banker_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ask_for_first_banker::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_ask_for_first_banker::packetc2l_ask_for_first_banker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_ask_for_first_banker)
}

void packetc2l_ask_for_first_banker::InitAsDefaultInstance() {
}

packetc2l_ask_for_first_banker::packetc2l_ask_for_first_banker(const packetc2l_ask_for_first_banker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_ask_for_first_banker)
}

void packetc2l_ask_for_first_banker::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10012;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ask_for_first_banker::~packetc2l_ask_for_first_banker() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_ask_for_first_banker)
  SharedDtor();
}

void packetc2l_ask_for_first_banker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ask_for_first_banker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ask_for_first_banker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ask_for_first_banker_descriptor_;
}

const packetc2l_ask_for_first_banker& packetc2l_ask_for_first_banker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_ask_for_first_banker* packetc2l_ask_for_first_banker::default_instance_ = NULL;

packetc2l_ask_for_first_banker* packetc2l_ask_for_first_banker::New() const {
  return new packetc2l_ask_for_first_banker;
}

void packetc2l_ask_for_first_banker::Clear() {
  packet_id_ = 10012;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ask_for_first_banker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_ask_for_first_banker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_first_for_banker];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_ask_for_first_banker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_ask_for_first_banker)
  return false;
#undef DO_
}

void packetc2l_ask_for_first_banker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_ask_for_first_banker)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_first_for_banker];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_ask_for_first_banker)
}

::google::protobuf::uint8* packetc2l_ask_for_first_banker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_ask_for_first_banker)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_first_for_banker];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_ask_for_first_banker)
  return target;
}

int packetc2l_ask_for_first_banker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_first_for_banker];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ask_for_first_banker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ask_for_first_banker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ask_for_first_banker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ask_for_first_banker::MergeFrom(const packetc2l_ask_for_first_banker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ask_for_first_banker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ask_for_first_banker::CopyFrom(const packetc2l_ask_for_first_banker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ask_for_first_banker::IsInitialized() const {

  return true;
}

void packetc2l_ask_for_first_banker::Swap(packetc2l_ask_for_first_banker* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ask_for_first_banker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ask_for_first_banker_descriptor_;
  metadata.reflection = packetc2l_ask_for_first_banker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_ask_for_first_banker_result::kPacketIdFieldNumber;
const int packetl2c_ask_for_first_banker_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_ask_for_first_banker_result::packetl2c_ask_for_first_banker_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_ask_for_first_banker_result)
}

void packetl2c_ask_for_first_banker_result::InitAsDefaultInstance() {
}

packetl2c_ask_for_first_banker_result::packetl2c_ask_for_first_banker_result(const packetl2c_ask_for_first_banker_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_ask_for_first_banker_result)
}

void packetl2c_ask_for_first_banker_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15018;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_ask_for_first_banker_result::~packetl2c_ask_for_first_banker_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_ask_for_first_banker_result)
  SharedDtor();
}

void packetl2c_ask_for_first_banker_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_ask_for_first_banker_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_ask_for_first_banker_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_ask_for_first_banker_result_descriptor_;
}

const packetl2c_ask_for_first_banker_result& packetl2c_ask_for_first_banker_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_ask_for_first_banker_result* packetl2c_ask_for_first_banker_result::default_instance_ = NULL;

packetl2c_ask_for_first_banker_result* packetl2c_ask_for_first_banker_result::New() const {
  return new packetl2c_ask_for_first_banker_result;
}

void packetl2c_ask_for_first_banker_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 15018;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_ask_for_first_banker_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_ask_for_first_banker_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_first_for_banker];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_ask_for_first_banker_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_ask_for_first_banker_result)
  return false;
#undef DO_
}

void packetl2c_ask_for_first_banker_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_ask_for_first_banker_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_first_for_banker];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_ask_for_first_banker_result)
}

::google::protobuf::uint8* packetl2c_ask_for_first_banker_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_ask_for_first_banker_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_first_for_banker];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_ask_for_first_banker_result)
  return target;
}

int packetl2c_ask_for_first_banker_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_first_for_banker];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_ask_for_first_banker_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_ask_for_first_banker_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_ask_for_first_banker_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_ask_for_first_banker_result::MergeFrom(const packetl2c_ask_for_first_banker_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_ask_for_first_banker_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_ask_for_first_banker_result::CopyFrom(const packetl2c_ask_for_first_banker_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_ask_for_first_banker_result::IsInitialized() const {

  return true;
}

void packetl2c_ask_for_first_banker_result::Swap(packetl2c_ask_for_first_banker_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_ask_for_first_banker_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_ask_for_first_banker_result_descriptor_;
  metadata.reflection = packetl2c_ask_for_first_banker_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int player_info::kPlayerIdFieldNumber;
const int player_info::kPlayerNicknameFieldNumber;
const int player_info::kPlayerHeadFrameFieldNumber;
const int player_info::kPlayerHeadCustomFieldNumber;
const int player_info::kPlayerGoldFieldNumber;
const int player_info::kPlayerSexFieldNumber;
const int player_info::kPlayerVipLvFieldNumber;
#endif  // !_MSC_VER

player_info::player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.player_info)
}

void player_info::InitAsDefaultInstance() {
}

player_info::player_info(const player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.player_info)
}

void player_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0;
  player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_head_frame_ = 0;
  player_head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_gold_ = GOOGLE_LONGLONG(0);
  player_sex_ = 0;
  player_vip_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

player_info::~player_info() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.player_info)
  SharedDtor();
}

void player_info::SharedDtor() {
  if (player_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_nickname_;
  }
  if (player_head_custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_head_custom_;
  }
  if (this != default_instance_) {
  }
}

void player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return player_info_descriptor_;
}

const player_info& player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

player_info* player_info::default_instance_ = NULL;

player_info* player_info::New() const {
  return new player_info;
}

void player_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<player_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(player_id_, player_head_frame_);
    ZR_(player_gold_, player_vip_lv_);
    if (has_player_nickname()) {
      if (player_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_nickname_->clear();
      }
    }
    if (has_player_head_custom()) {
      if (player_head_custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_head_custom_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.player_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_nickname;
        break;
      }

      // optional string player_nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_player_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_nickname().data(), this->player_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_head_frame;
        break;
      }

      // optional int32 player_head_frame = 3;
      case 3: {
        if (tag == 24) {
         parse_player_head_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_head_frame_)));
          set_has_player_head_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_head_custom;
        break;
      }

      // optional string player_head_custom = 4;
      case 4: {
        if (tag == 34) {
         parse_player_head_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_head_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_head_custom().data(), this->player_head_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_head_custom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 5;
      case 5: {
        if (tag == 40) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_player_sex;
        break;
      }

      // optional int32 player_sex = 6;
      case 6: {
        if (tag == 48) {
         parse_player_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_sex_)));
          set_has_player_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_player_vip_lv;
        break;
      }

      // optional int32 player_vip_lv = 7;
      case 7: {
        if (tag == 56) {
         parse_player_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_vip_lv_)));
          set_has_player_vip_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.player_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.player_info)
  return false;
#undef DO_
}

void player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.player_info)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string player_nickname = 2;
  if (has_player_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_nickname().data(), this->player_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_nickname(), output);
  }

  // optional int32 player_head_frame = 3;
  if (has_player_head_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_head_frame(), output);
  }

  // optional string player_head_custom = 4;
  if (has_player_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_head_custom().data(), this->player_head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_head_custom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->player_head_custom(), output);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->player_gold(), output);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_sex(), output);
  }

  // optional int32 player_vip_lv = 7;
  if (has_player_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->player_vip_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.player_info)
}

::google::protobuf::uint8* player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.player_info)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string player_nickname = 2;
  if (has_player_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_nickname().data(), this->player_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_nickname(), target);
  }

  // optional int32 player_head_frame = 3;
  if (has_player_head_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_head_frame(), target);
  }

  // optional string player_head_custom = 4;
  if (has_player_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_head_custom().data(), this->player_head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_head_custom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->player_head_custom(), target);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->player_gold(), target);
  }

  // optional int32 player_sex = 6;
  if (has_player_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_sex(), target);
  }

  // optional int32 player_vip_lv = 7;
  if (has_player_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->player_vip_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.player_info)
  return target;
}

int player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string player_nickname = 2;
    if (has_player_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_nickname());
    }

    // optional int32 player_head_frame = 3;
    if (has_player_head_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_head_frame());
    }

    // optional string player_head_custom = 4;
    if (has_player_head_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_head_custom());
    }

    // optional int64 player_gold = 5;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional int32 player_sex = 6;
    if (has_player_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_sex());
    }

    // optional int32 player_vip_lv = 7;
    if (has_player_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_vip_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void player_info::MergeFrom(const player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_nickname()) {
      set_player_nickname(from.player_nickname());
    }
    if (from.has_player_head_frame()) {
      set_player_head_frame(from.player_head_frame());
    }
    if (from.has_player_head_custom()) {
      set_player_head_custom(from.player_head_custom());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_player_sex()) {
      set_player_sex(from.player_sex());
    }
    if (from.has_player_vip_lv()) {
      set_player_vip_lv(from.player_vip_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_info::CopyFrom(const player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_info::IsInitialized() const {

  return true;
}

void player_info::Swap(player_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_nickname_, other->player_nickname_);
    std::swap(player_head_frame_, other->player_head_frame_);
    std::swap(player_head_custom_, other->player_head_custom_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(player_sex_, other->player_sex_);
    std::swap(player_vip_lv_, other->player_vip_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = player_info_descriptor_;
  metadata.reflection = player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ask_for_player_list::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_ask_for_player_list::packetc2l_ask_for_player_list()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_ask_for_player_list)
}

void packetc2l_ask_for_player_list::InitAsDefaultInstance() {
}

packetc2l_ask_for_player_list::packetc2l_ask_for_player_list(const packetc2l_ask_for_player_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_ask_for_player_list)
}

void packetc2l_ask_for_player_list::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10013;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ask_for_player_list::~packetc2l_ask_for_player_list() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_ask_for_player_list)
  SharedDtor();
}

void packetc2l_ask_for_player_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ask_for_player_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ask_for_player_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ask_for_player_list_descriptor_;
}

const packetc2l_ask_for_player_list& packetc2l_ask_for_player_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_ask_for_player_list* packetc2l_ask_for_player_list::default_instance_ = NULL;

packetc2l_ask_for_player_list* packetc2l_ask_for_player_list::New() const {
  return new packetc2l_ask_for_player_list;
}

void packetc2l_ask_for_player_list::Clear() {
  packet_id_ = 10013;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ask_for_player_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_ask_for_player_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_player_list];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_ask_for_player_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_ask_for_player_list)
  return false;
#undef DO_
}

void packetc2l_ask_for_player_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_ask_for_player_list)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_player_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_ask_for_player_list)
}

::google::protobuf::uint8* packetc2l_ask_for_player_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_ask_for_player_list)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_player_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_ask_for_player_list)
  return target;
}

int packetc2l_ask_for_player_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_player_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ask_for_player_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ask_for_player_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ask_for_player_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ask_for_player_list::MergeFrom(const packetc2l_ask_for_player_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ask_for_player_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ask_for_player_list::CopyFrom(const packetc2l_ask_for_player_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ask_for_player_list::IsInitialized() const {

  return true;
}

void packetc2l_ask_for_player_list::Swap(packetc2l_ask_for_player_list* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ask_for_player_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ask_for_player_list_descriptor_;
  metadata.reflection = packetc2l_ask_for_player_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_ask_for_player_list_result::kPacketIdFieldNumber;
const int packetl2c_ask_for_player_list_result::kPlayerListFieldNumber;
#endif  // !_MSC_VER

packetl2c_ask_for_player_list_result::packetl2c_ask_for_player_list_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_ask_for_player_list_result)
}

void packetl2c_ask_for_player_list_result::InitAsDefaultInstance() {
}

packetl2c_ask_for_player_list_result::packetl2c_ask_for_player_list_result(const packetl2c_ask_for_player_list_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_ask_for_player_list_result)
}

void packetl2c_ask_for_player_list_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15020;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_ask_for_player_list_result::~packetl2c_ask_for_player_list_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_ask_for_player_list_result)
  SharedDtor();
}

void packetl2c_ask_for_player_list_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_ask_for_player_list_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_ask_for_player_list_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_ask_for_player_list_result_descriptor_;
}

const packetl2c_ask_for_player_list_result& packetl2c_ask_for_player_list_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_ask_for_player_list_result* packetl2c_ask_for_player_list_result::default_instance_ = NULL;

packetl2c_ask_for_player_list_result* packetl2c_ask_for_player_list_result::New() const {
  return new packetl2c_ask_for_player_list_result;
}

void packetl2c_ask_for_player_list_result::Clear() {
  packet_id_ = 15020;
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_ask_for_player_list_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_ask_for_player_list_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_player_list];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        break;
      }

      // repeated .game_happysupremacy_protocols.player_info player_list = 2;
      case 2: {
        if (tag == 18) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_ask_for_player_list_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_ask_for_player_list_result)
  return false;
#undef DO_
}

void packetl2c_ask_for_player_list_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_ask_for_player_list_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_player_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_happysupremacy_protocols.player_info player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_ask_for_player_list_result)
}

::google::protobuf::uint8* packetl2c_ask_for_player_list_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_ask_for_player_list_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_player_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_happysupremacy_protocols.player_info player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_ask_for_player_list_result)
  return target;
}

int packetl2c_ask_for_player_list_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_player_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_happysupremacy_protocols.player_info player_list = 2;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_ask_for_player_list_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_ask_for_player_list_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_ask_for_player_list_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_ask_for_player_list_result::MergeFrom(const packetl2c_ask_for_player_list_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_ask_for_player_list_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_ask_for_player_list_result::CopyFrom(const packetl2c_ask_for_player_list_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_ask_for_player_list_result::IsInitialized() const {

  return true;
}

void packetl2c_ask_for_player_list_result::Swap(packetl2c_ask_for_player_list_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_ask_for_player_list_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_ask_for_player_list_result_descriptor_;
  metadata.reflection = packetl2c_ask_for_player_list_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ask_for_banker_list::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_ask_for_banker_list::packetc2l_ask_for_banker_list()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_ask_for_banker_list)
}

void packetc2l_ask_for_banker_list::InitAsDefaultInstance() {
}

packetc2l_ask_for_banker_list::packetc2l_ask_for_banker_list(const packetc2l_ask_for_banker_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_ask_for_banker_list)
}

void packetc2l_ask_for_banker_list::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10014;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ask_for_banker_list::~packetc2l_ask_for_banker_list() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_ask_for_banker_list)
  SharedDtor();
}

void packetc2l_ask_for_banker_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ask_for_banker_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ask_for_banker_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ask_for_banker_list_descriptor_;
}

const packetc2l_ask_for_banker_list& packetc2l_ask_for_banker_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_ask_for_banker_list* packetc2l_ask_for_banker_list::default_instance_ = NULL;

packetc2l_ask_for_banker_list* packetc2l_ask_for_banker_list::New() const {
  return new packetc2l_ask_for_banker_list;
}

void packetc2l_ask_for_banker_list::Clear() {
  packet_id_ = 10014;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ask_for_banker_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_ask_for_banker_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_banker_list];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_ask_for_banker_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_ask_for_banker_list)
  return false;
#undef DO_
}

void packetc2l_ask_for_banker_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_ask_for_banker_list)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_banker_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_ask_for_banker_list)
}

::google::protobuf::uint8* packetc2l_ask_for_banker_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_ask_for_banker_list)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_banker_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_ask_for_banker_list)
  return target;
}

int packetc2l_ask_for_banker_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_banker_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ask_for_banker_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ask_for_banker_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ask_for_banker_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ask_for_banker_list::MergeFrom(const packetc2l_ask_for_banker_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ask_for_banker_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ask_for_banker_list::CopyFrom(const packetc2l_ask_for_banker_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ask_for_banker_list::IsInitialized() const {

  return true;
}

void packetc2l_ask_for_banker_list::Swap(packetc2l_ask_for_banker_list* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ask_for_banker_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ask_for_banker_list_descriptor_;
  metadata.reflection = packetc2l_ask_for_banker_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_ask_for_banker_list_result::kPacketIdFieldNumber;
const int packetl2c_ask_for_banker_list_result::kBankerListFieldNumber;
#endif  // !_MSC_VER

packetl2c_ask_for_banker_list_result::packetl2c_ask_for_banker_list_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_ask_for_banker_list_result)
}

void packetl2c_ask_for_banker_list_result::InitAsDefaultInstance() {
}

packetl2c_ask_for_banker_list_result::packetl2c_ask_for_banker_list_result(const packetl2c_ask_for_banker_list_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_ask_for_banker_list_result)
}

void packetl2c_ask_for_banker_list_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15021;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_ask_for_banker_list_result::~packetl2c_ask_for_banker_list_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_ask_for_banker_list_result)
  SharedDtor();
}

void packetl2c_ask_for_banker_list_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_ask_for_banker_list_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_ask_for_banker_list_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_ask_for_banker_list_result_descriptor_;
}

const packetl2c_ask_for_banker_list_result& packetl2c_ask_for_banker_list_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_ask_for_banker_list_result* packetl2c_ask_for_banker_list_result::default_instance_ = NULL;

packetl2c_ask_for_banker_list_result* packetl2c_ask_for_banker_list_result::New() const {
  return new packetl2c_ask_for_banker_list_result;
}

void packetl2c_ask_for_banker_list_result::Clear() {
  packet_id_ = 15021;
  banker_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_ask_for_banker_list_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_ask_for_banker_list_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_banker_list];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_banker_list;
        break;
      }

      // repeated .game_happysupremacy_protocols.player_info banker_list = 2;
      case 2: {
        if (tag == 18) {
         parse_banker_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_banker_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_banker_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_ask_for_banker_list_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_ask_for_banker_list_result)
  return false;
#undef DO_
}

void packetl2c_ask_for_banker_list_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_ask_for_banker_list_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_banker_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_happysupremacy_protocols.player_info banker_list = 2;
  for (int i = 0; i < this->banker_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->banker_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_ask_for_banker_list_result)
}

::google::protobuf::uint8* packetl2c_ask_for_banker_list_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_ask_for_banker_list_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_banker_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_happysupremacy_protocols.player_info banker_list = 2;
  for (int i = 0; i < this->banker_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->banker_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_ask_for_banker_list_result)
  return target;
}

int packetl2c_ask_for_banker_list_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_banker_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_happysupremacy_protocols.player_info banker_list = 2;
  total_size += 1 * this->banker_list_size();
  for (int i = 0; i < this->banker_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->banker_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_ask_for_banker_list_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_ask_for_banker_list_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_ask_for_banker_list_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_ask_for_banker_list_result::MergeFrom(const packetl2c_ask_for_banker_list_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  banker_list_.MergeFrom(from.banker_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_ask_for_banker_list_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_ask_for_banker_list_result::CopyFrom(const packetl2c_ask_for_banker_list_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_ask_for_banker_list_result::IsInitialized() const {

  return true;
}

void packetl2c_ask_for_banker_list_result::Swap(packetl2c_ask_for_banker_list_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    banker_list_.Swap(&other->banker_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_ask_for_banker_list_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_ask_for_banker_list_result_descriptor_;
  metadata.reflection = packetl2c_ask_for_banker_list_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_ask_for_history_list::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_ask_for_history_list::packetc2l_ask_for_history_list()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_ask_for_history_list)
}

void packetc2l_ask_for_history_list::InitAsDefaultInstance() {
}

packetc2l_ask_for_history_list::packetc2l_ask_for_history_list(const packetc2l_ask_for_history_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_ask_for_history_list)
}

void packetc2l_ask_for_history_list::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10015;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_ask_for_history_list::~packetc2l_ask_for_history_list() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_ask_for_history_list)
  SharedDtor();
}

void packetc2l_ask_for_history_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_ask_for_history_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_ask_for_history_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_ask_for_history_list_descriptor_;
}

const packetc2l_ask_for_history_list& packetc2l_ask_for_history_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_ask_for_history_list* packetc2l_ask_for_history_list::default_instance_ = NULL;

packetc2l_ask_for_history_list* packetc2l_ask_for_history_list::New() const {
  return new packetc2l_ask_for_history_list;
}

void packetc2l_ask_for_history_list::Clear() {
  packet_id_ = 10015;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_ask_for_history_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_ask_for_history_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_list];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_ask_for_history_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_ask_for_history_list)
  return false;
#undef DO_
}

void packetc2l_ask_for_history_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_ask_for_history_list)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_ask_for_history_list)
}

::google::protobuf::uint8* packetc2l_ask_for_history_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_ask_for_history_list)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_ask_for_history_list)
  return target;
}

int packetc2l_ask_for_history_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_ask_history_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_ask_for_history_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_ask_for_history_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_ask_for_history_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_ask_for_history_list::MergeFrom(const packetc2l_ask_for_history_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_ask_for_history_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_ask_for_history_list::CopyFrom(const packetc2l_ask_for_history_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_ask_for_history_list::IsInitialized() const {

  return true;
}

void packetc2l_ask_for_history_list::Swap(packetc2l_ask_for_history_list* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_ask_for_history_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_ask_for_history_list_descriptor_;
  metadata.reflection = packetc2l_ask_for_history_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_ask_for_history_list_result::kPacketIdFieldNumber;
const int packetl2c_ask_for_history_list_result::kHistoryListFieldNumber;
#endif  // !_MSC_VER

packetl2c_ask_for_history_list_result::packetl2c_ask_for_history_list_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_ask_for_history_list_result)
}

void packetl2c_ask_for_history_list_result::InitAsDefaultInstance() {
}

packetl2c_ask_for_history_list_result::packetl2c_ask_for_history_list_result(const packetl2c_ask_for_history_list_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_ask_for_history_list_result)
}

void packetl2c_ask_for_history_list_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15022;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_ask_for_history_list_result::~packetl2c_ask_for_history_list_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_ask_for_history_list_result)
  SharedDtor();
}

void packetl2c_ask_for_history_list_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_ask_for_history_list_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_ask_for_history_list_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_ask_for_history_list_result_descriptor_;
}

const packetl2c_ask_for_history_list_result& packetl2c_ask_for_history_list_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_ask_for_history_list_result* packetl2c_ask_for_history_list_result::default_instance_ = NULL;

packetl2c_ask_for_history_list_result* packetl2c_ask_for_history_list_result::New() const {
  return new packetl2c_ask_for_history_list_result;
}

void packetl2c_ask_for_history_list_result::Clear() {
  packet_id_ = 15022;
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_ask_for_history_list_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_ask_for_history_list_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_history_list];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_history_list;
        break;
      }

      // repeated .game_happysupremacy_protocols.history_info history_list = 2;
      case 2: {
        if (tag == 18) {
         parse_history_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_history_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_ask_for_history_list_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_ask_for_history_list_result)
  return false;
#undef DO_
}

void packetl2c_ask_for_history_list_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_ask_for_history_list_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_history_list];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_happysupremacy_protocols.history_info history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_ask_for_history_list_result)
}

::google::protobuf::uint8* packetl2c_ask_for_history_list_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_ask_for_history_list_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_history_list];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_happysupremacy_protocols.history_info history_list = 2;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_ask_for_history_list_result)
  return target;
}

int packetl2c_ask_for_history_list_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_ask_history_list];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_happysupremacy_protocols.history_info history_list = 2;
  total_size += 1 * this->history_list_size();
  for (int i = 0; i < this->history_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_ask_for_history_list_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_ask_for_history_list_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_ask_for_history_list_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_ask_for_history_list_result::MergeFrom(const packetl2c_ask_for_history_list_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_ask_for_history_list_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_ask_for_history_list_result::CopyFrom(const packetl2c_ask_for_history_list_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_ask_for_history_list_result::IsInitialized() const {

  return true;
}

void packetl2c_ask_for_history_list_result::Swap(packetl2c_ask_for_history_list_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_ask_for_history_list_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_ask_for_history_list_result_descriptor_;
  metadata.reflection = packetl2c_ask_for_history_list_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_begin_bet::kPacketIdFieldNumber;
const int packetl2c_bc_begin_bet::kIsCanRobBankerFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_begin_bet::packetl2c_bc_begin_bet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_bc_begin_bet)
}

void packetl2c_bc_begin_bet::InitAsDefaultInstance() {
}

packetl2c_bc_begin_bet::packetl2c_bc_begin_bet(const packetl2c_bc_begin_bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_bc_begin_bet)
}

void packetl2c_bc_begin_bet::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15007;
  is_can_rob_banker_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_begin_bet::~packetl2c_bc_begin_bet() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_bc_begin_bet)
  SharedDtor();
}

void packetl2c_bc_begin_bet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_begin_bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_begin_bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_begin_bet_descriptor_;
}

const packetl2c_bc_begin_bet& packetl2c_bc_begin_bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_begin_bet* packetl2c_bc_begin_bet::default_instance_ = NULL;

packetl2c_bc_begin_bet* packetl2c_bc_begin_bet::New() const {
  return new packetl2c_bc_begin_bet;
}

void packetl2c_bc_begin_bet::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 15007;
    is_can_rob_banker_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_begin_bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_bc_begin_bet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_bet];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_can_rob_banker;
        break;
      }

      // optional bool is_can_rob_banker = 2;
      case 2: {
        if (tag == 16) {
         parse_is_can_rob_banker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_can_rob_banker_)));
          set_has_is_can_rob_banker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_bc_begin_bet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_bc_begin_bet)
  return false;
#undef DO_
}

void packetl2c_bc_begin_bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_bc_begin_bet)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_bet];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool is_can_rob_banker = 2;
  if (has_is_can_rob_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_can_rob_banker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_bc_begin_bet)
}

::google::protobuf::uint8* packetl2c_bc_begin_bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_bc_begin_bet)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_bet];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool is_can_rob_banker = 2;
  if (has_is_can_rob_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_can_rob_banker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_bc_begin_bet)
  return target;
}

int packetl2c_bc_begin_bet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_bet];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool is_can_rob_banker = 2;
    if (has_is_can_rob_banker()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_begin_bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_begin_bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_begin_bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_begin_bet::MergeFrom(const packetl2c_bc_begin_bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_is_can_rob_banker()) {
      set_is_can_rob_banker(from.is_can_rob_banker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_begin_bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_begin_bet::CopyFrom(const packetl2c_bc_begin_bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_begin_bet::IsInitialized() const {

  return true;
}

void packetl2c_bc_begin_bet::Swap(packetl2c_bc_begin_bet* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(is_can_rob_banker_, other->is_can_rob_banker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_begin_bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_begin_bet_descriptor_;
  metadata.reflection = packetl2c_bc_begin_bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_card_info::kCardFlowerFieldNumber;
const int msg_card_info::kCardPointFieldNumber;
const int msg_card_info::kOwnerFieldNumber;
#endif  // !_MSC_VER

msg_card_info::msg_card_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.msg_card_info)
}

void msg_card_info::InitAsDefaultInstance() {
}

msg_card_info::msg_card_info(const msg_card_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.msg_card_info)
}

void msg_card_info::SharedCtor() {
  _cached_size_ = 0;
  card_flower_ = 0;
  card_point_ = 0;
  owner_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_card_info::~msg_card_info() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.msg_card_info)
  SharedDtor();
}

void msg_card_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_card_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_card_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_card_info_descriptor_;
}

const msg_card_info& msg_card_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

msg_card_info* msg_card_info::default_instance_ = NULL;

msg_card_info* msg_card_info::New() const {
  return new msg_card_info;
}

void msg_card_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<msg_card_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(card_flower_, owner_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_card_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.msg_card_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_card_flower card_flower = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_card_flower_IsValid(value)) {
            set_card_flower(static_cast< ::game_happysupremacy_protocols::e_card_flower >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card_point;
        break;
      }

      // optional int32 card_point = 2;
      case 2: {
        if (tag == 16) {
         parse_card_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_point_)));
          set_has_card_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_owner;
        break;
      }

      // optional .game_happysupremacy_protocols.e_card_owner owner = 3;
      case 3: {
        if (tag == 24) {
         parse_owner:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_card_owner_IsValid(value)) {
            set_owner(static_cast< ::game_happysupremacy_protocols::e_card_owner >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.msg_card_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.msg_card_info)
  return false;
#undef DO_
}

void msg_card_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.msg_card_info)
  // optional .game_happysupremacy_protocols.e_card_flower card_flower = 1;
  if (has_card_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->card_flower(), output);
  }

  // optional int32 card_point = 2;
  if (has_card_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card_point(), output);
  }

  // optional .game_happysupremacy_protocols.e_card_owner owner = 3;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->owner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.msg_card_info)
}

::google::protobuf::uint8* msg_card_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.msg_card_info)
  // optional .game_happysupremacy_protocols.e_card_flower card_flower = 1;
  if (has_card_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->card_flower(), target);
  }

  // optional int32 card_point = 2;
  if (has_card_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card_point(), target);
  }

  // optional .game_happysupremacy_protocols.e_card_owner owner = 3;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->owner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.msg_card_info)
  return target;
}

int msg_card_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_card_flower card_flower = 1;
    if (has_card_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->card_flower());
    }

    // optional int32 card_point = 2;
    if (has_card_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_point());
    }

    // optional .game_happysupremacy_protocols.e_card_owner owner = 3;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->owner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_card_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_card_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_card_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_card_info::MergeFrom(const msg_card_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_flower()) {
      set_card_flower(from.card_flower());
    }
    if (from.has_card_point()) {
      set_card_point(from.card_point());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_card_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_card_info::CopyFrom(const msg_card_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_card_info::IsInitialized() const {

  return true;
}

void msg_card_info::Swap(msg_card_info* other) {
  if (other != this) {
    std::swap(card_flower_, other->card_flower_);
    std::swap(card_point_, other->card_point_);
    std::swap(owner_, other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_card_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_card_info_descriptor_;
  metadata.reflection = msg_card_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_result_point_info::kCombinecardIdFieldNumber;
const int msg_result_point_info::kOwnerFieldNumber;
#endif  // !_MSC_VER

msg_result_point_info::msg_result_point_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.msg_result_point_info)
}

void msg_result_point_info::InitAsDefaultInstance() {
}

msg_result_point_info::msg_result_point_info(const msg_result_point_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.msg_result_point_info)
}

void msg_result_point_info::SharedCtor() {
  _cached_size_ = 0;
  combinecardid_ = 0u;
  owner_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_result_point_info::~msg_result_point_info() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.msg_result_point_info)
  SharedDtor();
}

void msg_result_point_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_result_point_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_result_point_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_result_point_info_descriptor_;
}

const msg_result_point_info& msg_result_point_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

msg_result_point_info* msg_result_point_info::default_instance_ = NULL;

msg_result_point_info* msg_result_point_info::New() const {
  return new msg_result_point_info;
}

void msg_result_point_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<msg_result_point_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(combinecardid_, owner_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_result_point_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.msg_result_point_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 combinecardId = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combinecardid_)));
          set_has_combinecardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner;
        break;
      }

      // optional .game_happysupremacy_protocols.e_card_owner owner = 2;
      case 2: {
        if (tag == 16) {
         parse_owner:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_card_owner_IsValid(value)) {
            set_owner(static_cast< ::game_happysupremacy_protocols::e_card_owner >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.msg_result_point_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.msg_result_point_info)
  return false;
#undef DO_
}

void msg_result_point_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.msg_result_point_info)
  // optional uint32 combinecardId = 1 [default = 0];
  if (has_combinecardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->combinecardid(), output);
  }

  // optional .game_happysupremacy_protocols.e_card_owner owner = 2;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->owner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.msg_result_point_info)
}

::google::protobuf::uint8* msg_result_point_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.msg_result_point_info)
  // optional uint32 combinecardId = 1 [default = 0];
  if (has_combinecardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->combinecardid(), target);
  }

  // optional .game_happysupremacy_protocols.e_card_owner owner = 2;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->owner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.msg_result_point_info)
  return target;
}

int msg_result_point_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 combinecardId = 1 [default = 0];
    if (has_combinecardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combinecardid());
    }

    // optional .game_happysupremacy_protocols.e_card_owner owner = 2;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->owner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_result_point_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_result_point_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_result_point_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_result_point_info::MergeFrom(const msg_result_point_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_combinecardid()) {
      set_combinecardid(from.combinecardid());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_result_point_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_result_point_info::CopyFrom(const msg_result_point_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_result_point_info::IsInitialized() const {

  return true;
}

void msg_result_point_info::Swap(msg_result_point_info* other) {
  if (other != this) {
    std::swap(combinecardid_, other->combinecardid_);
    std::swap(owner_, other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_result_point_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_result_point_info_descriptor_;
  metadata.reflection = msg_result_point_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_bet_result_info::kTypeFieldNumber;
const int msg_bet_result_info::kResultFieldNumber;
#endif  // !_MSC_VER

msg_bet_result_info::msg_bet_result_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.msg_bet_result_info)
}

void msg_bet_result_info::InitAsDefaultInstance() {
}

msg_bet_result_info::msg_bet_result_info(const msg_bet_result_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.msg_bet_result_info)
}

void msg_bet_result_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_bet_result_info::~msg_bet_result_info() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.msg_bet_result_info)
  SharedDtor();
}

void msg_bet_result_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_bet_result_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_bet_result_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_bet_result_info_descriptor_;
}

const msg_bet_result_info& msg_bet_result_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

msg_bet_result_info* msg_bet_result_info::default_instance_ = NULL;

msg_bet_result_info* msg_bet_result_info::New() const {
  return new msg_bet_result_info;
}

void msg_bet_result_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_bet_result_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.msg_bet_result_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_bet_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_bet_type_IsValid(value)) {
            set_type(static_cast< ::game_happysupremacy_protocols::e_bet_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .game_happysupremacy_protocols.e_bet_result result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_bet_result_IsValid(value)) {
            set_result(static_cast< ::game_happysupremacy_protocols::e_bet_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.msg_bet_result_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.msg_bet_result_info)
  return false;
#undef DO_
}

void msg_bet_result_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.msg_bet_result_info)
  // optional .game_happysupremacy_protocols.e_bet_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .game_happysupremacy_protocols.e_bet_result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.msg_bet_result_info)
}

::google::protobuf::uint8* msg_bet_result_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.msg_bet_result_info)
  // optional .game_happysupremacy_protocols.e_bet_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .game_happysupremacy_protocols.e_bet_result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.msg_bet_result_info)
  return target;
}

int msg_bet_result_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_bet_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .game_happysupremacy_protocols.e_bet_result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_bet_result_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_bet_result_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_bet_result_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_bet_result_info::MergeFrom(const msg_bet_result_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_bet_result_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_bet_result_info::CopyFrom(const msg_bet_result_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_bet_result_info::IsInitialized() const {

  return true;
}

void msg_bet_result_info::Swap(msg_bet_result_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_bet_result_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_bet_result_info_descriptor_;
  metadata.reflection = msg_bet_result_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_bet_info::kTypeFieldNumber;
const int msg_bet_info::kBetCountFieldNumber;
#endif  // !_MSC_VER

msg_bet_info::msg_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.msg_bet_info)
}

void msg_bet_info::InitAsDefaultInstance() {
}

msg_bet_info::msg_bet_info(const msg_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.msg_bet_info)
}

void msg_bet_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  bet_count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_bet_info::~msg_bet_info() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.msg_bet_info)
  SharedDtor();
}

void msg_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_bet_info_descriptor_;
}

const msg_bet_info& msg_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

msg_bet_info* msg_bet_info::default_instance_ = NULL;

msg_bet_info* msg_bet_info::New() const {
  return new msg_bet_info;
}

void msg_bet_info::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    bet_count_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.msg_bet_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_bet_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_bet_type_IsValid(value)) {
            set_type(static_cast< ::game_happysupremacy_protocols::e_bet_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bet_count;
        break;
      }

      // optional int64 bet_count = 2;
      case 2: {
        if (tag == 16) {
         parse_bet_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_count_)));
          set_has_bet_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.msg_bet_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.msg_bet_info)
  return false;
#undef DO_
}

void msg_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.msg_bet_info)
  // optional .game_happysupremacy_protocols.e_bet_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 bet_count = 2;
  if (has_bet_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bet_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.msg_bet_info)
}

::google::protobuf::uint8* msg_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.msg_bet_info)
  // optional .game_happysupremacy_protocols.e_bet_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int64 bet_count = 2;
  if (has_bet_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bet_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.msg_bet_info)
  return target;
}

int msg_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_bet_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 bet_count = 2;
    if (has_bet_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_bet_info::MergeFrom(const msg_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bet_count()) {
      set_bet_count(from.bet_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_bet_info::CopyFrom(const msg_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_bet_info::IsInitialized() const {

  return true;
}

void msg_bet_info::Swap(msg_bet_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(bet_count_, other->bet_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_bet_info_descriptor_;
  metadata.reflection = msg_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_begin_award::kPacketIdFieldNumber;
const int packetl2c_bc_begin_award::kResultListFieldNumber;
const int packetl2c_bc_begin_award::kPlayerCardFieldNumber;
const int packetl2c_bc_begin_award::kResultPointInfoFieldNumber;
const int packetl2c_bc_begin_award::kSelfWinGoldFieldNumber;
const int packetl2c_bc_begin_award::kBankerWinGoldFieldNumber;
const int packetl2c_bc_begin_award::kBankerGoldCountFieldNumber;
const int packetl2c_bc_begin_award::kIsRefreshHistoryFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_begin_award::packetl2c_bc_begin_award()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_bc_begin_award)
}

void packetl2c_bc_begin_award::InitAsDefaultInstance() {
}

packetl2c_bc_begin_award::packetl2c_bc_begin_award(const packetl2c_bc_begin_award& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_bc_begin_award)
}

void packetl2c_bc_begin_award::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15008;
  self_win_gold_ = GOOGLE_LONGLONG(0);
  banker_win_gold_ = GOOGLE_LONGLONG(0);
  banker_gold_count_ = GOOGLE_LONGLONG(0);
  is_refresh_history_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_begin_award::~packetl2c_bc_begin_award() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_bc_begin_award)
  SharedDtor();
}

void packetl2c_bc_begin_award::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_begin_award::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_begin_award::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_begin_award_descriptor_;
}

const packetl2c_bc_begin_award& packetl2c_bc_begin_award::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_begin_award* packetl2c_bc_begin_award::default_instance_ = NULL;

packetl2c_bc_begin_award* packetl2c_bc_begin_award::New() const {
  return new packetl2c_bc_begin_award;
}

void packetl2c_bc_begin_award::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetl2c_bc_begin_award*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 241) {
    ZR_(is_refresh_history_, banker_gold_count_);
    packet_id_ = 15008;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  result_list_.Clear();
  player_card_.Clear();
  result_point_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_begin_award::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_bc_begin_award)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_award];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result_list;
        break;
      }

      // repeated .game_happysupremacy_protocols.msg_bet_result_info result_list = 2;
      case 2: {
        if (tag == 18) {
         parse_result_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result_list;
        if (input->ExpectTag(26)) goto parse_player_card;
        break;
      }

      // repeated .game_happysupremacy_protocols.msg_card_info player_card = 3;
      case 3: {
        if (tag == 26) {
         parse_player_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_card;
        if (input->ExpectTag(34)) goto parse_result_point_info;
        break;
      }

      // repeated .game_happysupremacy_protocols.msg_result_point_info result_point_info = 4;
      case 4: {
        if (tag == 34) {
         parse_result_point_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result_point_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result_point_info;
        if (input->ExpectTag(40)) goto parse_self_win_gold;
        break;
      }

      // optional int64 self_win_gold = 5;
      case 5: {
        if (tag == 40) {
         parse_self_win_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_win_gold_)));
          set_has_self_win_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_banker_win_gold;
        break;
      }

      // optional int64 banker_win_gold = 6;
      case 6: {
        if (tag == 48) {
         parse_banker_win_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_win_gold_)));
          set_has_banker_win_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_banker_gold_count;
        break;
      }

      // optional int64 banker_gold_count = 7;
      case 7: {
        if (tag == 56) {
         parse_banker_gold_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &banker_gold_count_)));
          set_has_banker_gold_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_refresh_history;
        break;
      }

      // optional bool is_refresh_history = 8;
      case 8: {
        if (tag == 64) {
         parse_is_refresh_history:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_refresh_history_)));
          set_has_is_refresh_history();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_bc_begin_award)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_bc_begin_award)
  return false;
#undef DO_
}

void packetl2c_bc_begin_award::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_bc_begin_award)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_award];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_happysupremacy_protocols.msg_bet_result_info result_list = 2;
  for (int i = 0; i < this->result_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result_list(i), output);
  }

  // repeated .game_happysupremacy_protocols.msg_card_info player_card = 3;
  for (int i = 0; i < this->player_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_card(i), output);
  }

  // repeated .game_happysupremacy_protocols.msg_result_point_info result_point_info = 4;
  for (int i = 0; i < this->result_point_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result_point_info(i), output);
  }

  // optional int64 self_win_gold = 5;
  if (has_self_win_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->self_win_gold(), output);
  }

  // optional int64 banker_win_gold = 6;
  if (has_banker_win_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->banker_win_gold(), output);
  }

  // optional int64 banker_gold_count = 7;
  if (has_banker_gold_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->banker_gold_count(), output);
  }

  // optional bool is_refresh_history = 8;
  if (has_is_refresh_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_refresh_history(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_bc_begin_award)
}

::google::protobuf::uint8* packetl2c_bc_begin_award::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_bc_begin_award)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_award];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_happysupremacy_protocols.msg_bet_result_info result_list = 2;
  for (int i = 0; i < this->result_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result_list(i), target);
  }

  // repeated .game_happysupremacy_protocols.msg_card_info player_card = 3;
  for (int i = 0; i < this->player_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_card(i), target);
  }

  // repeated .game_happysupremacy_protocols.msg_result_point_info result_point_info = 4;
  for (int i = 0; i < this->result_point_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result_point_info(i), target);
  }

  // optional int64 self_win_gold = 5;
  if (has_self_win_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->self_win_gold(), target);
  }

  // optional int64 banker_win_gold = 6;
  if (has_banker_win_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->banker_win_gold(), target);
  }

  // optional int64 banker_gold_count = 7;
  if (has_banker_gold_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->banker_gold_count(), target);
  }

  // optional bool is_refresh_history = 8;
  if (has_is_refresh_history()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_refresh_history(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_bc_begin_award)
  return target;
}

int packetl2c_bc_begin_award::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_begin_award];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int64 self_win_gold = 5;
    if (has_self_win_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->self_win_gold());
    }

    // optional int64 banker_win_gold = 6;
    if (has_banker_win_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_win_gold());
    }

    // optional int64 banker_gold_count = 7;
    if (has_banker_gold_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->banker_gold_count());
    }

    // optional bool is_refresh_history = 8;
    if (has_is_refresh_history()) {
      total_size += 1 + 1;
    }

  }
  // repeated .game_happysupremacy_protocols.msg_bet_result_info result_list = 2;
  total_size += 1 * this->result_list_size();
  for (int i = 0; i < this->result_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result_list(i));
  }

  // repeated .game_happysupremacy_protocols.msg_card_info player_card = 3;
  total_size += 1 * this->player_card_size();
  for (int i = 0; i < this->player_card_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_card(i));
  }

  // repeated .game_happysupremacy_protocols.msg_result_point_info result_point_info = 4;
  total_size += 1 * this->result_point_info_size();
  for (int i = 0; i < this->result_point_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result_point_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_begin_award::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_begin_award* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_begin_award*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_begin_award::MergeFrom(const packetl2c_bc_begin_award& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_list_.MergeFrom(from.result_list_);
  player_card_.MergeFrom(from.player_card_);
  result_point_info_.MergeFrom(from.result_point_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_self_win_gold()) {
      set_self_win_gold(from.self_win_gold());
    }
    if (from.has_banker_win_gold()) {
      set_banker_win_gold(from.banker_win_gold());
    }
    if (from.has_banker_gold_count()) {
      set_banker_gold_count(from.banker_gold_count());
    }
    if (from.has_is_refresh_history()) {
      set_is_refresh_history(from.is_refresh_history());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_begin_award::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_begin_award::CopyFrom(const packetl2c_bc_begin_award& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_begin_award::IsInitialized() const {

  return true;
}

void packetl2c_bc_begin_award::Swap(packetl2c_bc_begin_award* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    result_list_.Swap(&other->result_list_);
    player_card_.Swap(&other->player_card_);
    result_point_info_.Swap(&other->result_point_info_);
    std::swap(self_win_gold_, other->self_win_gold_);
    std::swap(banker_win_gold_, other->banker_win_gold_);
    std::swap(banker_gold_count_, other->banker_gold_count_);
    std::swap(is_refresh_history_, other->is_refresh_history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_begin_award::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_begin_award_descriptor_;
  metadata.reflection = packetl2c_bc_begin_award_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_total_bet_info::kPacketIdFieldNumber;
const int packetl2c_bc_total_bet_info::kBetInfoListFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_total_bet_info::packetl2c_bc_total_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_bc_total_bet_info)
}

void packetl2c_bc_total_bet_info::InitAsDefaultInstance() {
}

packetl2c_bc_total_bet_info::packetl2c_bc_total_bet_info(const packetl2c_bc_total_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_bc_total_bet_info)
}

void packetl2c_bc_total_bet_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15009;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_total_bet_info::~packetl2c_bc_total_bet_info() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_bc_total_bet_info)
  SharedDtor();
}

void packetl2c_bc_total_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_total_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_total_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_total_bet_info_descriptor_;
}

const packetl2c_bc_total_bet_info& packetl2c_bc_total_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_total_bet_info* packetl2c_bc_total_bet_info::default_instance_ = NULL;

packetl2c_bc_total_bet_info* packetl2c_bc_total_bet_info::New() const {
  return new packetl2c_bc_total_bet_info;
}

void packetl2c_bc_total_bet_info::Clear() {
  packet_id_ = 15009;
  bet_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_total_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_bc_total_bet_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_total_bet_info];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bet_info_list;
        break;
      }

      // repeated .game_happysupremacy_protocols.msg_bet_info bet_info_list = 2;
      case 2: {
        if (tag == 18) {
         parse_bet_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bet_info_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_bc_total_bet_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_bc_total_bet_info)
  return false;
#undef DO_
}

void packetl2c_bc_total_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_bc_total_bet_info)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_total_bet_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_happysupremacy_protocols.msg_bet_info bet_info_list = 2;
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bet_info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_bc_total_bet_info)
}

::google::protobuf::uint8* packetl2c_bc_total_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_bc_total_bet_info)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_total_bet_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_happysupremacy_protocols.msg_bet_info bet_info_list = 2;
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bet_info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_bc_total_bet_info)
  return target;
}

int packetl2c_bc_total_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_total_bet_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_happysupremacy_protocols.msg_bet_info bet_info_list = 2;
  total_size += 1 * this->bet_info_list_size();
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_total_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_total_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_total_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_total_bet_info::MergeFrom(const packetl2c_bc_total_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_info_list_.MergeFrom(from.bet_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_total_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_total_bet_info::CopyFrom(const packetl2c_bc_total_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_total_bet_info::IsInitialized() const {

  return true;
}

void packetl2c_bc_total_bet_info::Swap(packetl2c_bc_total_bet_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    bet_info_list_.Swap(&other->bet_info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_total_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_total_bet_info_descriptor_;
  metadata.reflection = packetl2c_bc_total_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_rob_banker_info::kPacketIdFieldNumber;
const int packetl2c_bc_rob_banker_info::kPlayerIdFieldNumber;
const int packetl2c_bc_rob_banker_info::kPayCountFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_rob_banker_info::packetl2c_bc_rob_banker_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_bc_rob_banker_info)
}

void packetl2c_bc_rob_banker_info::InitAsDefaultInstance() {
}

packetl2c_bc_rob_banker_info::packetl2c_bc_rob_banker_info(const packetl2c_bc_rob_banker_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_bc_rob_banker_info)
}

void packetl2c_bc_rob_banker_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15023;
  player_id_ = 0;
  pay_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_rob_banker_info::~packetl2c_bc_rob_banker_info() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_bc_rob_banker_info)
  SharedDtor();
}

void packetl2c_bc_rob_banker_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_rob_banker_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_rob_banker_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_rob_banker_info_descriptor_;
}

const packetl2c_bc_rob_banker_info& packetl2c_bc_rob_banker_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_rob_banker_info* packetl2c_bc_rob_banker_info::default_instance_ = NULL;

packetl2c_bc_rob_banker_info* packetl2c_bc_rob_banker_info::New() const {
  return new packetl2c_bc_rob_banker_info;
}

void packetl2c_bc_rob_banker_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetl2c_bc_rob_banker_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(player_id_, pay_count_);
    packet_id_ = 15023;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_rob_banker_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_bc_rob_banker_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_rob_banker_info];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pay_count;
        break;
      }

      // optional int32 pay_count = 3;
      case 3: {
        if (tag == 24) {
         parse_pay_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pay_count_)));
          set_has_pay_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_bc_rob_banker_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_bc_rob_banker_info)
  return false;
#undef DO_
}

void packetl2c_bc_rob_banker_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_bc_rob_banker_info)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_rob_banker_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 pay_count = 3;
  if (has_pay_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pay_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_bc_rob_banker_info)
}

::google::protobuf::uint8* packetl2c_bc_rob_banker_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_bc_rob_banker_info)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_rob_banker_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 pay_count = 3;
  if (has_pay_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pay_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_bc_rob_banker_info)
  return target;
}

int packetl2c_bc_rob_banker_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_rob_banker_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 pay_count = 3;
    if (has_pay_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pay_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_rob_banker_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_rob_banker_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_rob_banker_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_rob_banker_info::MergeFrom(const packetl2c_bc_rob_banker_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_pay_count()) {
      set_pay_count(from.pay_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_rob_banker_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_rob_banker_info::CopyFrom(const packetl2c_bc_rob_banker_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_rob_banker_info::IsInitialized() const {

  return true;
}

void packetl2c_bc_rob_banker_info::Swap(packetl2c_bc_rob_banker_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(pay_count_, other->pay_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_rob_banker_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_rob_banker_info_descriptor_;
  metadata.reflection = packetl2c_bc_rob_banker_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_change_banker::kPacketIdFieldNumber;
const int packetl2c_bc_change_banker::kBankerInfoFieldNumber;
const int packetl2c_bc_change_banker::kIsRobFieldNumber;
const int packetl2c_bc_change_banker::kOldBankerIdFieldNumber;
const int packetl2c_bc_change_banker::kSystemDrawWaterFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_change_banker::packetl2c_bc_change_banker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_bc_change_banker)
}

void packetl2c_bc_change_banker::InitAsDefaultInstance() {
  banker_info_ = const_cast< ::game_happysupremacy_protocols::player_info*>(&::game_happysupremacy_protocols::player_info::default_instance());
}

packetl2c_bc_change_banker::packetl2c_bc_change_banker(const packetl2c_bc_change_banker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_bc_change_banker)
}

void packetl2c_bc_change_banker::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15019;
  banker_info_ = NULL;
  is_rob_ = false;
  old_banker_id_ = 0;
  system_draw_water_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_change_banker::~packetl2c_bc_change_banker() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_bc_change_banker)
  SharedDtor();
}

void packetl2c_bc_change_banker::SharedDtor() {
  if (this != default_instance_) {
    delete banker_info_;
  }
}

void packetl2c_bc_change_banker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_change_banker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_change_banker_descriptor_;
}

const packetl2c_bc_change_banker& packetl2c_bc_change_banker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_change_banker* packetl2c_bc_change_banker::default_instance_ = NULL;

packetl2c_bc_change_banker* packetl2c_bc_change_banker::New() const {
  return new packetl2c_bc_change_banker;
}

void packetl2c_bc_change_banker::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetl2c_bc_change_banker*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(is_rob_, system_draw_water_);
    packet_id_ = 15019;
    if (has_banker_info()) {
      if (banker_info_ != NULL) banker_info_->::game_happysupremacy_protocols::player_info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_change_banker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_bc_change_banker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_banker];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_banker_info;
        break;
      }

      // optional .game_happysupremacy_protocols.player_info banker_info = 2;
      case 2: {
        if (tag == 18) {
         parse_banker_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banker_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_rob;
        break;
      }

      // optional bool is_rob = 3;
      case 3: {
        if (tag == 24) {
         parse_is_rob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rob_)));
          set_has_is_rob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_old_banker_id;
        break;
      }

      // optional int32 old_banker_id = 4;
      case 4: {
        if (tag == 32) {
         parse_old_banker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_banker_id_)));
          set_has_old_banker_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_system_draw_water;
        break;
      }

      // optional int32 system_draw_water = 5;
      case 5: {
        if (tag == 40) {
         parse_system_draw_water:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &system_draw_water_)));
          set_has_system_draw_water();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_bc_change_banker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_bc_change_banker)
  return false;
#undef DO_
}

void packetl2c_bc_change_banker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_bc_change_banker)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_banker];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .game_happysupremacy_protocols.player_info banker_info = 2;
  if (has_banker_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->banker_info(), output);
  }

  // optional bool is_rob = 3;
  if (has_is_rob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_rob(), output);
  }

  // optional int32 old_banker_id = 4;
  if (has_old_banker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->old_banker_id(), output);
  }

  // optional int32 system_draw_water = 5;
  if (has_system_draw_water()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->system_draw_water(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_bc_change_banker)
}

::google::protobuf::uint8* packetl2c_bc_change_banker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_bc_change_banker)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_banker];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .game_happysupremacy_protocols.player_info banker_info = 2;
  if (has_banker_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->banker_info(), target);
  }

  // optional bool is_rob = 3;
  if (has_is_rob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_rob(), target);
  }

  // optional int32 old_banker_id = 4;
  if (has_old_banker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->old_banker_id(), target);
  }

  // optional int32 system_draw_water = 5;
  if (has_system_draw_water()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->system_draw_water(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_bc_change_banker)
  return target;
}

int packetl2c_bc_change_banker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_change_banker];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .game_happysupremacy_protocols.player_info banker_info = 2;
    if (has_banker_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->banker_info());
    }

    // optional bool is_rob = 3;
    if (has_is_rob()) {
      total_size += 1 + 1;
    }

    // optional int32 old_banker_id = 4;
    if (has_old_banker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_banker_id());
    }

    // optional int32 system_draw_water = 5;
    if (has_system_draw_water()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->system_draw_water());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_change_banker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_change_banker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_change_banker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_change_banker::MergeFrom(const packetl2c_bc_change_banker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_banker_info()) {
      mutable_banker_info()->::game_happysupremacy_protocols::player_info::MergeFrom(from.banker_info());
    }
    if (from.has_is_rob()) {
      set_is_rob(from.is_rob());
    }
    if (from.has_old_banker_id()) {
      set_old_banker_id(from.old_banker_id());
    }
    if (from.has_system_draw_water()) {
      set_system_draw_water(from.system_draw_water());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_change_banker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_change_banker::CopyFrom(const packetl2c_bc_change_banker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_change_banker::IsInitialized() const {

  return true;
}

void packetl2c_bc_change_banker::Swap(packetl2c_bc_change_banker* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(banker_info_, other->banker_info_);
    std::swap(is_rob_, other->is_rob_);
    std::swap(old_banker_id_, other->old_banker_id_);
    std::swap(system_draw_water_, other->system_draw_water_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_change_banker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_change_banker_descriptor_;
  metadata.reflection = packetl2c_bc_change_banker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_check_state::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_check_state::packetc2l_check_state()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_check_state)
}

void packetc2l_check_state::InitAsDefaultInstance() {
}

packetc2l_check_state::packetc2l_check_state(const packetc2l_check_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_check_state)
}

void packetc2l_check_state::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10008;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_check_state::~packetc2l_check_state() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_check_state)
  SharedDtor();
}

void packetc2l_check_state::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_check_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_check_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_check_state_descriptor_;
}

const packetc2l_check_state& packetc2l_check_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_check_state* packetc2l_check_state::default_instance_ = NULL;

packetc2l_check_state* packetc2l_check_state::New() const {
  return new packetc2l_check_state;
}

void packetc2l_check_state::Clear() {
  packet_id_ = 10008;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_check_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_check_state)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_check_state)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_check_state)
  return false;
#undef DO_
}

void packetc2l_check_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_check_state)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_check_state)
}

::google::protobuf::uint8* packetc2l_check_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_check_state)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_check_state)
  return target;
}

int packetc2l_check_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_check_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_check_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_check_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_check_state::MergeFrom(const packetc2l_check_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_check_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_check_state::CopyFrom(const packetc2l_check_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_check_state::IsInitialized() const {

  return true;
}

void packetc2l_check_state::Swap(packetc2l_check_state* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_check_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_check_state_descriptor_;
  metadata.reflection = packetc2l_check_state_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_check_state_result::kPacketIdFieldNumber;
const int packetl2c_check_state_result::kIsIntableFieldNumber;
#endif  // !_MSC_VER

packetl2c_check_state_result::packetl2c_check_state_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_check_state_result)
}

void packetl2c_check_state_result::InitAsDefaultInstance() {
}

packetl2c_check_state_result::packetl2c_check_state_result(const packetl2c_check_state_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_check_state_result)
}

void packetl2c_check_state_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15013;
  is_intable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_check_state_result::~packetl2c_check_state_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_check_state_result)
  SharedDtor();
}

void packetl2c_check_state_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_check_state_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_check_state_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_check_state_result_descriptor_;
}

const packetl2c_check_state_result& packetl2c_check_state_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_check_state_result* packetl2c_check_state_result::default_instance_ = NULL;

packetl2c_check_state_result* packetl2c_check_state_result::New() const {
  return new packetl2c_check_state_result;
}

void packetl2c_check_state_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 15013;
    is_intable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_check_state_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_check_state_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_intable;
        break;
      }

      // optional bool is_intable = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_is_intable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_intable_)));
          set_has_is_intable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_check_state_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_check_state_result)
  return false;
#undef DO_
}

void packetl2c_check_state_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_check_state_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool is_intable = 2 [default = false];
  if (has_is_intable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_intable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_check_state_result)
}

::google::protobuf::uint8* packetl2c_check_state_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_check_state_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool is_intable = 2 [default = false];
  if (has_is_intable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_intable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_check_state_result)
  return target;
}

int packetl2c_check_state_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool is_intable = 2 [default = false];
    if (has_is_intable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_check_state_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_check_state_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_check_state_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_check_state_result::MergeFrom(const packetl2c_check_state_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_is_intable()) {
      set_is_intable(from.is_intable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_check_state_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_check_state_result::CopyFrom(const packetl2c_check_state_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_check_state_result::IsInitialized() const {

  return true;
}

void packetl2c_check_state_result::Swap(packetl2c_check_state_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(is_intable_, other->is_intable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_check_state_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_check_state_result_descriptor_;
  metadata.reflection = packetl2c_check_state_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_bc_accept_gift::kPacketIdFieldNumber;
const int packetl2c_bc_accept_gift::kPlayerIdFieldNumber;
const int packetl2c_bc_accept_gift::kGiftIdFieldNumber;
#endif  // !_MSC_VER

packetl2c_bc_accept_gift::packetl2c_bc_accept_gift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_bc_accept_gift)
}

void packetl2c_bc_accept_gift::InitAsDefaultInstance() {
}

packetl2c_bc_accept_gift::packetl2c_bc_accept_gift(const packetl2c_bc_accept_gift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_bc_accept_gift)
}

void packetl2c_bc_accept_gift::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 15015;
  player_id_ = 0;
  gift_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_bc_accept_gift::~packetl2c_bc_accept_gift() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_bc_accept_gift)
  SharedDtor();
}

void packetl2c_bc_accept_gift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_bc_accept_gift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_bc_accept_gift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_bc_accept_gift_descriptor_;
}

const packetl2c_bc_accept_gift& packetl2c_bc_accept_gift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_bc_accept_gift* packetl2c_bc_accept_gift::default_instance_ = NULL;

packetl2c_bc_accept_gift* packetl2c_bc_accept_gift::New() const {
  return new packetl2c_bc_accept_gift;
}

void packetl2c_bc_accept_gift::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetl2c_bc_accept_gift*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(player_id_, gift_id_);
    packet_id_ = 15015;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_bc_accept_gift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_bc_accept_gift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_accept_gift];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gift_id;
        break;
      }

      // optional int32 gift_id = 3;
      case 3: {
        if (tag == 24) {
         parse_gift_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_id_)));
          set_has_gift_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_bc_accept_gift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_bc_accept_gift)
  return false;
#undef DO_
}

void packetl2c_bc_accept_gift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_bc_accept_gift)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_accept_gift];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 gift_id = 3;
  if (has_gift_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gift_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_bc_accept_gift)
}

::google::protobuf::uint8* packetl2c_bc_accept_gift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_bc_accept_gift)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_accept_gift];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 gift_id = 3;
  if (has_gift_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gift_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_bc_accept_gift)
  return target;
}

int packetl2c_bc_accept_gift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bc_accept_gift];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 gift_id = 3;
    if (has_gift_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_bc_accept_gift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_bc_accept_gift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_bc_accept_gift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_bc_accept_gift::MergeFrom(const packetl2c_bc_accept_gift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_gift_id()) {
      set_gift_id(from.gift_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_bc_accept_gift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_bc_accept_gift::CopyFrom(const packetl2c_bc_accept_gift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_bc_accept_gift::IsInitialized() const {

  return true;
}

void packetl2c_bc_accept_gift::Swap(packetl2c_bc_accept_gift* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(gift_id_, other->gift_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_bc_accept_gift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_bc_accept_gift_descriptor_;
  metadata.reflection = packetl2c_bc_accept_gift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_gm::kPacketIdFieldNumber;
const int packetc2l_gm::kGmMaxFieldNumber;
#endif  // !_MSC_VER

packetc2l_gm::packetc2l_gm()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_gm)
}

void packetc2l_gm::InitAsDefaultInstance() {
}

packetc2l_gm::packetc2l_gm(const packetc2l_gm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_gm)
}

void packetc2l_gm::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 10009;
  gm_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_gm::~packetc2l_gm() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_gm)
  SharedDtor();
}

void packetc2l_gm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_gm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_gm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_gm_descriptor_;
}

const packetc2l_gm& packetc2l_gm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_gm* packetc2l_gm::default_instance_ = NULL;

packetc2l_gm* packetc2l_gm::New() const {
  return new packetc2l_gm;
}

void packetc2l_gm::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 10009;
    gm_max_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_gm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_gm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gm_max;
        break;
      }

      // optional int32 gm_max = 2;
      case 2: {
        if (tag == 16) {
         parse_gm_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gm_max_)));
          set_has_gm_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_gm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_gm)
  return false;
#undef DO_
}

void packetc2l_gm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_gm)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 gm_max = 2;
  if (has_gm_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gm_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_gm)
}

::google::protobuf::uint8* packetc2l_gm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_gm)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 gm_max = 2;
  if (has_gm_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gm_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_gm)
  return target;
}

int packetc2l_gm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 gm_max = 2;
    if (has_gm_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gm_max());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_gm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_gm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_gm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_gm::MergeFrom(const packetc2l_gm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_gm_max()) {
      set_gm_max(from.gm_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_gm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_gm::CopyFrom(const packetc2l_gm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_gm::IsInitialized() const {

  return true;
}

void packetc2l_gm::Swap(packetc2l_gm* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(gm_max_, other->gm_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_gm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_gm_descriptor_;
  metadata.reflection = packetc2l_gm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_gm_talk_server::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2l_gm_talk_server::packetc2l_gm_talk_server()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_gm_talk_server)
}

void packetc2l_gm_talk_server::InitAsDefaultInstance() {
}

packetc2l_gm_talk_server::packetc2l_gm_talk_server(const packetc2l_gm_talk_server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_gm_talk_server)
}

void packetc2l_gm_talk_server::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 11002;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_gm_talk_server::~packetc2l_gm_talk_server() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_gm_talk_server)
  SharedDtor();
}

void packetc2l_gm_talk_server::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_gm_talk_server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_gm_talk_server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_gm_talk_server_descriptor_;
}

const packetc2l_gm_talk_server& packetc2l_gm_talk_server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_gm_talk_server* packetc2l_gm_talk_server::default_instance_ = NULL;

packetc2l_gm_talk_server* packetc2l_gm_talk_server::New() const {
  return new packetc2l_gm_talk_server;
}

void packetc2l_gm_talk_server::Clear() {
  packet_id_ = 11002;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_gm_talk_server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_gm_talk_server)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_talk_server];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_gm_talk_server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_gm_talk_server)
  return false;
#undef DO_
}

void packetc2l_gm_talk_server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_gm_talk_server)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_talk_server];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_gm_talk_server)
}

::google::protobuf::uint8* packetc2l_gm_talk_server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_gm_talk_server)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_talk_server];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_gm_talk_server)
  return target;
}

int packetc2l_gm_talk_server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_talk_server];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_gm_talk_server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_gm_talk_server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_gm_talk_server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_gm_talk_server::MergeFrom(const packetc2l_gm_talk_server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_gm_talk_server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_gm_talk_server::CopyFrom(const packetc2l_gm_talk_server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_gm_talk_server::IsInitialized() const {

  return true;
}

void packetc2l_gm_talk_server::Swap(packetc2l_gm_talk_server* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_gm_talk_server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_gm_talk_server_descriptor_;
  metadata.reflection = packetc2l_gm_talk_server_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_gm_talk_server::kPacketIdFieldNumber;
const int packetl2c_gm_talk_server::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_gm_talk_server::packetl2c_gm_talk_server()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_gm_talk_server)
}

void packetl2c_gm_talk_server::InitAsDefaultInstance() {
}

packetl2c_gm_talk_server::packetl2c_gm_talk_server(const packetl2c_gm_talk_server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_gm_talk_server)
}

void packetl2c_gm_talk_server::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 16002;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_gm_talk_server::~packetl2c_gm_talk_server() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_gm_talk_server)
  SharedDtor();
}

void packetl2c_gm_talk_server::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_gm_talk_server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_gm_talk_server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_gm_talk_server_descriptor_;
}

const packetl2c_gm_talk_server& packetl2c_gm_talk_server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_gm_talk_server* packetl2c_gm_talk_server::default_instance_ = NULL;

packetl2c_gm_talk_server* packetl2c_gm_talk_server::New() const {
  return new packetl2c_gm_talk_server;
}

void packetl2c_gm_talk_server::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 16002;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_gm_talk_server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_gm_talk_server)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_talk_server];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_gm_talk_server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_gm_talk_server)
  return false;
#undef DO_
}

void packetl2c_gm_talk_server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_gm_talk_server)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_talk_server];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_gm_talk_server)
}

::google::protobuf::uint8* packetl2c_gm_talk_server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_gm_talk_server)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_talk_server];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_gm_talk_server)
  return target;
}

int packetl2c_gm_talk_server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_talk_server];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_gm_talk_server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_gm_talk_server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_gm_talk_server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_gm_talk_server::MergeFrom(const packetl2c_gm_talk_server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_gm_talk_server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_gm_talk_server::CopyFrom(const packetl2c_gm_talk_server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_gm_talk_server::IsInitialized() const {

  return true;
}

void packetl2c_gm_talk_server::Swap(packetl2c_gm_talk_server* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_gm_talk_server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_gm_talk_server_descriptor_;
  metadata.reflection = packetl2c_gm_talk_server_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_msg_bet_info::kPlayerInfoFieldNumber;
const int gm_msg_bet_info::kBetInfoFieldNumber;
#endif  // !_MSC_VER

gm_msg_bet_info::gm_msg_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.gm_msg_bet_info)
}

void gm_msg_bet_info::InitAsDefaultInstance() {
  player_info_ = const_cast< ::game_happysupremacy_protocols::player_info*>(&::game_happysupremacy_protocols::player_info::default_instance());
}

gm_msg_bet_info::gm_msg_bet_info(const gm_msg_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.gm_msg_bet_info)
}

void gm_msg_bet_info::SharedCtor() {
  _cached_size_ = 0;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_msg_bet_info::~gm_msg_bet_info() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.gm_msg_bet_info)
  SharedDtor();
}

void gm_msg_bet_info::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void gm_msg_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_msg_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_msg_bet_info_descriptor_;
}

const gm_msg_bet_info& gm_msg_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

gm_msg_bet_info* gm_msg_bet_info::default_instance_ = NULL;

gm_msg_bet_info* gm_msg_bet_info::New() const {
  return new gm_msg_bet_info;
}

void gm_msg_bet_info::Clear() {
  if (has_player_info()) {
    if (player_info_ != NULL) player_info_->::game_happysupremacy_protocols::player_info::Clear();
  }
  bet_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_msg_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.gm_msg_bet_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.player_info player_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bet_info;
        break;
      }

      // repeated .game_happysupremacy_protocols.msg_bet_info bet_info = 2;
      case 2: {
        if (tag == 18) {
         parse_bet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bet_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.gm_msg_bet_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.gm_msg_bet_info)
  return false;
#undef DO_
}

void gm_msg_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.gm_msg_bet_info)
  // optional .game_happysupremacy_protocols.player_info player_info = 1;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_info(), output);
  }

  // repeated .game_happysupremacy_protocols.msg_bet_info bet_info = 2;
  for (int i = 0; i < this->bet_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bet_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.gm_msg_bet_info)
}

::google::protobuf::uint8* gm_msg_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.gm_msg_bet_info)
  // optional .game_happysupremacy_protocols.player_info player_info = 1;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_info(), target);
  }

  // repeated .game_happysupremacy_protocols.msg_bet_info bet_info = 2;
  for (int i = 0; i < this->bet_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bet_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.gm_msg_bet_info)
  return target;
}

int gm_msg_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.player_info player_info = 1;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

  }
  // repeated .game_happysupremacy_protocols.msg_bet_info bet_info = 2;
  total_size += 1 * this->bet_info_size();
  for (int i = 0; i < this->bet_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_msg_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_msg_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_msg_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_msg_bet_info::MergeFrom(const gm_msg_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_info_.MergeFrom(from.bet_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_info()) {
      mutable_player_info()->::game_happysupremacy_protocols::player_info::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_msg_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_msg_bet_info::CopyFrom(const gm_msg_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_msg_bet_info::IsInitialized() const {

  return true;
}

void gm_msg_bet_info::Swap(gm_msg_bet_info* other) {
  if (other != this) {
    std::swap(player_info_, other->player_info_);
    bet_info_.Swap(&other->bet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_msg_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_msg_bet_info_descriptor_;
  metadata.reflection = gm_msg_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_gm_all_bet_info::kPacketIdFieldNumber;
const int packetl2c_notice_gm_all_bet_info::kBetInfoListFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_gm_all_bet_info::packetl2c_notice_gm_all_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_notice_gm_all_bet_info)
}

void packetl2c_notice_gm_all_bet_info::InitAsDefaultInstance() {
}

packetl2c_notice_gm_all_bet_info::packetl2c_notice_gm_all_bet_info(const packetl2c_notice_gm_all_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_notice_gm_all_bet_info)
}

void packetl2c_notice_gm_all_bet_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 16100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_gm_all_bet_info::~packetl2c_notice_gm_all_bet_info() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_notice_gm_all_bet_info)
  SharedDtor();
}

void packetl2c_notice_gm_all_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_gm_all_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_gm_all_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_gm_all_bet_info_descriptor_;
}

const packetl2c_notice_gm_all_bet_info& packetl2c_notice_gm_all_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_gm_all_bet_info* packetl2c_notice_gm_all_bet_info::default_instance_ = NULL;

packetl2c_notice_gm_all_bet_info* packetl2c_notice_gm_all_bet_info::New() const {
  return new packetl2c_notice_gm_all_bet_info;
}

void packetl2c_notice_gm_all_bet_info::Clear() {
  packet_id_ = 16100;
  bet_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_gm_all_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_notice_gm_all_bet_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bet_info_list;
        break;
      }

      // repeated .game_happysupremacy_protocols.gm_msg_bet_info bet_info_list = 2;
      case 2: {
        if (tag == 18) {
         parse_bet_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bet_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bet_info_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_notice_gm_all_bet_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_notice_gm_all_bet_info)
  return false;
#undef DO_
}

void packetl2c_notice_gm_all_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_notice_gm_all_bet_info)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .game_happysupremacy_protocols.gm_msg_bet_info bet_info_list = 2;
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bet_info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_notice_gm_all_bet_info)
}

::google::protobuf::uint8* packetl2c_notice_gm_all_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_notice_gm_all_bet_info)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .game_happysupremacy_protocols.gm_msg_bet_info bet_info_list = 2;
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bet_info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_notice_gm_all_bet_info)
  return target;
}

int packetl2c_notice_gm_all_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_bet_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .game_happysupremacy_protocols.gm_msg_bet_info bet_info_list = 2;
  total_size += 1 * this->bet_info_list_size();
  for (int i = 0; i < this->bet_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bet_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_gm_all_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_gm_all_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_gm_all_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_gm_all_bet_info::MergeFrom(const packetl2c_notice_gm_all_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_info_list_.MergeFrom(from.bet_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_gm_all_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_gm_all_bet_info::CopyFrom(const packetl2c_notice_gm_all_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_gm_all_bet_info::IsInitialized() const {

  return true;
}

void packetl2c_notice_gm_all_bet_info::Swap(packetl2c_notice_gm_all_bet_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    bet_info_list_.Swap(&other->bet_info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_gm_all_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_gm_all_bet_info_descriptor_;
  metadata.reflection = packetl2c_notice_gm_all_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2l_gm_change_result::kPacketIdFieldNumber;
const int packetc2l_gm_change_result::kCommandFieldNumber;
const int packetc2l_gm_change_result::kBetTypeListFieldNumber;
#endif  // !_MSC_VER

packetc2l_gm_change_result::packetc2l_gm_change_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetc2l_gm_change_result)
}

void packetc2l_gm_change_result::InitAsDefaultInstance() {
}

packetc2l_gm_change_result::packetc2l_gm_change_result(const packetc2l_gm_change_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetc2l_gm_change_result)
}

void packetc2l_gm_change_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 11001;
  command_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2l_gm_change_result::~packetc2l_gm_change_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetc2l_gm_change_result)
  SharedDtor();
}

void packetc2l_gm_change_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2l_gm_change_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2l_gm_change_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2l_gm_change_result_descriptor_;
}

const packetc2l_gm_change_result& packetc2l_gm_change_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2l_gm_change_result* packetc2l_gm_change_result::default_instance_ = NULL;

packetc2l_gm_change_result* packetc2l_gm_change_result::New() const {
  return new packetc2l_gm_change_result;
}

void packetc2l_gm_change_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 11001;
    command_ = 0;
  }
  bet_type_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2l_gm_change_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetc2l_gm_change_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_change_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_command;
        break;
      }

      // optional int32 command = 2;
      case 2: {
        if (tag == 16) {
         parse_command:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bet_type_list;
        break;
      }

      // repeated .game_happysupremacy_protocols.e_bet_type bet_type_list = 3;
      case 3: {
        if (tag == 24) {
         parse_bet_type_list:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_bet_type_IsValid(value)) {
            add_bet_type_list(static_cast< ::game_happysupremacy_protocols::e_bet_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::game_happysupremacy_protocols::e_bet_type_IsValid,
                 this->mutable_bet_type_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bet_type_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetc2l_gm_change_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetc2l_gm_change_result)
  return false;
#undef DO_
}

void packetc2l_gm_change_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetc2l_gm_change_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_change_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->command(), output);
  }

  // repeated .game_happysupremacy_protocols.e_bet_type bet_type_list = 3;
  for (int i = 0; i < this->bet_type_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->bet_type_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetc2l_gm_change_result)
}

::google::protobuf::uint8* packetc2l_gm_change_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetc2l_gm_change_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_change_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 command = 2;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->command(), target);
  }

  // repeated .game_happysupremacy_protocols.e_bet_type bet_type_list = 3;
  for (int i = 0; i < this->bet_type_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->bet_type_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetc2l_gm_change_result)
  return target;
}

int packetc2l_gm_change_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_change_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->command());
    }

  }
  // repeated .game_happysupremacy_protocols.e_bet_type bet_type_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->bet_type_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->bet_type_list(i));
    }
    total_size += 1 * this->bet_type_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2l_gm_change_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2l_gm_change_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2l_gm_change_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2l_gm_change_result::MergeFrom(const packetc2l_gm_change_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_type_list_.MergeFrom(from.bet_type_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2l_gm_change_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2l_gm_change_result::CopyFrom(const packetc2l_gm_change_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2l_gm_change_result::IsInitialized() const {

  return true;
}

void packetc2l_gm_change_result::Swap(packetc2l_gm_change_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(command_, other->command_);
    bet_type_list_.Swap(&other->bet_type_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2l_gm_change_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2l_gm_change_result_descriptor_;
  metadata.reflection = packetc2l_gm_change_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_gm_change_result::kPacketIdFieldNumber;
const int packetl2c_gm_change_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetl2c_gm_change_result::packetl2c_gm_change_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_gm_change_result)
}

void packetl2c_gm_change_result::InitAsDefaultInstance() {
}

packetl2c_gm_change_result::packetl2c_gm_change_result(const packetl2c_gm_change_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_gm_change_result)
}

void packetl2c_gm_change_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 16001;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_gm_change_result::~packetl2c_gm_change_result() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_gm_change_result)
  SharedDtor();
}

void packetl2c_gm_change_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_gm_change_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_gm_change_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_gm_change_result_descriptor_;
}

const packetl2c_gm_change_result& packetl2c_gm_change_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_gm_change_result* packetl2c_gm_change_result::default_instance_ = NULL;

packetl2c_gm_change_result* packetl2c_gm_change_result::New() const {
  return new packetl2c_gm_change_result;
}

void packetl2c_gm_change_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 16001;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_gm_change_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_gm_change_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_change_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_gm_change_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_gm_change_result)
  return false;
#undef DO_
}

void packetl2c_gm_change_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_gm_change_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_change_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_gm_change_result)
}

::google::protobuf::uint8* packetl2c_gm_change_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_gm_change_result)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_change_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_gm_change_result)
  return target;
}

int packetl2c_gm_change_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_change_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_gm_change_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_gm_change_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_gm_change_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_gm_change_result::MergeFrom(const packetl2c_gm_change_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_gm_change_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_gm_change_result::CopyFrom(const packetl2c_gm_change_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_gm_change_result::IsInitialized() const {

  return true;
}

void packetl2c_gm_change_result::Swap(packetl2c_gm_change_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_gm_change_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_gm_change_result_descriptor_;
  metadata.reflection = packetl2c_gm_change_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetl2c_notice_gm_stock_info::kPacketIdFieldNumber;
const int packetl2c_notice_gm_stock_info::kStockTotalCountFieldNumber;
const int packetl2c_notice_gm_stock_info::kStockAddCountFieldNumber;
const int packetl2c_notice_gm_stock_info::kStockEarnRateFieldNumber;
const int packetl2c_notice_gm_stock_info::kStockTotalEarnRateIncomeFieldNumber;
const int packetl2c_notice_gm_stock_info::kStockAddEarnRateIncomeFieldNumber;
#endif  // !_MSC_VER

packetl2c_notice_gm_stock_info::packetl2c_notice_gm_stock_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_happysupremacy_protocols.packetl2c_notice_gm_stock_info)
}

void packetl2c_notice_gm_stock_info::InitAsDefaultInstance() {
}

packetl2c_notice_gm_stock_info::packetl2c_notice_gm_stock_info(const packetl2c_notice_gm_stock_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_happysupremacy_protocols.packetl2c_notice_gm_stock_info)
}

void packetl2c_notice_gm_stock_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 17001;
  stock_total_count_ = GOOGLE_LONGLONG(0);
  stock_add_count_ = GOOGLE_LONGLONG(0);
  stock_earnrate_ = 0;
  stock_total_earnrate_income_ = GOOGLE_LONGLONG(0);
  stock_add_earnrate_income_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetl2c_notice_gm_stock_info::~packetl2c_notice_gm_stock_info() {
  // @@protoc_insertion_point(destructor:game_happysupremacy_protocols.packetl2c_notice_gm_stock_info)
  SharedDtor();
}

void packetl2c_notice_gm_stock_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetl2c_notice_gm_stock_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetl2c_notice_gm_stock_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetl2c_notice_gm_stock_info_descriptor_;
}

const packetl2c_notice_gm_stock_info& packetl2c_notice_gm_stock_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fhappysupremacy_5fprotocol_2eproto();
  return *default_instance_;
}

packetl2c_notice_gm_stock_info* packetl2c_notice_gm_stock_info::default_instance_ = NULL;

packetl2c_notice_gm_stock_info* packetl2c_notice_gm_stock_info::New() const {
  return new packetl2c_notice_gm_stock_info;
}

void packetl2c_notice_gm_stock_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetl2c_notice_gm_stock_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(stock_total_count_, stock_add_earnrate_income_);
    packet_id_ = 17001;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetl2c_notice_gm_stock_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_happysupremacy_protocols.packetl2c_notice_gm_stock_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_stock_info];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_happysupremacy_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::game_happysupremacy_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stock_total_count;
        break;
      }

      // optional int64 stock_total_count = 2;
      case 2: {
        if (tag == 16) {
         parse_stock_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stock_total_count_)));
          set_has_stock_total_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stock_add_count;
        break;
      }

      // optional int64 stock_add_count = 3;
      case 3: {
        if (tag == 24) {
         parse_stock_add_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stock_add_count_)));
          set_has_stock_add_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_stock_earnRate;
        break;
      }

      // optional double stock_earnRate = 4;
      case 4: {
        if (tag == 33) {
         parse_stock_earnRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stock_earnrate_)));
          set_has_stock_earnrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_stock_total_earnRate_income;
        break;
      }

      // optional int64 stock_total_earnRate_income = 5;
      case 5: {
        if (tag == 40) {
         parse_stock_total_earnRate_income:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stock_total_earnrate_income_)));
          set_has_stock_total_earnrate_income();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stock_add_earnRate_income;
        break;
      }

      // optional int64 stock_add_earnRate_income = 6;
      case 6: {
        if (tag == 48) {
         parse_stock_add_earnRate_income:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stock_add_earnrate_income_)));
          set_has_stock_add_earnrate_income();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_happysupremacy_protocols.packetl2c_notice_gm_stock_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_happysupremacy_protocols.packetl2c_notice_gm_stock_info)
  return false;
#undef DO_
}

void packetl2c_notice_gm_stock_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_happysupremacy_protocols.packetl2c_notice_gm_stock_info)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_stock_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int64 stock_total_count = 2;
  if (has_stock_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->stock_total_count(), output);
  }

  // optional int64 stock_add_count = 3;
  if (has_stock_add_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->stock_add_count(), output);
  }

  // optional double stock_earnRate = 4;
  if (has_stock_earnrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->stock_earnrate(), output);
  }

  // optional int64 stock_total_earnRate_income = 5;
  if (has_stock_total_earnrate_income()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->stock_total_earnrate_income(), output);
  }

  // optional int64 stock_add_earnRate_income = 6;
  if (has_stock_add_earnrate_income()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->stock_add_earnrate_income(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_happysupremacy_protocols.packetl2c_notice_gm_stock_info)
}

::google::protobuf::uint8* packetl2c_notice_gm_stock_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_happysupremacy_protocols.packetl2c_notice_gm_stock_info)
  // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_stock_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int64 stock_total_count = 2;
  if (has_stock_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->stock_total_count(), target);
  }

  // optional int64 stock_add_count = 3;
  if (has_stock_add_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->stock_add_count(), target);
  }

  // optional double stock_earnRate = 4;
  if (has_stock_earnrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->stock_earnrate(), target);
  }

  // optional int64 stock_total_earnRate_income = 5;
  if (has_stock_total_earnrate_income()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->stock_total_earnrate_income(), target);
  }

  // optional int64 stock_add_earnRate_income = 6;
  if (has_stock_add_earnrate_income()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->stock_add_earnrate_income(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_happysupremacy_protocols.packetl2c_notice_gm_stock_info)
  return target;
}

int packetl2c_notice_gm_stock_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_happysupremacy_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_stock_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int64 stock_total_count = 2;
    if (has_stock_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stock_total_count());
    }

    // optional int64 stock_add_count = 3;
    if (has_stock_add_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stock_add_count());
    }

    // optional double stock_earnRate = 4;
    if (has_stock_earnrate()) {
      total_size += 1 + 8;
    }

    // optional int64 stock_total_earnRate_income = 5;
    if (has_stock_total_earnrate_income()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stock_total_earnrate_income());
    }

    // optional int64 stock_add_earnRate_income = 6;
    if (has_stock_add_earnrate_income()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stock_add_earnrate_income());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetl2c_notice_gm_stock_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetl2c_notice_gm_stock_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetl2c_notice_gm_stock_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetl2c_notice_gm_stock_info::MergeFrom(const packetl2c_notice_gm_stock_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_stock_total_count()) {
      set_stock_total_count(from.stock_total_count());
    }
    if (from.has_stock_add_count()) {
      set_stock_add_count(from.stock_add_count());
    }
    if (from.has_stock_earnrate()) {
      set_stock_earnrate(from.stock_earnrate());
    }
    if (from.has_stock_total_earnrate_income()) {
      set_stock_total_earnrate_income(from.stock_total_earnrate_income());
    }
    if (from.has_stock_add_earnrate_income()) {
      set_stock_add_earnrate_income(from.stock_add_earnrate_income());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetl2c_notice_gm_stock_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetl2c_notice_gm_stock_info::CopyFrom(const packetl2c_notice_gm_stock_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetl2c_notice_gm_stock_info::IsInitialized() const {

  return true;
}

void packetl2c_notice_gm_stock_info::Swap(packetl2c_notice_gm_stock_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(stock_total_count_, other->stock_total_count_);
    std::swap(stock_add_count_, other->stock_add_count_);
    std::swap(stock_earnrate_, other->stock_earnrate_);
    std::swap(stock_total_earnrate_income_, other->stock_total_earnrate_income_);
    std::swap(stock_add_earnrate_income_, other->stock_add_earnrate_income_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetl2c_notice_gm_stock_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetl2c_notice_gm_stock_info_descriptor_;
  metadata.reflection = packetl2c_notice_gm_stock_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_happysupremacy_protocols

// @@protoc_insertion_point(global_scope)
