// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_player_property.proto

#ifndef PROTOBUF_client2world_5fplayer_5fproperty_2eproto__INCLUDED
#define PROTOBUF_client2world_5fplayer_5fproperty_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

class packetc2w_update_playerhead;
class packetw2c_update_playerhead_result;
class packetc2w_update_nickname;
class packetw2c_update_nickname_result;
class packetc2w_update_sex;
class packetw2c_update_sex_result;
class packetc2w_update_signature;
class packetw2c_update_signature_result;
class packetc2w_change_photo_frame;
class packetw2c_change_photo_frame_result;
class packetc2w_req_game_stat;
class packetw2c_fishlord_stat_result;
class packetw2c_dice_stat_result;
class packetw2c_crocodile_stat_result;
class packetc2w_req_self_record;
class packetw2c_req_self_record_result;
class packetc2w_finish_one_new_guild;
class packetw2c_finish_one_new_guild_result;
class packetc2w_req_send_gift_log;
class SendGiftLogInfo;
class packetw2c_req_send_gift_log_result;
class packetc2w_req_safebox_log;
class SafeBoxLogInfo;
class packetw2c_req_safebox_log_result;
class packetc2w_inform_playerhead;
class packetw2c_inform_playerhead_result;

// ===================================================================

class packetc2w_update_playerhead : public ::google::protobuf::Message {
 public:
  packetc2w_update_playerhead();
  virtual ~packetc2w_update_playerhead();

  packetc2w_update_playerhead(const packetc2w_update_playerhead& from);

  inline packetc2w_update_playerhead& operator=(const packetc2w_update_playerhead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_update_playerhead& default_instance();

  void Swap(packetc2w_update_playerhead* other);

  // implements Message ----------------------------------------------

  packetc2w_update_playerhead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_update_playerhead& from);
  void MergeFrom(const packetc2w_update_playerhead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_playerhead];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string headstr = 2;
  inline bool has_headstr() const;
  inline void clear_headstr();
  static const int kHeadstrFieldNumber = 2;
  inline const ::std::string& headstr() const;
  inline void set_headstr(const ::std::string& value);
  inline void set_headstr(const char* value);
  inline void set_headstr(const char* value, size_t size);
  inline ::std::string* mutable_headstr();
  inline ::std::string* release_headstr();
  inline void set_allocated_headstr(::std::string* headstr);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_update_playerhead)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_headstr();
  inline void clear_has_headstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* headstr_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_update_playerhead* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_update_playerhead_result : public ::google::protobuf::Message {
 public:
  packetw2c_update_playerhead_result();
  virtual ~packetw2c_update_playerhead_result();

  packetw2c_update_playerhead_result(const packetw2c_update_playerhead_result& from);

  inline packetw2c_update_playerhead_result& operator=(const packetw2c_update_playerhead_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_update_playerhead_result& default_instance();

  void Swap(packetw2c_update_playerhead_result* other);

  // implements Message ----------------------------------------------

  packetw2c_update_playerhead_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_update_playerhead_result& from);
  void MergeFrom(const packetw2c_update_playerhead_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_playerhead_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string headstr = 2;
  inline bool has_headstr() const;
  inline void clear_headstr();
  static const int kHeadstrFieldNumber = 2;
  inline const ::std::string& headstr() const;
  inline void set_headstr(const ::std::string& value);
  inline void set_headstr(const char* value);
  inline void set_headstr(const char* value, size_t size);
  inline ::std::string* mutable_headstr();
  inline ::std::string* release_headstr();
  inline void set_allocated_headstr(::std::string* headstr);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_update_playerhead_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_headstr();
  inline void clear_has_headstr();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* headstr_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_update_playerhead_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_update_nickname : public ::google::protobuf::Message {
 public:
  packetc2w_update_nickname();
  virtual ~packetc2w_update_nickname();

  packetc2w_update_nickname(const packetc2w_update_nickname& from);

  inline packetc2w_update_nickname& operator=(const packetc2w_update_nickname& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_update_nickname& default_instance();

  void Swap(packetc2w_update_nickname* other);

  // implements Message ----------------------------------------------

  packetc2w_update_nickname* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_update_nickname& from);
  void MergeFrom(const packetc2w_update_nickname& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_nickname];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string nickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_update_nickname)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_update_nickname* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_update_nickname_result : public ::google::protobuf::Message {
 public:
  packetw2c_update_nickname_result();
  virtual ~packetw2c_update_nickname_result();

  packetw2c_update_nickname_result(const packetw2c_update_nickname_result& from);

  inline packetw2c_update_nickname_result& operator=(const packetw2c_update_nickname_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_update_nickname_result& default_instance();

  void Swap(packetw2c_update_nickname_result* other);

  // implements Message ----------------------------------------------

  packetw2c_update_nickname_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_update_nickname_result& from);
  void MergeFrom(const packetw2c_update_nickname_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_nickname_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string nickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_update_nickname_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_update_nickname_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_update_sex : public ::google::protobuf::Message {
 public:
  packetc2w_update_sex();
  virtual ~packetc2w_update_sex();

  packetc2w_update_sex(const packetc2w_update_sex& from);

  inline packetc2w_update_sex& operator=(const packetc2w_update_sex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_update_sex& default_instance();

  void Swap(packetc2w_update_sex* other);

  // implements Message ----------------------------------------------

  packetc2w_update_sex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_update_sex& from);
  void MergeFrom(const packetc2w_update_sex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_sex];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 sex = 2;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 2;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_update_sex)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_sex();
  inline void clear_has_sex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 sex_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_update_sex* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_update_sex_result : public ::google::protobuf::Message {
 public:
  packetw2c_update_sex_result();
  virtual ~packetw2c_update_sex_result();

  packetw2c_update_sex_result(const packetw2c_update_sex_result& from);

  inline packetw2c_update_sex_result& operator=(const packetw2c_update_sex_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_update_sex_result& default_instance();

  void Swap(packetw2c_update_sex_result* other);

  // implements Message ----------------------------------------------

  packetw2c_update_sex_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_update_sex_result& from);
  void MergeFrom(const packetw2c_update_sex_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_sex_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 sex = 2;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 2;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_update_sex_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_update_sex_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_update_signature : public ::google::protobuf::Message {
 public:
  packetc2w_update_signature();
  virtual ~packetc2w_update_signature();

  packetc2w_update_signature(const packetc2w_update_signature& from);

  inline packetc2w_update_signature& operator=(const packetc2w_update_signature& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_update_signature& default_instance();

  void Swap(packetc2w_update_signature* other);

  // implements Message ----------------------------------------------

  packetc2w_update_signature* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_update_signature& from);
  void MergeFrom(const packetc2w_update_signature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_signature];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string signature = 2;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 2;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_update_signature)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* signature_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_update_signature* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_update_signature_result : public ::google::protobuf::Message {
 public:
  packetw2c_update_signature_result();
  virtual ~packetw2c_update_signature_result();

  packetw2c_update_signature_result(const packetw2c_update_signature_result& from);

  inline packetw2c_update_signature_result& operator=(const packetw2c_update_signature_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_update_signature_result& default_instance();

  void Swap(packetw2c_update_signature_result* other);

  // implements Message ----------------------------------------------

  packetw2c_update_signature_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_update_signature_result& from);
  void MergeFrom(const packetw2c_update_signature_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_signature_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string signature = 2;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 2;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_update_signature_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* signature_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_update_signature_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_change_photo_frame : public ::google::protobuf::Message {
 public:
  packetc2w_change_photo_frame();
  virtual ~packetc2w_change_photo_frame();

  packetc2w_change_photo_frame(const packetc2w_change_photo_frame& from);

  inline packetc2w_change_photo_frame& operator=(const packetc2w_change_photo_frame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_change_photo_frame& default_instance();

  void Swap(packetc2w_change_photo_frame* other);

  // implements Message ----------------------------------------------

  packetc2w_change_photo_frame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_change_photo_frame& from);
  void MergeFrom(const packetc2w_change_photo_frame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_change_photo_frame];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 photoFrameId = 2;
  inline bool has_photoframeid() const;
  inline void clear_photoframeid();
  static const int kPhotoFrameIdFieldNumber = 2;
  inline ::google::protobuf::int32 photoframeid() const;
  inline void set_photoframeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_change_photo_frame)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_photoframeid();
  inline void clear_has_photoframeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 photoframeid_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_change_photo_frame* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_change_photo_frame_result : public ::google::protobuf::Message {
 public:
  packetw2c_change_photo_frame_result();
  virtual ~packetw2c_change_photo_frame_result();

  packetw2c_change_photo_frame_result(const packetw2c_change_photo_frame_result& from);

  inline packetw2c_change_photo_frame_result& operator=(const packetw2c_change_photo_frame_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_change_photo_frame_result& default_instance();

  void Swap(packetw2c_change_photo_frame_result* other);

  // implements Message ----------------------------------------------

  packetw2c_change_photo_frame_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_change_photo_frame_result& from);
  void MergeFrom(const packetw2c_change_photo_frame_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_photo_frame_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 photoFrameId = 2;
  inline bool has_photoframeid() const;
  inline void clear_photoframeid();
  static const int kPhotoFrameIdFieldNumber = 2;
  inline ::google::protobuf::int32 photoframeid() const;
  inline void set_photoframeid(::google::protobuf::int32 value);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_change_photo_frame_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_photoframeid();
  inline void clear_has_photoframeid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 photoframeid_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_change_photo_frame_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_game_stat : public ::google::protobuf::Message {
 public:
  packetc2w_req_game_stat();
  virtual ~packetc2w_req_game_stat();

  packetc2w_req_game_stat(const packetc2w_req_game_stat& from);

  inline packetc2w_req_game_stat& operator=(const packetc2w_req_game_stat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_game_stat& default_instance();

  void Swap(packetc2w_req_game_stat* other);

  // implements Message ----------------------------------------------

  packetc2w_req_game_stat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_game_stat& from);
  void MergeFrom(const packetc2w_req_game_stat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_game_stat];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 gameId = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_game_stat)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 gameid_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_game_stat* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_fishlord_stat_result : public ::google::protobuf::Message {
 public:
  packetw2c_fishlord_stat_result();
  virtual ~packetw2c_fishlord_stat_result();

  packetw2c_fishlord_stat_result(const packetw2c_fishlord_stat_result& from);

  inline packetw2c_fishlord_stat_result& operator=(const packetw2c_fishlord_stat_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_fishlord_stat_result& default_instance();

  void Swap(packetw2c_fishlord_stat_result* other);

  // implements Message ----------------------------------------------

  packetw2c_fishlord_stat_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_fishlord_stat_result& from);
  void MergeFrom(const packetw2c_fishlord_stat_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_fishlord_stat_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 maxCoin = 2;
  inline bool has_maxcoin() const;
  inline void clear_maxcoin();
  static const int kMaxCoinFieldNumber = 2;
  inline ::google::protobuf::int32 maxcoin() const;
  inline void set_maxcoin(::google::protobuf::int32 value);

  // optional int32 maxTicket = 3;
  inline bool has_maxticket() const;
  inline void clear_maxticket();
  static const int kMaxTicketFieldNumber = 3;
  inline ::google::protobuf::int32 maxticket() const;
  inline void set_maxticket(::google::protobuf::int32 value);

  // optional int32 hitBlackDagonCount = 4;
  inline bool has_hitblackdagoncount() const;
  inline void clear_hitblackdagoncount();
  static const int kHitBlackDagonCountFieldNumber = 4;
  inline ::google::protobuf::int32 hitblackdagoncount() const;
  inline void set_hitblackdagoncount(::google::protobuf::int32 value);

  // optional int32 hitBlueDagonCount = 5;
  inline bool has_hitbluedagoncount() const;
  inline void clear_hitbluedagoncount();
  static const int kHitBlueDagonCountFieldNumber = 5;
  inline ::google::protobuf::int32 hitbluedagoncount() const;
  inline void set_hitbluedagoncount(::google::protobuf::int32 value);

  // optional int32 hitGoldDagonBombCount = 6;
  inline bool has_hitgolddagonbombcount() const;
  inline void clear_hitgolddagonbombcount();
  static const int kHitGoldDagonBombCountFieldNumber = 6;
  inline ::google::protobuf::int32 hitgolddagonbombcount() const;
  inline void set_hitgolddagonbombcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_fishlord_stat_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_maxcoin();
  inline void clear_has_maxcoin();
  inline void set_has_maxticket();
  inline void clear_has_maxticket();
  inline void set_has_hitblackdagoncount();
  inline void clear_has_hitblackdagoncount();
  inline void set_has_hitbluedagoncount();
  inline void clear_has_hitbluedagoncount();
  inline void set_has_hitgolddagonbombcount();
  inline void clear_has_hitgolddagonbombcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 maxcoin_;
  ::google::protobuf::int32 maxticket_;
  ::google::protobuf::int32 hitblackdagoncount_;
  ::google::protobuf::int32 hitbluedagoncount_;
  ::google::protobuf::int32 hitgolddagonbombcount_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_fishlord_stat_result* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_dice_stat_result : public ::google::protobuf::Message {
 public:
  packetw2c_dice_stat_result();
  virtual ~packetw2c_dice_stat_result();

  packetw2c_dice_stat_result(const packetw2c_dice_stat_result& from);

  inline packetw2c_dice_stat_result& operator=(const packetw2c_dice_stat_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_dice_stat_result& default_instance();

  void Swap(packetw2c_dice_stat_result* other);

  // implements Message ----------------------------------------------

  packetw2c_dice_stat_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_dice_stat_result& from);
  void MergeFrom(const packetw2c_dice_stat_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_dice_stat_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 maxCoin = 2;
  inline bool has_maxcoin() const;
  inline void clear_maxcoin();
  static const int kMaxCoinFieldNumber = 2;
  inline ::google::protobuf::int32 maxcoin() const;
  inline void set_maxcoin(::google::protobuf::int32 value);

  // optional int32 maxTicket = 3;
  inline bool has_maxticket() const;
  inline void clear_maxticket();
  static const int kMaxTicketFieldNumber = 3;
  inline ::google::protobuf::int32 maxticket() const;
  inline void set_maxticket(::google::protobuf::int32 value);

  // optional int32 hitLeopardCount = 4;
  inline bool has_hitleopardcount() const;
  inline void clear_hitleopardcount();
  static const int kHitLeopardCountFieldNumber = 4;
  inline ::google::protobuf::int32 hitleopardcount() const;
  inline void set_hitleopardcount(::google::protobuf::int32 value);

  // optional int32 maxSuccessionCount = 5;
  inline bool has_maxsuccessioncount() const;
  inline void clear_maxsuccessioncount();
  static const int kMaxSuccessionCountFieldNumber = 5;
  inline ::google::protobuf::int32 maxsuccessioncount() const;
  inline void set_maxsuccessioncount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_dice_stat_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_maxcoin();
  inline void clear_has_maxcoin();
  inline void set_has_maxticket();
  inline void clear_has_maxticket();
  inline void set_has_hitleopardcount();
  inline void clear_has_hitleopardcount();
  inline void set_has_maxsuccessioncount();
  inline void clear_has_maxsuccessioncount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 maxcoin_;
  ::google::protobuf::int32 maxticket_;
  ::google::protobuf::int32 hitleopardcount_;
  ::google::protobuf::int32 maxsuccessioncount_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_dice_stat_result* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_crocodile_stat_result : public ::google::protobuf::Message {
 public:
  packetw2c_crocodile_stat_result();
  virtual ~packetw2c_crocodile_stat_result();

  packetw2c_crocodile_stat_result(const packetw2c_crocodile_stat_result& from);

  inline packetw2c_crocodile_stat_result& operator=(const packetw2c_crocodile_stat_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_crocodile_stat_result& default_instance();

  void Swap(packetw2c_crocodile_stat_result* other);

  // implements Message ----------------------------------------------

  packetw2c_crocodile_stat_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_crocodile_stat_result& from);
  void MergeFrom(const packetw2c_crocodile_stat_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_crocodile_stat_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 maxCoin = 2;
  inline bool has_maxcoin() const;
  inline void clear_maxcoin();
  static const int kMaxCoinFieldNumber = 2;
  inline ::google::protobuf::int32 maxcoin() const;
  inline void set_maxcoin(::google::protobuf::int32 value);

  // optional int32 maxTicket = 3;
  inline bool has_maxticket() const;
  inline void clear_maxticket();
  static const int kMaxTicketFieldNumber = 3;
  inline ::google::protobuf::int32 maxticket() const;
  inline void set_maxticket(::google::protobuf::int32 value);

  // optional int32 hitWinningsCount = 4;
  inline bool has_hitwinningscount() const;
  inline void clear_hitwinningscount();
  static const int kHitWinningsCountFieldNumber = 4;
  inline ::google::protobuf::int32 hitwinningscount() const;
  inline void set_hitwinningscount(::google::protobuf::int32 value);

  // optional int32 hitSpotlightCount = 5;
  inline bool has_hitspotlightcount() const;
  inline void clear_hitspotlightcount();
  static const int kHitSpotlightCountFieldNumber = 5;
  inline ::google::protobuf::int32 hitspotlightcount() const;
  inline void set_hitspotlightcount(::google::protobuf::int32 value);

  // optional int32 hitEveryoneHasAwardCount = 6;
  inline bool has_hiteveryonehasawardcount() const;
  inline void clear_hiteveryonehasawardcount();
  static const int kHitEveryoneHasAwardCountFieldNumber = 6;
  inline ::google::protobuf::int32 hiteveryonehasawardcount() const;
  inline void set_hiteveryonehasawardcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_crocodile_stat_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_maxcoin();
  inline void clear_has_maxcoin();
  inline void set_has_maxticket();
  inline void clear_has_maxticket();
  inline void set_has_hitwinningscount();
  inline void clear_has_hitwinningscount();
  inline void set_has_hitspotlightcount();
  inline void clear_has_hitspotlightcount();
  inline void set_has_hiteveryonehasawardcount();
  inline void clear_has_hiteveryonehasawardcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 maxcoin_;
  ::google::protobuf::int32 maxticket_;
  ::google::protobuf::int32 hitwinningscount_;
  ::google::protobuf::int32 hitspotlightcount_;
  ::google::protobuf::int32 hiteveryonehasawardcount_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_crocodile_stat_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_self_record : public ::google::protobuf::Message {
 public:
  packetc2w_req_self_record();
  virtual ~packetc2w_req_self_record();

  packetc2w_req_self_record(const packetc2w_req_self_record& from);

  inline packetc2w_req_self_record& operator=(const packetc2w_req_self_record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_self_record& default_instance();

  void Swap(packetc2w_req_self_record* other);

  // implements Message ----------------------------------------------

  packetc2w_req_self_record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_self_record& from);
  void MergeFrom(const packetc2w_req_self_record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_self_record];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_self_record)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_self_record* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_self_record_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_self_record_result();
  virtual ~packetw2c_req_self_record_result();

  packetw2c_req_self_record_result(const packetw2c_req_self_record_result& from);

  inline packetw2c_req_self_record_result& operator=(const packetw2c_req_self_record_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_self_record_result& default_instance();

  void Swap(packetw2c_req_self_record_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_self_record_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_self_record_result& from);
  void MergeFrom(const packetw2c_req_self_record_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_self_record_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 maxCoin = 2;
  inline bool has_maxcoin() const;
  inline void clear_maxcoin();
  static const int kMaxCoinFieldNumber = 2;
  inline ::google::protobuf::int32 maxcoin() const;
  inline void set_maxcoin(::google::protobuf::int32 value);

  // optional int32 maxTicket = 3;
  inline bool has_maxticket() const;
  inline void clear_maxticket();
  static const int kMaxTicketFieldNumber = 3;
  inline ::google::protobuf::int32 maxticket() const;
  inline void set_maxticket(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_self_record_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_maxcoin();
  inline void clear_has_maxcoin();
  inline void set_has_maxticket();
  inline void clear_has_maxticket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 maxcoin_;
  ::google::protobuf::int32 maxticket_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_self_record_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_finish_one_new_guild : public ::google::protobuf::Message {
 public:
  packetc2w_finish_one_new_guild();
  virtual ~packetc2w_finish_one_new_guild();

  packetc2w_finish_one_new_guild(const packetc2w_finish_one_new_guild& from);

  inline packetc2w_finish_one_new_guild& operator=(const packetc2w_finish_one_new_guild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_finish_one_new_guild& default_instance();

  void Swap(packetc2w_finish_one_new_guild* other);

  // implements Message ----------------------------------------------

  packetc2w_finish_one_new_guild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_finish_one_new_guild& from);
  void MergeFrom(const packetc2w_finish_one_new_guild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_finish_one_new_guild];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_finish_one_new_guild)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_finish_one_new_guild* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_finish_one_new_guild_result : public ::google::protobuf::Message {
 public:
  packetw2c_finish_one_new_guild_result();
  virtual ~packetw2c_finish_one_new_guild_result();

  packetw2c_finish_one_new_guild_result(const packetw2c_finish_one_new_guild_result& from);

  inline packetw2c_finish_one_new_guild_result& operator=(const packetw2c_finish_one_new_guild_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_finish_one_new_guild_result& default_instance();

  void Swap(packetw2c_finish_one_new_guild_result* other);

  // implements Message ----------------------------------------------

  packetw2c_finish_one_new_guild_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_finish_one_new_guild_result& from);
  void MergeFrom(const packetw2c_finish_one_new_guild_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_finish_one_new_guild_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_finish_one_new_guild_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_finish_one_new_guild_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_send_gift_log : public ::google::protobuf::Message {
 public:
  packetc2w_req_send_gift_log();
  virtual ~packetc2w_req_send_gift_log();

  packetc2w_req_send_gift_log(const packetc2w_req_send_gift_log& from);

  inline packetc2w_req_send_gift_log& operator=(const packetc2w_req_send_gift_log& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_send_gift_log& default_instance();

  void Swap(packetc2w_req_send_gift_log* other);

  // implements Message ----------------------------------------------

  packetc2w_req_send_gift_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_send_gift_log& from);
  void MergeFrom(const packetc2w_req_send_gift_log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_send_gift_log];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 lastTime = 2;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 2;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_send_gift_log)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 lasttime_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_send_gift_log* default_instance_;
};
// -------------------------------------------------------------------

class SendGiftLogInfo : public ::google::protobuf::Message {
 public:
  SendGiftLogInfo();
  virtual ~SendGiftLogInfo();

  SendGiftLogInfo(const SendGiftLogInfo& from);

  inline SendGiftLogInfo& operator=(const SendGiftLogInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendGiftLogInfo& default_instance();

  void Swap(SendGiftLogInfo* other);

  // implements Message ----------------------------------------------

  SendGiftLogInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendGiftLogInfo& from);
  void MergeFrom(const SendGiftLogInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sendTime = 1;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendTimeFieldNumber = 1;
  inline ::google::protobuf::int32 sendtime() const;
  inline void set_sendtime(::google::protobuf::int32 value);

  // optional int32 firendId = 2;
  inline bool has_firendid() const;
  inline void clear_firendid();
  static const int kFirendIdFieldNumber = 2;
  inline ::google::protobuf::int32 firendid() const;
  inline void set_firendid(::google::protobuf::int32 value);

  // optional string friendNickName = 3;
  inline bool has_friendnickname() const;
  inline void clear_friendnickname();
  static const int kFriendNickNameFieldNumber = 3;
  inline const ::std::string& friendnickname() const;
  inline void set_friendnickname(const ::std::string& value);
  inline void set_friendnickname(const char* value);
  inline void set_friendnickname(const char* value, size_t size);
  inline ::std::string* mutable_friendnickname();
  inline ::std::string* release_friendnickname();
  inline void set_allocated_friendnickname(::std::string* friendnickname);

  // optional int32 giftId = 4;
  inline bool has_giftid() const;
  inline void clear_giftid();
  static const int kGiftIdFieldNumber = 4;
  inline ::google::protobuf::int32 giftid() const;
  inline void set_giftid(::google::protobuf::int32 value);

  // optional int32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional bool sendgold = 6;
  inline bool has_sendgold() const;
  inline void clear_sendgold();
  static const int kSendgoldFieldNumber = 6;
  inline bool sendgold() const;
  inline void set_sendgold(bool value);

  // optional string mailid = 7;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 7;
  inline const ::std::string& mailid() const;
  inline void set_mailid(const ::std::string& value);
  inline void set_mailid(const char* value);
  inline void set_mailid(const char* value, size_t size);
  inline ::std::string* mutable_mailid();
  inline ::std::string* release_mailid();
  inline void set_allocated_mailid(::std::string* mailid);

  // @@protoc_insertion_point(class_scope:client2world_protocols.SendGiftLogInfo)
 private:
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_firendid();
  inline void clear_has_firendid();
  inline void set_has_friendnickname();
  inline void clear_has_friendnickname();
  inline void set_has_giftid();
  inline void clear_has_giftid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_sendgold();
  inline void clear_has_sendgold();
  inline void set_has_mailid();
  inline void clear_has_mailid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 sendtime_;
  ::google::protobuf::int32 firendid_;
  ::std::string* friendnickname_;
  ::google::protobuf::int32 giftid_;
  ::google::protobuf::int32 count_;
  ::std::string* mailid_;
  bool sendgold_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static SendGiftLogInfo* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_send_gift_log_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_send_gift_log_result();
  virtual ~packetw2c_req_send_gift_log_result();

  packetw2c_req_send_gift_log_result(const packetw2c_req_send_gift_log_result& from);

  inline packetw2c_req_send_gift_log_result& operator=(const packetw2c_req_send_gift_log_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_send_gift_log_result& default_instance();

  void Swap(packetw2c_req_send_gift_log_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_send_gift_log_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_send_gift_log_result& from);
  void MergeFrom(const packetw2c_req_send_gift_log_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_send_gift_log_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.SendGiftLogInfo logList = 2;
  inline int loglist_size() const;
  inline void clear_loglist();
  static const int kLogListFieldNumber = 2;
  inline const ::client2world_protocols::SendGiftLogInfo& loglist(int index) const;
  inline ::client2world_protocols::SendGiftLogInfo* mutable_loglist(int index);
  inline ::client2world_protocols::SendGiftLogInfo* add_loglist();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SendGiftLogInfo >&
      loglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SendGiftLogInfo >*
      mutable_loglist();

  // optional int32 lastTime = 3;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 3;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_send_gift_log_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SendGiftLogInfo > loglist_;
  int packet_id_;
  ::google::protobuf::int32 lasttime_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_send_gift_log_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_safebox_log : public ::google::protobuf::Message {
 public:
  packetc2w_req_safebox_log();
  virtual ~packetc2w_req_safebox_log();

  packetc2w_req_safebox_log(const packetc2w_req_safebox_log& from);

  inline packetc2w_req_safebox_log& operator=(const packetc2w_req_safebox_log& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_safebox_log& default_instance();

  void Swap(packetc2w_req_safebox_log* other);

  // implements Message ----------------------------------------------

  packetc2w_req_safebox_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_safebox_log& from);
  void MergeFrom(const packetc2w_req_safebox_log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_safebox_log];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 lastTime = 2;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 2;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_safebox_log)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 lasttime_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_safebox_log* default_instance_;
};
// -------------------------------------------------------------------

class SafeBoxLogInfo : public ::google::protobuf::Message {
 public:
  SafeBoxLogInfo();
  virtual ~SafeBoxLogInfo();

  SafeBoxLogInfo(const SafeBoxLogInfo& from);

  inline SafeBoxLogInfo& operator=(const SafeBoxLogInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SafeBoxLogInfo& default_instance();

  void Swap(SafeBoxLogInfo* other);

  // implements Message ----------------------------------------------

  SafeBoxLogInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SafeBoxLogInfo& from);
  void MergeFrom(const SafeBoxLogInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int64 player_gold = 3;
  inline bool has_player_gold() const;
  inline void clear_player_gold();
  static const int kPlayerGoldFieldNumber = 3;
  inline ::google::protobuf::int64 player_gold() const;
  inline void set_player_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.SafeBoxLogInfo)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_player_gold();
  inline void clear_has_player_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int64 player_gold_;
  ::google::protobuf::int32 time_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static SafeBoxLogInfo* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_safebox_log_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_safebox_log_result();
  virtual ~packetw2c_req_safebox_log_result();

  packetw2c_req_safebox_log_result(const packetw2c_req_safebox_log_result& from);

  inline packetw2c_req_safebox_log_result& operator=(const packetw2c_req_safebox_log_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_safebox_log_result& default_instance();

  void Swap(packetw2c_req_safebox_log_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_safebox_log_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_safebox_log_result& from);
  void MergeFrom(const packetw2c_req_safebox_log_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_safebox_log_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.SafeBoxLogInfo logList = 2;
  inline int loglist_size() const;
  inline void clear_loglist();
  static const int kLogListFieldNumber = 2;
  inline const ::client2world_protocols::SafeBoxLogInfo& loglist(int index) const;
  inline ::client2world_protocols::SafeBoxLogInfo* mutable_loglist(int index);
  inline ::client2world_protocols::SafeBoxLogInfo* add_loglist();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SafeBoxLogInfo >&
      loglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SafeBoxLogInfo >*
      mutable_loglist();

  // optional int32 lastTime = 3;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 3;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_safebox_log_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SafeBoxLogInfo > loglist_;
  int packet_id_;
  ::google::protobuf::int32 lasttime_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_safebox_log_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_inform_playerhead : public ::google::protobuf::Message {
 public:
  packetc2w_inform_playerhead();
  virtual ~packetc2w_inform_playerhead();

  packetc2w_inform_playerhead(const packetc2w_inform_playerhead& from);

  inline packetc2w_inform_playerhead& operator=(const packetc2w_inform_playerhead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_inform_playerhead& default_instance();

  void Swap(packetc2w_inform_playerhead* other);

  // implements Message ----------------------------------------------

  packetc2w_inform_playerhead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_inform_playerhead& from);
  void MergeFrom(const packetc2w_inform_playerhead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_inform_playerhead];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 informDstPlayerId = 2;
  inline bool has_informdstplayerid() const;
  inline void clear_informdstplayerid();
  static const int kInformDstPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 informdstplayerid() const;
  inline void set_informdstplayerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_inform_playerhead)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_informdstplayerid();
  inline void clear_has_informdstplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 informdstplayerid_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_inform_playerhead* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_inform_playerhead_result : public ::google::protobuf::Message {
 public:
  packetw2c_inform_playerhead_result();
  virtual ~packetw2c_inform_playerhead_result();

  packetw2c_inform_playerhead_result(const packetw2c_inform_playerhead_result& from);

  inline packetw2c_inform_playerhead_result& operator=(const packetw2c_inform_playerhead_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_inform_playerhead_result& default_instance();

  void Swap(packetw2c_inform_playerhead_result* other);

  // implements Message ----------------------------------------------

  packetw2c_inform_playerhead_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_inform_playerhead_result& from);
  void MergeFrom(const packetw2c_inform_playerhead_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_inform_playerhead_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_inform_playerhead_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_inform_playerhead_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2w_update_playerhead

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_playerhead];
inline bool packetc2w_update_playerhead::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_update_playerhead::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_update_playerhead::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_update_playerhead::clear_packet_id() {
  packet_id_ = 5010;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_update_playerhead::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_update_playerhead.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_update_playerhead::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_update_playerhead.packet_id)
}

// optional string headstr = 2;
inline bool packetc2w_update_playerhead::has_headstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_update_playerhead::set_has_headstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_update_playerhead::clear_has_headstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_update_playerhead::clear_headstr() {
  if (headstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headstr_->clear();
  }
  clear_has_headstr();
}
inline const ::std::string& packetc2w_update_playerhead::headstr() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_update_playerhead.headstr)
  return *headstr_;
}
inline void packetc2w_update_playerhead::set_headstr(const ::std::string& value) {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headstr_ = new ::std::string;
  }
  headstr_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_update_playerhead.headstr)
}
inline void packetc2w_update_playerhead::set_headstr(const char* value) {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headstr_ = new ::std::string;
  }
  headstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_update_playerhead.headstr)
}
inline void packetc2w_update_playerhead::set_headstr(const char* value, size_t size) {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headstr_ = new ::std::string;
  }
  headstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_update_playerhead.headstr)
}
inline ::std::string* packetc2w_update_playerhead::mutable_headstr() {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_update_playerhead.headstr)
  return headstr_;
}
inline ::std::string* packetc2w_update_playerhead::release_headstr() {
  clear_has_headstr();
  if (headstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = headstr_;
    headstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_update_playerhead::set_allocated_headstr(::std::string* headstr) {
  if (headstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete headstr_;
  }
  if (headstr) {
    set_has_headstr();
    headstr_ = headstr;
  } else {
    clear_has_headstr();
    headstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_update_playerhead.headstr)
}

// -------------------------------------------------------------------

// packetw2c_update_playerhead_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_playerhead_result];
inline bool packetw2c_update_playerhead_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_update_playerhead_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_update_playerhead_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_update_playerhead_result::clear_packet_id() {
  packet_id_ = 7509;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_update_playerhead_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_update_playerhead_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_update_playerhead_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_update_playerhead_result.packet_id)
}

// optional string headstr = 2;
inline bool packetw2c_update_playerhead_result::has_headstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_update_playerhead_result::set_has_headstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_update_playerhead_result::clear_has_headstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_update_playerhead_result::clear_headstr() {
  if (headstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headstr_->clear();
  }
  clear_has_headstr();
}
inline const ::std::string& packetw2c_update_playerhead_result::headstr() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_update_playerhead_result.headstr)
  return *headstr_;
}
inline void packetw2c_update_playerhead_result::set_headstr(const ::std::string& value) {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headstr_ = new ::std::string;
  }
  headstr_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_update_playerhead_result.headstr)
}
inline void packetw2c_update_playerhead_result::set_headstr(const char* value) {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headstr_ = new ::std::string;
  }
  headstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetw2c_update_playerhead_result.headstr)
}
inline void packetw2c_update_playerhead_result::set_headstr(const char* value, size_t size) {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headstr_ = new ::std::string;
  }
  headstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetw2c_update_playerhead_result.headstr)
}
inline ::std::string* packetw2c_update_playerhead_result::mutable_headstr() {
  set_has_headstr();
  if (headstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_update_playerhead_result.headstr)
  return headstr_;
}
inline ::std::string* packetw2c_update_playerhead_result::release_headstr() {
  clear_has_headstr();
  if (headstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = headstr_;
    headstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetw2c_update_playerhead_result::set_allocated_headstr(::std::string* headstr) {
  if (headstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete headstr_;
  }
  if (headstr) {
    set_has_headstr();
    headstr_ = headstr;
  } else {
    clear_has_headstr();
    headstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_update_playerhead_result.headstr)
}

// optional int32 result = 3;
inline bool packetw2c_update_playerhead_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_update_playerhead_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_update_playerhead_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_update_playerhead_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_update_playerhead_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_update_playerhead_result.result)
  return result_;
}
inline void packetw2c_update_playerhead_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_update_playerhead_result.result)
}

// -------------------------------------------------------------------

// packetc2w_update_nickname

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_nickname];
inline bool packetc2w_update_nickname::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_update_nickname::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_update_nickname::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_update_nickname::clear_packet_id() {
  packet_id_ = 5011;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_update_nickname::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_update_nickname.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_update_nickname::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_update_nickname.packet_id)
}

// optional string nickName = 2;
inline bool packetc2w_update_nickname::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_update_nickname::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_update_nickname::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_update_nickname::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& packetc2w_update_nickname::nickname() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_update_nickname.nickName)
  return *nickname_;
}
inline void packetc2w_update_nickname::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_update_nickname.nickName)
}
inline void packetc2w_update_nickname::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_update_nickname.nickName)
}
inline void packetc2w_update_nickname::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_update_nickname.nickName)
}
inline ::std::string* packetc2w_update_nickname::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_update_nickname.nickName)
  return nickname_;
}
inline ::std::string* packetc2w_update_nickname::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_update_nickname::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_update_nickname.nickName)
}

// -------------------------------------------------------------------

// packetw2c_update_nickname_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_nickname_result];
inline bool packetw2c_update_nickname_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_update_nickname_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_update_nickname_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_update_nickname_result::clear_packet_id() {
  packet_id_ = 7510;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_update_nickname_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_update_nickname_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_update_nickname_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_update_nickname_result.packet_id)
}

// optional string nickName = 2;
inline bool packetw2c_update_nickname_result::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_update_nickname_result::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_update_nickname_result::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_update_nickname_result::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& packetw2c_update_nickname_result::nickname() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_update_nickname_result.nickName)
  return *nickname_;
}
inline void packetw2c_update_nickname_result::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_update_nickname_result.nickName)
}
inline void packetw2c_update_nickname_result::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetw2c_update_nickname_result.nickName)
}
inline void packetw2c_update_nickname_result::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetw2c_update_nickname_result.nickName)
}
inline ::std::string* packetw2c_update_nickname_result::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_update_nickname_result.nickName)
  return nickname_;
}
inline ::std::string* packetw2c_update_nickname_result::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetw2c_update_nickname_result::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_update_nickname_result.nickName)
}

// optional int32 result = 3;
inline bool packetw2c_update_nickname_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_update_nickname_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_update_nickname_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_update_nickname_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_update_nickname_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_update_nickname_result.result)
  return result_;
}
inline void packetw2c_update_nickname_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_update_nickname_result.result)
}

// -------------------------------------------------------------------

// packetc2w_update_sex

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_sex];
inline bool packetc2w_update_sex::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_update_sex::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_update_sex::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_update_sex::clear_packet_id() {
  packet_id_ = 5012;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_update_sex::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_update_sex.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_update_sex::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_update_sex.packet_id)
}

// optional int32 sex = 2;
inline bool packetc2w_update_sex::has_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_update_sex::set_has_sex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_update_sex::clear_has_sex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_update_sex::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 packetc2w_update_sex::sex() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_update_sex.sex)
  return sex_;
}
inline void packetc2w_update_sex::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_update_sex.sex)
}

// -------------------------------------------------------------------

// packetw2c_update_sex_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_sex_result];
inline bool packetw2c_update_sex_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_update_sex_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_update_sex_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_update_sex_result::clear_packet_id() {
  packet_id_ = 7511;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_update_sex_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_update_sex_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_update_sex_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_update_sex_result.packet_id)
}

// optional int32 sex = 2;
inline bool packetw2c_update_sex_result::has_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_update_sex_result::set_has_sex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_update_sex_result::clear_has_sex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_update_sex_result::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 packetw2c_update_sex_result::sex() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_update_sex_result.sex)
  return sex_;
}
inline void packetw2c_update_sex_result::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_update_sex_result.sex)
}

// optional int32 result = 3;
inline bool packetw2c_update_sex_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_update_sex_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_update_sex_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_update_sex_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_update_sex_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_update_sex_result.result)
  return result_;
}
inline void packetw2c_update_sex_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_update_sex_result.result)
}

// -------------------------------------------------------------------

// packetc2w_update_signature

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_signature];
inline bool packetc2w_update_signature::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_update_signature::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_update_signature::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_update_signature::clear_packet_id() {
  packet_id_ = 5013;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_update_signature::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_update_signature.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_update_signature::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_update_signature.packet_id)
}

// optional string signature = 2;
inline bool packetc2w_update_signature::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_update_signature::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_update_signature::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_update_signature::clear_signature() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& packetc2w_update_signature::signature() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_update_signature.signature)
  return *signature_;
}
inline void packetc2w_update_signature::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_update_signature.signature)
}
inline void packetc2w_update_signature::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_update_signature.signature)
}
inline void packetc2w_update_signature::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_update_signature.signature)
}
inline ::std::string* packetc2w_update_signature::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_update_signature.signature)
  return signature_;
}
inline ::std::string* packetc2w_update_signature::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_update_signature::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_update_signature.signature)
}

// -------------------------------------------------------------------

// packetw2c_update_signature_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_signature_result];
inline bool packetw2c_update_signature_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_update_signature_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_update_signature_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_update_signature_result::clear_packet_id() {
  packet_id_ = 7512;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_update_signature_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_update_signature_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_update_signature_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_update_signature_result.packet_id)
}

// optional string signature = 2;
inline bool packetw2c_update_signature_result::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_update_signature_result::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_update_signature_result::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_update_signature_result::clear_signature() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& packetw2c_update_signature_result::signature() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_update_signature_result.signature)
  return *signature_;
}
inline void packetw2c_update_signature_result::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_update_signature_result.signature)
}
inline void packetw2c_update_signature_result::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetw2c_update_signature_result.signature)
}
inline void packetw2c_update_signature_result::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetw2c_update_signature_result.signature)
}
inline ::std::string* packetw2c_update_signature_result::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_update_signature_result.signature)
  return signature_;
}
inline ::std::string* packetw2c_update_signature_result::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetw2c_update_signature_result::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_update_signature_result.signature)
}

// optional int32 result = 3;
inline bool packetw2c_update_signature_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_update_signature_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_update_signature_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_update_signature_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_update_signature_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_update_signature_result.result)
  return result_;
}
inline void packetw2c_update_signature_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_update_signature_result.result)
}

// -------------------------------------------------------------------

// packetc2w_change_photo_frame

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_change_photo_frame];
inline bool packetc2w_change_photo_frame::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_change_photo_frame::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_change_photo_frame::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_change_photo_frame::clear_packet_id() {
  packet_id_ = 5032;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_change_photo_frame::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_change_photo_frame.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_change_photo_frame::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_change_photo_frame.packet_id)
}

// optional int32 photoFrameId = 2;
inline bool packetc2w_change_photo_frame::has_photoframeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_change_photo_frame::set_has_photoframeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_change_photo_frame::clear_has_photoframeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_change_photo_frame::clear_photoframeid() {
  photoframeid_ = 0;
  clear_has_photoframeid();
}
inline ::google::protobuf::int32 packetc2w_change_photo_frame::photoframeid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_change_photo_frame.photoFrameId)
  return photoframeid_;
}
inline void packetc2w_change_photo_frame::set_photoframeid(::google::protobuf::int32 value) {
  set_has_photoframeid();
  photoframeid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_change_photo_frame.photoFrameId)
}

// -------------------------------------------------------------------

// packetw2c_change_photo_frame_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_photo_frame_result];
inline bool packetw2c_change_photo_frame_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_change_photo_frame_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_change_photo_frame_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_change_photo_frame_result::clear_packet_id() {
  packet_id_ = 7534;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_change_photo_frame_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_change_photo_frame_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_change_photo_frame_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_change_photo_frame_result.packet_id)
}

// optional int32 photoFrameId = 2;
inline bool packetw2c_change_photo_frame_result::has_photoframeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_change_photo_frame_result::set_has_photoframeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_change_photo_frame_result::clear_has_photoframeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_change_photo_frame_result::clear_photoframeid() {
  photoframeid_ = 0;
  clear_has_photoframeid();
}
inline ::google::protobuf::int32 packetw2c_change_photo_frame_result::photoframeid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_change_photo_frame_result.photoFrameId)
  return photoframeid_;
}
inline void packetw2c_change_photo_frame_result::set_photoframeid(::google::protobuf::int32 value) {
  set_has_photoframeid();
  photoframeid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_change_photo_frame_result.photoFrameId)
}

// optional int32 result = 3;
inline bool packetw2c_change_photo_frame_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_change_photo_frame_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_change_photo_frame_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_change_photo_frame_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_change_photo_frame_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_change_photo_frame_result.result)
  return result_;
}
inline void packetw2c_change_photo_frame_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_change_photo_frame_result.result)
}

// -------------------------------------------------------------------

// packetc2w_req_game_stat

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_game_stat];
inline bool packetc2w_req_game_stat::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_game_stat::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_game_stat::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_game_stat::clear_packet_id() {
  packet_id_ = 5018;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_game_stat::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_game_stat.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_game_stat::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_game_stat.packet_id)
}

// optional int32 gameId = 2;
inline bool packetc2w_req_game_stat::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_req_game_stat::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_req_game_stat::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_req_game_stat::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 packetc2w_req_game_stat::gameid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_game_stat.gameId)
  return gameid_;
}
inline void packetc2w_req_game_stat::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_game_stat.gameId)
}

// -------------------------------------------------------------------

// packetw2c_fishlord_stat_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_fishlord_stat_result];
inline bool packetw2c_fishlord_stat_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_fishlord_stat_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_fishlord_stat_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_fishlord_stat_result::clear_packet_id() {
  packet_id_ = 7517;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_fishlord_stat_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_fishlord_stat_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_fishlord_stat_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_fishlord_stat_result.packet_id)
}

// optional int32 maxCoin = 2;
inline bool packetw2c_fishlord_stat_result::has_maxcoin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_fishlord_stat_result::set_has_maxcoin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_fishlord_stat_result::clear_has_maxcoin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_fishlord_stat_result::clear_maxcoin() {
  maxcoin_ = 0;
  clear_has_maxcoin();
}
inline ::google::protobuf::int32 packetw2c_fishlord_stat_result::maxcoin() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_fishlord_stat_result.maxCoin)
  return maxcoin_;
}
inline void packetw2c_fishlord_stat_result::set_maxcoin(::google::protobuf::int32 value) {
  set_has_maxcoin();
  maxcoin_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_fishlord_stat_result.maxCoin)
}

// optional int32 maxTicket = 3;
inline bool packetw2c_fishlord_stat_result::has_maxticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_fishlord_stat_result::set_has_maxticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_fishlord_stat_result::clear_has_maxticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_fishlord_stat_result::clear_maxticket() {
  maxticket_ = 0;
  clear_has_maxticket();
}
inline ::google::protobuf::int32 packetw2c_fishlord_stat_result::maxticket() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_fishlord_stat_result.maxTicket)
  return maxticket_;
}
inline void packetw2c_fishlord_stat_result::set_maxticket(::google::protobuf::int32 value) {
  set_has_maxticket();
  maxticket_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_fishlord_stat_result.maxTicket)
}

// optional int32 hitBlackDagonCount = 4;
inline bool packetw2c_fishlord_stat_result::has_hitblackdagoncount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_fishlord_stat_result::set_has_hitblackdagoncount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_fishlord_stat_result::clear_has_hitblackdagoncount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_fishlord_stat_result::clear_hitblackdagoncount() {
  hitblackdagoncount_ = 0;
  clear_has_hitblackdagoncount();
}
inline ::google::protobuf::int32 packetw2c_fishlord_stat_result::hitblackdagoncount() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_fishlord_stat_result.hitBlackDagonCount)
  return hitblackdagoncount_;
}
inline void packetw2c_fishlord_stat_result::set_hitblackdagoncount(::google::protobuf::int32 value) {
  set_has_hitblackdagoncount();
  hitblackdagoncount_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_fishlord_stat_result.hitBlackDagonCount)
}

// optional int32 hitBlueDagonCount = 5;
inline bool packetw2c_fishlord_stat_result::has_hitbluedagoncount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_fishlord_stat_result::set_has_hitbluedagoncount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_fishlord_stat_result::clear_has_hitbluedagoncount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_fishlord_stat_result::clear_hitbluedagoncount() {
  hitbluedagoncount_ = 0;
  clear_has_hitbluedagoncount();
}
inline ::google::protobuf::int32 packetw2c_fishlord_stat_result::hitbluedagoncount() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_fishlord_stat_result.hitBlueDagonCount)
  return hitbluedagoncount_;
}
inline void packetw2c_fishlord_stat_result::set_hitbluedagoncount(::google::protobuf::int32 value) {
  set_has_hitbluedagoncount();
  hitbluedagoncount_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_fishlord_stat_result.hitBlueDagonCount)
}

// optional int32 hitGoldDagonBombCount = 6;
inline bool packetw2c_fishlord_stat_result::has_hitgolddagonbombcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetw2c_fishlord_stat_result::set_has_hitgolddagonbombcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetw2c_fishlord_stat_result::clear_has_hitgolddagonbombcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetw2c_fishlord_stat_result::clear_hitgolddagonbombcount() {
  hitgolddagonbombcount_ = 0;
  clear_has_hitgolddagonbombcount();
}
inline ::google::protobuf::int32 packetw2c_fishlord_stat_result::hitgolddagonbombcount() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_fishlord_stat_result.hitGoldDagonBombCount)
  return hitgolddagonbombcount_;
}
inline void packetw2c_fishlord_stat_result::set_hitgolddagonbombcount(::google::protobuf::int32 value) {
  set_has_hitgolddagonbombcount();
  hitgolddagonbombcount_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_fishlord_stat_result.hitGoldDagonBombCount)
}

// -------------------------------------------------------------------

// packetw2c_dice_stat_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_dice_stat_result];
inline bool packetw2c_dice_stat_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_dice_stat_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_dice_stat_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_dice_stat_result::clear_packet_id() {
  packet_id_ = 7518;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_dice_stat_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_dice_stat_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_dice_stat_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_dice_stat_result.packet_id)
}

// optional int32 maxCoin = 2;
inline bool packetw2c_dice_stat_result::has_maxcoin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_dice_stat_result::set_has_maxcoin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_dice_stat_result::clear_has_maxcoin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_dice_stat_result::clear_maxcoin() {
  maxcoin_ = 0;
  clear_has_maxcoin();
}
inline ::google::protobuf::int32 packetw2c_dice_stat_result::maxcoin() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_dice_stat_result.maxCoin)
  return maxcoin_;
}
inline void packetw2c_dice_stat_result::set_maxcoin(::google::protobuf::int32 value) {
  set_has_maxcoin();
  maxcoin_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_dice_stat_result.maxCoin)
}

// optional int32 maxTicket = 3;
inline bool packetw2c_dice_stat_result::has_maxticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_dice_stat_result::set_has_maxticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_dice_stat_result::clear_has_maxticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_dice_stat_result::clear_maxticket() {
  maxticket_ = 0;
  clear_has_maxticket();
}
inline ::google::protobuf::int32 packetw2c_dice_stat_result::maxticket() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_dice_stat_result.maxTicket)
  return maxticket_;
}
inline void packetw2c_dice_stat_result::set_maxticket(::google::protobuf::int32 value) {
  set_has_maxticket();
  maxticket_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_dice_stat_result.maxTicket)
}

// optional int32 hitLeopardCount = 4;
inline bool packetw2c_dice_stat_result::has_hitleopardcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_dice_stat_result::set_has_hitleopardcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_dice_stat_result::clear_has_hitleopardcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_dice_stat_result::clear_hitleopardcount() {
  hitleopardcount_ = 0;
  clear_has_hitleopardcount();
}
inline ::google::protobuf::int32 packetw2c_dice_stat_result::hitleopardcount() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_dice_stat_result.hitLeopardCount)
  return hitleopardcount_;
}
inline void packetw2c_dice_stat_result::set_hitleopardcount(::google::protobuf::int32 value) {
  set_has_hitleopardcount();
  hitleopardcount_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_dice_stat_result.hitLeopardCount)
}

// optional int32 maxSuccessionCount = 5;
inline bool packetw2c_dice_stat_result::has_maxsuccessioncount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_dice_stat_result::set_has_maxsuccessioncount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_dice_stat_result::clear_has_maxsuccessioncount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_dice_stat_result::clear_maxsuccessioncount() {
  maxsuccessioncount_ = 0;
  clear_has_maxsuccessioncount();
}
inline ::google::protobuf::int32 packetw2c_dice_stat_result::maxsuccessioncount() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_dice_stat_result.maxSuccessionCount)
  return maxsuccessioncount_;
}
inline void packetw2c_dice_stat_result::set_maxsuccessioncount(::google::protobuf::int32 value) {
  set_has_maxsuccessioncount();
  maxsuccessioncount_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_dice_stat_result.maxSuccessionCount)
}

// -------------------------------------------------------------------

// packetw2c_crocodile_stat_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_crocodile_stat_result];
inline bool packetw2c_crocodile_stat_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_crocodile_stat_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_crocodile_stat_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_crocodile_stat_result::clear_packet_id() {
  packet_id_ = 7519;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_crocodile_stat_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_crocodile_stat_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_crocodile_stat_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_crocodile_stat_result.packet_id)
}

// optional int32 maxCoin = 2;
inline bool packetw2c_crocodile_stat_result::has_maxcoin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_crocodile_stat_result::set_has_maxcoin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_crocodile_stat_result::clear_has_maxcoin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_crocodile_stat_result::clear_maxcoin() {
  maxcoin_ = 0;
  clear_has_maxcoin();
}
inline ::google::protobuf::int32 packetw2c_crocodile_stat_result::maxcoin() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_crocodile_stat_result.maxCoin)
  return maxcoin_;
}
inline void packetw2c_crocodile_stat_result::set_maxcoin(::google::protobuf::int32 value) {
  set_has_maxcoin();
  maxcoin_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_crocodile_stat_result.maxCoin)
}

// optional int32 maxTicket = 3;
inline bool packetw2c_crocodile_stat_result::has_maxticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_crocodile_stat_result::set_has_maxticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_crocodile_stat_result::clear_has_maxticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_crocodile_stat_result::clear_maxticket() {
  maxticket_ = 0;
  clear_has_maxticket();
}
inline ::google::protobuf::int32 packetw2c_crocodile_stat_result::maxticket() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_crocodile_stat_result.maxTicket)
  return maxticket_;
}
inline void packetw2c_crocodile_stat_result::set_maxticket(::google::protobuf::int32 value) {
  set_has_maxticket();
  maxticket_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_crocodile_stat_result.maxTicket)
}

// optional int32 hitWinningsCount = 4;
inline bool packetw2c_crocodile_stat_result::has_hitwinningscount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_crocodile_stat_result::set_has_hitwinningscount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_crocodile_stat_result::clear_has_hitwinningscount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_crocodile_stat_result::clear_hitwinningscount() {
  hitwinningscount_ = 0;
  clear_has_hitwinningscount();
}
inline ::google::protobuf::int32 packetw2c_crocodile_stat_result::hitwinningscount() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_crocodile_stat_result.hitWinningsCount)
  return hitwinningscount_;
}
inline void packetw2c_crocodile_stat_result::set_hitwinningscount(::google::protobuf::int32 value) {
  set_has_hitwinningscount();
  hitwinningscount_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_crocodile_stat_result.hitWinningsCount)
}

// optional int32 hitSpotlightCount = 5;
inline bool packetw2c_crocodile_stat_result::has_hitspotlightcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_crocodile_stat_result::set_has_hitspotlightcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_crocodile_stat_result::clear_has_hitspotlightcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_crocodile_stat_result::clear_hitspotlightcount() {
  hitspotlightcount_ = 0;
  clear_has_hitspotlightcount();
}
inline ::google::protobuf::int32 packetw2c_crocodile_stat_result::hitspotlightcount() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_crocodile_stat_result.hitSpotlightCount)
  return hitspotlightcount_;
}
inline void packetw2c_crocodile_stat_result::set_hitspotlightcount(::google::protobuf::int32 value) {
  set_has_hitspotlightcount();
  hitspotlightcount_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_crocodile_stat_result.hitSpotlightCount)
}

// optional int32 hitEveryoneHasAwardCount = 6;
inline bool packetw2c_crocodile_stat_result::has_hiteveryonehasawardcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetw2c_crocodile_stat_result::set_has_hiteveryonehasawardcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetw2c_crocodile_stat_result::clear_has_hiteveryonehasawardcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetw2c_crocodile_stat_result::clear_hiteveryonehasawardcount() {
  hiteveryonehasawardcount_ = 0;
  clear_has_hiteveryonehasawardcount();
}
inline ::google::protobuf::int32 packetw2c_crocodile_stat_result::hiteveryonehasawardcount() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_crocodile_stat_result.hitEveryoneHasAwardCount)
  return hiteveryonehasawardcount_;
}
inline void packetw2c_crocodile_stat_result::set_hiteveryonehasawardcount(::google::protobuf::int32 value) {
  set_has_hiteveryonehasawardcount();
  hiteveryonehasawardcount_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_crocodile_stat_result.hitEveryoneHasAwardCount)
}

// -------------------------------------------------------------------

// packetc2w_req_self_record

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_self_record];
inline bool packetc2w_req_self_record::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_self_record::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_self_record::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_self_record::clear_packet_id() {
  packet_id_ = 5033;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_self_record::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_self_record.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_self_record::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_self_record.packet_id)
}

// -------------------------------------------------------------------

// packetw2c_req_self_record_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_self_record_result];
inline bool packetw2c_req_self_record_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_self_record_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_self_record_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_self_record_result::clear_packet_id() {
  packet_id_ = 7535;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_self_record_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_self_record_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_self_record_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_self_record_result.packet_id)
}

// optional int32 maxCoin = 2;
inline bool packetw2c_req_self_record_result::has_maxcoin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_req_self_record_result::set_has_maxcoin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_req_self_record_result::clear_has_maxcoin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_req_self_record_result::clear_maxcoin() {
  maxcoin_ = 0;
  clear_has_maxcoin();
}
inline ::google::protobuf::int32 packetw2c_req_self_record_result::maxcoin() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_self_record_result.maxCoin)
  return maxcoin_;
}
inline void packetw2c_req_self_record_result::set_maxcoin(::google::protobuf::int32 value) {
  set_has_maxcoin();
  maxcoin_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_self_record_result.maxCoin)
}

// optional int32 maxTicket = 3;
inline bool packetw2c_req_self_record_result::has_maxticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_req_self_record_result::set_has_maxticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_req_self_record_result::clear_has_maxticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_req_self_record_result::clear_maxticket() {
  maxticket_ = 0;
  clear_has_maxticket();
}
inline ::google::protobuf::int32 packetw2c_req_self_record_result::maxticket() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_self_record_result.maxTicket)
  return maxticket_;
}
inline void packetw2c_req_self_record_result::set_maxticket(::google::protobuf::int32 value) {
  set_has_maxticket();
  maxticket_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_self_record_result.maxTicket)
}

// -------------------------------------------------------------------

// packetc2w_finish_one_new_guild

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_finish_one_new_guild];
inline bool packetc2w_finish_one_new_guild::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_finish_one_new_guild::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_finish_one_new_guild::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_finish_one_new_guild::clear_packet_id() {
  packet_id_ = 5042;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_finish_one_new_guild::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_finish_one_new_guild.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_finish_one_new_guild::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_finish_one_new_guild.packet_id)
}

// -------------------------------------------------------------------

// packetw2c_finish_one_new_guild_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_finish_one_new_guild_result];
inline bool packetw2c_finish_one_new_guild_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_finish_one_new_guild_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_finish_one_new_guild_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_finish_one_new_guild_result::clear_packet_id() {
  packet_id_ = 7545;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_finish_one_new_guild_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_finish_one_new_guild_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_finish_one_new_guild_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_finish_one_new_guild_result.packet_id)
}

// -------------------------------------------------------------------

// packetc2w_req_send_gift_log

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_send_gift_log];
inline bool packetc2w_req_send_gift_log::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_send_gift_log::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_send_gift_log::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_send_gift_log::clear_packet_id() {
  packet_id_ = 5043;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_send_gift_log::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_send_gift_log.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_send_gift_log::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_send_gift_log.packet_id)
}

// optional int32 lastTime = 2;
inline bool packetc2w_req_send_gift_log::has_lasttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_req_send_gift_log::set_has_lasttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_req_send_gift_log::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_req_send_gift_log::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 packetc2w_req_send_gift_log::lasttime() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_send_gift_log.lastTime)
  return lasttime_;
}
inline void packetc2w_req_send_gift_log::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_send_gift_log.lastTime)
}

// -------------------------------------------------------------------

// SendGiftLogInfo

// optional int32 sendTime = 1;
inline bool SendGiftLogInfo::has_sendtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendGiftLogInfo::set_has_sendtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendGiftLogInfo::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendGiftLogInfo::clear_sendtime() {
  sendtime_ = 0;
  clear_has_sendtime();
}
inline ::google::protobuf::int32 SendGiftLogInfo::sendtime() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SendGiftLogInfo.sendTime)
  return sendtime_;
}
inline void SendGiftLogInfo::set_sendtime(::google::protobuf::int32 value) {
  set_has_sendtime();
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.SendGiftLogInfo.sendTime)
}

// optional int32 firendId = 2;
inline bool SendGiftLogInfo::has_firendid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendGiftLogInfo::set_has_firendid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendGiftLogInfo::clear_has_firendid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendGiftLogInfo::clear_firendid() {
  firendid_ = 0;
  clear_has_firendid();
}
inline ::google::protobuf::int32 SendGiftLogInfo::firendid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SendGiftLogInfo.firendId)
  return firendid_;
}
inline void SendGiftLogInfo::set_firendid(::google::protobuf::int32 value) {
  set_has_firendid();
  firendid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.SendGiftLogInfo.firendId)
}

// optional string friendNickName = 3;
inline bool SendGiftLogInfo::has_friendnickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendGiftLogInfo::set_has_friendnickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendGiftLogInfo::clear_has_friendnickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendGiftLogInfo::clear_friendnickname() {
  if (friendnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendnickname_->clear();
  }
  clear_has_friendnickname();
}
inline const ::std::string& SendGiftLogInfo::friendnickname() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SendGiftLogInfo.friendNickName)
  return *friendnickname_;
}
inline void SendGiftLogInfo::set_friendnickname(const ::std::string& value) {
  set_has_friendnickname();
  if (friendnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendnickname_ = new ::std::string;
  }
  friendnickname_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.SendGiftLogInfo.friendNickName)
}
inline void SendGiftLogInfo::set_friendnickname(const char* value) {
  set_has_friendnickname();
  if (friendnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendnickname_ = new ::std::string;
  }
  friendnickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.SendGiftLogInfo.friendNickName)
}
inline void SendGiftLogInfo::set_friendnickname(const char* value, size_t size) {
  set_has_friendnickname();
  if (friendnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendnickname_ = new ::std::string;
  }
  friendnickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.SendGiftLogInfo.friendNickName)
}
inline ::std::string* SendGiftLogInfo::mutable_friendnickname() {
  set_has_friendnickname();
  if (friendnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendnickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.SendGiftLogInfo.friendNickName)
  return friendnickname_;
}
inline ::std::string* SendGiftLogInfo::release_friendnickname() {
  clear_has_friendnickname();
  if (friendnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = friendnickname_;
    friendnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendGiftLogInfo::set_allocated_friendnickname(::std::string* friendnickname) {
  if (friendnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friendnickname_;
  }
  if (friendnickname) {
    set_has_friendnickname();
    friendnickname_ = friendnickname;
  } else {
    clear_has_friendnickname();
    friendnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.SendGiftLogInfo.friendNickName)
}

// optional int32 giftId = 4;
inline bool SendGiftLogInfo::has_giftid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendGiftLogInfo::set_has_giftid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendGiftLogInfo::clear_has_giftid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendGiftLogInfo::clear_giftid() {
  giftid_ = 0;
  clear_has_giftid();
}
inline ::google::protobuf::int32 SendGiftLogInfo::giftid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SendGiftLogInfo.giftId)
  return giftid_;
}
inline void SendGiftLogInfo::set_giftid(::google::protobuf::int32 value) {
  set_has_giftid();
  giftid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.SendGiftLogInfo.giftId)
}

// optional int32 count = 5;
inline bool SendGiftLogInfo::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendGiftLogInfo::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendGiftLogInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendGiftLogInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 SendGiftLogInfo::count() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SendGiftLogInfo.count)
  return count_;
}
inline void SendGiftLogInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.SendGiftLogInfo.count)
}

// optional bool sendgold = 6;
inline bool SendGiftLogInfo::has_sendgold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SendGiftLogInfo::set_has_sendgold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SendGiftLogInfo::clear_has_sendgold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SendGiftLogInfo::clear_sendgold() {
  sendgold_ = false;
  clear_has_sendgold();
}
inline bool SendGiftLogInfo::sendgold() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SendGiftLogInfo.sendgold)
  return sendgold_;
}
inline void SendGiftLogInfo::set_sendgold(bool value) {
  set_has_sendgold();
  sendgold_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.SendGiftLogInfo.sendgold)
}

// optional string mailid = 7;
inline bool SendGiftLogInfo::has_mailid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SendGiftLogInfo::set_has_mailid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SendGiftLogInfo::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SendGiftLogInfo::clear_mailid() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_->clear();
  }
  clear_has_mailid();
}
inline const ::std::string& SendGiftLogInfo::mailid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SendGiftLogInfo.mailid)
  return *mailid_;
}
inline void SendGiftLogInfo::set_mailid(const ::std::string& value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.SendGiftLogInfo.mailid)
}
inline void SendGiftLogInfo::set_mailid(const char* value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.SendGiftLogInfo.mailid)
}
inline void SendGiftLogInfo::set_mailid(const char* value, size_t size) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.SendGiftLogInfo.mailid)
}
inline ::std::string* SendGiftLogInfo::mutable_mailid() {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.SendGiftLogInfo.mailid)
  return mailid_;
}
inline ::std::string* SendGiftLogInfo::release_mailid() {
  clear_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mailid_;
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendGiftLogInfo::set_allocated_mailid(::std::string* mailid) {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (mailid) {
    set_has_mailid();
    mailid_ = mailid;
  } else {
    clear_has_mailid();
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.SendGiftLogInfo.mailid)
}

// -------------------------------------------------------------------

// packetw2c_req_send_gift_log_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_send_gift_log_result];
inline bool packetw2c_req_send_gift_log_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_send_gift_log_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_send_gift_log_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_send_gift_log_result::clear_packet_id() {
  packet_id_ = 7547;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_send_gift_log_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_send_gift_log_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_send_gift_log_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_send_gift_log_result.packet_id)
}

// repeated .client2world_protocols.SendGiftLogInfo logList = 2;
inline int packetw2c_req_send_gift_log_result::loglist_size() const {
  return loglist_.size();
}
inline void packetw2c_req_send_gift_log_result::clear_loglist() {
  loglist_.Clear();
}
inline const ::client2world_protocols::SendGiftLogInfo& packetw2c_req_send_gift_log_result::loglist(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_send_gift_log_result.logList)
  return loglist_.Get(index);
}
inline ::client2world_protocols::SendGiftLogInfo* packetw2c_req_send_gift_log_result::mutable_loglist(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_req_send_gift_log_result.logList)
  return loglist_.Mutable(index);
}
inline ::client2world_protocols::SendGiftLogInfo* packetw2c_req_send_gift_log_result::add_loglist() {
  // @@protoc_insertion_point(field_add:client2world_protocols.packetw2c_req_send_gift_log_result.logList)
  return loglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SendGiftLogInfo >&
packetw2c_req_send_gift_log_result::loglist() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.packetw2c_req_send_gift_log_result.logList)
  return loglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SendGiftLogInfo >*
packetw2c_req_send_gift_log_result::mutable_loglist() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.packetw2c_req_send_gift_log_result.logList)
  return &loglist_;
}

// optional int32 lastTime = 3;
inline bool packetw2c_req_send_gift_log_result::has_lasttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_req_send_gift_log_result::set_has_lasttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_req_send_gift_log_result::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_req_send_gift_log_result::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 packetw2c_req_send_gift_log_result::lasttime() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_send_gift_log_result.lastTime)
  return lasttime_;
}
inline void packetw2c_req_send_gift_log_result::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_send_gift_log_result.lastTime)
}

// -------------------------------------------------------------------

// packetc2w_req_safebox_log

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_safebox_log];
inline bool packetc2w_req_safebox_log::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_safebox_log::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_safebox_log::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_safebox_log::clear_packet_id() {
  packet_id_ = 5067;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_safebox_log::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_safebox_log.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_safebox_log::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_safebox_log.packet_id)
}

// optional int32 lastTime = 2;
inline bool packetc2w_req_safebox_log::has_lasttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_req_safebox_log::set_has_lasttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_req_safebox_log::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_req_safebox_log::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 packetc2w_req_safebox_log::lasttime() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_safebox_log.lastTime)
  return lasttime_;
}
inline void packetc2w_req_safebox_log::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_safebox_log.lastTime)
}

// -------------------------------------------------------------------

// SafeBoxLogInfo

// optional int32 time = 1;
inline bool SafeBoxLogInfo::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SafeBoxLogInfo::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SafeBoxLogInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SafeBoxLogInfo::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 SafeBoxLogInfo::time() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SafeBoxLogInfo.time)
  return time_;
}
inline void SafeBoxLogInfo::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.SafeBoxLogInfo.time)
}

// optional int64 gold = 2;
inline bool SafeBoxLogInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SafeBoxLogInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SafeBoxLogInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SafeBoxLogInfo::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 SafeBoxLogInfo::gold() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SafeBoxLogInfo.gold)
  return gold_;
}
inline void SafeBoxLogInfo::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.SafeBoxLogInfo.gold)
}

// optional int64 player_gold = 3;
inline bool SafeBoxLogInfo::has_player_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SafeBoxLogInfo::set_has_player_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SafeBoxLogInfo::clear_has_player_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SafeBoxLogInfo::clear_player_gold() {
  player_gold_ = GOOGLE_LONGLONG(0);
  clear_has_player_gold();
}
inline ::google::protobuf::int64 SafeBoxLogInfo::player_gold() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SafeBoxLogInfo.player_gold)
  return player_gold_;
}
inline void SafeBoxLogInfo::set_player_gold(::google::protobuf::int64 value) {
  set_has_player_gold();
  player_gold_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.SafeBoxLogInfo.player_gold)
}

// -------------------------------------------------------------------

// packetw2c_req_safebox_log_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_safebox_log_result];
inline bool packetw2c_req_safebox_log_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_safebox_log_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_safebox_log_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_safebox_log_result::clear_packet_id() {
  packet_id_ = 7573;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_safebox_log_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_safebox_log_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_safebox_log_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_safebox_log_result.packet_id)
}

// repeated .client2world_protocols.SafeBoxLogInfo logList = 2;
inline int packetw2c_req_safebox_log_result::loglist_size() const {
  return loglist_.size();
}
inline void packetw2c_req_safebox_log_result::clear_loglist() {
  loglist_.Clear();
}
inline const ::client2world_protocols::SafeBoxLogInfo& packetw2c_req_safebox_log_result::loglist(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_safebox_log_result.logList)
  return loglist_.Get(index);
}
inline ::client2world_protocols::SafeBoxLogInfo* packetw2c_req_safebox_log_result::mutable_loglist(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_req_safebox_log_result.logList)
  return loglist_.Mutable(index);
}
inline ::client2world_protocols::SafeBoxLogInfo* packetw2c_req_safebox_log_result::add_loglist() {
  // @@protoc_insertion_point(field_add:client2world_protocols.packetw2c_req_safebox_log_result.logList)
  return loglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SafeBoxLogInfo >&
packetw2c_req_safebox_log_result::loglist() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.packetw2c_req_safebox_log_result.logList)
  return loglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SafeBoxLogInfo >*
packetw2c_req_safebox_log_result::mutable_loglist() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.packetw2c_req_safebox_log_result.logList)
  return &loglist_;
}

// optional int32 lastTime = 3;
inline bool packetw2c_req_safebox_log_result::has_lasttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_req_safebox_log_result::set_has_lasttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_req_safebox_log_result::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_req_safebox_log_result::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 packetw2c_req_safebox_log_result::lasttime() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_safebox_log_result.lastTime)
  return lasttime_;
}
inline void packetw2c_req_safebox_log_result::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_safebox_log_result.lastTime)
}

// -------------------------------------------------------------------

// packetc2w_inform_playerhead

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_inform_playerhead];
inline bool packetc2w_inform_playerhead::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_inform_playerhead::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_inform_playerhead::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_inform_playerhead::clear_packet_id() {
  packet_id_ = 5063;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_inform_playerhead::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_inform_playerhead.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_inform_playerhead::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_inform_playerhead.packet_id)
}

// optional int32 informDstPlayerId = 2;
inline bool packetc2w_inform_playerhead::has_informdstplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_inform_playerhead::set_has_informdstplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_inform_playerhead::clear_has_informdstplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_inform_playerhead::clear_informdstplayerid() {
  informdstplayerid_ = 0;
  clear_has_informdstplayerid();
}
inline ::google::protobuf::int32 packetc2w_inform_playerhead::informdstplayerid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_inform_playerhead.informDstPlayerId)
  return informdstplayerid_;
}
inline void packetc2w_inform_playerhead::set_informdstplayerid(::google::protobuf::int32 value) {
  set_has_informdstplayerid();
  informdstplayerid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_inform_playerhead.informDstPlayerId)
}

// -------------------------------------------------------------------

// packetw2c_inform_playerhead_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_inform_playerhead_result];
inline bool packetw2c_inform_playerhead_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_inform_playerhead_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_inform_playerhead_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_inform_playerhead_result::clear_packet_id() {
  packet_id_ = 7567;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_inform_playerhead_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_inform_playerhead_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_inform_playerhead_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_inform_playerhead_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_inform_playerhead_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_inform_playerhead_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_inform_playerhead_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_inform_playerhead_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_inform_playerhead_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_inform_playerhead_result.result)
  return result_;
}
inline void packetw2c_inform_playerhead_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_inform_playerhead_result.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5fplayer_5fproperty_2eproto__INCLUDED
