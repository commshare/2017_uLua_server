// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_player_quest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_player_quest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2w_get_questlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_get_questlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_get_questlist_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_get_questlist_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_receive_questreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_receive_questreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_receive_questreward_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_receive_questreward_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_change_quest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_change_quest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fplayer_5fquest_2eproto() {
  protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_player_quest.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2w_get_questlist_descriptor_ = file->message_type(0);
  static const int packetc2w_get_questlist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_questlist, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_questlist, type_),
  };
  packetc2w_get_questlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_get_questlist_descriptor_,
      packetc2w_get_questlist::default_instance_,
      packetc2w_get_questlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_questlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_questlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_get_questlist));
  packetw2c_get_questlist_result_descriptor_ = file->message_type(1);
  static const int packetw2c_get_questlist_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_questlist_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_questlist_result, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_questlist_result, questlist_),
  };
  packetw2c_get_questlist_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_get_questlist_result_descriptor_,
      packetw2c_get_questlist_result::default_instance_,
      packetw2c_get_questlist_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_questlist_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_questlist_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_get_questlist_result));
  packetc2w_receive_questreward_descriptor_ = file->message_type(2);
  static const int packetc2w_receive_questreward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_receive_questreward, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_receive_questreward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_receive_questreward, questid_),
  };
  packetc2w_receive_questreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_receive_questreward_descriptor_,
      packetc2w_receive_questreward::default_instance_,
      packetc2w_receive_questreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_receive_questreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_receive_questreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_receive_questreward));
  packetw2c_receive_questreward_result_descriptor_ = file->message_type(3);
  static const int packetw2c_receive_questreward_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_questreward_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_questreward_result, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_questreward_result, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_questreward_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_questreward_result, items_),
  };
  packetw2c_receive_questreward_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_receive_questreward_result_descriptor_,
      packetw2c_receive_questreward_result::default_instance_,
      packetw2c_receive_questreward_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_questreward_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_receive_questreward_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_receive_questreward_result));
  packetw2c_change_quest_descriptor_ = file->message_type(4);
  static const int packetw2c_change_quest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_quest, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_quest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_quest, qinfo_),
  };
  packetw2c_change_quest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_change_quest_descriptor_,
      packetw2c_change_quest::default_instance_,
      packetw2c_change_quest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_quest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_quest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_change_quest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fplayer_5fquest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_get_questlist_descriptor_, &packetc2w_get_questlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_get_questlist_result_descriptor_, &packetw2c_get_questlist_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_receive_questreward_descriptor_, &packetc2w_receive_questreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_receive_questreward_result_descriptor_, &packetw2c_receive_questreward_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_change_quest_descriptor_, &packetw2c_change_quest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fplayer_5fquest_2eproto() {
  delete packetc2w_get_questlist::default_instance_;
  delete packetc2w_get_questlist_reflection_;
  delete packetw2c_get_questlist_result::default_instance_;
  delete packetw2c_get_questlist_result_reflection_;
  delete packetc2w_receive_questreward::default_instance_;
  delete packetc2w_receive_questreward_reflection_;
  delete packetw2c_receive_questreward_result::default_instance_;
  delete packetw2c_receive_questreward_result_reflection_;
  delete packetw2c_change_quest::default_instance_;
  delete packetw2c_change_quest_reflection_;
}

void protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037client2world_player_quest.proto\022\026clien"
    "t2world_protocols\032\033client2world_msg_type"
    ".proto\032\022msg_type_def.proto\032\022msg_info_def"
    ".proto\"\201\001\n\027packetc2w_get_questlist\022U\n\tpa"
    "cket_id\030\001 \001(\0162).client2world_protocols.e"
    "_server_msg_type:\027e_mst_c2w_get_questlis"
    "t\022\017\n\004type\030\002 \001(\005:\0011\"\300\001\n\036packetw2c_get_que"
    "stlist_result\022\\\n\tpacket_id\030\001 \001(\0162).clien"
    "t2world_protocols.e_server_msg_type:\036e_m"
    "st_w2c_get_questlist_result\022\017\n\004type\030\002 \001("
    "\005:\0011\022/\n\tquestlist\030\003 \003(\0132\034.msg_info_def.m"
    "sg_quest_info\"\233\001\n\035packetc2w_receive_ques"
    "treward\022[\n\tpacket_id\030\001 \001(\0162).client2worl"
    "d_protocols.e_server_msg_type:\035e_mst_c2w"
    "_receive_questreward\022\014\n\004type\030\002 \001(\005\022\017\n\007qu"
    "estid\030\003 \001(\005\"\206\002\n$packetw2c_receive_questr"
    "eward_result\022Z\n\tpacket_id\030\001 \001(\0162).client"
    "2world_protocols.e_server_msg_type:\034e_ms"
    "t_w2c_questreward_result\022\014\n\004type\030\002 \001(\005\022\017"
    "\n\007questid\030\003 \001(\005\022<\n\006result\030\004 \001(\0162\036.msg_ty"
    "pe_def.e_msg_result_def:\014e_rmt_unknow\022%\n"
    "\005items\030\005 \003(\0132\026.msg_info_def.ItemInfo\"\251\001\n"
    "\026packetw2c_change_quest\022T\n\tpacket_id\030\001 \001"
    "(\0162).client2world_protocols.e_server_msg"
    "_type:\026e_mst_w2c_change_quest\022\014\n\004type\030\002 "
    "\001(\005\022+\n\005qinfo\030\003 \001(\0132\034.msg_info_def.msg_qu"
    "est_info", 1048);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_player_quest.proto", &protobuf_RegisterTypes);
  packetc2w_get_questlist::default_instance_ = new packetc2w_get_questlist();
  packetw2c_get_questlist_result::default_instance_ = new packetw2c_get_questlist_result();
  packetc2w_receive_questreward::default_instance_ = new packetc2w_receive_questreward();
  packetw2c_receive_questreward_result::default_instance_ = new packetw2c_receive_questreward_result();
  packetw2c_change_quest::default_instance_ = new packetw2c_change_quest();
  packetc2w_get_questlist::default_instance_->InitAsDefaultInstance();
  packetw2c_get_questlist_result::default_instance_->InitAsDefaultInstance();
  packetc2w_receive_questreward::default_instance_->InitAsDefaultInstance();
  packetw2c_receive_questreward_result::default_instance_->InitAsDefaultInstance();
  packetw2c_change_quest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fplayer_5fquest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fplayer_5fquest_2eproto {
  StaticDescriptorInitializer_client2world_5fplayer_5fquest_2eproto() {
    protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  }
} static_descriptor_initializer_client2world_5fplayer_5fquest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2w_get_questlist::kPacketIdFieldNumber;
const int packetc2w_get_questlist::kTypeFieldNumber;
#endif  // !_MSC_VER

packetc2w_get_questlist::packetc2w_get_questlist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_get_questlist)
}

void packetc2w_get_questlist::InitAsDefaultInstance() {
}

packetc2w_get_questlist::packetc2w_get_questlist(const packetc2w_get_questlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_get_questlist)
}

void packetc2w_get_questlist::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5058;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_get_questlist::~packetc2w_get_questlist() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_get_questlist)
  SharedDtor();
}

void packetc2w_get_questlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_get_questlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_get_questlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_get_questlist_descriptor_;
}

const packetc2w_get_questlist& packetc2w_get_questlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  return *default_instance_;
}

packetc2w_get_questlist* packetc2w_get_questlist::default_instance_ = NULL;

packetc2w_get_questlist* packetc2w_get_questlist::New() const {
  return new packetc2w_get_questlist;
}

void packetc2w_get_questlist::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5058;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_get_questlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_get_questlist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_questlist];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_get_questlist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_get_questlist)
  return false;
#undef DO_
}

void packetc2w_get_questlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_get_questlist)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_questlist];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 type = 2 [default = 1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_get_questlist)
}

::google::protobuf::uint8* packetc2w_get_questlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_get_questlist)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_questlist];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 type = 2 [default = 1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_get_questlist)
  return target;
}

int packetc2w_get_questlist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_questlist];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 type = 2 [default = 1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_get_questlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_get_questlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_get_questlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_get_questlist::MergeFrom(const packetc2w_get_questlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_get_questlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_get_questlist::CopyFrom(const packetc2w_get_questlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_get_questlist::IsInitialized() const {

  return true;
}

void packetc2w_get_questlist::Swap(packetc2w_get_questlist* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_get_questlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_get_questlist_descriptor_;
  metadata.reflection = packetc2w_get_questlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_get_questlist_result::kPacketIdFieldNumber;
const int packetw2c_get_questlist_result::kTypeFieldNumber;
const int packetw2c_get_questlist_result::kQuestlistFieldNumber;
#endif  // !_MSC_VER

packetw2c_get_questlist_result::packetw2c_get_questlist_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_get_questlist_result)
}

void packetw2c_get_questlist_result::InitAsDefaultInstance() {
}

packetw2c_get_questlist_result::packetw2c_get_questlist_result(const packetw2c_get_questlist_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_get_questlist_result)
}

void packetw2c_get_questlist_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7561;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_get_questlist_result::~packetw2c_get_questlist_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_get_questlist_result)
  SharedDtor();
}

void packetw2c_get_questlist_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_get_questlist_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_get_questlist_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_get_questlist_result_descriptor_;
}

const packetw2c_get_questlist_result& packetw2c_get_questlist_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  return *default_instance_;
}

packetw2c_get_questlist_result* packetw2c_get_questlist_result::default_instance_ = NULL;

packetw2c_get_questlist_result* packetw2c_get_questlist_result::New() const {
  return new packetw2c_get_questlist_result;
}

void packetw2c_get_questlist_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7561;
    type_ = 1;
  }
  questlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_get_questlist_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_get_questlist_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_questlist_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_questlist;
        break;
      }

      // repeated .msg_info_def.msg_quest_info questlist = 3;
      case 3: {
        if (tag == 26) {
         parse_questlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_questlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_questlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_get_questlist_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_get_questlist_result)
  return false;
#undef DO_
}

void packetw2c_get_questlist_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_get_questlist_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_questlist_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 type = 2 [default = 1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated .msg_info_def.msg_quest_info questlist = 3;
  for (int i = 0; i < this->questlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->questlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_get_questlist_result)
}

::google::protobuf::uint8* packetw2c_get_questlist_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_get_questlist_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_questlist_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 type = 2 [default = 1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated .msg_info_def.msg_quest_info questlist = 3;
  for (int i = 0; i < this->questlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->questlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_get_questlist_result)
  return target;
}

int packetw2c_get_questlist_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_questlist_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 type = 2 [default = 1];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .msg_info_def.msg_quest_info questlist = 3;
  total_size += 1 * this->questlist_size();
  for (int i = 0; i < this->questlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->questlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_get_questlist_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_get_questlist_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_get_questlist_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_get_questlist_result::MergeFrom(const packetw2c_get_questlist_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  questlist_.MergeFrom(from.questlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_get_questlist_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_get_questlist_result::CopyFrom(const packetw2c_get_questlist_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_get_questlist_result::IsInitialized() const {

  return true;
}

void packetw2c_get_questlist_result::Swap(packetw2c_get_questlist_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(type_, other->type_);
    questlist_.Swap(&other->questlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_get_questlist_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_get_questlist_result_descriptor_;
  metadata.reflection = packetw2c_get_questlist_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_receive_questreward::kPacketIdFieldNumber;
const int packetc2w_receive_questreward::kTypeFieldNumber;
const int packetc2w_receive_questreward::kQuestidFieldNumber;
#endif  // !_MSC_VER

packetc2w_receive_questreward::packetc2w_receive_questreward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_receive_questreward)
}

void packetc2w_receive_questreward::InitAsDefaultInstance() {
}

packetc2w_receive_questreward::packetc2w_receive_questreward(const packetc2w_receive_questreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_receive_questreward)
}

void packetc2w_receive_questreward::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5059;
  type_ = 0;
  questid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_receive_questreward::~packetc2w_receive_questreward() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_receive_questreward)
  SharedDtor();
}

void packetc2w_receive_questreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_receive_questreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_receive_questreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_receive_questreward_descriptor_;
}

const packetc2w_receive_questreward& packetc2w_receive_questreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  return *default_instance_;
}

packetc2w_receive_questreward* packetc2w_receive_questreward::default_instance_ = NULL;

packetc2w_receive_questreward* packetc2w_receive_questreward::New() const {
  return new packetc2w_receive_questreward;
}

void packetc2w_receive_questreward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetc2w_receive_questreward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, questid_);
    packet_id_ = 5059;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_receive_questreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_receive_questreward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_questreward];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_questid;
        break;
      }

      // optional int32 questid = 3;
      case 3: {
        if (tag == 24) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_receive_questreward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_receive_questreward)
  return false;
#undef DO_
}

void packetc2w_receive_questreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_receive_questreward)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_questreward];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 questid = 3;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->questid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_receive_questreward)
}

::google::protobuf::uint8* packetc2w_receive_questreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_receive_questreward)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_questreward];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 questid = 3;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->questid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_receive_questreward)
  return target;
}

int packetc2w_receive_questreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_questreward];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 questid = 3;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_receive_questreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_receive_questreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_receive_questreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_receive_questreward::MergeFrom(const packetc2w_receive_questreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_receive_questreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_receive_questreward::CopyFrom(const packetc2w_receive_questreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_receive_questreward::IsInitialized() const {

  return true;
}

void packetc2w_receive_questreward::Swap(packetc2w_receive_questreward* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(type_, other->type_);
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_receive_questreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_receive_questreward_descriptor_;
  metadata.reflection = packetc2w_receive_questreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_receive_questreward_result::kPacketIdFieldNumber;
const int packetw2c_receive_questreward_result::kTypeFieldNumber;
const int packetw2c_receive_questreward_result::kQuestidFieldNumber;
const int packetw2c_receive_questreward_result::kResultFieldNumber;
const int packetw2c_receive_questreward_result::kItemsFieldNumber;
#endif  // !_MSC_VER

packetw2c_receive_questreward_result::packetw2c_receive_questreward_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_receive_questreward_result)
}

void packetw2c_receive_questreward_result::InitAsDefaultInstance() {
}

packetw2c_receive_questreward_result::packetw2c_receive_questreward_result(const packetw2c_receive_questreward_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_receive_questreward_result)
}

void packetw2c_receive_questreward_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7562;
  type_ = 0;
  questid_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_receive_questreward_result::~packetw2c_receive_questreward_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_receive_questreward_result)
  SharedDtor();
}

void packetw2c_receive_questreward_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_receive_questreward_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_receive_questreward_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_receive_questreward_result_descriptor_;
}

const packetw2c_receive_questreward_result& packetw2c_receive_questreward_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  return *default_instance_;
}

packetw2c_receive_questreward_result* packetw2c_receive_questreward_result::default_instance_ = NULL;

packetw2c_receive_questreward_result* packetw2c_receive_questreward_result::New() const {
  return new packetw2c_receive_questreward_result;
}

void packetw2c_receive_questreward_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_receive_questreward_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, result_);
    packet_id_ = 7562;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_receive_questreward_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_receive_questreward_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_questreward_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_questid;
        break;
      }

      // optional int32 questid = 3;
      case 3: {
        if (tag == 24) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 4 [default = e_rmt_unknow];
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // repeated .msg_info_def.ItemInfo items = 5;
      case 5: {
        if (tag == 42) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_receive_questreward_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_receive_questreward_result)
  return false;
#undef DO_
}

void packetw2c_receive_questreward_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_receive_questreward_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_questreward_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 questid = 3;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->questid(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 4 [default = e_rmt_unknow];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // repeated .msg_info_def.ItemInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_receive_questreward_result)
}

::google::protobuf::uint8* packetw2c_receive_questreward_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_receive_questreward_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_questreward_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 questid = 3;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->questid(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 4 [default = e_rmt_unknow];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // repeated .msg_info_def.ItemInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_receive_questreward_result)
  return target;
}

int packetw2c_receive_questreward_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_questreward_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 questid = 3;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // optional .msg_type_def.e_msg_result_def result = 4 [default = e_rmt_unknow];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .msg_info_def.ItemInfo items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_receive_questreward_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_receive_questreward_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_receive_questreward_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_receive_questreward_result::MergeFrom(const packetw2c_receive_questreward_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_receive_questreward_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_receive_questreward_result::CopyFrom(const packetw2c_receive_questreward_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_receive_questreward_result::IsInitialized() const {

  return true;
}

void packetw2c_receive_questreward_result::Swap(packetw2c_receive_questreward_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(type_, other->type_);
    std::swap(questid_, other->questid_);
    std::swap(result_, other->result_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_receive_questreward_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_receive_questreward_result_descriptor_;
  metadata.reflection = packetw2c_receive_questreward_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_change_quest::kPacketIdFieldNumber;
const int packetw2c_change_quest::kTypeFieldNumber;
const int packetw2c_change_quest::kQinfoFieldNumber;
#endif  // !_MSC_VER

packetw2c_change_quest::packetw2c_change_quest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_change_quest)
}

void packetw2c_change_quest::InitAsDefaultInstance() {
  qinfo_ = const_cast< ::msg_info_def::msg_quest_info*>(&::msg_info_def::msg_quest_info::default_instance());
}

packetw2c_change_quest::packetw2c_change_quest(const packetw2c_change_quest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_change_quest)
}

void packetw2c_change_quest::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7563;
  type_ = 0;
  qinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_change_quest::~packetw2c_change_quest() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_change_quest)
  SharedDtor();
}

void packetw2c_change_quest::SharedDtor() {
  if (this != default_instance_) {
    delete qinfo_;
  }
}

void packetw2c_change_quest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_change_quest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_change_quest_descriptor_;
}

const packetw2c_change_quest& packetw2c_change_quest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  return *default_instance_;
}

packetw2c_change_quest* packetw2c_change_quest::default_instance_ = NULL;

packetw2c_change_quest* packetw2c_change_quest::New() const {
  return new packetw2c_change_quest;
}

void packetw2c_change_quest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 7563;
    type_ = 0;
    if (has_qinfo()) {
      if (qinfo_ != NULL) qinfo_->::msg_info_def::msg_quest_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_change_quest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_change_quest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_quest];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_qinfo;
        break;
      }

      // optional .msg_info_def.msg_quest_info qinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_qinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_change_quest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_change_quest)
  return false;
#undef DO_
}

void packetw2c_change_quest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_change_quest)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_quest];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional .msg_info_def.msg_quest_info qinfo = 3;
  if (has_qinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->qinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_change_quest)
}

::google::protobuf::uint8* packetw2c_change_quest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_change_quest)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_quest];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional .msg_info_def.msg_quest_info qinfo = 3;
  if (has_qinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->qinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_change_quest)
  return target;
}

int packetw2c_change_quest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_quest];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .msg_info_def.msg_quest_info qinfo = 3;
    if (has_qinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_change_quest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_change_quest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_change_quest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_change_quest::MergeFrom(const packetw2c_change_quest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_qinfo()) {
      mutable_qinfo()->::msg_info_def::msg_quest_info::MergeFrom(from.qinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_change_quest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_change_quest::CopyFrom(const packetw2c_change_quest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_change_quest::IsInitialized() const {

  return true;
}

void packetw2c_change_quest::Swap(packetw2c_change_quest* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(type_, other->type_);
    std::swap(qinfo_, other->qinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_change_quest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_change_quest_descriptor_;
  metadata.reflection = packetw2c_change_quest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
