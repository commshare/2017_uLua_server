// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_rank.proto

#ifndef PROTOBUF_client2world_5frank_2eproto__INCLUDED
#define PROTOBUF_client2world_5frank_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5frank_2eproto();
void protobuf_AssignDesc_client2world_5frank_2eproto();
void protobuf_ShutdownFile_client2world_5frank_2eproto();

class RankInfo;
class packetc2w_req_coin_rank;
class packetw2c_req_coin_rank_result;
class RechargeInfo;
class packetc2w_req_recharge_rank;
class packetw2c_req_recharge_rank_result;
class packetc2w_req_coin_growth;
class packetw2c_req_coin_growth_result;

// ===================================================================

class RankInfo : public ::google::protobuf::Message {
 public:
  RankInfo();
  virtual ~RankInfo();

  RankInfo(const RankInfo& from);

  inline RankInfo& operator=(const RankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankInfo& default_instance();

  void Swap(RankInfo* other);

  // implements Message ----------------------------------------------

  RankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankInfo& from);
  void MergeFrom(const RankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional string nickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int64 gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int32 vipLevel = 4;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 4;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.RankInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int64 gold_;
  friend void  protobuf_AddDesc_client2world_5frank_2eproto();
  friend void protobuf_AssignDesc_client2world_5frank_2eproto();
  friend void protobuf_ShutdownFile_client2world_5frank_2eproto();

  void InitAsDefaultInstance();
  static RankInfo* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_coin_rank : public ::google::protobuf::Message {
 public:
  packetc2w_req_coin_rank();
  virtual ~packetc2w_req_coin_rank();

  packetc2w_req_coin_rank(const packetc2w_req_coin_rank& from);

  inline packetc2w_req_coin_rank& operator=(const packetc2w_req_coin_rank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_coin_rank& default_instance();

  void Swap(packetc2w_req_coin_rank* other);

  // implements Message ----------------------------------------------

  packetc2w_req_coin_rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_coin_rank& from);
  void MergeFrom(const packetc2w_req_coin_rank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_coin_rank];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_coin_rank)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5frank_2eproto();
  friend void protobuf_AssignDesc_client2world_5frank_2eproto();
  friend void protobuf_ShutdownFile_client2world_5frank_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_coin_rank* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_coin_rank_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_coin_rank_result();
  virtual ~packetw2c_req_coin_rank_result();

  packetw2c_req_coin_rank_result(const packetw2c_req_coin_rank_result& from);

  inline packetw2c_req_coin_rank_result& operator=(const packetw2c_req_coin_rank_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_coin_rank_result& default_instance();

  void Swap(packetw2c_req_coin_rank_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_coin_rank_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_coin_rank_result& from);
  void MergeFrom(const packetw2c_req_coin_rank_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_coin_rank_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.RankInfo rankList = 2;
  inline int ranklist_size() const;
  inline void clear_ranklist();
  static const int kRankListFieldNumber = 2;
  inline const ::client2world_protocols::RankInfo& ranklist(int index) const;
  inline ::client2world_protocols::RankInfo* mutable_ranklist(int index);
  inline ::client2world_protocols::RankInfo* add_ranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::RankInfo >&
      ranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::RankInfo >*
      mutable_ranklist();

  // optional int32 selfRank = 3;
  inline bool has_selfrank() const;
  inline void clear_selfrank();
  static const int kSelfRankFieldNumber = 3;
  inline ::google::protobuf::int32 selfrank() const;
  inline void set_selfrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_coin_rank_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_selfrank();
  inline void clear_has_selfrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::RankInfo > ranklist_;
  int packet_id_;
  ::google::protobuf::int32 selfrank_;
  friend void  protobuf_AddDesc_client2world_5frank_2eproto();
  friend void protobuf_AssignDesc_client2world_5frank_2eproto();
  friend void protobuf_ShutdownFile_client2world_5frank_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_coin_rank_result* default_instance_;
};
// -------------------------------------------------------------------

class RechargeInfo : public ::google::protobuf::Message {
 public:
  RechargeInfo();
  virtual ~RechargeInfo();

  RechargeInfo(const RechargeInfo& from);

  inline RechargeInfo& operator=(const RechargeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RechargeInfo& default_instance();

  void Swap(RechargeInfo* other);

  // implements Message ----------------------------------------------

  RechargeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RechargeInfo& from);
  void MergeFrom(const RechargeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional string nickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 rmb = 3;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 3;
  inline ::google::protobuf::int32 rmb() const;
  inline void set_rmb(::google::protobuf::int32 value);

  // optional int32 vipLevel = 4;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 4;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.RechargeInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_rmb();
  inline void clear_has_rmb();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* nickname_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 rmb_;
  ::google::protobuf::int32 viplevel_;
  friend void  protobuf_AddDesc_client2world_5frank_2eproto();
  friend void protobuf_AssignDesc_client2world_5frank_2eproto();
  friend void protobuf_ShutdownFile_client2world_5frank_2eproto();

  void InitAsDefaultInstance();
  static RechargeInfo* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_recharge_rank : public ::google::protobuf::Message {
 public:
  packetc2w_req_recharge_rank();
  virtual ~packetc2w_req_recharge_rank();

  packetc2w_req_recharge_rank(const packetc2w_req_recharge_rank& from);

  inline packetc2w_req_recharge_rank& operator=(const packetc2w_req_recharge_rank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_recharge_rank& default_instance();

  void Swap(packetc2w_req_recharge_rank* other);

  // implements Message ----------------------------------------------

  packetc2w_req_recharge_rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_recharge_rank& from);
  void MergeFrom(const packetc2w_req_recharge_rank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_recharge_rank];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional bool is_yesterday = 2 [default = false];
  inline bool has_is_yesterday() const;
  inline void clear_is_yesterday();
  static const int kIsYesterdayFieldNumber = 2;
  inline bool is_yesterday() const;
  inline void set_is_yesterday(bool value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_recharge_rank)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_is_yesterday();
  inline void clear_has_is_yesterday();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  bool is_yesterday_;
  friend void  protobuf_AddDesc_client2world_5frank_2eproto();
  friend void protobuf_AssignDesc_client2world_5frank_2eproto();
  friend void protobuf_ShutdownFile_client2world_5frank_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_recharge_rank* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_recharge_rank_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_recharge_rank_result();
  virtual ~packetw2c_req_recharge_rank_result();

  packetw2c_req_recharge_rank_result(const packetw2c_req_recharge_rank_result& from);

  inline packetw2c_req_recharge_rank_result& operator=(const packetw2c_req_recharge_rank_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_recharge_rank_result& default_instance();

  void Swap(packetw2c_req_recharge_rank_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_recharge_rank_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_recharge_rank_result& from);
  void MergeFrom(const packetw2c_req_recharge_rank_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_recharge_rank_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.RechargeInfo rankList = 2;
  inline int ranklist_size() const;
  inline void clear_ranklist();
  static const int kRankListFieldNumber = 2;
  inline const ::client2world_protocols::RechargeInfo& ranklist(int index) const;
  inline ::client2world_protocols::RechargeInfo* mutable_ranklist(int index);
  inline ::client2world_protocols::RechargeInfo* add_ranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::RechargeInfo >&
      ranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::RechargeInfo >*
      mutable_ranklist();

  // optional int32 selfRank = 3;
  inline bool has_selfrank() const;
  inline void clear_selfrank();
  static const int kSelfRankFieldNumber = 3;
  inline ::google::protobuf::int32 selfrank() const;
  inline void set_selfrank(::google::protobuf::int32 value);

  // optional int32 selfrmb = 4;
  inline bool has_selfrmb() const;
  inline void clear_selfrmb();
  static const int kSelfrmbFieldNumber = 4;
  inline ::google::protobuf::int32 selfrmb() const;
  inline void set_selfrmb(::google::protobuf::int32 value);

  // optional bool is_yesterday = 5 [default = false];
  inline bool has_is_yesterday() const;
  inline void clear_is_yesterday();
  static const int kIsYesterdayFieldNumber = 5;
  inline bool is_yesterday() const;
  inline void set_is_yesterday(bool value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_recharge_rank_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_selfrank();
  inline void clear_has_selfrank();
  inline void set_has_selfrmb();
  inline void clear_has_selfrmb();
  inline void set_has_is_yesterday();
  inline void clear_has_is_yesterday();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::RechargeInfo > ranklist_;
  int packet_id_;
  ::google::protobuf::int32 selfrank_;
  ::google::protobuf::int32 selfrmb_;
  bool is_yesterday_;
  friend void  protobuf_AddDesc_client2world_5frank_2eproto();
  friend void protobuf_AssignDesc_client2world_5frank_2eproto();
  friend void protobuf_ShutdownFile_client2world_5frank_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_recharge_rank_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_coin_growth : public ::google::protobuf::Message {
 public:
  packetc2w_req_coin_growth();
  virtual ~packetc2w_req_coin_growth();

  packetc2w_req_coin_growth(const packetc2w_req_coin_growth& from);

  inline packetc2w_req_coin_growth& operator=(const packetc2w_req_coin_growth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_coin_growth& default_instance();

  void Swap(packetc2w_req_coin_growth* other);

  // implements Message ----------------------------------------------

  packetc2w_req_coin_growth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_coin_growth& from);
  void MergeFrom(const packetc2w_req_coin_growth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_coin_growth];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_coin_growth)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5frank_2eproto();
  friend void protobuf_AssignDesc_client2world_5frank_2eproto();
  friend void protobuf_ShutdownFile_client2world_5frank_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_coin_growth* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_coin_growth_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_coin_growth_result();
  virtual ~packetw2c_req_coin_growth_result();

  packetw2c_req_coin_growth_result(const packetw2c_req_coin_growth_result& from);

  inline packetw2c_req_coin_growth_result& operator=(const packetw2c_req_coin_growth_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_coin_growth_result& default_instance();

  void Swap(packetw2c_req_coin_growth_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_coin_growth_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_coin_growth_result& from);
  void MergeFrom(const packetw2c_req_coin_growth_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_coin_growth_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.RankInfo rankList = 2;
  inline int ranklist_size() const;
  inline void clear_ranklist();
  static const int kRankListFieldNumber = 2;
  inline const ::client2world_protocols::RankInfo& ranklist(int index) const;
  inline ::client2world_protocols::RankInfo* mutable_ranklist(int index);
  inline ::client2world_protocols::RankInfo* add_ranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::RankInfo >&
      ranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::RankInfo >*
      mutable_ranklist();

  // optional int32 selfRank = 3;
  inline bool has_selfrank() const;
  inline void clear_selfrank();
  static const int kSelfRankFieldNumber = 3;
  inline ::google::protobuf::int32 selfrank() const;
  inline void set_selfrank(::google::protobuf::int32 value);

  // optional int64 selfGold = 4;
  inline bool has_selfgold() const;
  inline void clear_selfgold();
  static const int kSelfGoldFieldNumber = 4;
  inline ::google::protobuf::int64 selfgold() const;
  inline void set_selfgold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_coin_growth_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_selfrank();
  inline void clear_has_selfrank();
  inline void set_has_selfgold();
  inline void clear_has_selfgold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::RankInfo > ranklist_;
  int packet_id_;
  ::google::protobuf::int32 selfrank_;
  ::google::protobuf::int64 selfgold_;
  friend void  protobuf_AddDesc_client2world_5frank_2eproto();
  friend void protobuf_AssignDesc_client2world_5frank_2eproto();
  friend void protobuf_ShutdownFile_client2world_5frank_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_coin_growth_result* default_instance_;
};
// ===================================================================


// ===================================================================

// RankInfo

// optional int32 playerId = 1;
inline bool RankInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankInfo::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 RankInfo::playerid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.RankInfo.playerId)
  return playerid_;
}
inline void RankInfo::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.RankInfo.playerId)
}

// optional string nickName = 2;
inline bool RankInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& RankInfo::nickname() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.RankInfo.nickName)
  return *nickname_;
}
inline void RankInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.RankInfo.nickName)
}
inline void RankInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.RankInfo.nickName)
}
inline void RankInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.RankInfo.nickName)
}
inline ::std::string* RankInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.RankInfo.nickName)
  return nickname_;
}
inline ::std::string* RankInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RankInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.RankInfo.nickName)
}

// optional int64 gold = 3;
inline bool RankInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankInfo::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 RankInfo::gold() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.RankInfo.gold)
  return gold_;
}
inline void RankInfo::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.RankInfo.gold)
}

// optional int32 vipLevel = 4;
inline bool RankInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankInfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 RankInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.RankInfo.vipLevel)
  return viplevel_;
}
inline void RankInfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.RankInfo.vipLevel)
}

// -------------------------------------------------------------------

// packetc2w_req_coin_rank

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_coin_rank];
inline bool packetc2w_req_coin_rank::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_coin_rank::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_coin_rank::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_coin_rank::clear_packet_id() {
  packet_id_ = 5020;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_coin_rank::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_coin_rank.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_coin_rank::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_coin_rank.packet_id)
}

// -------------------------------------------------------------------

// packetw2c_req_coin_rank_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_coin_rank_result];
inline bool packetw2c_req_coin_rank_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_coin_rank_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_coin_rank_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_coin_rank_result::clear_packet_id() {
  packet_id_ = 7521;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_coin_rank_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_coin_rank_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_coin_rank_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_coin_rank_result.packet_id)
}

// repeated .client2world_protocols.RankInfo rankList = 2;
inline int packetw2c_req_coin_rank_result::ranklist_size() const {
  return ranklist_.size();
}
inline void packetw2c_req_coin_rank_result::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::client2world_protocols::RankInfo& packetw2c_req_coin_rank_result::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_coin_rank_result.rankList)
  return ranklist_.Get(index);
}
inline ::client2world_protocols::RankInfo* packetw2c_req_coin_rank_result::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_req_coin_rank_result.rankList)
  return ranklist_.Mutable(index);
}
inline ::client2world_protocols::RankInfo* packetw2c_req_coin_rank_result::add_ranklist() {
  // @@protoc_insertion_point(field_add:client2world_protocols.packetw2c_req_coin_rank_result.rankList)
  return ranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::RankInfo >&
packetw2c_req_coin_rank_result::ranklist() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.packetw2c_req_coin_rank_result.rankList)
  return ranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::RankInfo >*
packetw2c_req_coin_rank_result::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.packetw2c_req_coin_rank_result.rankList)
  return &ranklist_;
}

// optional int32 selfRank = 3;
inline bool packetw2c_req_coin_rank_result::has_selfrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_req_coin_rank_result::set_has_selfrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_req_coin_rank_result::clear_has_selfrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_req_coin_rank_result::clear_selfrank() {
  selfrank_ = 0;
  clear_has_selfrank();
}
inline ::google::protobuf::int32 packetw2c_req_coin_rank_result::selfrank() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_coin_rank_result.selfRank)
  return selfrank_;
}
inline void packetw2c_req_coin_rank_result::set_selfrank(::google::protobuf::int32 value) {
  set_has_selfrank();
  selfrank_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_coin_rank_result.selfRank)
}

// -------------------------------------------------------------------

// RechargeInfo

// optional int32 playerId = 1;
inline bool RechargeInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RechargeInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RechargeInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RechargeInfo::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 RechargeInfo::playerid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.RechargeInfo.playerId)
  return playerid_;
}
inline void RechargeInfo::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.RechargeInfo.playerId)
}

// optional string nickName = 2;
inline bool RechargeInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RechargeInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RechargeInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RechargeInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& RechargeInfo::nickname() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.RechargeInfo.nickName)
  return *nickname_;
}
inline void RechargeInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.RechargeInfo.nickName)
}
inline void RechargeInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.RechargeInfo.nickName)
}
inline void RechargeInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.RechargeInfo.nickName)
}
inline ::std::string* RechargeInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.RechargeInfo.nickName)
  return nickname_;
}
inline ::std::string* RechargeInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RechargeInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.RechargeInfo.nickName)
}

// optional int32 rmb = 3;
inline bool RechargeInfo::has_rmb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RechargeInfo::set_has_rmb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RechargeInfo::clear_has_rmb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RechargeInfo::clear_rmb() {
  rmb_ = 0;
  clear_has_rmb();
}
inline ::google::protobuf::int32 RechargeInfo::rmb() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.RechargeInfo.rmb)
  return rmb_;
}
inline void RechargeInfo::set_rmb(::google::protobuf::int32 value) {
  set_has_rmb();
  rmb_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.RechargeInfo.rmb)
}

// optional int32 vipLevel = 4;
inline bool RechargeInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RechargeInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RechargeInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RechargeInfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 RechargeInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.RechargeInfo.vipLevel)
  return viplevel_;
}
inline void RechargeInfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.RechargeInfo.vipLevel)
}

// -------------------------------------------------------------------

// packetc2w_req_recharge_rank

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_recharge_rank];
inline bool packetc2w_req_recharge_rank::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_recharge_rank::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_recharge_rank::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_recharge_rank::clear_packet_id() {
  packet_id_ = 5051;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_recharge_rank::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_recharge_rank.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_recharge_rank::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_recharge_rank.packet_id)
}

// optional bool is_yesterday = 2 [default = false];
inline bool packetc2w_req_recharge_rank::has_is_yesterday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_req_recharge_rank::set_has_is_yesterday() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_req_recharge_rank::clear_has_is_yesterday() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_req_recharge_rank::clear_is_yesterday() {
  is_yesterday_ = false;
  clear_has_is_yesterday();
}
inline bool packetc2w_req_recharge_rank::is_yesterday() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_recharge_rank.is_yesterday)
  return is_yesterday_;
}
inline void packetc2w_req_recharge_rank::set_is_yesterday(bool value) {
  set_has_is_yesterday();
  is_yesterday_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_recharge_rank.is_yesterday)
}

// -------------------------------------------------------------------

// packetw2c_req_recharge_rank_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_recharge_rank_result];
inline bool packetw2c_req_recharge_rank_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_recharge_rank_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_recharge_rank_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_recharge_rank_result::clear_packet_id() {
  packet_id_ = 7554;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_recharge_rank_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_recharge_rank_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_recharge_rank_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_recharge_rank_result.packet_id)
}

// repeated .client2world_protocols.RechargeInfo rankList = 2;
inline int packetw2c_req_recharge_rank_result::ranklist_size() const {
  return ranklist_.size();
}
inline void packetw2c_req_recharge_rank_result::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::client2world_protocols::RechargeInfo& packetw2c_req_recharge_rank_result::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_recharge_rank_result.rankList)
  return ranklist_.Get(index);
}
inline ::client2world_protocols::RechargeInfo* packetw2c_req_recharge_rank_result::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_req_recharge_rank_result.rankList)
  return ranklist_.Mutable(index);
}
inline ::client2world_protocols::RechargeInfo* packetw2c_req_recharge_rank_result::add_ranklist() {
  // @@protoc_insertion_point(field_add:client2world_protocols.packetw2c_req_recharge_rank_result.rankList)
  return ranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::RechargeInfo >&
packetw2c_req_recharge_rank_result::ranklist() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.packetw2c_req_recharge_rank_result.rankList)
  return ranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::RechargeInfo >*
packetw2c_req_recharge_rank_result::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.packetw2c_req_recharge_rank_result.rankList)
  return &ranklist_;
}

// optional int32 selfRank = 3;
inline bool packetw2c_req_recharge_rank_result::has_selfrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_req_recharge_rank_result::set_has_selfrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_req_recharge_rank_result::clear_has_selfrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_req_recharge_rank_result::clear_selfrank() {
  selfrank_ = 0;
  clear_has_selfrank();
}
inline ::google::protobuf::int32 packetw2c_req_recharge_rank_result::selfrank() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_recharge_rank_result.selfRank)
  return selfrank_;
}
inline void packetw2c_req_recharge_rank_result::set_selfrank(::google::protobuf::int32 value) {
  set_has_selfrank();
  selfrank_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_recharge_rank_result.selfRank)
}

// optional int32 selfrmb = 4;
inline bool packetw2c_req_recharge_rank_result::has_selfrmb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_req_recharge_rank_result::set_has_selfrmb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_req_recharge_rank_result::clear_has_selfrmb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_req_recharge_rank_result::clear_selfrmb() {
  selfrmb_ = 0;
  clear_has_selfrmb();
}
inline ::google::protobuf::int32 packetw2c_req_recharge_rank_result::selfrmb() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_recharge_rank_result.selfrmb)
  return selfrmb_;
}
inline void packetw2c_req_recharge_rank_result::set_selfrmb(::google::protobuf::int32 value) {
  set_has_selfrmb();
  selfrmb_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_recharge_rank_result.selfrmb)
}

// optional bool is_yesterday = 5 [default = false];
inline bool packetw2c_req_recharge_rank_result::has_is_yesterday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_req_recharge_rank_result::set_has_is_yesterday() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_req_recharge_rank_result::clear_has_is_yesterday() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_req_recharge_rank_result::clear_is_yesterday() {
  is_yesterday_ = false;
  clear_has_is_yesterday();
}
inline bool packetw2c_req_recharge_rank_result::is_yesterday() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_recharge_rank_result.is_yesterday)
  return is_yesterday_;
}
inline void packetw2c_req_recharge_rank_result::set_is_yesterday(bool value) {
  set_has_is_yesterday();
  is_yesterday_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_recharge_rank_result.is_yesterday)
}

// -------------------------------------------------------------------

// packetc2w_req_coin_growth

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_coin_growth];
inline bool packetc2w_req_coin_growth::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_coin_growth::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_coin_growth::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_coin_growth::clear_packet_id() {
  packet_id_ = 5054;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_coin_growth::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_coin_growth.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_coin_growth::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_coin_growth.packet_id)
}

// -------------------------------------------------------------------

// packetw2c_req_coin_growth_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_coin_growth_result];
inline bool packetw2c_req_coin_growth_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_coin_growth_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_coin_growth_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_coin_growth_result::clear_packet_id() {
  packet_id_ = 7557;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_coin_growth_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_coin_growth_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_coin_growth_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_coin_growth_result.packet_id)
}

// repeated .client2world_protocols.RankInfo rankList = 2;
inline int packetw2c_req_coin_growth_result::ranklist_size() const {
  return ranklist_.size();
}
inline void packetw2c_req_coin_growth_result::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::client2world_protocols::RankInfo& packetw2c_req_coin_growth_result::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_coin_growth_result.rankList)
  return ranklist_.Get(index);
}
inline ::client2world_protocols::RankInfo* packetw2c_req_coin_growth_result::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_req_coin_growth_result.rankList)
  return ranklist_.Mutable(index);
}
inline ::client2world_protocols::RankInfo* packetw2c_req_coin_growth_result::add_ranklist() {
  // @@protoc_insertion_point(field_add:client2world_protocols.packetw2c_req_coin_growth_result.rankList)
  return ranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::RankInfo >&
packetw2c_req_coin_growth_result::ranklist() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.packetw2c_req_coin_growth_result.rankList)
  return ranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::RankInfo >*
packetw2c_req_coin_growth_result::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.packetw2c_req_coin_growth_result.rankList)
  return &ranklist_;
}

// optional int32 selfRank = 3;
inline bool packetw2c_req_coin_growth_result::has_selfrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_req_coin_growth_result::set_has_selfrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_req_coin_growth_result::clear_has_selfrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_req_coin_growth_result::clear_selfrank() {
  selfrank_ = 0;
  clear_has_selfrank();
}
inline ::google::protobuf::int32 packetw2c_req_coin_growth_result::selfrank() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_coin_growth_result.selfRank)
  return selfrank_;
}
inline void packetw2c_req_coin_growth_result::set_selfrank(::google::protobuf::int32 value) {
  set_has_selfrank();
  selfrank_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_coin_growth_result.selfRank)
}

// optional int64 selfGold = 4;
inline bool packetw2c_req_coin_growth_result::has_selfgold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_req_coin_growth_result::set_has_selfgold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_req_coin_growth_result::clear_has_selfgold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_req_coin_growth_result::clear_selfgold() {
  selfgold_ = GOOGLE_LONGLONG(0);
  clear_has_selfgold();
}
inline ::google::protobuf::int64 packetw2c_req_coin_growth_result::selfgold() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_coin_growth_result.selfGold)
  return selfgold_;
}
inline void packetw2c_req_coin_growth_result::set_selfgold(::google::protobuf::int64 value) {
  set_has_selfgold();
  selfgold_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_coin_growth_result.selfGold)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5frank_2eproto__INCLUDED
