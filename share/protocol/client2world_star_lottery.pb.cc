// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_star_lottery.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_star_lottery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2w_star_lottery_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_star_lottery_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_star_lottery_info_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_star_lottery_info_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_star_lottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_star_lottery_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_star_lottery_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_star_lottery_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fstar_5flottery_2eproto() {
  protobuf_AddDesc_client2world_5fstar_5flottery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_star_lottery.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2w_star_lottery_info_descriptor_ = file->message_type(0);
  static const int packetc2w_star_lottery_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_star_lottery_info, packet_id_),
  };
  packetc2w_star_lottery_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_star_lottery_info_descriptor_,
      packetc2w_star_lottery_info::default_instance_,
      packetc2w_star_lottery_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_star_lottery_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_star_lottery_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_star_lottery_info));
  packetw2c_star_lottery_info_result_descriptor_ = file->message_type(1);
  static const int packetw2c_star_lottery_info_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_star_lottery_info_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_star_lottery_info_result, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_star_lottery_info_result, award_),
  };
  packetw2c_star_lottery_info_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_star_lottery_info_result_descriptor_,
      packetw2c_star_lottery_info_result::default_instance_,
      packetw2c_star_lottery_info_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_star_lottery_info_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_star_lottery_info_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_star_lottery_info_result));
  packetc2w_req_star_lottery_descriptor_ = file->message_type(2);
  static const int packetc2w_req_star_lottery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_star_lottery, packet_id_),
  };
  packetc2w_req_star_lottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_star_lottery_descriptor_,
      packetc2w_req_star_lottery::default_instance_,
      packetc2w_req_star_lottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_star_lottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_star_lottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_star_lottery));
  packetc2w_req_star_lottery_result_descriptor_ = file->message_type(3);
  static const int packetc2w_req_star_lottery_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_star_lottery_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_star_lottery_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_star_lottery_result, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_star_lottery_result, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_star_lottery_result, itemcount_),
  };
  packetc2w_req_star_lottery_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_star_lottery_result_descriptor_,
      packetc2w_req_star_lottery_result::default_instance_,
      packetc2w_req_star_lottery_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_star_lottery_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_star_lottery_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_star_lottery_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fstar_5flottery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_star_lottery_info_descriptor_, &packetc2w_star_lottery_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_star_lottery_info_result_descriptor_, &packetw2c_star_lottery_info_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_star_lottery_descriptor_, &packetc2w_req_star_lottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_star_lottery_result_descriptor_, &packetc2w_req_star_lottery_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fstar_5flottery_2eproto() {
  delete packetc2w_star_lottery_info::default_instance_;
  delete packetc2w_star_lottery_info_reflection_;
  delete packetw2c_star_lottery_info_result::default_instance_;
  delete packetw2c_star_lottery_info_result_reflection_;
  delete packetc2w_req_star_lottery::default_instance_;
  delete packetc2w_req_star_lottery_reflection_;
  delete packetc2w_req_star_lottery_result::default_instance_;
  delete packetc2w_req_star_lottery_result_reflection_;
}

void protobuf_AddDesc_client2world_5fstar_5flottery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037client2world_star_lottery.proto\022\026clien"
    "t2world_protocols\032\033client2world_msg_type"
    ".proto\032\022msg_type_def.proto\032\022msg_info_def"
    ".proto\"x\n\033packetc2w_star_lottery_info\022Y\n"
    "\tpacket_id\030\001 \001(\0162).client2world_protocol"
    "s.e_server_msg_type:\033e_mst_c2w_star_lott"
    "ery_info\"\243\001\n\"packetw2c_star_lottery_info"
    "_result\022`\n\tpacket_id\030\001 \001(\0162).client2worl"
    "d_protocols.e_server_msg_type:\"e_mst_w2c"
    "_star_lottery_info_result\022\014\n\004star\030\002 \001(\005\022"
    "\r\n\005award\030\003 \001(\005\"v\n\032packetc2w_req_star_lot"
    "tery\022X\n\tpacket_id\030\001 \001(\0162).client2world_p"
    "rotocols.e_server_msg_type:\032e_mst_c2w_re"
    "q_star_lottery\"\364\001\n!packetc2w_req_star_lo"
    "ttery_result\022_\n\tpacket_id\030\001 \001(\0162).client"
    "2world_protocols.e_server_msg_type:!e_ms"
    "t_c2w_req_star_lottery_result\022:\n\006result\030"
    "\002 \001(\0162\036.msg_type_def.e_msg_result_def:\ne"
    "_rmt_fail\022\r\n\005award\030\003 \001(\003\022\020\n\010itemtype\030\004 \001"
    "(\005\022\021\n\titemcount\030\005 \001(\005", 781);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_star_lottery.proto", &protobuf_RegisterTypes);
  packetc2w_star_lottery_info::default_instance_ = new packetc2w_star_lottery_info();
  packetw2c_star_lottery_info_result::default_instance_ = new packetw2c_star_lottery_info_result();
  packetc2w_req_star_lottery::default_instance_ = new packetc2w_req_star_lottery();
  packetc2w_req_star_lottery_result::default_instance_ = new packetc2w_req_star_lottery_result();
  packetc2w_star_lottery_info::default_instance_->InitAsDefaultInstance();
  packetw2c_star_lottery_info_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_star_lottery::default_instance_->InitAsDefaultInstance();
  packetc2w_req_star_lottery_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fstar_5flottery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fstar_5flottery_2eproto {
  StaticDescriptorInitializer_client2world_5fstar_5flottery_2eproto() {
    protobuf_AddDesc_client2world_5fstar_5flottery_2eproto();
  }
} static_descriptor_initializer_client2world_5fstar_5flottery_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2w_star_lottery_info::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_star_lottery_info::packetc2w_star_lottery_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_star_lottery_info)
}

void packetc2w_star_lottery_info::InitAsDefaultInstance() {
}

packetc2w_star_lottery_info::packetc2w_star_lottery_info(const packetc2w_star_lottery_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_star_lottery_info)
}

void packetc2w_star_lottery_info::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5060;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_star_lottery_info::~packetc2w_star_lottery_info() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_star_lottery_info)
  SharedDtor();
}

void packetc2w_star_lottery_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_star_lottery_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_star_lottery_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_star_lottery_info_descriptor_;
}

const packetc2w_star_lottery_info& packetc2w_star_lottery_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fstar_5flottery_2eproto();
  return *default_instance_;
}

packetc2w_star_lottery_info* packetc2w_star_lottery_info::default_instance_ = NULL;

packetc2w_star_lottery_info* packetc2w_star_lottery_info::New() const {
  return new packetc2w_star_lottery_info;
}

void packetc2w_star_lottery_info::Clear() {
  packet_id_ = 5060;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_star_lottery_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_star_lottery_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_star_lottery_info];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_star_lottery_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_star_lottery_info)
  return false;
#undef DO_
}

void packetc2w_star_lottery_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_star_lottery_info)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_star_lottery_info];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_star_lottery_info)
}

::google::protobuf::uint8* packetc2w_star_lottery_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_star_lottery_info)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_star_lottery_info];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_star_lottery_info)
  return target;
}

int packetc2w_star_lottery_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_star_lottery_info];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_star_lottery_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_star_lottery_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_star_lottery_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_star_lottery_info::MergeFrom(const packetc2w_star_lottery_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_star_lottery_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_star_lottery_info::CopyFrom(const packetc2w_star_lottery_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_star_lottery_info::IsInitialized() const {

  return true;
}

void packetc2w_star_lottery_info::Swap(packetc2w_star_lottery_info* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_star_lottery_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_star_lottery_info_descriptor_;
  metadata.reflection = packetc2w_star_lottery_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_star_lottery_info_result::kPacketIdFieldNumber;
const int packetw2c_star_lottery_info_result::kStarFieldNumber;
const int packetw2c_star_lottery_info_result::kAwardFieldNumber;
#endif  // !_MSC_VER

packetw2c_star_lottery_info_result::packetw2c_star_lottery_info_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_star_lottery_info_result)
}

void packetw2c_star_lottery_info_result::InitAsDefaultInstance() {
}

packetw2c_star_lottery_info_result::packetw2c_star_lottery_info_result(const packetw2c_star_lottery_info_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_star_lottery_info_result)
}

void packetw2c_star_lottery_info_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7564;
  star_ = 0;
  award_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_star_lottery_info_result::~packetw2c_star_lottery_info_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_star_lottery_info_result)
  SharedDtor();
}

void packetw2c_star_lottery_info_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_star_lottery_info_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_star_lottery_info_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_star_lottery_info_result_descriptor_;
}

const packetw2c_star_lottery_info_result& packetw2c_star_lottery_info_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fstar_5flottery_2eproto();
  return *default_instance_;
}

packetw2c_star_lottery_info_result* packetw2c_star_lottery_info_result::default_instance_ = NULL;

packetw2c_star_lottery_info_result* packetw2c_star_lottery_info_result::New() const {
  return new packetw2c_star_lottery_info_result;
}

void packetw2c_star_lottery_info_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_star_lottery_info_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(star_, award_);
    packet_id_ = 7564;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_star_lottery_info_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_star_lottery_info_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_star_lottery_info_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional int32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_award;
        break;
      }

      // optional int32 award = 3;
      case 3: {
        if (tag == 24) {
         parse_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &award_)));
          set_has_award();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_star_lottery_info_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_star_lottery_info_result)
  return false;
#undef DO_
}

void packetw2c_star_lottery_info_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_star_lottery_info_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_star_lottery_info_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  // optional int32 award = 3;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->award(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_star_lottery_info_result)
}

::google::protobuf::uint8* packetw2c_star_lottery_info_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_star_lottery_info_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_star_lottery_info_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  // optional int32 award = 3;
  if (has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->award(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_star_lottery_info_result)
  return target;
}

int packetw2c_star_lottery_info_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_star_lottery_info_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 award = 3;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->award());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_star_lottery_info_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_star_lottery_info_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_star_lottery_info_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_star_lottery_info_result::MergeFrom(const packetw2c_star_lottery_info_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_star_lottery_info_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_star_lottery_info_result::CopyFrom(const packetw2c_star_lottery_info_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_star_lottery_info_result::IsInitialized() const {

  return true;
}

void packetw2c_star_lottery_info_result::Swap(packetw2c_star_lottery_info_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(star_, other->star_);
    std::swap(award_, other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_star_lottery_info_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_star_lottery_info_result_descriptor_;
  metadata.reflection = packetw2c_star_lottery_info_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_star_lottery::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_star_lottery::packetc2w_req_star_lottery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_star_lottery)
}

void packetc2w_req_star_lottery::InitAsDefaultInstance() {
}

packetc2w_req_star_lottery::packetc2w_req_star_lottery(const packetc2w_req_star_lottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_star_lottery)
}

void packetc2w_req_star_lottery::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5061;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_star_lottery::~packetc2w_req_star_lottery() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_star_lottery)
  SharedDtor();
}

void packetc2w_req_star_lottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_star_lottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_star_lottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_star_lottery_descriptor_;
}

const packetc2w_req_star_lottery& packetc2w_req_star_lottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fstar_5flottery_2eproto();
  return *default_instance_;
}

packetc2w_req_star_lottery* packetc2w_req_star_lottery::default_instance_ = NULL;

packetc2w_req_star_lottery* packetc2w_req_star_lottery::New() const {
  return new packetc2w_req_star_lottery;
}

void packetc2w_req_star_lottery::Clear() {
  packet_id_ = 5061;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_star_lottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_star_lottery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_star_lottery];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_star_lottery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_star_lottery)
  return false;
#undef DO_
}

void packetc2w_req_star_lottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_star_lottery)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_star_lottery];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_star_lottery)
}

::google::protobuf::uint8* packetc2w_req_star_lottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_star_lottery)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_star_lottery];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_star_lottery)
  return target;
}

int packetc2w_req_star_lottery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_star_lottery];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_star_lottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_star_lottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_star_lottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_star_lottery::MergeFrom(const packetc2w_req_star_lottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_star_lottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_star_lottery::CopyFrom(const packetc2w_req_star_lottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_star_lottery::IsInitialized() const {

  return true;
}

void packetc2w_req_star_lottery::Swap(packetc2w_req_star_lottery* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_star_lottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_star_lottery_descriptor_;
  metadata.reflection = packetc2w_req_star_lottery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_star_lottery_result::kPacketIdFieldNumber;
const int packetc2w_req_star_lottery_result::kResultFieldNumber;
const int packetc2w_req_star_lottery_result::kAwardFieldNumber;
const int packetc2w_req_star_lottery_result::kItemtypeFieldNumber;
const int packetc2w_req_star_lottery_result::kItemcountFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_star_lottery_result::packetc2w_req_star_lottery_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_star_lottery_result)
}

void packetc2w_req_star_lottery_result::InitAsDefaultInstance() {
}

packetc2w_req_star_lottery_result::packetc2w_req_star_lottery_result(const packetc2w_req_star_lottery_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_star_lottery_result)
}

void packetc2w_req_star_lottery_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7565;
  result_ = 2;
  award_ = GOOGLE_LONGLONG(0);
  itemtype_ = 0;
  itemcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_star_lottery_result::~packetc2w_req_star_lottery_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_star_lottery_result)
  SharedDtor();
}

void packetc2w_req_star_lottery_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_star_lottery_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_star_lottery_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_star_lottery_result_descriptor_;
}

const packetc2w_req_star_lottery_result& packetc2w_req_star_lottery_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fstar_5flottery_2eproto();
  return *default_instance_;
}

packetc2w_req_star_lottery_result* packetc2w_req_star_lottery_result::default_instance_ = NULL;

packetc2w_req_star_lottery_result* packetc2w_req_star_lottery_result::New() const {
  return new packetc2w_req_star_lottery_result;
}

void packetc2w_req_star_lottery_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetc2w_req_star_lottery_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(award_, itemcount_);
    packet_id_ = 7565;
    result_ = 2;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_star_lottery_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_star_lottery_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_star_lottery_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_award;
        break;
      }

      // optional int64 award = 3;
      case 3: {
        if (tag == 24) {
         parse_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &award_)));
          set_has_award();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemtype;
        break;
      }

      // optional int32 itemtype = 4;
      case 4: {
        if (tag == 32) {
         parse_itemtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_itemcount;
        break;
      }

      // optional int32 itemcount = 5;
      case 5: {
        if (tag == 40) {
         parse_itemcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_star_lottery_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_star_lottery_result)
  return false;
#undef DO_
}

void packetc2w_req_star_lottery_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_star_lottery_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_star_lottery_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int64 award = 3;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->award(), output);
  }

  // optional int32 itemtype = 4;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemtype(), output);
  }

  // optional int32 itemcount = 5;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->itemcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_star_lottery_result)
}

::google::protobuf::uint8* packetc2w_req_star_lottery_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_star_lottery_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_star_lottery_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int64 award = 3;
  if (has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->award(), target);
  }

  // optional int32 itemtype = 4;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemtype(), target);
  }

  // optional int32 itemcount = 5;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->itemcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_star_lottery_result)
  return target;
}

int packetc2w_req_star_lottery_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_star_lottery_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int64 award = 3;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->award());
    }

    // optional int32 itemtype = 4;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }

    // optional int32 itemcount = 5;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_star_lottery_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_star_lottery_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_star_lottery_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_star_lottery_result::MergeFrom(const packetc2w_req_star_lottery_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_star_lottery_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_star_lottery_result::CopyFrom(const packetc2w_req_star_lottery_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_star_lottery_result::IsInitialized() const {

  return true;
}

void packetc2w_req_star_lottery_result::Swap(packetc2w_req_star_lottery_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(award_, other->award_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_star_lottery_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_star_lottery_result_descriptor_;
  metadata.reflection = packetc2w_req_star_lottery_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
