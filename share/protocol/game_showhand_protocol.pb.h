// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_showhand_protocol.proto

#ifndef PROTOBUF_game_5fshowhand_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_game_5fshowhand_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "game_showhand_def.pb.h"
#include "msg_type_def.pb.h"
// @@protoc_insertion_point(includes)

namespace game_showhand_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

class packetc2l_get_room_info;
class packetl2c_get_room_info_result;
class packetc2l_enter_game_room;
class packetl2c_enter_game_room_result;
class packetc2l_quit_game_room;
class packetl2c_quit_game_room_result;
class packetc2l_choose_desk;
class packetl2c_choose_desk_result;
class packetc2l_get_table_scene_info;
class packetl2c_get_table_scene_result;
class packetc2l_quit_desk;
class packet_l2c_quit_desk_result;
class packetc2l_player_ready;
class packetl2c_player_ready_result;
class packetc2l_view_card;
class packetl2c_view_card_result;
class packetc2l_bet_info;
class packetl2c_bet_info_result;
class packetl2c_notice_start_game_message;
class packetl2c_notice_sendcard_message;
class packetl2c_notice_bet;
class packetl2c_notice_award_message;
class packetl2c_notice_join_table;
class packetl2c_notice_leave_table;
class packetl2c_notice_table_player_state;
class packetc2l_check_state;
class packetl2c_check_state_result;
class packetl2c_notice_gm_all_card_info;
class packetc2l_gm_change_result;
class packetl2c_gm_change_result;
class packetl2c_notice_gm_stock_info;
class packetl2c_notice_gm_luck_info;

// ===================================================================

class packetc2l_get_room_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_room_info();
  virtual ~packetc2l_get_room_info();

  packetc2l_get_room_info(const packetc2l_get_room_info& from);

  inline packetc2l_get_room_info& operator=(const packetc2l_get_room_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_room_info& default_instance();

  void Swap(packetc2l_get_room_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_room_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_room_info& from);
  void MergeFrom(const packetc2l_get_room_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_get_room_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_room_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_room_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_room_info_result();
  virtual ~packetl2c_get_room_info_result();

  packetl2c_get_room_info_result(const packetl2c_get_room_info_result& from);

  inline packetl2c_get_room_info_result& operator=(const packetl2c_get_room_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_room_info_result& default_instance();

  void Swap(packetl2c_get_room_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_room_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_room_info_result& from);
  void MergeFrom(const packetl2c_get_room_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // repeated int32 room_ids = 2;
  inline int room_ids_size() const;
  inline void clear_room_ids();
  static const int kRoomIdsFieldNumber = 2;
  inline ::google::protobuf::int32 room_ids(int index) const;
  inline void set_room_ids(int index, ::google::protobuf::int32 value);
  inline void add_room_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      room_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_room_ids();

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_get_room_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > room_ids_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_room_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_enter_game_room : public ::google::protobuf::Message {
 public:
  packetc2l_enter_game_room();
  virtual ~packetc2l_enter_game_room();

  packetc2l_enter_game_room(const packetc2l_enter_game_room& from);

  inline packetc2l_enter_game_room& operator=(const packetc2l_enter_game_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_enter_game_room& default_instance();

  void Swap(packetc2l_enter_game_room* other);

  // implements Message ----------------------------------------------

  packetc2l_enter_game_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_enter_game_room& from);
  void MergeFrom(const packetc2l_enter_game_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_enter_game_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 room_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_enter_game_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_enter_game_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_enter_game_room_result();
  virtual ~packetl2c_enter_game_room_result();

  packetl2c_enter_game_room_result(const packetl2c_enter_game_room_result& from);

  inline packetl2c_enter_game_room_result& operator=(const packetl2c_enter_game_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_enter_game_room_result& default_instance();

  void Swap(packetl2c_enter_game_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_enter_game_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_enter_game_room_result& from);
  void MergeFrom(const packetl2c_enter_game_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // repeated .game_showhand_protocols.msg_table_info table_list = 4;
  inline int table_list_size() const;
  inline void clear_table_list();
  static const int kTableListFieldNumber = 4;
  inline const ::game_showhand_protocols::msg_table_info& table_list(int index) const;
  inline ::game_showhand_protocols::msg_table_info* mutable_table_list(int index);
  inline ::game_showhand_protocols::msg_table_info* add_table_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >&
      table_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >*
      mutable_table_list();

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_enter_game_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info > table_list_;
  ::google::protobuf::int32 room_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_enter_game_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_quit_game_room : public ::google::protobuf::Message {
 public:
  packetc2l_quit_game_room();
  virtual ~packetc2l_quit_game_room();

  packetc2l_quit_game_room(const packetc2l_quit_game_room& from);

  inline packetc2l_quit_game_room& operator=(const packetc2l_quit_game_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_quit_game_room& default_instance();

  void Swap(packetc2l_quit_game_room* other);

  // implements Message ----------------------------------------------

  packetc2l_quit_game_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_quit_game_room& from);
  void MergeFrom(const packetc2l_quit_game_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_game_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_quit_game_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_quit_game_room* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_quit_game_room_result : public ::google::protobuf::Message {
 public:
  packetl2c_quit_game_room_result();
  virtual ~packetl2c_quit_game_room_result();

  packetl2c_quit_game_room_result(const packetl2c_quit_game_room_result& from);

  inline packetl2c_quit_game_room_result& operator=(const packetl2c_quit_game_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_quit_game_room_result& default_instance();

  void Swap(packetl2c_quit_game_room_result* other);

  // implements Message ----------------------------------------------

  packetl2c_quit_game_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_quit_game_room_result& from);
  void MergeFrom(const packetl2c_quit_game_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_game_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // repeated int32 room_ids = 3;
  inline int room_ids_size() const;
  inline void clear_room_ids();
  static const int kRoomIdsFieldNumber = 3;
  inline ::google::protobuf::int32 room_ids(int index) const;
  inline void set_room_ids(int index, ::google::protobuf::int32 value);
  inline void add_room_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      room_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_room_ids();

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_quit_game_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > room_ids_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_quit_game_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_choose_desk : public ::google::protobuf::Message {
 public:
  packetc2l_choose_desk();
  virtual ~packetc2l_choose_desk();

  packetc2l_choose_desk(const packetc2l_choose_desk& from);

  inline packetc2l_choose_desk& operator=(const packetc2l_choose_desk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_choose_desk& default_instance();

  void Swap(packetc2l_choose_desk* other);

  // implements Message ----------------------------------------------

  packetc2l_choose_desk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_choose_desk& from);
  void MergeFrom(const packetc2l_choose_desk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_choose_desk];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_choose_desk)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 table_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_choose_desk* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_choose_desk_result : public ::google::protobuf::Message {
 public:
  packetl2c_choose_desk_result();
  virtual ~packetl2c_choose_desk_result();

  packetl2c_choose_desk_result(const packetl2c_choose_desk_result& from);

  inline packetl2c_choose_desk_result& operator=(const packetl2c_choose_desk_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_choose_desk_result& default_instance();

  void Swap(packetl2c_choose_desk_result* other);

  // implements Message ----------------------------------------------

  packetl2c_choose_desk_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_choose_desk_result& from);
  void MergeFrom(const packetl2c_choose_desk_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_choose_desk_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional .game_showhand_protocols.msg_table_info table_info = 3;
  inline bool has_table_info() const;
  inline void clear_table_info();
  static const int kTableInfoFieldNumber = 3;
  inline const ::game_showhand_protocols::msg_table_info& table_info() const;
  inline ::game_showhand_protocols::msg_table_info* mutable_table_info();
  inline ::game_showhand_protocols::msg_table_info* release_table_info();
  inline void set_allocated_table_info(::game_showhand_protocols::msg_table_info* table_info);

  // optional int32 room_id = 4;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 4;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_choose_desk_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_table_info();
  inline void clear_has_table_info();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  ::game_showhand_protocols::msg_table_info* table_info_;
  ::google::protobuf::int32 room_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_choose_desk_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_get_table_scene_info : public ::google::protobuf::Message {
 public:
  packetc2l_get_table_scene_info();
  virtual ~packetc2l_get_table_scene_info();

  packetc2l_get_table_scene_info(const packetc2l_get_table_scene_info& from);

  inline packetc2l_get_table_scene_info& operator=(const packetc2l_get_table_scene_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_get_table_scene_info& default_instance();

  void Swap(packetc2l_get_table_scene_info* other);

  // implements Message ----------------------------------------------

  packetc2l_get_table_scene_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_get_table_scene_info& from);
  void MergeFrom(const packetc2l_get_table_scene_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_get_table_scene_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_get_table_scene_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_get_table_scene_result : public ::google::protobuf::Message {
 public:
  packetl2c_get_table_scene_result();
  virtual ~packetl2c_get_table_scene_result();

  packetl2c_get_table_scene_result(const packetl2c_get_table_scene_result& from);

  inline packetl2c_get_table_scene_result& operator=(const packetl2c_get_table_scene_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_get_table_scene_result& default_instance();

  void Swap(packetl2c_get_table_scene_result* other);

  // implements Message ----------------------------------------------

  packetl2c_get_table_scene_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_get_table_scene_result& from);
  void MergeFrom(const packetl2c_get_table_scene_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_scene_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .game_showhand_protocols.msg_table_info table_info = 2;
  inline bool has_table_info() const;
  inline void clear_table_info();
  static const int kTableInfoFieldNumber = 2;
  inline const ::game_showhand_protocols::msg_table_info& table_info() const;
  inline ::game_showhand_protocols::msg_table_info* mutable_table_info();
  inline ::game_showhand_protocols::msg_table_info* release_table_info();
  inline void set_allocated_table_info(::game_showhand_protocols::msg_table_info* table_info);

  // repeated .game_showhand_protocols.p_bet_state bet_state = 3;
  inline int bet_state_size() const;
  inline void clear_bet_state();
  static const int kBetStateFieldNumber = 3;
  inline const ::game_showhand_protocols::p_bet_state& bet_state(int index) const;
  inline ::game_showhand_protocols::p_bet_state* mutable_bet_state(int index);
  inline ::game_showhand_protocols::p_bet_state* add_bet_state();
  inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
      bet_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
      mutable_bet_state();

  // optional int32 bet_time = 4;
  inline bool has_bet_time() const;
  inline void clear_bet_time();
  static const int kBetTimeFieldNumber = 4;
  inline ::google::protobuf::int32 bet_time() const;
  inline void set_bet_time(::google::protobuf::int32 value);

  // optional int64 left_betcount = 5;
  inline bool has_left_betcount() const;
  inline void clear_left_betcount();
  static const int kLeftBetcountFieldNumber = 5;
  inline ::google::protobuf::int64 left_betcount() const;
  inline void set_left_betcount(::google::protobuf::int64 value);

  // optional int64 right_betcount = 6;
  inline bool has_right_betcount() const;
  inline void clear_right_betcount();
  static const int kRightBetcountFieldNumber = 6;
  inline ::google::protobuf::int64 right_betcount() const;
  inline void set_right_betcount(::google::protobuf::int64 value);

  // optional int64 minBetCount = 7;
  inline bool has_minbetcount() const;
  inline void clear_minbetcount();
  static const int kMinBetCountFieldNumber = 7;
  inline ::google::protobuf::int64 minbetcount() const;
  inline void set_minbetcount(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_get_table_scene_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_table_info();
  inline void clear_has_table_info();
  inline void set_has_bet_time();
  inline void clear_has_bet_time();
  inline void set_has_left_betcount();
  inline void clear_has_left_betcount();
  inline void set_has_right_betcount();
  inline void clear_has_right_betcount();
  inline void set_has_minbetcount();
  inline void clear_has_minbetcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::game_showhand_protocols::msg_table_info* table_info_;
  int packet_id_;
  ::google::protobuf::int32 bet_time_;
  ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state > bet_state_;
  ::google::protobuf::int64 left_betcount_;
  ::google::protobuf::int64 right_betcount_;
  ::google::protobuf::int64 minbetcount_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_get_table_scene_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_quit_desk : public ::google::protobuf::Message {
 public:
  packetc2l_quit_desk();
  virtual ~packetc2l_quit_desk();

  packetc2l_quit_desk(const packetc2l_quit_desk& from);

  inline packetc2l_quit_desk& operator=(const packetc2l_quit_desk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_quit_desk& default_instance();

  void Swap(packetc2l_quit_desk* other);

  // implements Message ----------------------------------------------

  packetc2l_quit_desk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_quit_desk& from);
  void MergeFrom(const packetc2l_quit_desk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_desk];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_quit_desk)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_quit_desk* default_instance_;
};
// -------------------------------------------------------------------

class packet_l2c_quit_desk_result : public ::google::protobuf::Message {
 public:
  packet_l2c_quit_desk_result();
  virtual ~packet_l2c_quit_desk_result();

  packet_l2c_quit_desk_result(const packet_l2c_quit_desk_result& from);

  inline packet_l2c_quit_desk_result& operator=(const packet_l2c_quit_desk_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_l2c_quit_desk_result& default_instance();

  void Swap(packet_l2c_quit_desk_result* other);

  // implements Message ----------------------------------------------

  packet_l2c_quit_desk_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_l2c_quit_desk_result& from);
  void MergeFrom(const packet_l2c_quit_desk_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_desk_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // repeated .game_showhand_protocols.msg_table_info table_list = 3;
  inline int table_list_size() const;
  inline void clear_table_list();
  static const int kTableListFieldNumber = 3;
  inline const ::game_showhand_protocols::msg_table_info& table_list(int index) const;
  inline ::game_showhand_protocols::msg_table_info* mutable_table_list(int index);
  inline ::game_showhand_protocols::msg_table_info* add_table_list();
  inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >&
      table_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >*
      mutable_table_list();

  // optional int32 room_id = 4;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 4;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packet_l2c_quit_desk_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info > table_list_;
  ::google::protobuf::int32 room_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_l2c_quit_desk_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_player_ready : public ::google::protobuf::Message {
 public:
  packetc2l_player_ready();
  virtual ~packetc2l_player_ready();

  packetc2l_player_ready(const packetc2l_player_ready& from);

  inline packetc2l_player_ready& operator=(const packetc2l_player_ready& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_player_ready& default_instance();

  void Swap(packetc2l_player_ready* other);

  // implements Message ----------------------------------------------

  packetc2l_player_ready* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_player_ready& from);
  void MergeFrom(const packetc2l_player_ready& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_player_ready];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_player_ready)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_player_ready* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_player_ready_result : public ::google::protobuf::Message {
 public:
  packetl2c_player_ready_result();
  virtual ~packetl2c_player_ready_result();

  packetl2c_player_ready_result(const packetl2c_player_ready_result& from);

  inline packetl2c_player_ready_result& operator=(const packetl2c_player_ready_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_player_ready_result& default_instance();

  void Swap(packetl2c_player_ready_result* other);

  // implements Message ----------------------------------------------

  packetl2c_player_ready_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_player_ready_result& from);
  void MergeFrom(const packetl2c_player_ready_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_ready_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_player_ready_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  ::google::protobuf::int32 player_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_player_ready_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_view_card : public ::google::protobuf::Message {
 public:
  packetc2l_view_card();
  virtual ~packetc2l_view_card();

  packetc2l_view_card(const packetc2l_view_card& from);

  inline packetc2l_view_card& operator=(const packetc2l_view_card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_view_card& default_instance();

  void Swap(packetc2l_view_card* other);

  // implements Message ----------------------------------------------

  packetc2l_view_card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_view_card& from);
  void MergeFrom(const packetc2l_view_card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_view_card];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_view_card)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_view_card* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_view_card_result : public ::google::protobuf::Message {
 public:
  packetl2c_view_card_result();
  virtual ~packetl2c_view_card_result();

  packetl2c_view_card_result(const packetl2c_view_card_result& from);

  inline packetl2c_view_card_result& operator=(const packetl2c_view_card_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_view_card_result& default_instance();

  void Swap(packetl2c_view_card_result* other);

  // implements Message ----------------------------------------------

  packetl2c_view_card_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_view_card_result& from);
  void MergeFrom(const packetl2c_view_card_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_view_card_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_view_card_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 player_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_view_card_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_bet_info : public ::google::protobuf::Message {
 public:
  packetc2l_bet_info();
  virtual ~packetc2l_bet_info();

  packetc2l_bet_info(const packetc2l_bet_info& from);

  inline packetc2l_bet_info& operator=(const packetc2l_bet_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_bet_info& default_instance();

  void Swap(packetc2l_bet_info* other);

  // implements Message ----------------------------------------------

  packetc2l_bet_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_bet_info& from);
  void MergeFrom(const packetc2l_bet_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .game_showhand_protocols.msg_bet_info bet_info = 2;
  inline bool has_bet_info() const;
  inline void clear_bet_info();
  static const int kBetInfoFieldNumber = 2;
  inline const ::game_showhand_protocols::msg_bet_info& bet_info() const;
  inline ::game_showhand_protocols::msg_bet_info* mutable_bet_info();
  inline ::game_showhand_protocols::msg_bet_info* release_bet_info();
  inline void set_allocated_bet_info(::game_showhand_protocols::msg_bet_info* bet_info);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_bet_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_bet_info();
  inline void clear_has_bet_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::game_showhand_protocols::msg_bet_info* bet_info_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_bet_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_bet_info_result : public ::google::protobuf::Message {
 public:
  packetl2c_bet_info_result();
  virtual ~packetl2c_bet_info_result();

  packetl2c_bet_info_result(const packetl2c_bet_info_result& from);

  inline packetl2c_bet_info_result& operator=(const packetl2c_bet_info_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_bet_info_result& default_instance();

  void Swap(packetl2c_bet_info_result* other);

  // implements Message ----------------------------------------------

  packetl2c_bet_info_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_bet_info_result& from);
  void MergeFrom(const packetl2c_bet_info_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_bet_info_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_bet_info_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_start_game_message : public ::google::protobuf::Message {
 public:
  packetl2c_notice_start_game_message();
  virtual ~packetl2c_notice_start_game_message();

  packetl2c_notice_start_game_message(const packetl2c_notice_start_game_message& from);

  inline packetl2c_notice_start_game_message& operator=(const packetl2c_notice_start_game_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_start_game_message& default_instance();

  void Swap(packetl2c_notice_start_game_message* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_start_game_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_start_game_message& from);
  void MergeFrom(const packetl2c_notice_start_game_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_game_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int64 minBetCount = 2;
  inline bool has_minbetcount() const;
  inline void clear_minbetcount();
  static const int kMinBetCountFieldNumber = 2;
  inline ::google::protobuf::int64 minbetcount() const;
  inline void set_minbetcount(::google::protobuf::int64 value);

  // optional .game_showhand_protocols.msg_player_info player_left = 3;
  inline bool has_player_left() const;
  inline void clear_player_left();
  static const int kPlayerLeftFieldNumber = 3;
  inline const ::game_showhand_protocols::msg_player_info& player_left() const;
  inline ::game_showhand_protocols::msg_player_info* mutable_player_left();
  inline ::game_showhand_protocols::msg_player_info* release_player_left();
  inline void set_allocated_player_left(::game_showhand_protocols::msg_player_info* player_left);

  // optional .game_showhand_protocols.msg_player_info player_right = 4;
  inline bool has_player_right() const;
  inline void clear_player_right();
  static const int kPlayerRightFieldNumber = 4;
  inline const ::game_showhand_protocols::msg_player_info& player_right() const;
  inline ::game_showhand_protocols::msg_player_info* mutable_player_right();
  inline ::game_showhand_protocols::msg_player_info* release_player_right();
  inline void set_allocated_player_right(::game_showhand_protocols::msg_player_info* player_right);

  // repeated .game_showhand_protocols.p_bet_state bet_state = 5;
  inline int bet_state_size() const;
  inline void clear_bet_state();
  static const int kBetStateFieldNumber = 5;
  inline const ::game_showhand_protocols::p_bet_state& bet_state(int index) const;
  inline ::game_showhand_protocols::p_bet_state* mutable_bet_state(int index);
  inline ::game_showhand_protocols::p_bet_state* add_bet_state();
  inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
      bet_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
      mutable_bet_state();

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_start_game_message)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_minbetcount();
  inline void clear_has_minbetcount();
  inline void set_has_player_left();
  inline void clear_has_player_left();
  inline void set_has_player_right();
  inline void clear_has_player_right();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 minbetcount_;
  ::game_showhand_protocols::msg_player_info* player_left_;
  ::game_showhand_protocols::msg_player_info* player_right_;
  ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state > bet_state_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_start_game_message* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_sendcard_message : public ::google::protobuf::Message {
 public:
  packetl2c_notice_sendcard_message();
  virtual ~packetl2c_notice_sendcard_message();

  packetl2c_notice_sendcard_message(const packetl2c_notice_sendcard_message& from);

  inline packetl2c_notice_sendcard_message& operator=(const packetl2c_notice_sendcard_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_sendcard_message& default_instance();

  void Swap(packetl2c_notice_sendcard_message* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_sendcard_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_sendcard_message& from);
  void MergeFrom(const packetl2c_notice_sendcard_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_sendcard_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 player_left = 2;
  inline bool has_player_left() const;
  inline void clear_player_left();
  static const int kPlayerLeftFieldNumber = 2;
  inline ::google::protobuf::int32 player_left() const;
  inline void set_player_left(::google::protobuf::int32 value);

  // optional int32 player_right = 3;
  inline bool has_player_right() const;
  inline void clear_player_right();
  static const int kPlayerRightFieldNumber = 3;
  inline ::google::protobuf::int32 player_right() const;
  inline void set_player_right(::google::protobuf::int32 value);

  // repeated .game_showhand_protocols.p_bet_state bet_state = 4;
  inline int bet_state_size() const;
  inline void clear_bet_state();
  static const int kBetStateFieldNumber = 4;
  inline const ::game_showhand_protocols::p_bet_state& bet_state(int index) const;
  inline ::game_showhand_protocols::p_bet_state* mutable_bet_state(int index);
  inline ::game_showhand_protocols::p_bet_state* add_bet_state();
  inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
      bet_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
      mutable_bet_state();

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_sendcard_message)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_left();
  inline void clear_has_player_left();
  inline void set_has_player_right();
  inline void clear_has_player_right();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 player_left_;
  ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state > bet_state_;
  ::google::protobuf::int32 player_right_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_sendcard_message* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_bet : public ::google::protobuf::Message {
 public:
  packetl2c_notice_bet();
  virtual ~packetl2c_notice_bet();

  packetl2c_notice_bet(const packetl2c_notice_bet& from);

  inline packetl2c_notice_bet& operator=(const packetl2c_notice_bet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_bet& default_instance();

  void Swap(packetl2c_notice_bet* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_bet& from);
  void MergeFrom(const packetl2c_notice_bet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_bet_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // repeated .game_showhand_protocols.p_bet_state bet_state = 2;
  inline int bet_state_size() const;
  inline void clear_bet_state();
  static const int kBetStateFieldNumber = 2;
  inline const ::game_showhand_protocols::p_bet_state& bet_state(int index) const;
  inline ::game_showhand_protocols::p_bet_state* mutable_bet_state(int index);
  inline ::game_showhand_protocols::p_bet_state* add_bet_state();
  inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
      bet_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
      mutable_bet_state();

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_bet)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state > bet_state_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_bet* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_award_message : public ::google::protobuf::Message {
 public:
  packetl2c_notice_award_message();
  virtual ~packetl2c_notice_award_message();

  packetl2c_notice_award_message(const packetl2c_notice_award_message& from);

  inline packetl2c_notice_award_message& operator=(const packetl2c_notice_award_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_award_message& default_instance();

  void Swap(packetl2c_notice_award_message* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_award_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_award_message& from);
  void MergeFrom(const packetl2c_notice_award_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_award_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .game_showhand_protocols.msg_player_result player_left = 2;
  inline bool has_player_left() const;
  inline void clear_player_left();
  static const int kPlayerLeftFieldNumber = 2;
  inline const ::game_showhand_protocols::msg_player_result& player_left() const;
  inline ::game_showhand_protocols::msg_player_result* mutable_player_left();
  inline ::game_showhand_protocols::msg_player_result* release_player_left();
  inline void set_allocated_player_left(::game_showhand_protocols::msg_player_result* player_left);

  // optional .game_showhand_protocols.msg_player_result player_right = 3;
  inline bool has_player_right() const;
  inline void clear_player_right();
  static const int kPlayerRightFieldNumber = 3;
  inline const ::game_showhand_protocols::msg_player_result& player_right() const;
  inline ::game_showhand_protocols::msg_player_result* mutable_player_right();
  inline ::game_showhand_protocols::msg_player_result* release_player_right();
  inline void set_allocated_player_right(::game_showhand_protocols::msg_player_result* player_right);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_award_message)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_player_left();
  inline void clear_has_player_left();
  inline void set_has_player_right();
  inline void clear_has_player_right();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::game_showhand_protocols::msg_player_result* player_left_;
  ::game_showhand_protocols::msg_player_result* player_right_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_award_message* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_join_table : public ::google::protobuf::Message {
 public:
  packetl2c_notice_join_table();
  virtual ~packetl2c_notice_join_table();

  packetl2c_notice_join_table(const packetl2c_notice_join_table& from);

  inline packetl2c_notice_join_table& operator=(const packetl2c_notice_join_table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_join_table& default_instance();

  void Swap(packetl2c_notice_join_table* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_join_table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_join_table& from);
  void MergeFrom(const packetl2c_notice_join_table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_join_table_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // optional .game_showhand_protocols.msg_player_info player_info = 3;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 3;
  inline const ::game_showhand_protocols::msg_player_info& player_info() const;
  inline ::game_showhand_protocols::msg_player_info* mutable_player_info();
  inline ::game_showhand_protocols::msg_player_info* release_player_info();
  inline void set_allocated_player_info(::game_showhand_protocols::msg_player_info* player_info);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_join_table)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_player_info();
  inline void clear_has_player_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 table_id_;
  ::game_showhand_protocols::msg_player_info* player_info_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_join_table* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_leave_table : public ::google::protobuf::Message {
 public:
  packetl2c_notice_leave_table();
  virtual ~packetl2c_notice_leave_table();

  packetl2c_notice_leave_table(const packetl2c_notice_leave_table& from);

  inline packetl2c_notice_leave_table& operator=(const packetl2c_notice_leave_table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_leave_table& default_instance();

  void Swap(packetl2c_notice_leave_table* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_leave_table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_leave_table& from);
  void MergeFrom(const packetl2c_notice_leave_table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_leave_table_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::int32 table_id() const;
  inline void set_table_id(::google::protobuf::int32 value);

  // optional int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_leave_table)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 table_id_;
  ::google::protobuf::int32 player_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_leave_table* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_table_player_state : public ::google::protobuf::Message {
 public:
  packetl2c_notice_table_player_state();
  virtual ~packetl2c_notice_table_player_state();

  packetl2c_notice_table_player_state(const packetl2c_notice_table_player_state& from);

  inline packetl2c_notice_table_player_state& operator=(const packetl2c_notice_table_player_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_table_player_state& default_instance();

  void Swap(packetl2c_notice_table_player_state* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_table_player_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_table_player_state& from);
  void MergeFrom(const packetl2c_notice_table_player_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_table_player_message];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional uint32 table_id = 2;
  inline bool has_table_id() const;
  inline void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  inline ::google::protobuf::uint32 table_id() const;
  inline void set_table_id(::google::protobuf::uint32 value);

  // optional uint32 left_state = 3;
  inline bool has_left_state() const;
  inline void clear_left_state();
  static const int kLeftStateFieldNumber = 3;
  inline ::google::protobuf::uint32 left_state() const;
  inline void set_left_state(::google::protobuf::uint32 value);

  // optional uint32 right_state = 4;
  inline bool has_right_state() const;
  inline void clear_right_state();
  static const int kRightStateFieldNumber = 4;
  inline ::google::protobuf::uint32 right_state() const;
  inline void set_right_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_table_player_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_table_id();
  inline void clear_has_table_id();
  inline void set_has_left_state();
  inline void clear_has_left_state();
  inline void set_has_right_state();
  inline void clear_has_right_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::uint32 table_id_;
  ::google::protobuf::uint32 left_state_;
  ::google::protobuf::uint32 right_state_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_table_player_state* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_check_state : public ::google::protobuf::Message {
 public:
  packetc2l_check_state();
  virtual ~packetc2l_check_state();

  packetc2l_check_state(const packetc2l_check_state& from);

  inline packetc2l_check_state& operator=(const packetc2l_check_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_check_state& default_instance();

  void Swap(packetc2l_check_state* other);

  // implements Message ----------------------------------------------

  packetc2l_check_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_check_state& from);
  void MergeFrom(const packetc2l_check_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_check_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_check_state* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_check_state_result : public ::google::protobuf::Message {
 public:
  packetl2c_check_state_result();
  virtual ~packetl2c_check_state_result();

  packetl2c_check_state_result(const packetl2c_check_state_result& from);

  inline packetl2c_check_state_result& operator=(const packetl2c_check_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_check_state_result& default_instance();

  void Swap(packetl2c_check_state_result* other);

  // implements Message ----------------------------------------------

  packetl2c_check_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_check_state_result& from);
  void MergeFrom(const packetl2c_check_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_check_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::uint32 state_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_check_state_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_gm_all_card_info : public ::google::protobuf::Message {
 public:
  packetl2c_notice_gm_all_card_info();
  virtual ~packetl2c_notice_gm_all_card_info();

  packetl2c_notice_gm_all_card_info(const packetl2c_notice_gm_all_card_info& from);

  inline packetl2c_notice_gm_all_card_info& operator=(const packetl2c_notice_gm_all_card_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_gm_all_card_info& default_instance();

  void Swap(packetl2c_notice_gm_all_card_info* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_gm_all_card_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_gm_all_card_info& from);
  void MergeFrom(const packetl2c_notice_gm_all_card_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_cards_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // repeated int32 left_cards = 2;
  inline int left_cards_size() const;
  inline void clear_left_cards();
  static const int kLeftCardsFieldNumber = 2;
  inline ::google::protobuf::int32 left_cards(int index) const;
  inline void set_left_cards(int index, ::google::protobuf::int32 value);
  inline void add_left_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      left_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_left_cards();

  // repeated int32 right_cards = 3;
  inline int right_cards_size() const;
  inline void clear_right_cards();
  static const int kRightCardsFieldNumber = 3;
  inline ::google::protobuf::int32 right_cards(int index) const;
  inline void set_right_cards(int index, ::google::protobuf::int32 value);
  inline void add_right_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      right_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_right_cards();

  // optional bool orleft = 4;
  inline bool has_orleft() const;
  inline void clear_orleft();
  static const int kOrleftFieldNumber = 4;
  inline bool orleft() const;
  inline void set_orleft(bool value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_gm_all_card_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_orleft();
  inline void clear_has_orleft();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > left_cards_;
  int packet_id_;
  bool orleft_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > right_cards_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_gm_all_card_info* default_instance_;
};
// -------------------------------------------------------------------

class packetc2l_gm_change_result : public ::google::protobuf::Message {
 public:
  packetc2l_gm_change_result();
  virtual ~packetc2l_gm_change_result();

  packetc2l_gm_change_result(const packetc2l_gm_change_result& from);

  inline packetc2l_gm_change_result& operator=(const packetc2l_gm_change_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2l_gm_change_result& default_instance();

  void Swap(packetc2l_gm_change_result* other);

  // implements Message ----------------------------------------------

  packetc2l_gm_change_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2l_gm_change_result& from);
  void MergeFrom(const packetc2l_gm_change_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_change_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int32 command = 2;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 2;
  inline ::google::protobuf::int32 command() const;
  inline void set_command(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetc2l_gm_change_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_command();
  inline void clear_has_command();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 command_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2l_gm_change_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_gm_change_result : public ::google::protobuf::Message {
 public:
  packetl2c_gm_change_result();
  virtual ~packetl2c_gm_change_result();

  packetl2c_gm_change_result(const packetl2c_gm_change_result& from);

  inline packetl2c_gm_change_result& operator=(const packetl2c_gm_change_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_gm_change_result& default_instance();

  void Swap(packetl2c_gm_change_result* other);

  // implements Message ----------------------------------------------

  packetl2c_gm_change_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_gm_change_result& from);
  void MergeFrom(const packetl2c_gm_change_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_change_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_gm_change_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_gm_change_result* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_gm_stock_info : public ::google::protobuf::Message {
 public:
  packetl2c_notice_gm_stock_info();
  virtual ~packetl2c_notice_gm_stock_info();

  packetl2c_notice_gm_stock_info(const packetl2c_notice_gm_stock_info& from);

  inline packetl2c_notice_gm_stock_info& operator=(const packetl2c_notice_gm_stock_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_gm_stock_info& default_instance();

  void Swap(packetl2c_notice_gm_stock_info* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_gm_stock_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_gm_stock_info& from);
  void MergeFrom(const packetl2c_notice_gm_stock_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_stock_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int64 stock_total_count = 2;
  inline bool has_stock_total_count() const;
  inline void clear_stock_total_count();
  static const int kStockTotalCountFieldNumber = 2;
  inline ::google::protobuf::int64 stock_total_count() const;
  inline void set_stock_total_count(::google::protobuf::int64 value);

  // optional int64 stock_add_count = 3;
  inline bool has_stock_add_count() const;
  inline void clear_stock_add_count();
  static const int kStockAddCountFieldNumber = 3;
  inline ::google::protobuf::int64 stock_add_count() const;
  inline void set_stock_add_count(::google::protobuf::int64 value);

  // optional double stock_earnRate = 4;
  inline bool has_stock_earnrate() const;
  inline void clear_stock_earnrate();
  static const int kStockEarnRateFieldNumber = 4;
  inline double stock_earnrate() const;
  inline void set_stock_earnrate(double value);

  // optional int64 stock_total_earnRate_income = 5;
  inline bool has_stock_total_earnrate_income() const;
  inline void clear_stock_total_earnrate_income();
  static const int kStockTotalEarnRateIncomeFieldNumber = 5;
  inline ::google::protobuf::int64 stock_total_earnrate_income() const;
  inline void set_stock_total_earnrate_income(::google::protobuf::int64 value);

  // optional int64 stock_add_earnRate_income = 6;
  inline bool has_stock_add_earnrate_income() const;
  inline void clear_stock_add_earnrate_income();
  static const int kStockAddEarnRateIncomeFieldNumber = 6;
  inline ::google::protobuf::int64 stock_add_earnrate_income() const;
  inline void set_stock_add_earnrate_income(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_gm_stock_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_stock_total_count();
  inline void clear_has_stock_total_count();
  inline void set_has_stock_add_count();
  inline void clear_has_stock_add_count();
  inline void set_has_stock_earnrate();
  inline void clear_has_stock_earnrate();
  inline void set_has_stock_total_earnrate_income();
  inline void clear_has_stock_total_earnrate_income();
  inline void set_has_stock_add_earnrate_income();
  inline void clear_has_stock_add_earnrate_income();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 stock_total_count_;
  ::google::protobuf::int64 stock_add_count_;
  double stock_earnrate_;
  ::google::protobuf::int64 stock_total_earnrate_income_;
  ::google::protobuf::int64 stock_add_earnrate_income_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_gm_stock_info* default_instance_;
};
// -------------------------------------------------------------------

class packetl2c_notice_gm_luck_info : public ::google::protobuf::Message {
 public:
  packetl2c_notice_gm_luck_info();
  virtual ~packetl2c_notice_gm_luck_info();

  packetl2c_notice_gm_luck_info(const packetl2c_notice_gm_luck_info& from);

  inline packetl2c_notice_gm_luck_info& operator=(const packetl2c_notice_gm_luck_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetl2c_notice_gm_luck_info& default_instance();

  void Swap(packetl2c_notice_gm_luck_info* other);

  // implements Message ----------------------------------------------

  packetl2c_notice_gm_luck_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetl2c_notice_gm_luck_info& from);
  void MergeFrom(const packetl2c_notice_gm_luck_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_luck_info];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::game_showhand_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::game_showhand_protocols::e_server_msg_type value);

  // optional int64 Total_Luck = 2;
  inline bool has_total_luck() const;
  inline void clear_total_luck();
  static const int kTotalLuckFieldNumber = 2;
  inline ::google::protobuf::int64 total_luck() const;
  inline void set_total_luck(::google::protobuf::int64 value);

  // optional int64 add_luck = 3;
  inline bool has_add_luck() const;
  inline void clear_add_luck();
  static const int kAddLuckFieldNumber = 3;
  inline ::google::protobuf::int64 add_luck() const;
  inline void set_add_luck(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:game_showhand_protocols.packetl2c_notice_gm_luck_info)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_total_luck();
  inline void clear_has_total_luck();
  inline void set_has_add_luck();
  inline void clear_has_add_luck();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 total_luck_;
  ::google::protobuf::int64 add_luck_;
  int packet_id_;
  friend void  protobuf_AddDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_game_5fshowhand_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_game_5fshowhand_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetl2c_notice_gm_luck_info* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2l_get_room_info

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_room_info];
inline bool packetc2l_get_room_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_room_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_room_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_room_info::clear_packet_id() {
  packet_id_ = 10001;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_get_room_info::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetc2l_get_room_info.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_room_info::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetc2l_get_room_info.packet_id)
}

// -------------------------------------------------------------------

// packetl2c_get_room_info_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_room_info_result];
inline bool packetl2c_get_room_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_room_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_room_info_result::clear_packet_id() {
  packet_id_ = 15001;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_get_room_info_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_get_room_info_result.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_room_info_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_get_room_info_result.packet_id)
}

// repeated int32 room_ids = 2;
inline int packetl2c_get_room_info_result::room_ids_size() const {
  return room_ids_.size();
}
inline void packetl2c_get_room_info_result::clear_room_ids() {
  room_ids_.Clear();
}
inline ::google::protobuf::int32 packetl2c_get_room_info_result::room_ids(int index) const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_get_room_info_result.room_ids)
  return room_ids_.Get(index);
}
inline void packetl2c_get_room_info_result::set_room_ids(int index, ::google::protobuf::int32 value) {
  room_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_get_room_info_result.room_ids)
}
inline void packetl2c_get_room_info_result::add_room_ids(::google::protobuf::int32 value) {
  room_ids_.Add(value);
  // @@protoc_insertion_point(field_add:game_showhand_protocols.packetl2c_get_room_info_result.room_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_get_room_info_result::room_ids() const {
  // @@protoc_insertion_point(field_list:game_showhand_protocols.packetl2c_get_room_info_result.room_ids)
  return room_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_get_room_info_result::mutable_room_ids() {
  // @@protoc_insertion_point(field_mutable_list:game_showhand_protocols.packetl2c_get_room_info_result.room_ids)
  return &room_ids_;
}

// -------------------------------------------------------------------

// packetc2l_enter_game_room

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_enter_game_room];
inline bool packetc2l_enter_game_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_enter_game_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_enter_game_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_enter_game_room::clear_packet_id() {
  packet_id_ = 10002;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_enter_game_room::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetc2l_enter_game_room.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_enter_game_room::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetc2l_enter_game_room.packet_id)
}

// optional int32 room_id = 2;
inline bool packetc2l_enter_game_room::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_enter_game_room::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_enter_game_room::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_enter_game_room::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetc2l_enter_game_room::room_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetc2l_enter_game_room.room_id)
  return room_id_;
}
inline void packetc2l_enter_game_room::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetc2l_enter_game_room.room_id)
}

// -------------------------------------------------------------------

// packetl2c_enter_game_room_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_enter_game_room_result];
inline bool packetl2c_enter_game_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_enter_game_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_enter_game_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_enter_game_room_result::clear_packet_id() {
  packet_id_ = 15002;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_enter_game_room_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_enter_game_room_result.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_enter_game_room_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_enter_game_room_result.packet_id)
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool packetl2c_enter_game_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_enter_game_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_enter_game_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_enter_game_room_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_enter_game_room_result::result() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_enter_game_room_result.result)
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_enter_game_room_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_enter_game_room_result.result)
}

// optional int32 room_id = 3;
inline bool packetl2c_enter_game_room_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_enter_game_room_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_enter_game_room_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_enter_game_room_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetl2c_enter_game_room_result::room_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_enter_game_room_result.room_id)
  return room_id_;
}
inline void packetl2c_enter_game_room_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_enter_game_room_result.room_id)
}

// repeated .game_showhand_protocols.msg_table_info table_list = 4;
inline int packetl2c_enter_game_room_result::table_list_size() const {
  return table_list_.size();
}
inline void packetl2c_enter_game_room_result::clear_table_list() {
  table_list_.Clear();
}
inline const ::game_showhand_protocols::msg_table_info& packetl2c_enter_game_room_result::table_list(int index) const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_enter_game_room_result.table_list)
  return table_list_.Get(index);
}
inline ::game_showhand_protocols::msg_table_info* packetl2c_enter_game_room_result::mutable_table_list(int index) {
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.packetl2c_enter_game_room_result.table_list)
  return table_list_.Mutable(index);
}
inline ::game_showhand_protocols::msg_table_info* packetl2c_enter_game_room_result::add_table_list() {
  // @@protoc_insertion_point(field_add:game_showhand_protocols.packetl2c_enter_game_room_result.table_list)
  return table_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >&
packetl2c_enter_game_room_result::table_list() const {
  // @@protoc_insertion_point(field_list:game_showhand_protocols.packetl2c_enter_game_room_result.table_list)
  return table_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >*
packetl2c_enter_game_room_result::mutable_table_list() {
  // @@protoc_insertion_point(field_mutable_list:game_showhand_protocols.packetl2c_enter_game_room_result.table_list)
  return &table_list_;
}

// -------------------------------------------------------------------

// packetc2l_quit_game_room

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_game_room];
inline bool packetc2l_quit_game_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_quit_game_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_quit_game_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_quit_game_room::clear_packet_id() {
  packet_id_ = 10003;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_quit_game_room::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetc2l_quit_game_room.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_quit_game_room::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetc2l_quit_game_room.packet_id)
}

// -------------------------------------------------------------------

// packetl2c_quit_game_room_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_game_room_result];
inline bool packetl2c_quit_game_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_quit_game_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_quit_game_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_quit_game_room_result::clear_packet_id() {
  packet_id_ = 15009;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_quit_game_room_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_quit_game_room_result.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_quit_game_room_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_quit_game_room_result.packet_id)
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool packetl2c_quit_game_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_quit_game_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_quit_game_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_quit_game_room_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_quit_game_room_result::result() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_quit_game_room_result.result)
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_quit_game_room_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_quit_game_room_result.result)
}

// repeated int32 room_ids = 3;
inline int packetl2c_quit_game_room_result::room_ids_size() const {
  return room_ids_.size();
}
inline void packetl2c_quit_game_room_result::clear_room_ids() {
  room_ids_.Clear();
}
inline ::google::protobuf::int32 packetl2c_quit_game_room_result::room_ids(int index) const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_quit_game_room_result.room_ids)
  return room_ids_.Get(index);
}
inline void packetl2c_quit_game_room_result::set_room_ids(int index, ::google::protobuf::int32 value) {
  room_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_quit_game_room_result.room_ids)
}
inline void packetl2c_quit_game_room_result::add_room_ids(::google::protobuf::int32 value) {
  room_ids_.Add(value);
  // @@protoc_insertion_point(field_add:game_showhand_protocols.packetl2c_quit_game_room_result.room_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_quit_game_room_result::room_ids() const {
  // @@protoc_insertion_point(field_list:game_showhand_protocols.packetl2c_quit_game_room_result.room_ids)
  return room_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_quit_game_room_result::mutable_room_ids() {
  // @@protoc_insertion_point(field_mutable_list:game_showhand_protocols.packetl2c_quit_game_room_result.room_ids)
  return &room_ids_;
}

// -------------------------------------------------------------------

// packetc2l_choose_desk

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_choose_desk];
inline bool packetc2l_choose_desk::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_choose_desk::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_choose_desk::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_choose_desk::clear_packet_id() {
  packet_id_ = 10005;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_choose_desk::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetc2l_choose_desk.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_choose_desk::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetc2l_choose_desk.packet_id)
}

// optional int32 table_id = 2;
inline bool packetc2l_choose_desk::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_choose_desk::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_choose_desk::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_choose_desk::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 packetc2l_choose_desk::table_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetc2l_choose_desk.table_id)
  return table_id_;
}
inline void packetc2l_choose_desk::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetc2l_choose_desk.table_id)
}

// -------------------------------------------------------------------

// packetl2c_choose_desk_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_choose_desk_result];
inline bool packetl2c_choose_desk_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_choose_desk_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_choose_desk_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_choose_desk_result::clear_packet_id() {
  packet_id_ = 15004;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_choose_desk_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_choose_desk_result.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_choose_desk_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_choose_desk_result.packet_id)
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool packetl2c_choose_desk_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_choose_desk_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_choose_desk_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_choose_desk_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_choose_desk_result::result() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_choose_desk_result.result)
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_choose_desk_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_choose_desk_result.result)
}

// optional .game_showhand_protocols.msg_table_info table_info = 3;
inline bool packetl2c_choose_desk_result::has_table_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_choose_desk_result::set_has_table_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_choose_desk_result::clear_has_table_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_choose_desk_result::clear_table_info() {
  if (table_info_ != NULL) table_info_->::game_showhand_protocols::msg_table_info::Clear();
  clear_has_table_info();
}
inline const ::game_showhand_protocols::msg_table_info& packetl2c_choose_desk_result::table_info() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_choose_desk_result.table_info)
  return table_info_ != NULL ? *table_info_ : *default_instance_->table_info_;
}
inline ::game_showhand_protocols::msg_table_info* packetl2c_choose_desk_result::mutable_table_info() {
  set_has_table_info();
  if (table_info_ == NULL) table_info_ = new ::game_showhand_protocols::msg_table_info;
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.packetl2c_choose_desk_result.table_info)
  return table_info_;
}
inline ::game_showhand_protocols::msg_table_info* packetl2c_choose_desk_result::release_table_info() {
  clear_has_table_info();
  ::game_showhand_protocols::msg_table_info* temp = table_info_;
  table_info_ = NULL;
  return temp;
}
inline void packetl2c_choose_desk_result::set_allocated_table_info(::game_showhand_protocols::msg_table_info* table_info) {
  delete table_info_;
  table_info_ = table_info;
  if (table_info) {
    set_has_table_info();
  } else {
    clear_has_table_info();
  }
  // @@protoc_insertion_point(field_set_allocated:game_showhand_protocols.packetl2c_choose_desk_result.table_info)
}

// optional int32 room_id = 4;
inline bool packetl2c_choose_desk_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_choose_desk_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_choose_desk_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_choose_desk_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packetl2c_choose_desk_result::room_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_choose_desk_result.room_id)
  return room_id_;
}
inline void packetl2c_choose_desk_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_choose_desk_result.room_id)
}

// -------------------------------------------------------------------

// packetc2l_get_table_scene_info

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_get_table_scene_info];
inline bool packetc2l_get_table_scene_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_get_table_scene_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_get_table_scene_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_get_table_scene_info::clear_packet_id() {
  packet_id_ = 10006;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_get_table_scene_info::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetc2l_get_table_scene_info.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_get_table_scene_info::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetc2l_get_table_scene_info.packet_id)
}

// -------------------------------------------------------------------

// packetl2c_get_table_scene_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_get_table_scene_info];
inline bool packetl2c_get_table_scene_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_get_table_scene_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_get_table_scene_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_get_table_scene_result::clear_packet_id() {
  packet_id_ = 15005;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_get_table_scene_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_get_table_scene_result.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_get_table_scene_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_get_table_scene_result.packet_id)
}

// optional .game_showhand_protocols.msg_table_info table_info = 2;
inline bool packetl2c_get_table_scene_result::has_table_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_get_table_scene_result::set_has_table_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_get_table_scene_result::clear_has_table_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_get_table_scene_result::clear_table_info() {
  if (table_info_ != NULL) table_info_->::game_showhand_protocols::msg_table_info::Clear();
  clear_has_table_info();
}
inline const ::game_showhand_protocols::msg_table_info& packetl2c_get_table_scene_result::table_info() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_get_table_scene_result.table_info)
  return table_info_ != NULL ? *table_info_ : *default_instance_->table_info_;
}
inline ::game_showhand_protocols::msg_table_info* packetl2c_get_table_scene_result::mutable_table_info() {
  set_has_table_info();
  if (table_info_ == NULL) table_info_ = new ::game_showhand_protocols::msg_table_info;
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.packetl2c_get_table_scene_result.table_info)
  return table_info_;
}
inline ::game_showhand_protocols::msg_table_info* packetl2c_get_table_scene_result::release_table_info() {
  clear_has_table_info();
  ::game_showhand_protocols::msg_table_info* temp = table_info_;
  table_info_ = NULL;
  return temp;
}
inline void packetl2c_get_table_scene_result::set_allocated_table_info(::game_showhand_protocols::msg_table_info* table_info) {
  delete table_info_;
  table_info_ = table_info;
  if (table_info) {
    set_has_table_info();
  } else {
    clear_has_table_info();
  }
  // @@protoc_insertion_point(field_set_allocated:game_showhand_protocols.packetl2c_get_table_scene_result.table_info)
}

// repeated .game_showhand_protocols.p_bet_state bet_state = 3;
inline int packetl2c_get_table_scene_result::bet_state_size() const {
  return bet_state_.size();
}
inline void packetl2c_get_table_scene_result::clear_bet_state() {
  bet_state_.Clear();
}
inline const ::game_showhand_protocols::p_bet_state& packetl2c_get_table_scene_result::bet_state(int index) const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_get_table_scene_result.bet_state)
  return bet_state_.Get(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_get_table_scene_result::mutable_bet_state(int index) {
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.packetl2c_get_table_scene_result.bet_state)
  return bet_state_.Mutable(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_get_table_scene_result::add_bet_state() {
  // @@protoc_insertion_point(field_add:game_showhand_protocols.packetl2c_get_table_scene_result.bet_state)
  return bet_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
packetl2c_get_table_scene_result::bet_state() const {
  // @@protoc_insertion_point(field_list:game_showhand_protocols.packetl2c_get_table_scene_result.bet_state)
  return bet_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
packetl2c_get_table_scene_result::mutable_bet_state() {
  // @@protoc_insertion_point(field_mutable_list:game_showhand_protocols.packetl2c_get_table_scene_result.bet_state)
  return &bet_state_;
}

// optional int32 bet_time = 4;
inline bool packetl2c_get_table_scene_result::has_bet_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_get_table_scene_result::set_has_bet_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_get_table_scene_result::clear_has_bet_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_get_table_scene_result::clear_bet_time() {
  bet_time_ = 0;
  clear_has_bet_time();
}
inline ::google::protobuf::int32 packetl2c_get_table_scene_result::bet_time() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_get_table_scene_result.bet_time)
  return bet_time_;
}
inline void packetl2c_get_table_scene_result::set_bet_time(::google::protobuf::int32 value) {
  set_has_bet_time();
  bet_time_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_get_table_scene_result.bet_time)
}

// optional int64 left_betcount = 5;
inline bool packetl2c_get_table_scene_result::has_left_betcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_get_table_scene_result::set_has_left_betcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_get_table_scene_result::clear_has_left_betcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_get_table_scene_result::clear_left_betcount() {
  left_betcount_ = GOOGLE_LONGLONG(0);
  clear_has_left_betcount();
}
inline ::google::protobuf::int64 packetl2c_get_table_scene_result::left_betcount() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_get_table_scene_result.left_betcount)
  return left_betcount_;
}
inline void packetl2c_get_table_scene_result::set_left_betcount(::google::protobuf::int64 value) {
  set_has_left_betcount();
  left_betcount_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_get_table_scene_result.left_betcount)
}

// optional int64 right_betcount = 6;
inline bool packetl2c_get_table_scene_result::has_right_betcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_get_table_scene_result::set_has_right_betcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_get_table_scene_result::clear_has_right_betcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_get_table_scene_result::clear_right_betcount() {
  right_betcount_ = GOOGLE_LONGLONG(0);
  clear_has_right_betcount();
}
inline ::google::protobuf::int64 packetl2c_get_table_scene_result::right_betcount() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_get_table_scene_result.right_betcount)
  return right_betcount_;
}
inline void packetl2c_get_table_scene_result::set_right_betcount(::google::protobuf::int64 value) {
  set_has_right_betcount();
  right_betcount_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_get_table_scene_result.right_betcount)
}

// optional int64 minBetCount = 7;
inline bool packetl2c_get_table_scene_result::has_minbetcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetl2c_get_table_scene_result::set_has_minbetcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetl2c_get_table_scene_result::clear_has_minbetcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetl2c_get_table_scene_result::clear_minbetcount() {
  minbetcount_ = GOOGLE_LONGLONG(0);
  clear_has_minbetcount();
}
inline ::google::protobuf::int64 packetl2c_get_table_scene_result::minbetcount() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_get_table_scene_result.minBetCount)
  return minbetcount_;
}
inline void packetl2c_get_table_scene_result::set_minbetcount(::google::protobuf::int64 value) {
  set_has_minbetcount();
  minbetcount_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_get_table_scene_result.minBetCount)
}

// -------------------------------------------------------------------

// packetc2l_quit_desk

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_quit_desk];
inline bool packetc2l_quit_desk::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_quit_desk::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_quit_desk::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_quit_desk::clear_packet_id() {
  packet_id_ = 10007;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_quit_desk::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetc2l_quit_desk.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_quit_desk::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetc2l_quit_desk.packet_id)
}

// -------------------------------------------------------------------

// packet_l2c_quit_desk_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_quit_desk_result];
inline bool packet_l2c_quit_desk_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_l2c_quit_desk_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_l2c_quit_desk_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_l2c_quit_desk_result::clear_packet_id() {
  packet_id_ = 15010;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packet_l2c_quit_desk_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packet_l2c_quit_desk_result.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_l2c_quit_desk_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packet_l2c_quit_desk_result.packet_id)
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool packet_l2c_quit_desk_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_l2c_quit_desk_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_l2c_quit_desk_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_l2c_quit_desk_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packet_l2c_quit_desk_result::result() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packet_l2c_quit_desk_result.result)
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packet_l2c_quit_desk_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packet_l2c_quit_desk_result.result)
}

// repeated .game_showhand_protocols.msg_table_info table_list = 3;
inline int packet_l2c_quit_desk_result::table_list_size() const {
  return table_list_.size();
}
inline void packet_l2c_quit_desk_result::clear_table_list() {
  table_list_.Clear();
}
inline const ::game_showhand_protocols::msg_table_info& packet_l2c_quit_desk_result::table_list(int index) const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packet_l2c_quit_desk_result.table_list)
  return table_list_.Get(index);
}
inline ::game_showhand_protocols::msg_table_info* packet_l2c_quit_desk_result::mutable_table_list(int index) {
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.packet_l2c_quit_desk_result.table_list)
  return table_list_.Mutable(index);
}
inline ::game_showhand_protocols::msg_table_info* packet_l2c_quit_desk_result::add_table_list() {
  // @@protoc_insertion_point(field_add:game_showhand_protocols.packet_l2c_quit_desk_result.table_list)
  return table_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >&
packet_l2c_quit_desk_result::table_list() const {
  // @@protoc_insertion_point(field_list:game_showhand_protocols.packet_l2c_quit_desk_result.table_list)
  return table_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::msg_table_info >*
packet_l2c_quit_desk_result::mutable_table_list() {
  // @@protoc_insertion_point(field_mutable_list:game_showhand_protocols.packet_l2c_quit_desk_result.table_list)
  return &table_list_;
}

// optional int32 room_id = 4;
inline bool packet_l2c_quit_desk_result::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packet_l2c_quit_desk_result::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packet_l2c_quit_desk_result::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packet_l2c_quit_desk_result::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 packet_l2c_quit_desk_result::room_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packet_l2c_quit_desk_result.room_id)
  return room_id_;
}
inline void packet_l2c_quit_desk_result::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packet_l2c_quit_desk_result.room_id)
}

// -------------------------------------------------------------------

// packetc2l_player_ready

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_player_ready];
inline bool packetc2l_player_ready::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_player_ready::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_player_ready::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_player_ready::clear_packet_id() {
  packet_id_ = 10008;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_player_ready::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetc2l_player_ready.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_player_ready::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetc2l_player_ready.packet_id)
}

// -------------------------------------------------------------------

// packetl2c_player_ready_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_player_ready_result];
inline bool packetl2c_player_ready_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_player_ready_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_player_ready_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_player_ready_result::clear_packet_id() {
  packet_id_ = 15006;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_player_ready_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_player_ready_result.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_player_ready_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_player_ready_result.packet_id)
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool packetl2c_player_ready_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_player_ready_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_player_ready_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_player_ready_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_player_ready_result::result() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_player_ready_result.result)
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_player_ready_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_player_ready_result.result)
}

// optional int32 player_id = 3;
inline bool packetl2c_player_ready_result::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_player_ready_result::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_player_ready_result::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_player_ready_result::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_player_ready_result::player_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_player_ready_result.player_id)
  return player_id_;
}
inline void packetl2c_player_ready_result::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_player_ready_result.player_id)
}

// -------------------------------------------------------------------

// packetc2l_view_card

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_view_card];
inline bool packetc2l_view_card::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_view_card::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_view_card::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_view_card::clear_packet_id() {
  packet_id_ = 10009;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_view_card::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetc2l_view_card.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_view_card::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetc2l_view_card.packet_id)
}

// -------------------------------------------------------------------

// packetl2c_view_card_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_view_card_result];
inline bool packetl2c_view_card_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_view_card_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_view_card_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_view_card_result::clear_packet_id() {
  packet_id_ = 15007;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_view_card_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_view_card_result.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_view_card_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_view_card_result.packet_id)
}

// optional int32 player_id = 2;
inline bool packetl2c_view_card_result::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_view_card_result::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_view_card_result::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_view_card_result::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_view_card_result::player_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_view_card_result.player_id)
  return player_id_;
}
inline void packetl2c_view_card_result::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_view_card_result.player_id)
}

// -------------------------------------------------------------------

// packetc2l_bet_info

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_bet_info];
inline bool packetc2l_bet_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_bet_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_bet_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_bet_info::clear_packet_id() {
  packet_id_ = 10010;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_bet_info::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetc2l_bet_info.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_bet_info::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetc2l_bet_info.packet_id)
}

// optional .game_showhand_protocols.msg_bet_info bet_info = 2;
inline bool packetc2l_bet_info::has_bet_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_bet_info::set_has_bet_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_bet_info::clear_has_bet_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_bet_info::clear_bet_info() {
  if (bet_info_ != NULL) bet_info_->::game_showhand_protocols::msg_bet_info::Clear();
  clear_has_bet_info();
}
inline const ::game_showhand_protocols::msg_bet_info& packetc2l_bet_info::bet_info() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetc2l_bet_info.bet_info)
  return bet_info_ != NULL ? *bet_info_ : *default_instance_->bet_info_;
}
inline ::game_showhand_protocols::msg_bet_info* packetc2l_bet_info::mutable_bet_info() {
  set_has_bet_info();
  if (bet_info_ == NULL) bet_info_ = new ::game_showhand_protocols::msg_bet_info;
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.packetc2l_bet_info.bet_info)
  return bet_info_;
}
inline ::game_showhand_protocols::msg_bet_info* packetc2l_bet_info::release_bet_info() {
  clear_has_bet_info();
  ::game_showhand_protocols::msg_bet_info* temp = bet_info_;
  bet_info_ = NULL;
  return temp;
}
inline void packetc2l_bet_info::set_allocated_bet_info(::game_showhand_protocols::msg_bet_info* bet_info) {
  delete bet_info_;
  bet_info_ = bet_info;
  if (bet_info) {
    set_has_bet_info();
  } else {
    clear_has_bet_info();
  }
  // @@protoc_insertion_point(field_set_allocated:game_showhand_protocols.packetc2l_bet_info.bet_info)
}

// -------------------------------------------------------------------

// packetl2c_bet_info_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_bet_result];
inline bool packetl2c_bet_info_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_bet_info_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_bet_info_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_bet_info_result::clear_packet_id() {
  packet_id_ = 15008;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_bet_info_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_bet_info_result.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_bet_info_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_bet_info_result.packet_id)
}

// optional .msg_type_def.e_msg_result_def result = 2;
inline bool packetl2c_bet_info_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_bet_info_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_bet_info_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_bet_info_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_bet_info_result::result() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_bet_info_result.result)
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_bet_info_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_bet_info_result.result)
}

// -------------------------------------------------------------------

// packetl2c_notice_start_game_message

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_game_message];
inline bool packetl2c_notice_start_game_message::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_start_game_message::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_start_game_message::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_start_game_message::clear_packet_id() {
  packet_id_ = 15021;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_start_game_message::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_start_game_message.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_start_game_message::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_start_game_message.packet_id)
}

// optional int64 minBetCount = 2;
inline bool packetl2c_notice_start_game_message::has_minbetcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_start_game_message::set_has_minbetcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_start_game_message::clear_has_minbetcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_start_game_message::clear_minbetcount() {
  minbetcount_ = GOOGLE_LONGLONG(0);
  clear_has_minbetcount();
}
inline ::google::protobuf::int64 packetl2c_notice_start_game_message::minbetcount() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_start_game_message.minBetCount)
  return minbetcount_;
}
inline void packetl2c_notice_start_game_message::set_minbetcount(::google::protobuf::int64 value) {
  set_has_minbetcount();
  minbetcount_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_start_game_message.minBetCount)
}

// optional .game_showhand_protocols.msg_player_info player_left = 3;
inline bool packetl2c_notice_start_game_message::has_player_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_start_game_message::set_has_player_left() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_start_game_message::clear_has_player_left() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_start_game_message::clear_player_left() {
  if (player_left_ != NULL) player_left_->::game_showhand_protocols::msg_player_info::Clear();
  clear_has_player_left();
}
inline const ::game_showhand_protocols::msg_player_info& packetl2c_notice_start_game_message::player_left() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_start_game_message.player_left)
  return player_left_ != NULL ? *player_left_ : *default_instance_->player_left_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_start_game_message::mutable_player_left() {
  set_has_player_left();
  if (player_left_ == NULL) player_left_ = new ::game_showhand_protocols::msg_player_info;
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.packetl2c_notice_start_game_message.player_left)
  return player_left_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_start_game_message::release_player_left() {
  clear_has_player_left();
  ::game_showhand_protocols::msg_player_info* temp = player_left_;
  player_left_ = NULL;
  return temp;
}
inline void packetl2c_notice_start_game_message::set_allocated_player_left(::game_showhand_protocols::msg_player_info* player_left) {
  delete player_left_;
  player_left_ = player_left;
  if (player_left) {
    set_has_player_left();
  } else {
    clear_has_player_left();
  }
  // @@protoc_insertion_point(field_set_allocated:game_showhand_protocols.packetl2c_notice_start_game_message.player_left)
}

// optional .game_showhand_protocols.msg_player_info player_right = 4;
inline bool packetl2c_notice_start_game_message::has_player_right() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_notice_start_game_message::set_has_player_right() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_notice_start_game_message::clear_has_player_right() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_notice_start_game_message::clear_player_right() {
  if (player_right_ != NULL) player_right_->::game_showhand_protocols::msg_player_info::Clear();
  clear_has_player_right();
}
inline const ::game_showhand_protocols::msg_player_info& packetl2c_notice_start_game_message::player_right() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_start_game_message.player_right)
  return player_right_ != NULL ? *player_right_ : *default_instance_->player_right_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_start_game_message::mutable_player_right() {
  set_has_player_right();
  if (player_right_ == NULL) player_right_ = new ::game_showhand_protocols::msg_player_info;
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.packetl2c_notice_start_game_message.player_right)
  return player_right_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_start_game_message::release_player_right() {
  clear_has_player_right();
  ::game_showhand_protocols::msg_player_info* temp = player_right_;
  player_right_ = NULL;
  return temp;
}
inline void packetl2c_notice_start_game_message::set_allocated_player_right(::game_showhand_protocols::msg_player_info* player_right) {
  delete player_right_;
  player_right_ = player_right;
  if (player_right) {
    set_has_player_right();
  } else {
    clear_has_player_right();
  }
  // @@protoc_insertion_point(field_set_allocated:game_showhand_protocols.packetl2c_notice_start_game_message.player_right)
}

// repeated .game_showhand_protocols.p_bet_state bet_state = 5;
inline int packetl2c_notice_start_game_message::bet_state_size() const {
  return bet_state_.size();
}
inline void packetl2c_notice_start_game_message::clear_bet_state() {
  bet_state_.Clear();
}
inline const ::game_showhand_protocols::p_bet_state& packetl2c_notice_start_game_message::bet_state(int index) const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_start_game_message.bet_state)
  return bet_state_.Get(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_notice_start_game_message::mutable_bet_state(int index) {
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.packetl2c_notice_start_game_message.bet_state)
  return bet_state_.Mutable(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_notice_start_game_message::add_bet_state() {
  // @@protoc_insertion_point(field_add:game_showhand_protocols.packetl2c_notice_start_game_message.bet_state)
  return bet_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
packetl2c_notice_start_game_message::bet_state() const {
  // @@protoc_insertion_point(field_list:game_showhand_protocols.packetl2c_notice_start_game_message.bet_state)
  return bet_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
packetl2c_notice_start_game_message::mutable_bet_state() {
  // @@protoc_insertion_point(field_mutable_list:game_showhand_protocols.packetl2c_notice_start_game_message.bet_state)
  return &bet_state_;
}

// -------------------------------------------------------------------

// packetl2c_notice_sendcard_message

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_sendcard_message];
inline bool packetl2c_notice_sendcard_message::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_sendcard_message::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_sendcard_message::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_sendcard_message::clear_packet_id() {
  packet_id_ = 15023;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_sendcard_message::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_sendcard_message.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_sendcard_message::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_sendcard_message.packet_id)
}

// optional int32 player_left = 2;
inline bool packetl2c_notice_sendcard_message::has_player_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_sendcard_message::set_has_player_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_sendcard_message::clear_has_player_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_sendcard_message::clear_player_left() {
  player_left_ = 0;
  clear_has_player_left();
}
inline ::google::protobuf::int32 packetl2c_notice_sendcard_message::player_left() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_sendcard_message.player_left)
  return player_left_;
}
inline void packetl2c_notice_sendcard_message::set_player_left(::google::protobuf::int32 value) {
  set_has_player_left();
  player_left_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_sendcard_message.player_left)
}

// optional int32 player_right = 3;
inline bool packetl2c_notice_sendcard_message::has_player_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_sendcard_message::set_has_player_right() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_sendcard_message::clear_has_player_right() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_sendcard_message::clear_player_right() {
  player_right_ = 0;
  clear_has_player_right();
}
inline ::google::protobuf::int32 packetl2c_notice_sendcard_message::player_right() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_sendcard_message.player_right)
  return player_right_;
}
inline void packetl2c_notice_sendcard_message::set_player_right(::google::protobuf::int32 value) {
  set_has_player_right();
  player_right_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_sendcard_message.player_right)
}

// repeated .game_showhand_protocols.p_bet_state bet_state = 4;
inline int packetl2c_notice_sendcard_message::bet_state_size() const {
  return bet_state_.size();
}
inline void packetl2c_notice_sendcard_message::clear_bet_state() {
  bet_state_.Clear();
}
inline const ::game_showhand_protocols::p_bet_state& packetl2c_notice_sendcard_message::bet_state(int index) const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_sendcard_message.bet_state)
  return bet_state_.Get(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_notice_sendcard_message::mutable_bet_state(int index) {
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.packetl2c_notice_sendcard_message.bet_state)
  return bet_state_.Mutable(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_notice_sendcard_message::add_bet_state() {
  // @@protoc_insertion_point(field_add:game_showhand_protocols.packetl2c_notice_sendcard_message.bet_state)
  return bet_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
packetl2c_notice_sendcard_message::bet_state() const {
  // @@protoc_insertion_point(field_list:game_showhand_protocols.packetl2c_notice_sendcard_message.bet_state)
  return bet_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
packetl2c_notice_sendcard_message::mutable_bet_state() {
  // @@protoc_insertion_point(field_mutable_list:game_showhand_protocols.packetl2c_notice_sendcard_message.bet_state)
  return &bet_state_;
}

// -------------------------------------------------------------------

// packetl2c_notice_bet

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_bet_message];
inline bool packetl2c_notice_bet::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_bet::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_bet::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_bet::clear_packet_id() {
  packet_id_ = 15022;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_bet::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_bet.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_bet::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_bet.packet_id)
}

// repeated .game_showhand_protocols.p_bet_state bet_state = 2;
inline int packetl2c_notice_bet::bet_state_size() const {
  return bet_state_.size();
}
inline void packetl2c_notice_bet::clear_bet_state() {
  bet_state_.Clear();
}
inline const ::game_showhand_protocols::p_bet_state& packetl2c_notice_bet::bet_state(int index) const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_bet.bet_state)
  return bet_state_.Get(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_notice_bet::mutable_bet_state(int index) {
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.packetl2c_notice_bet.bet_state)
  return bet_state_.Mutable(index);
}
inline ::game_showhand_protocols::p_bet_state* packetl2c_notice_bet::add_bet_state() {
  // @@protoc_insertion_point(field_add:game_showhand_protocols.packetl2c_notice_bet.bet_state)
  return bet_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >&
packetl2c_notice_bet::bet_state() const {
  // @@protoc_insertion_point(field_list:game_showhand_protocols.packetl2c_notice_bet.bet_state)
  return bet_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_showhand_protocols::p_bet_state >*
packetl2c_notice_bet::mutable_bet_state() {
  // @@protoc_insertion_point(field_mutable_list:game_showhand_protocols.packetl2c_notice_bet.bet_state)
  return &bet_state_;
}

// -------------------------------------------------------------------

// packetl2c_notice_award_message

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_start_award_message];
inline bool packetl2c_notice_award_message::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_award_message::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_award_message::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_award_message::clear_packet_id() {
  packet_id_ = 15024;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_award_message::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_award_message.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_award_message::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_award_message.packet_id)
}

// optional .game_showhand_protocols.msg_player_result player_left = 2;
inline bool packetl2c_notice_award_message::has_player_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_award_message::set_has_player_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_award_message::clear_has_player_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_award_message::clear_player_left() {
  if (player_left_ != NULL) player_left_->::game_showhand_protocols::msg_player_result::Clear();
  clear_has_player_left();
}
inline const ::game_showhand_protocols::msg_player_result& packetl2c_notice_award_message::player_left() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_award_message.player_left)
  return player_left_ != NULL ? *player_left_ : *default_instance_->player_left_;
}
inline ::game_showhand_protocols::msg_player_result* packetl2c_notice_award_message::mutable_player_left() {
  set_has_player_left();
  if (player_left_ == NULL) player_left_ = new ::game_showhand_protocols::msg_player_result;
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.packetl2c_notice_award_message.player_left)
  return player_left_;
}
inline ::game_showhand_protocols::msg_player_result* packetl2c_notice_award_message::release_player_left() {
  clear_has_player_left();
  ::game_showhand_protocols::msg_player_result* temp = player_left_;
  player_left_ = NULL;
  return temp;
}
inline void packetl2c_notice_award_message::set_allocated_player_left(::game_showhand_protocols::msg_player_result* player_left) {
  delete player_left_;
  player_left_ = player_left;
  if (player_left) {
    set_has_player_left();
  } else {
    clear_has_player_left();
  }
  // @@protoc_insertion_point(field_set_allocated:game_showhand_protocols.packetl2c_notice_award_message.player_left)
}

// optional .game_showhand_protocols.msg_player_result player_right = 3;
inline bool packetl2c_notice_award_message::has_player_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_award_message::set_has_player_right() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_award_message::clear_has_player_right() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_award_message::clear_player_right() {
  if (player_right_ != NULL) player_right_->::game_showhand_protocols::msg_player_result::Clear();
  clear_has_player_right();
}
inline const ::game_showhand_protocols::msg_player_result& packetl2c_notice_award_message::player_right() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_award_message.player_right)
  return player_right_ != NULL ? *player_right_ : *default_instance_->player_right_;
}
inline ::game_showhand_protocols::msg_player_result* packetl2c_notice_award_message::mutable_player_right() {
  set_has_player_right();
  if (player_right_ == NULL) player_right_ = new ::game_showhand_protocols::msg_player_result;
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.packetl2c_notice_award_message.player_right)
  return player_right_;
}
inline ::game_showhand_protocols::msg_player_result* packetl2c_notice_award_message::release_player_right() {
  clear_has_player_right();
  ::game_showhand_protocols::msg_player_result* temp = player_right_;
  player_right_ = NULL;
  return temp;
}
inline void packetl2c_notice_award_message::set_allocated_player_right(::game_showhand_protocols::msg_player_result* player_right) {
  delete player_right_;
  player_right_ = player_right;
  if (player_right) {
    set_has_player_right();
  } else {
    clear_has_player_right();
  }
  // @@protoc_insertion_point(field_set_allocated:game_showhand_protocols.packetl2c_notice_award_message.player_right)
}

// -------------------------------------------------------------------

// packetl2c_notice_join_table

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_join_table_message];
inline bool packetl2c_notice_join_table::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_join_table::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_join_table::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_join_table::clear_packet_id() {
  packet_id_ = 15030;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_join_table::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_join_table.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_join_table::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_join_table.packet_id)
}

// optional int32 table_id = 2;
inline bool packetl2c_notice_join_table::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_join_table::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_join_table::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_join_table::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 packetl2c_notice_join_table::table_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_join_table.table_id)
  return table_id_;
}
inline void packetl2c_notice_join_table::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_join_table.table_id)
}

// optional .game_showhand_protocols.msg_player_info player_info = 3;
inline bool packetl2c_notice_join_table::has_player_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_join_table::set_has_player_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_join_table::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_join_table::clear_player_info() {
  if (player_info_ != NULL) player_info_->::game_showhand_protocols::msg_player_info::Clear();
  clear_has_player_info();
}
inline const ::game_showhand_protocols::msg_player_info& packetl2c_notice_join_table::player_info() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_join_table.player_info)
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_join_table::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::game_showhand_protocols::msg_player_info;
  // @@protoc_insertion_point(field_mutable:game_showhand_protocols.packetl2c_notice_join_table.player_info)
  return player_info_;
}
inline ::game_showhand_protocols::msg_player_info* packetl2c_notice_join_table::release_player_info() {
  clear_has_player_info();
  ::game_showhand_protocols::msg_player_info* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void packetl2c_notice_join_table::set_allocated_player_info(::game_showhand_protocols::msg_player_info* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
  // @@protoc_insertion_point(field_set_allocated:game_showhand_protocols.packetl2c_notice_join_table.player_info)
}

// -------------------------------------------------------------------

// packetl2c_notice_leave_table

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_leave_table_message];
inline bool packetl2c_notice_leave_table::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_leave_table::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_leave_table::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_leave_table::clear_packet_id() {
  packet_id_ = 15031;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_leave_table::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_leave_table.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_leave_table::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_leave_table.packet_id)
}

// optional int32 table_id = 2;
inline bool packetl2c_notice_leave_table::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_leave_table::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_leave_table::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_leave_table::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
inline ::google::protobuf::int32 packetl2c_notice_leave_table::table_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_leave_table.table_id)
  return table_id_;
}
inline void packetl2c_notice_leave_table::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_leave_table.table_id)
}

// optional int32 player_id = 3;
inline bool packetl2c_notice_leave_table::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_leave_table::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_leave_table::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_leave_table::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 packetl2c_notice_leave_table::player_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_leave_table.player_id)
  return player_id_;
}
inline void packetl2c_notice_leave_table::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_leave_table.player_id)
}

// -------------------------------------------------------------------

// packetl2c_notice_table_player_state

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_table_player_message];
inline bool packetl2c_notice_table_player_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_table_player_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_table_player_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_table_player_state::clear_packet_id() {
  packet_id_ = 15032;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_table_player_state::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_table_player_state.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_table_player_state::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_table_player_state.packet_id)
}

// optional uint32 table_id = 2;
inline bool packetl2c_notice_table_player_state::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_table_player_state::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_table_player_state::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_table_player_state::clear_table_id() {
  table_id_ = 0u;
  clear_has_table_id();
}
inline ::google::protobuf::uint32 packetl2c_notice_table_player_state::table_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_table_player_state.table_id)
  return table_id_;
}
inline void packetl2c_notice_table_player_state::set_table_id(::google::protobuf::uint32 value) {
  set_has_table_id();
  table_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_table_player_state.table_id)
}

// optional uint32 left_state = 3;
inline bool packetl2c_notice_table_player_state::has_left_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_table_player_state::set_has_left_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_table_player_state::clear_has_left_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_table_player_state::clear_left_state() {
  left_state_ = 0u;
  clear_has_left_state();
}
inline ::google::protobuf::uint32 packetl2c_notice_table_player_state::left_state() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_table_player_state.left_state)
  return left_state_;
}
inline void packetl2c_notice_table_player_state::set_left_state(::google::protobuf::uint32 value) {
  set_has_left_state();
  left_state_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_table_player_state.left_state)
}

// optional uint32 right_state = 4;
inline bool packetl2c_notice_table_player_state::has_right_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_notice_table_player_state::set_has_right_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_notice_table_player_state::clear_has_right_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_notice_table_player_state::clear_right_state() {
  right_state_ = 0u;
  clear_has_right_state();
}
inline ::google::protobuf::uint32 packetl2c_notice_table_player_state::right_state() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_table_player_state.right_state)
  return right_state_;
}
inline void packetl2c_notice_table_player_state::set_right_state(::google::protobuf::uint32 value) {
  set_has_right_state();
  right_state_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_table_player_state.right_state)
}

// -------------------------------------------------------------------

// packetc2l_check_state

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_check_state];
inline bool packetc2l_check_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_check_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_check_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_check_state::clear_packet_id() {
  packet_id_ = 10011;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_check_state::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetc2l_check_state.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_check_state::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetc2l_check_state.packet_id)
}

// -------------------------------------------------------------------

// packetl2c_check_state_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_check_state_result];
inline bool packetl2c_check_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_check_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_check_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_check_state_result::clear_packet_id() {
  packet_id_ = 15011;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_check_state_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_check_state_result.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_check_state_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_check_state_result.packet_id)
}

// optional uint32 state = 2;
inline bool packetl2c_check_state_result::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_check_state_result::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_check_state_result::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_check_state_result::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 packetl2c_check_state_result::state() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_check_state_result.state)
  return state_;
}
inline void packetl2c_check_state_result::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_check_state_result.state)
}

// -------------------------------------------------------------------

// packetl2c_notice_gm_all_card_info

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_all_cards_info];
inline bool packetl2c_notice_gm_all_card_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_gm_all_card_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_gm_all_card_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_gm_all_card_info::clear_packet_id() {
  packet_id_ = 16001;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_gm_all_card_info::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_gm_all_card_info.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_gm_all_card_info::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_gm_all_card_info.packet_id)
}

// repeated int32 left_cards = 2;
inline int packetl2c_notice_gm_all_card_info::left_cards_size() const {
  return left_cards_.size();
}
inline void packetl2c_notice_gm_all_card_info::clear_left_cards() {
  left_cards_.Clear();
}
inline ::google::protobuf::int32 packetl2c_notice_gm_all_card_info::left_cards(int index) const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_gm_all_card_info.left_cards)
  return left_cards_.Get(index);
}
inline void packetl2c_notice_gm_all_card_info::set_left_cards(int index, ::google::protobuf::int32 value) {
  left_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_gm_all_card_info.left_cards)
}
inline void packetl2c_notice_gm_all_card_info::add_left_cards(::google::protobuf::int32 value) {
  left_cards_.Add(value);
  // @@protoc_insertion_point(field_add:game_showhand_protocols.packetl2c_notice_gm_all_card_info.left_cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_notice_gm_all_card_info::left_cards() const {
  // @@protoc_insertion_point(field_list:game_showhand_protocols.packetl2c_notice_gm_all_card_info.left_cards)
  return left_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_notice_gm_all_card_info::mutable_left_cards() {
  // @@protoc_insertion_point(field_mutable_list:game_showhand_protocols.packetl2c_notice_gm_all_card_info.left_cards)
  return &left_cards_;
}

// repeated int32 right_cards = 3;
inline int packetl2c_notice_gm_all_card_info::right_cards_size() const {
  return right_cards_.size();
}
inline void packetl2c_notice_gm_all_card_info::clear_right_cards() {
  right_cards_.Clear();
}
inline ::google::protobuf::int32 packetl2c_notice_gm_all_card_info::right_cards(int index) const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_gm_all_card_info.right_cards)
  return right_cards_.Get(index);
}
inline void packetl2c_notice_gm_all_card_info::set_right_cards(int index, ::google::protobuf::int32 value) {
  right_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_gm_all_card_info.right_cards)
}
inline void packetl2c_notice_gm_all_card_info::add_right_cards(::google::protobuf::int32 value) {
  right_cards_.Add(value);
  // @@protoc_insertion_point(field_add:game_showhand_protocols.packetl2c_notice_gm_all_card_info.right_cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
packetl2c_notice_gm_all_card_info::right_cards() const {
  // @@protoc_insertion_point(field_list:game_showhand_protocols.packetl2c_notice_gm_all_card_info.right_cards)
  return right_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
packetl2c_notice_gm_all_card_info::mutable_right_cards() {
  // @@protoc_insertion_point(field_mutable_list:game_showhand_protocols.packetl2c_notice_gm_all_card_info.right_cards)
  return &right_cards_;
}

// optional bool orleft = 4;
inline bool packetl2c_notice_gm_all_card_info::has_orleft() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_notice_gm_all_card_info::set_has_orleft() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_notice_gm_all_card_info::clear_has_orleft() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_notice_gm_all_card_info::clear_orleft() {
  orleft_ = false;
  clear_has_orleft();
}
inline bool packetl2c_notice_gm_all_card_info::orleft() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_gm_all_card_info.orleft)
  return orleft_;
}
inline void packetl2c_notice_gm_all_card_info::set_orleft(bool value) {
  set_has_orleft();
  orleft_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_gm_all_card_info.orleft)
}

// -------------------------------------------------------------------

// packetc2l_gm_change_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2l_gm_change_result];
inline bool packetc2l_gm_change_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2l_gm_change_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2l_gm_change_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2l_gm_change_result::clear_packet_id() {
  packet_id_ = 11001;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetc2l_gm_change_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetc2l_gm_change_result.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2l_gm_change_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetc2l_gm_change_result.packet_id)
}

// optional int32 command = 2;
inline bool packetc2l_gm_change_result::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2l_gm_change_result::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2l_gm_change_result::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2l_gm_change_result::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::google::protobuf::int32 packetc2l_gm_change_result::command() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetc2l_gm_change_result.command)
  return command_;
}
inline void packetc2l_gm_change_result::set_command(::google::protobuf::int32 value) {
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetc2l_gm_change_result.command)
}

// -------------------------------------------------------------------

// packetl2c_gm_change_result

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_gm_change_result];
inline bool packetl2c_gm_change_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_gm_change_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_gm_change_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_gm_change_result::clear_packet_id() {
  packet_id_ = 16002;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_gm_change_result::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_gm_change_result.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_gm_change_result::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_gm_change_result.packet_id)
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_success];
inline bool packetl2c_gm_change_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_gm_change_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_gm_change_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_gm_change_result::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetl2c_gm_change_result::result() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_gm_change_result.result)
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetl2c_gm_change_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_gm_change_result.result)
}

// -------------------------------------------------------------------

// packetl2c_notice_gm_stock_info

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_stock_info];
inline bool packetl2c_notice_gm_stock_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_gm_stock_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_gm_stock_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_gm_stock_info::clear_packet_id() {
  packet_id_ = 17001;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_gm_stock_info::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_gm_stock_info.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_gm_stock_info::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_gm_stock_info.packet_id)
}

// optional int64 stock_total_count = 2;
inline bool packetl2c_notice_gm_stock_info::has_stock_total_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_gm_stock_info::set_has_stock_total_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_gm_stock_info::clear_has_stock_total_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_gm_stock_info::clear_stock_total_count() {
  stock_total_count_ = GOOGLE_LONGLONG(0);
  clear_has_stock_total_count();
}
inline ::google::protobuf::int64 packetl2c_notice_gm_stock_info::stock_total_count() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_gm_stock_info.stock_total_count)
  return stock_total_count_;
}
inline void packetl2c_notice_gm_stock_info::set_stock_total_count(::google::protobuf::int64 value) {
  set_has_stock_total_count();
  stock_total_count_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_gm_stock_info.stock_total_count)
}

// optional int64 stock_add_count = 3;
inline bool packetl2c_notice_gm_stock_info::has_stock_add_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_gm_stock_info::set_has_stock_add_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_gm_stock_info::clear_has_stock_add_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_gm_stock_info::clear_stock_add_count() {
  stock_add_count_ = GOOGLE_LONGLONG(0);
  clear_has_stock_add_count();
}
inline ::google::protobuf::int64 packetl2c_notice_gm_stock_info::stock_add_count() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_gm_stock_info.stock_add_count)
  return stock_add_count_;
}
inline void packetl2c_notice_gm_stock_info::set_stock_add_count(::google::protobuf::int64 value) {
  set_has_stock_add_count();
  stock_add_count_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_gm_stock_info.stock_add_count)
}

// optional double stock_earnRate = 4;
inline bool packetl2c_notice_gm_stock_info::has_stock_earnrate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetl2c_notice_gm_stock_info::set_has_stock_earnrate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetl2c_notice_gm_stock_info::clear_has_stock_earnrate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetl2c_notice_gm_stock_info::clear_stock_earnrate() {
  stock_earnrate_ = 0;
  clear_has_stock_earnrate();
}
inline double packetl2c_notice_gm_stock_info::stock_earnrate() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_gm_stock_info.stock_earnRate)
  return stock_earnrate_;
}
inline void packetl2c_notice_gm_stock_info::set_stock_earnrate(double value) {
  set_has_stock_earnrate();
  stock_earnrate_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_gm_stock_info.stock_earnRate)
}

// optional int64 stock_total_earnRate_income = 5;
inline bool packetl2c_notice_gm_stock_info::has_stock_total_earnrate_income() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetl2c_notice_gm_stock_info::set_has_stock_total_earnrate_income() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetl2c_notice_gm_stock_info::clear_has_stock_total_earnrate_income() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetl2c_notice_gm_stock_info::clear_stock_total_earnrate_income() {
  stock_total_earnrate_income_ = GOOGLE_LONGLONG(0);
  clear_has_stock_total_earnrate_income();
}
inline ::google::protobuf::int64 packetl2c_notice_gm_stock_info::stock_total_earnrate_income() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_gm_stock_info.stock_total_earnRate_income)
  return stock_total_earnrate_income_;
}
inline void packetl2c_notice_gm_stock_info::set_stock_total_earnrate_income(::google::protobuf::int64 value) {
  set_has_stock_total_earnrate_income();
  stock_total_earnrate_income_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_gm_stock_info.stock_total_earnRate_income)
}

// optional int64 stock_add_earnRate_income = 6;
inline bool packetl2c_notice_gm_stock_info::has_stock_add_earnrate_income() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetl2c_notice_gm_stock_info::set_has_stock_add_earnrate_income() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetl2c_notice_gm_stock_info::clear_has_stock_add_earnrate_income() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetl2c_notice_gm_stock_info::clear_stock_add_earnrate_income() {
  stock_add_earnrate_income_ = GOOGLE_LONGLONG(0);
  clear_has_stock_add_earnrate_income();
}
inline ::google::protobuf::int64 packetl2c_notice_gm_stock_info::stock_add_earnrate_income() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_gm_stock_info.stock_add_earnRate_income)
  return stock_add_earnrate_income_;
}
inline void packetl2c_notice_gm_stock_info::set_stock_add_earnrate_income(::google::protobuf::int64 value) {
  set_has_stock_add_earnrate_income();
  stock_add_earnrate_income_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_gm_stock_info.stock_add_earnRate_income)
}

// -------------------------------------------------------------------

// packetl2c_notice_gm_luck_info

// optional .game_showhand_protocols.e_server_msg_type packet_id = 1 [default = e_mst_l2c_notice_gm_luck_info];
inline bool packetl2c_notice_gm_luck_info::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetl2c_notice_gm_luck_info::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetl2c_notice_gm_luck_info::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetl2c_notice_gm_luck_info::clear_packet_id() {
  packet_id_ = 17002;
  clear_has_packet_id();
}
inline ::game_showhand_protocols::e_server_msg_type packetl2c_notice_gm_luck_info::packet_id() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_gm_luck_info.packet_id)
  return static_cast< ::game_showhand_protocols::e_server_msg_type >(packet_id_);
}
inline void packetl2c_notice_gm_luck_info::set_packet_id(::game_showhand_protocols::e_server_msg_type value) {
  assert(::game_showhand_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_gm_luck_info.packet_id)
}

// optional int64 Total_Luck = 2;
inline bool packetl2c_notice_gm_luck_info::has_total_luck() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetl2c_notice_gm_luck_info::set_has_total_luck() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetl2c_notice_gm_luck_info::clear_has_total_luck() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetl2c_notice_gm_luck_info::clear_total_luck() {
  total_luck_ = GOOGLE_LONGLONG(0);
  clear_has_total_luck();
}
inline ::google::protobuf::int64 packetl2c_notice_gm_luck_info::total_luck() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_gm_luck_info.Total_Luck)
  return total_luck_;
}
inline void packetl2c_notice_gm_luck_info::set_total_luck(::google::protobuf::int64 value) {
  set_has_total_luck();
  total_luck_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_gm_luck_info.Total_Luck)
}

// optional int64 add_luck = 3;
inline bool packetl2c_notice_gm_luck_info::has_add_luck() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetl2c_notice_gm_luck_info::set_has_add_luck() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetl2c_notice_gm_luck_info::clear_has_add_luck() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetl2c_notice_gm_luck_info::clear_add_luck() {
  add_luck_ = GOOGLE_LONGLONG(0);
  clear_has_add_luck();
}
inline ::google::protobuf::int64 packetl2c_notice_gm_luck_info::add_luck() const {
  // @@protoc_insertion_point(field_get:game_showhand_protocols.packetl2c_notice_gm_luck_info.add_luck)
  return add_luck_;
}
inline void packetl2c_notice_gm_luck_info::set_add_luck(::google::protobuf::int64 value) {
  set_has_add_luck();
  add_luck_ = value;
  // @@protoc_insertion_point(field_set:game_showhand_protocols.packetl2c_notice_gm_luck_info.add_luck)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_showhand_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fshowhand_5fprotocol_2eproto__INCLUDED
