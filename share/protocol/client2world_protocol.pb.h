// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_protocol.proto

#ifndef PROTOBUF_client2world_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_client2world_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

class packetc2w_player_connect;
class packetw2c_player_connect_result;
class packet_c2w_timesync;
class packet_w2c_timesync_result;
class packetc2w_ask_login;
class msg_game_info;
class packetw2c_ask_login_result;
class packetc2w_enter_game;
class packetw2c_enter_game_result;
class packetc2w_gm_command;
class packetw2c_gm_command_result;
class packetc2w_ask_check_payment;
class packetc2w_ask_test_payment;
class packetw2c_ask_check_payment_result;
class packetw2c_ask_check_payment_result2;
class packetc2w_leave_game;
class packetw2c_leave_game_result;
class packetw2c_player_kick;
class packetc2w_get_gamelist;
class packetw2c_get_gamelist_result;
class packetc2w_first_login;
class packetw2c_first_login_result;

// ===================================================================

class packetc2w_player_connect : public ::google::protobuf::Message {
 public:
  packetc2w_player_connect();
  virtual ~packetc2w_player_connect();

  packetc2w_player_connect(const packetc2w_player_connect& from);

  inline packetc2w_player_connect& operator=(const packetc2w_player_connect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_player_connect& default_instance();

  void Swap(packetc2w_player_connect* other);

  // implements Message ----------------------------------------------

  packetc2w_player_connect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_player_connect& from);
  void MergeFrom(const packetc2w_player_connect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_connect];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional string sign = 4;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 4;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional string platform = 5;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 5;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional string login_platform = 6;
  inline bool has_login_platform() const;
  inline void clear_login_platform();
  static const int kLoginPlatformFieldNumber = 6;
  inline const ::std::string& login_platform() const;
  inline void set_login_platform(const ::std::string& value);
  inline void set_login_platform(const char* value);
  inline void set_login_platform(const char* value, size_t size);
  inline ::std::string* mutable_login_platform();
  inline ::std::string* release_login_platform();
  inline void set_allocated_login_platform(::std::string* login_platform);

  // optional string Machine_code = 7;
  inline bool has_machine_code() const;
  inline void clear_machine_code();
  static const int kMachineCodeFieldNumber = 7;
  inline const ::std::string& machine_code() const;
  inline void set_machine_code(const ::std::string& value);
  inline void set_machine_code(const char* value);
  inline void set_machine_code(const char* value, size_t size);
  inline ::std::string* mutable_machine_code();
  inline ::std::string* release_machine_code();
  inline void set_allocated_machine_code(::std::string* machine_code);

  // optional string Machine_type = 8;
  inline bool has_machine_type() const;
  inline void clear_machine_type();
  static const int kMachineTypeFieldNumber = 8;
  inline const ::std::string& machine_type() const;
  inline void set_machine_type(const ::std::string& value);
  inline void set_machine_type(const char* value);
  inline void set_machine_type(const char* value, size_t size);
  inline ::std::string* mutable_machine_type();
  inline ::std::string* release_machine_type();
  inline void set_allocated_machine_type(::std::string* machine_type);

  // optional int32 channelid = 9;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelidFieldNumber = 9;
  inline ::google::protobuf::int32 channelid() const;
  inline void set_channelid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_player_connect)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_login_platform();
  inline void clear_has_login_platform();
  inline void set_has_machine_code();
  inline void clear_has_machine_code();
  inline void set_has_machine_type();
  inline void clear_has_machine_type();
  inline void set_has_channelid();
  inline void clear_has_channelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* account_;
  ::std::string* token_;
  ::std::string* sign_;
  ::std::string* platform_;
  int packet_id_;
  ::google::protobuf::int32 channelid_;
  ::std::string* login_platform_;
  ::std::string* machine_code_;
  ::std::string* machine_type_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_player_connect* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_player_connect_result : public ::google::protobuf::Message {
 public:
  packetw2c_player_connect_result();
  virtual ~packetw2c_player_connect_result();

  packetw2c_player_connect_result(const packetw2c_player_connect_result& from);

  inline packetw2c_player_connect_result& operator=(const packetw2c_player_connect_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_player_connect_result& default_instance();

  void Swap(packetw2c_player_connect_result* other);

  // implements Message ----------------------------------------------

  packetw2c_player_connect_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_player_connect_result& from);
  void MergeFrom(const packetw2c_player_connect_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_connect_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // optional int32 servertime = 3;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServertimeFieldNumber = 3;
  inline ::google::protobuf::int32 servertime() const;
  inline void set_servertime(::google::protobuf::int32 value);

  // optional int32 gaming = 4 [default = 0];
  inline bool has_gaming() const;
  inline void clear_gaming();
  static const int kGamingFieldNumber = 4;
  inline ::google::protobuf::int32 gaming() const;
  inline void set_gaming(::google::protobuf::int32 value);

  // optional string ver = 5;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 5;
  inline const ::std::string& ver() const;
  inline void set_ver(const ::std::string& value);
  inline void set_ver(const char* value);
  inline void set_ver(const char* value, size_t size);
  inline ::std::string* mutable_ver();
  inline ::std::string* release_ver();
  inline void set_allocated_ver(::std::string* ver);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_player_connect_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_servertime();
  inline void clear_has_servertime();
  inline void set_has_gaming();
  inline void clear_has_gaming();
  inline void set_has_ver();
  inline void clear_has_ver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  ::google::protobuf::int32 servertime_;
  ::google::protobuf::int32 gaming_;
  ::std::string* ver_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_player_connect_result* default_instance_;
};
// -------------------------------------------------------------------

class packet_c2w_timesync : public ::google::protobuf::Message {
 public:
  packet_c2w_timesync();
  virtual ~packet_c2w_timesync();

  packet_c2w_timesync(const packet_c2w_timesync& from);

  inline packet_c2w_timesync& operator=(const packet_c2w_timesync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_c2w_timesync& default_instance();

  void Swap(packet_c2w_timesync* other);

  // implements Message ----------------------------------------------

  packet_c2w_timesync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_c2w_timesync& from);
  void MergeFrom(const packet_c2w_timesync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_timesync];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packet_c2w_timesync)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_c2w_timesync* default_instance_;
};
// -------------------------------------------------------------------

class packet_w2c_timesync_result : public ::google::protobuf::Message {
 public:
  packet_w2c_timesync_result();
  virtual ~packet_w2c_timesync_result();

  packet_w2c_timesync_result(const packet_w2c_timesync_result& from);

  inline packet_w2c_timesync_result& operator=(const packet_w2c_timesync_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packet_w2c_timesync_result& default_instance();

  void Swap(packet_w2c_timesync_result* other);

  // implements Message ----------------------------------------------

  packet_w2c_timesync_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packet_w2c_timesync_result& from);
  void MergeFrom(const packet_w2c_timesync_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_timesync_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 server_time = 2;
  inline bool has_server_time() const;
  inline void clear_server_time();
  static const int kServerTimeFieldNumber = 2;
  inline ::google::protobuf::int32 server_time() const;
  inline void set_server_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packet_w2c_timesync_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_server_time();
  inline void clear_has_server_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 server_time_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packet_w2c_timesync_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ask_login : public ::google::protobuf::Message {
 public:
  packetc2w_ask_login();
  virtual ~packetc2w_ask_login();

  packetc2w_ask_login(const packetc2w_ask_login& from);

  inline packetc2w_ask_login& operator=(const packetc2w_ask_login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ask_login& default_instance();

  void Swap(packetc2w_ask_login* other);

  // implements Message ----------------------------------------------

  packetc2w_ask_login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ask_login& from);
  void MergeFrom(const packetc2w_ask_login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_asklogin];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ask_login)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ask_login* default_instance_;
};
// -------------------------------------------------------------------

class msg_game_info : public ::google::protobuf::Message {
 public:
  msg_game_info();
  virtual ~msg_game_info();

  msg_game_info(const msg_game_info& from);

  inline msg_game_info& operator=(const msg_game_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_game_info& default_instance();

  void Swap(msg_game_info* other);

  // implements Message ----------------------------------------------

  msg_game_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msg_game_info& from);
  void MergeFrom(const msg_game_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // optional int32 gamever = 2;
  inline bool has_gamever() const;
  inline void clear_gamever();
  static const int kGameverFieldNumber = 2;
  inline ::google::protobuf::int32 gamever() const;
  inline void set_gamever(::google::protobuf::int32 value);

  // optional int32 curOnlineNum = 3;
  inline bool has_curonlinenum() const;
  inline void clear_curonlinenum();
  static const int kCurOnlineNumFieldNumber = 3;
  inline ::google::protobuf::int32 curonlinenum() const;
  inline void set_curonlinenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.msg_game_info)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_gamever();
  inline void clear_has_gamever();
  inline void set_has_curonlinenum();
  inline void clear_has_curonlinenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 gamever_;
  ::google::protobuf::int32 curonlinenum_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static msg_game_info* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_ask_login_result : public ::google::protobuf::Message {
 public:
  packetw2c_ask_login_result();
  virtual ~packetw2c_ask_login_result();

  packetw2c_ask_login_result(const packetw2c_ask_login_result& from);

  inline packetw2c_ask_login_result& operator=(const packetw2c_ask_login_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_ask_login_result& default_instance();

  void Swap(packetw2c_ask_login_result* other);

  // implements Message ----------------------------------------------

  packetw2c_ask_login_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_ask_login_result& from);
  void MergeFrom(const packetw2c_ask_login_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_asklogin_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_info_def.msg_account_info account_info = 2;
  inline bool has_account_info() const;
  inline void clear_account_info();
  static const int kAccountInfoFieldNumber = 2;
  inline const ::msg_info_def::msg_account_info& account_info() const;
  inline ::msg_info_def::msg_account_info* mutable_account_info();
  inline ::msg_info_def::msg_account_info* release_account_info();
  inline void set_allocated_account_info(::msg_info_def::msg_account_info* account_info);

  // repeated .client2world_protocols.msg_game_info game_list = 3;
  inline int game_list_size() const;
  inline void clear_game_list();
  static const int kGameListFieldNumber = 3;
  inline const ::client2world_protocols::msg_game_info& game_list(int index) const;
  inline ::client2world_protocols::msg_game_info* mutable_game_list(int index);
  inline ::client2world_protocols::msg_game_info* add_game_list();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >&
      game_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >*
      mutable_game_list();

  // optional int32 gaming = 4 [default = 0];
  inline bool has_gaming() const;
  inline void clear_gaming();
  static const int kGamingFieldNumber = 4;
  inline ::google::protobuf::int32 gaming() const;
  inline void set_gaming(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_ask_login_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_account_info();
  inline void clear_has_account_info();
  inline void set_has_gaming();
  inline void clear_has_gaming();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::msg_info_def::msg_account_info* account_info_;
  int packet_id_;
  ::google::protobuf::int32 gaming_;
  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info > game_list_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_ask_login_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_enter_game : public ::google::protobuf::Message {
 public:
  packetc2w_enter_game();
  virtual ~packetc2w_enter_game();

  packetc2w_enter_game(const packetc2w_enter_game& from);

  inline packetc2w_enter_game& operator=(const packetc2w_enter_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_enter_game& default_instance();

  void Swap(packetc2w_enter_game* other);

  // implements Message ----------------------------------------------

  packetc2w_enter_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_enter_game& from);
  void MergeFrom(const packetc2w_enter_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_enter_game];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 gameid = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 2;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // optional int32 gamever = 3;
  inline bool has_gamever() const;
  inline void clear_gamever();
  static const int kGameverFieldNumber = 3;
  inline ::google::protobuf::int32 gamever() const;
  inline void set_gamever(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_enter_game)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_gamever();
  inline void clear_has_gamever();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 gamever_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_enter_game* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_enter_game_result : public ::google::protobuf::Message {
 public:
  packetw2c_enter_game_result();
  virtual ~packetw2c_enter_game_result();

  packetw2c_enter_game_result(const packetw2c_enter_game_result& from);

  inline packetw2c_enter_game_result& operator=(const packetw2c_enter_game_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_enter_game_result& default_instance();

  void Swap(packetw2c_enter_game_result* other);

  // implements Message ----------------------------------------------

  packetw2c_enter_game_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_enter_game_result& from);
  void MergeFrom(const packetw2c_enter_game_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_enter_game_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_enter_game_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_enter_game_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_gm_command : public ::google::protobuf::Message {
 public:
  packetc2w_gm_command();
  virtual ~packetc2w_gm_command();

  packetc2w_gm_command(const packetc2w_gm_command& from);

  inline packetc2w_gm_command& operator=(const packetc2w_gm_command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_gm_command& default_instance();

  void Swap(packetc2w_gm_command* other);

  // implements Message ----------------------------------------------

  packetc2w_gm_command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_gm_command& from);
  void MergeFrom(const packetc2w_gm_command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_command];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string command = 2;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 2;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  inline ::std::string* release_command();
  inline void set_allocated_command(::std::string* command);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_gm_command)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_command();
  inline void clear_has_command();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* command_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_gm_command* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_gm_command_result : public ::google::protobuf::Message {
 public:
  packetw2c_gm_command_result();
  virtual ~packetw2c_gm_command_result();

  packetw2c_gm_command_result(const packetw2c_gm_command_result& from);

  inline packetw2c_gm_command_result& operator=(const packetw2c_gm_command_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_gm_command_result& default_instance();

  void Swap(packetw2c_gm_command_result* other);

  // implements Message ----------------------------------------------

  packetw2c_gm_command_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_gm_command_result& from);
  void MergeFrom(const packetw2c_gm_command_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_command_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_gm_command_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_gm_command_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ask_check_payment : public ::google::protobuf::Message {
 public:
  packetc2w_ask_check_payment();
  virtual ~packetc2w_ask_check_payment();

  packetc2w_ask_check_payment(const packetc2w_ask_check_payment& from);

  inline packetc2w_ask_check_payment& operator=(const packetc2w_ask_check_payment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ask_check_payment& default_instance();

  void Swap(packetc2w_ask_check_payment* other);

  // implements Message ----------------------------------------------

  packetc2w_ask_check_payment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ask_check_payment& from);
  void MergeFrom(const packetc2w_ask_check_payment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_check_payment];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string orderid = 2;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 2;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // optional bool ex_mark = 3 [default = false];
  inline bool has_ex_mark() const;
  inline void clear_ex_mark();
  static const int kExMarkFieldNumber = 3;
  inline bool ex_mark() const;
  inline void set_ex_mark(bool value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ask_check_payment)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_ex_mark();
  inline void clear_has_ex_mark();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* orderid_;
  int packet_id_;
  bool ex_mark_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ask_check_payment* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_ask_test_payment : public ::google::protobuf::Message {
 public:
  packetc2w_ask_test_payment();
  virtual ~packetc2w_ask_test_payment();

  packetc2w_ask_test_payment(const packetc2w_ask_test_payment& from);

  inline packetc2w_ask_test_payment& operator=(const packetc2w_ask_test_payment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_ask_test_payment& default_instance();

  void Swap(packetc2w_ask_test_payment* other);

  // implements Message ----------------------------------------------

  packetc2w_ask_test_payment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_ask_test_payment& from);
  void MergeFrom(const packetc2w_ask_test_payment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_test_payment];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 payid = 2;
  inline bool has_payid() const;
  inline void clear_payid();
  static const int kPayidFieldNumber = 2;
  inline ::google::protobuf::int32 payid() const;
  inline void set_payid(::google::protobuf::int32 value);

  // optional bool ex_mark = 3 [default = false];
  inline bool has_ex_mark() const;
  inline void clear_ex_mark();
  static const int kExMarkFieldNumber = 3;
  inline bool ex_mark() const;
  inline void set_ex_mark(bool value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_ask_test_payment)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_payid();
  inline void clear_has_payid();
  inline void set_has_ex_mark();
  inline void clear_has_ex_mark();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 payid_;
  bool ex_mark_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_ask_test_payment* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_ask_check_payment_result : public ::google::protobuf::Message {
 public:
  packetw2c_ask_check_payment_result();
  virtual ~packetw2c_ask_check_payment_result();

  packetw2c_ask_check_payment_result(const packetw2c_ask_check_payment_result& from);

  inline packetw2c_ask_check_payment_result& operator=(const packetw2c_ask_check_payment_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_ask_check_payment_result& default_instance();

  void Swap(packetw2c_ask_check_payment_result* other);

  // implements Message ----------------------------------------------

  packetw2c_ask_check_payment_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_ask_check_payment_result& from);
  void MergeFrom(const packetw2c_ask_check_payment_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 payid = 2;
  inline bool has_payid() const;
  inline void clear_payid();
  static const int kPayidFieldNumber = 2;
  inline ::google::protobuf::int32 payid() const;
  inline void set_payid(::google::protobuf::int32 value);

  // optional bool result = 3 [default = true];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline bool result() const;
  inline void set_result(bool value);

  // optional int32 lottery_rate = 4 [default = 0];
  inline bool has_lottery_rate() const;
  inline void clear_lottery_rate();
  static const int kLotteryRateFieldNumber = 4;
  inline ::google::protobuf::int32 lottery_rate() const;
  inline void set_lottery_rate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_ask_check_payment_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_payid();
  inline void clear_has_payid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_lottery_rate();
  inline void clear_has_lottery_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 payid_;
  bool result_;
  ::google::protobuf::int32 lottery_rate_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_ask_check_payment_result* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_ask_check_payment_result2 : public ::google::protobuf::Message {
 public:
  packetw2c_ask_check_payment_result2();
  virtual ~packetw2c_ask_check_payment_result2();

  packetw2c_ask_check_payment_result2(const packetw2c_ask_check_payment_result2& from);

  inline packetw2c_ask_check_payment_result2& operator=(const packetw2c_ask_check_payment_result2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_ask_check_payment_result2& default_instance();

  void Swap(packetw2c_ask_check_payment_result2* other);

  // implements Message ----------------------------------------------

  packetw2c_ask_check_payment_result2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_ask_check_payment_result2& from);
  void MergeFrom(const packetw2c_ask_check_payment_result2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result2];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 pay_type = 2;
  inline bool has_pay_type() const;
  inline void clear_pay_type();
  static const int kPayTypeFieldNumber = 2;
  inline ::google::protobuf::int32 pay_type() const;
  inline void set_pay_type(::google::protobuf::int32 value);

  // optional int32 pay_value = 3;
  inline bool has_pay_value() const;
  inline void clear_pay_value();
  static const int kPayValueFieldNumber = 3;
  inline ::google::protobuf::int32 pay_value() const;
  inline void set_pay_value(::google::protobuf::int32 value);

  // optional int32 vip_exp = 4;
  inline bool has_vip_exp() const;
  inline void clear_vip_exp();
  static const int kVipExpFieldNumber = 4;
  inline ::google::protobuf::int32 vip_exp() const;
  inline void set_vip_exp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_ask_check_payment_result2)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_pay_type();
  inline void clear_has_pay_type();
  inline void set_has_pay_value();
  inline void clear_has_pay_value();
  inline void set_has_vip_exp();
  inline void clear_has_vip_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 pay_type_;
  ::google::protobuf::int32 pay_value_;
  ::google::protobuf::int32 vip_exp_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_ask_check_payment_result2* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_leave_game : public ::google::protobuf::Message {
 public:
  packetc2w_leave_game();
  virtual ~packetc2w_leave_game();

  packetc2w_leave_game(const packetc2w_leave_game& from);

  inline packetc2w_leave_game& operator=(const packetc2w_leave_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_leave_game& default_instance();

  void Swap(packetc2w_leave_game* other);

  // implements Message ----------------------------------------------

  packetc2w_leave_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_leave_game& from);
  void MergeFrom(const packetc2w_leave_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_leave_game];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_leave_game)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_leave_game* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_leave_game_result : public ::google::protobuf::Message {
 public:
  packetw2c_leave_game_result();
  virtual ~packetw2c_leave_game_result();

  packetw2c_leave_game_result(const packetw2c_leave_game_result& from);

  inline packetw2c_leave_game_result& operator=(const packetw2c_leave_game_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_leave_game_result& default_instance();

  void Swap(packetw2c_leave_game_result* other);

  // implements Message ----------------------------------------------

  packetw2c_leave_game_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_leave_game_result& from);
  void MergeFrom(const packetw2c_leave_game_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_leave_game_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_leave_game_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_leave_game_result* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_player_kick : public ::google::protobuf::Message {
 public:
  packetw2c_player_kick();
  virtual ~packetw2c_player_kick();

  packetw2c_player_kick(const packetw2c_player_kick& from);

  inline packetw2c_player_kick& operator=(const packetw2c_player_kick& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_player_kick& default_instance();

  void Swap(packetw2c_player_kick* other);

  // implements Message ----------------------------------------------

  packetw2c_player_kick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_player_kick& from);
  void MergeFrom(const packetw2c_player_kick& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_kick];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 kick_type = 2 [default = 0];
  inline bool has_kick_type() const;
  inline void clear_kick_type();
  static const int kKickTypeFieldNumber = 2;
  inline ::google::protobuf::int32 kick_type() const;
  inline void set_kick_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_player_kick)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_kick_type();
  inline void clear_has_kick_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 kick_type_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_player_kick* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_get_gamelist : public ::google::protobuf::Message {
 public:
  packetc2w_get_gamelist();
  virtual ~packetc2w_get_gamelist();

  packetc2w_get_gamelist(const packetc2w_get_gamelist& from);

  inline packetc2w_get_gamelist& operator=(const packetc2w_get_gamelist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_get_gamelist& default_instance();

  void Swap(packetc2w_get_gamelist* other);

  // implements Message ----------------------------------------------

  packetc2w_get_gamelist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_get_gamelist& from);
  void MergeFrom(const packetc2w_get_gamelist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_gamelist];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_get_gamelist)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_get_gamelist* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_get_gamelist_result : public ::google::protobuf::Message {
 public:
  packetw2c_get_gamelist_result();
  virtual ~packetw2c_get_gamelist_result();

  packetw2c_get_gamelist_result(const packetw2c_get_gamelist_result& from);

  inline packetw2c_get_gamelist_result& operator=(const packetw2c_get_gamelist_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_get_gamelist_result& default_instance();

  void Swap(packetw2c_get_gamelist_result* other);

  // implements Message ----------------------------------------------

  packetw2c_get_gamelist_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_get_gamelist_result& from);
  void MergeFrom(const packetw2c_get_gamelist_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_gamelist_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.msg_game_info game_list = 2;
  inline int game_list_size() const;
  inline void clear_game_list();
  static const int kGameListFieldNumber = 2;
  inline const ::client2world_protocols::msg_game_info& game_list(int index) const;
  inline ::client2world_protocols::msg_game_info* mutable_game_list(int index);
  inline ::client2world_protocols::msg_game_info* add_game_list();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >&
      game_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >*
      mutable_game_list();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_get_gamelist_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info > game_list_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_get_gamelist_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_first_login : public ::google::protobuf::Message {
 public:
  packetc2w_first_login();
  virtual ~packetc2w_first_login();

  packetc2w_first_login(const packetc2w_first_login& from);

  inline packetc2w_first_login& operator=(const packetc2w_first_login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_first_login& default_instance();

  void Swap(packetc2w_first_login* other);

  // implements Message ----------------------------------------------

  packetc2w_first_login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_first_login& from);
  void MergeFrom(const packetc2w_first_login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_first_login];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_first_login)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_first_login* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_first_login_result : public ::google::protobuf::Message {
 public:
  packetw2c_first_login_result();
  virtual ~packetw2c_first_login_result();

  packetw2c_first_login_result(const packetw2c_first_login_result& from);

  inline packetw2c_first_login_result& operator=(const packetw2c_first_login_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_first_login_result& default_instance();

  void Swap(packetw2c_first_login_result* other);

  // implements Message ----------------------------------------------

  packetw2c_first_login_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_first_login_result& from);
  void MergeFrom(const packetw2c_first_login_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_first_login_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_first_login_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  int result_;
  friend void  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_client2world_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_first_login_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2w_player_connect

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_connect];
inline bool packetc2w_player_connect::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_player_connect::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_player_connect::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_player_connect::clear_packet_id() {
  packet_id_ = 5001;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_player_connect::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_player_connect.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_player_connect::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_player_connect.packet_id)
}

// optional string account = 2;
inline bool packetc2w_player_connect::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_player_connect::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_player_connect::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_player_connect::clear_account() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& packetc2w_player_connect::account() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_player_connect.account)
  return *account_;
}
inline void packetc2w_player_connect::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_player_connect.account)
}
inline void packetc2w_player_connect::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_player_connect.account)
}
inline void packetc2w_player_connect::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_player_connect.account)
}
inline ::std::string* packetc2w_player_connect::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    account_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_player_connect.account)
  return account_;
}
inline ::std::string* packetc2w_player_connect::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_player_connect::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_player_connect.account)
}

// optional string token = 3;
inline bool packetc2w_player_connect::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_player_connect::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_player_connect::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_player_connect::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& packetc2w_player_connect::token() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_player_connect.token)
  return *token_;
}
inline void packetc2w_player_connect::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_player_connect.token)
}
inline void packetc2w_player_connect::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_player_connect.token)
}
inline void packetc2w_player_connect::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_player_connect.token)
}
inline ::std::string* packetc2w_player_connect::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_player_connect.token)
  return token_;
}
inline ::std::string* packetc2w_player_connect::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_player_connect::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_player_connect.token)
}

// optional string sign = 4;
inline bool packetc2w_player_connect::has_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2w_player_connect::set_has_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2w_player_connect::clear_has_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2w_player_connect::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& packetc2w_player_connect::sign() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_player_connect.sign)
  return *sign_;
}
inline void packetc2w_player_connect::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_player_connect.sign)
}
inline void packetc2w_player_connect::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_player_connect.sign)
}
inline void packetc2w_player_connect::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_player_connect.sign)
}
inline ::std::string* packetc2w_player_connect::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_player_connect.sign)
  return sign_;
}
inline ::std::string* packetc2w_player_connect::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_player_connect::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_player_connect.sign)
}

// optional string platform = 5;
inline bool packetc2w_player_connect::has_platform() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetc2w_player_connect::set_has_platform() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetc2w_player_connect::clear_has_platform() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetc2w_player_connect::clear_platform() {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& packetc2w_player_connect::platform() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_player_connect.platform)
  return *platform_;
}
inline void packetc2w_player_connect::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_player_connect.platform)
}
inline void packetc2w_player_connect::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_player_connect.platform)
}
inline void packetc2w_player_connect::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_player_connect.platform)
}
inline ::std::string* packetc2w_player_connect::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_player_connect.platform)
  return platform_;
}
inline ::std::string* packetc2w_player_connect::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_player_connect::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_player_connect.platform)
}

// optional string login_platform = 6;
inline bool packetc2w_player_connect::has_login_platform() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetc2w_player_connect::set_has_login_platform() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetc2w_player_connect::clear_has_login_platform() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetc2w_player_connect::clear_login_platform() {
  if (login_platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_platform_->clear();
  }
  clear_has_login_platform();
}
inline const ::std::string& packetc2w_player_connect::login_platform() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_player_connect.login_platform)
  return *login_platform_;
}
inline void packetc2w_player_connect::set_login_platform(const ::std::string& value) {
  set_has_login_platform();
  if (login_platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_platform_ = new ::std::string;
  }
  login_platform_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_player_connect.login_platform)
}
inline void packetc2w_player_connect::set_login_platform(const char* value) {
  set_has_login_platform();
  if (login_platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_platform_ = new ::std::string;
  }
  login_platform_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_player_connect.login_platform)
}
inline void packetc2w_player_connect::set_login_platform(const char* value, size_t size) {
  set_has_login_platform();
  if (login_platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_platform_ = new ::std::string;
  }
  login_platform_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_player_connect.login_platform)
}
inline ::std::string* packetc2w_player_connect::mutable_login_platform() {
  set_has_login_platform();
  if (login_platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_platform_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_player_connect.login_platform)
  return login_platform_;
}
inline ::std::string* packetc2w_player_connect::release_login_platform() {
  clear_has_login_platform();
  if (login_platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = login_platform_;
    login_platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_player_connect::set_allocated_login_platform(::std::string* login_platform) {
  if (login_platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_platform_;
  }
  if (login_platform) {
    set_has_login_platform();
    login_platform_ = login_platform;
  } else {
    clear_has_login_platform();
    login_platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_player_connect.login_platform)
}

// optional string Machine_code = 7;
inline bool packetc2w_player_connect::has_machine_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetc2w_player_connect::set_has_machine_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetc2w_player_connect::clear_has_machine_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetc2w_player_connect::clear_machine_code() {
  if (machine_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machine_code_->clear();
  }
  clear_has_machine_code();
}
inline const ::std::string& packetc2w_player_connect::machine_code() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_player_connect.Machine_code)
  return *machine_code_;
}
inline void packetc2w_player_connect::set_machine_code(const ::std::string& value) {
  set_has_machine_code();
  if (machine_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machine_code_ = new ::std::string;
  }
  machine_code_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_player_connect.Machine_code)
}
inline void packetc2w_player_connect::set_machine_code(const char* value) {
  set_has_machine_code();
  if (machine_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machine_code_ = new ::std::string;
  }
  machine_code_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_player_connect.Machine_code)
}
inline void packetc2w_player_connect::set_machine_code(const char* value, size_t size) {
  set_has_machine_code();
  if (machine_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machine_code_ = new ::std::string;
  }
  machine_code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_player_connect.Machine_code)
}
inline ::std::string* packetc2w_player_connect::mutable_machine_code() {
  set_has_machine_code();
  if (machine_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machine_code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_player_connect.Machine_code)
  return machine_code_;
}
inline ::std::string* packetc2w_player_connect::release_machine_code() {
  clear_has_machine_code();
  if (machine_code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = machine_code_;
    machine_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_player_connect::set_allocated_machine_code(::std::string* machine_code) {
  if (machine_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete machine_code_;
  }
  if (machine_code) {
    set_has_machine_code();
    machine_code_ = machine_code;
  } else {
    clear_has_machine_code();
    machine_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_player_connect.Machine_code)
}

// optional string Machine_type = 8;
inline bool packetc2w_player_connect::has_machine_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetc2w_player_connect::set_has_machine_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetc2w_player_connect::clear_has_machine_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetc2w_player_connect::clear_machine_type() {
  if (machine_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machine_type_->clear();
  }
  clear_has_machine_type();
}
inline const ::std::string& packetc2w_player_connect::machine_type() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_player_connect.Machine_type)
  return *machine_type_;
}
inline void packetc2w_player_connect::set_machine_type(const ::std::string& value) {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machine_type_ = new ::std::string;
  }
  machine_type_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_player_connect.Machine_type)
}
inline void packetc2w_player_connect::set_machine_type(const char* value) {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machine_type_ = new ::std::string;
  }
  machine_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_player_connect.Machine_type)
}
inline void packetc2w_player_connect::set_machine_type(const char* value, size_t size) {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machine_type_ = new ::std::string;
  }
  machine_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_player_connect.Machine_type)
}
inline ::std::string* packetc2w_player_connect::mutable_machine_type() {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    machine_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_player_connect.Machine_type)
  return machine_type_;
}
inline ::std::string* packetc2w_player_connect::release_machine_type() {
  clear_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = machine_type_;
    machine_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_player_connect::set_allocated_machine_type(::std::string* machine_type) {
  if (machine_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete machine_type_;
  }
  if (machine_type) {
    set_has_machine_type();
    machine_type_ = machine_type;
  } else {
    clear_has_machine_type();
    machine_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_player_connect.Machine_type)
}

// optional int32 channelid = 9;
inline bool packetc2w_player_connect::has_channelid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void packetc2w_player_connect::set_has_channelid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void packetc2w_player_connect::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void packetc2w_player_connect::clear_channelid() {
  channelid_ = 0;
  clear_has_channelid();
}
inline ::google::protobuf::int32 packetc2w_player_connect::channelid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_player_connect.channelid)
  return channelid_;
}
inline void packetc2w_player_connect::set_channelid(::google::protobuf::int32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_player_connect.channelid)
}

// -------------------------------------------------------------------

// packetw2c_player_connect_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_connect_result];
inline bool packetw2c_player_connect_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_player_connect_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_player_connect_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_player_connect_result::clear_packet_id() {
  packet_id_ = 7501;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_player_connect_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_player_connect_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_player_connect_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_player_connect_result.packet_id)
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_player_connect_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_player_connect_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_player_connect_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_player_connect_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_player_connect_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_player_connect_result.result)
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_player_connect_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_player_connect_result.result)
}

// optional int32 servertime = 3;
inline bool packetw2c_player_connect_result::has_servertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_player_connect_result::set_has_servertime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_player_connect_result::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_player_connect_result::clear_servertime() {
  servertime_ = 0;
  clear_has_servertime();
}
inline ::google::protobuf::int32 packetw2c_player_connect_result::servertime() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_player_connect_result.servertime)
  return servertime_;
}
inline void packetw2c_player_connect_result::set_servertime(::google::protobuf::int32 value) {
  set_has_servertime();
  servertime_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_player_connect_result.servertime)
}

// optional int32 gaming = 4 [default = 0];
inline bool packetw2c_player_connect_result::has_gaming() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_player_connect_result::set_has_gaming() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_player_connect_result::clear_has_gaming() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_player_connect_result::clear_gaming() {
  gaming_ = 0;
  clear_has_gaming();
}
inline ::google::protobuf::int32 packetw2c_player_connect_result::gaming() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_player_connect_result.gaming)
  return gaming_;
}
inline void packetw2c_player_connect_result::set_gaming(::google::protobuf::int32 value) {
  set_has_gaming();
  gaming_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_player_connect_result.gaming)
}

// optional string ver = 5;
inline bool packetw2c_player_connect_result::has_ver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_player_connect_result::set_has_ver() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_player_connect_result::clear_has_ver() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_player_connect_result::clear_ver() {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_->clear();
  }
  clear_has_ver();
}
inline const ::std::string& packetw2c_player_connect_result::ver() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_player_connect_result.ver)
  return *ver_;
}
inline void packetw2c_player_connect_result::set_ver(const ::std::string& value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_player_connect_result.ver)
}
inline void packetw2c_player_connect_result::set_ver(const char* value) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetw2c_player_connect_result.ver)
}
inline void packetw2c_player_connect_result::set_ver(const char* value, size_t size) {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  ver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetw2c_player_connect_result.ver)
}
inline ::std::string* packetw2c_player_connect_result::mutable_ver() {
  set_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_player_connect_result.ver)
  return ver_;
}
inline ::std::string* packetw2c_player_connect_result::release_ver() {
  clear_has_ver();
  if (ver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ver_;
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetw2c_player_connect_result::set_allocated_ver(::std::string* ver) {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (ver) {
    set_has_ver();
    ver_ = ver;
  } else {
    clear_has_ver();
    ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_player_connect_result.ver)
}

// -------------------------------------------------------------------

// packet_c2w_timesync

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_timesync];
inline bool packet_c2w_timesync::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_c2w_timesync::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_c2w_timesync::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_c2w_timesync::clear_packet_id() {
  packet_id_ = 5002;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packet_c2w_timesync::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packet_c2w_timesync.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_c2w_timesync::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packet_c2w_timesync.packet_id)
}

// -------------------------------------------------------------------

// packet_w2c_timesync_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_timesync_result];
inline bool packet_w2c_timesync_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packet_w2c_timesync_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packet_w2c_timesync_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packet_w2c_timesync_result::clear_packet_id() {
  packet_id_ = 7502;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packet_w2c_timesync_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packet_w2c_timesync_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packet_w2c_timesync_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packet_w2c_timesync_result.packet_id)
}

// optional int32 server_time = 2;
inline bool packet_w2c_timesync_result::has_server_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packet_w2c_timesync_result::set_has_server_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packet_w2c_timesync_result::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packet_w2c_timesync_result::clear_server_time() {
  server_time_ = 0;
  clear_has_server_time();
}
inline ::google::protobuf::int32 packet_w2c_timesync_result::server_time() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packet_w2c_timesync_result.server_time)
  return server_time_;
}
inline void packet_w2c_timesync_result::set_server_time(::google::protobuf::int32 value) {
  set_has_server_time();
  server_time_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packet_w2c_timesync_result.server_time)
}

// -------------------------------------------------------------------

// packetc2w_ask_login

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_asklogin];
inline bool packetc2w_ask_login::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ask_login::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ask_login::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ask_login::clear_packet_id() {
  packet_id_ = 5003;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ask_login::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_ask_login.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ask_login::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_ask_login.packet_id)
}

// -------------------------------------------------------------------

// msg_game_info

// optional int32 gameid = 1;
inline bool msg_game_info::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_game_info::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_game_info::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_game_info::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 msg_game_info::gameid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.msg_game_info.gameid)
  return gameid_;
}
inline void msg_game_info::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.msg_game_info.gameid)
}

// optional int32 gamever = 2;
inline bool msg_game_info::has_gamever() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_game_info::set_has_gamever() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_game_info::clear_has_gamever() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_game_info::clear_gamever() {
  gamever_ = 0;
  clear_has_gamever();
}
inline ::google::protobuf::int32 msg_game_info::gamever() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.msg_game_info.gamever)
  return gamever_;
}
inline void msg_game_info::set_gamever(::google::protobuf::int32 value) {
  set_has_gamever();
  gamever_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.msg_game_info.gamever)
}

// optional int32 curOnlineNum = 3;
inline bool msg_game_info::has_curonlinenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_game_info::set_has_curonlinenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_game_info::clear_has_curonlinenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_game_info::clear_curonlinenum() {
  curonlinenum_ = 0;
  clear_has_curonlinenum();
}
inline ::google::protobuf::int32 msg_game_info::curonlinenum() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.msg_game_info.curOnlineNum)
  return curonlinenum_;
}
inline void msg_game_info::set_curonlinenum(::google::protobuf::int32 value) {
  set_has_curonlinenum();
  curonlinenum_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.msg_game_info.curOnlineNum)
}

// -------------------------------------------------------------------

// packetw2c_ask_login_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_asklogin_result];
inline bool packetw2c_ask_login_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_ask_login_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_ask_login_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_ask_login_result::clear_packet_id() {
  packet_id_ = 7503;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_ask_login_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_ask_login_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_ask_login_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_ask_login_result.packet_id)
}

// optional .msg_info_def.msg_account_info account_info = 2;
inline bool packetw2c_ask_login_result::has_account_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_ask_login_result::set_has_account_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_ask_login_result::clear_has_account_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_ask_login_result::clear_account_info() {
  if (account_info_ != NULL) account_info_->::msg_info_def::msg_account_info::Clear();
  clear_has_account_info();
}
inline const ::msg_info_def::msg_account_info& packetw2c_ask_login_result::account_info() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_ask_login_result.account_info)
  return account_info_ != NULL ? *account_info_ : *default_instance_->account_info_;
}
inline ::msg_info_def::msg_account_info* packetw2c_ask_login_result::mutable_account_info() {
  set_has_account_info();
  if (account_info_ == NULL) account_info_ = new ::msg_info_def::msg_account_info;
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_ask_login_result.account_info)
  return account_info_;
}
inline ::msg_info_def::msg_account_info* packetw2c_ask_login_result::release_account_info() {
  clear_has_account_info();
  ::msg_info_def::msg_account_info* temp = account_info_;
  account_info_ = NULL;
  return temp;
}
inline void packetw2c_ask_login_result::set_allocated_account_info(::msg_info_def::msg_account_info* account_info) {
  delete account_info_;
  account_info_ = account_info;
  if (account_info) {
    set_has_account_info();
  } else {
    clear_has_account_info();
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_ask_login_result.account_info)
}

// repeated .client2world_protocols.msg_game_info game_list = 3;
inline int packetw2c_ask_login_result::game_list_size() const {
  return game_list_.size();
}
inline void packetw2c_ask_login_result::clear_game_list() {
  game_list_.Clear();
}
inline const ::client2world_protocols::msg_game_info& packetw2c_ask_login_result::game_list(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_ask_login_result.game_list)
  return game_list_.Get(index);
}
inline ::client2world_protocols::msg_game_info* packetw2c_ask_login_result::mutable_game_list(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_ask_login_result.game_list)
  return game_list_.Mutable(index);
}
inline ::client2world_protocols::msg_game_info* packetw2c_ask_login_result::add_game_list() {
  // @@protoc_insertion_point(field_add:client2world_protocols.packetw2c_ask_login_result.game_list)
  return game_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >&
packetw2c_ask_login_result::game_list() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.packetw2c_ask_login_result.game_list)
  return game_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >*
packetw2c_ask_login_result::mutable_game_list() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.packetw2c_ask_login_result.game_list)
  return &game_list_;
}

// optional int32 gaming = 4 [default = 0];
inline bool packetw2c_ask_login_result::has_gaming() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_ask_login_result::set_has_gaming() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_ask_login_result::clear_has_gaming() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_ask_login_result::clear_gaming() {
  gaming_ = 0;
  clear_has_gaming();
}
inline ::google::protobuf::int32 packetw2c_ask_login_result::gaming() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_ask_login_result.gaming)
  return gaming_;
}
inline void packetw2c_ask_login_result::set_gaming(::google::protobuf::int32 value) {
  set_has_gaming();
  gaming_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_ask_login_result.gaming)
}

// -------------------------------------------------------------------

// packetc2w_enter_game

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_enter_game];
inline bool packetc2w_enter_game::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_enter_game::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_enter_game::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_enter_game::clear_packet_id() {
  packet_id_ = 5004;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_enter_game::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_enter_game.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_enter_game::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_enter_game.packet_id)
}

// optional int32 gameid = 2;
inline bool packetc2w_enter_game::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_enter_game::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_enter_game::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_enter_game::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 packetc2w_enter_game::gameid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_enter_game.gameid)
  return gameid_;
}
inline void packetc2w_enter_game::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_enter_game.gameid)
}

// optional int32 gamever = 3;
inline bool packetc2w_enter_game::has_gamever() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_enter_game::set_has_gamever() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_enter_game::clear_has_gamever() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_enter_game::clear_gamever() {
  gamever_ = 0;
  clear_has_gamever();
}
inline ::google::protobuf::int32 packetc2w_enter_game::gamever() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_enter_game.gamever)
  return gamever_;
}
inline void packetc2w_enter_game::set_gamever(::google::protobuf::int32 value) {
  set_has_gamever();
  gamever_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_enter_game.gamever)
}

// -------------------------------------------------------------------

// packetw2c_enter_game_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_enter_game_result];
inline bool packetw2c_enter_game_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_enter_game_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_enter_game_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_enter_game_result::clear_packet_id() {
  packet_id_ = 7504;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_enter_game_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_enter_game_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_enter_game_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_enter_game_result.packet_id)
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_enter_game_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_enter_game_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_enter_game_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_enter_game_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_enter_game_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_enter_game_result.result)
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_enter_game_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_enter_game_result.result)
}

// -------------------------------------------------------------------

// packetc2w_gm_command

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_command];
inline bool packetc2w_gm_command::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_gm_command::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_gm_command::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_gm_command::clear_packet_id() {
  packet_id_ = 5005;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_gm_command::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_gm_command.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_gm_command::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_gm_command.packet_id)
}

// optional string command = 2;
inline bool packetc2w_gm_command::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_gm_command::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_gm_command::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_gm_command::clear_command() {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_->clear();
  }
  clear_has_command();
}
inline const ::std::string& packetc2w_gm_command::command() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_gm_command.command)
  return *command_;
}
inline void packetc2w_gm_command::set_command(const ::std::string& value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_ = new ::std::string;
  }
  command_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_gm_command.command)
}
inline void packetc2w_gm_command::set_command(const char* value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_ = new ::std::string;
  }
  command_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_gm_command.command)
}
inline void packetc2w_gm_command::set_command(const char* value, size_t size) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_gm_command.command)
}
inline ::std::string* packetc2w_gm_command::mutable_command() {
  set_has_command();
  if (command_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_gm_command.command)
  return command_;
}
inline ::std::string* packetc2w_gm_command::release_command() {
  clear_has_command();
  if (command_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = command_;
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_gm_command::set_allocated_command(::std::string* command) {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_;
  }
  if (command) {
    set_has_command();
    command_ = command;
  } else {
    clear_has_command();
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_gm_command.command)
}

// -------------------------------------------------------------------

// packetw2c_gm_command_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_command_result];
inline bool packetw2c_gm_command_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_gm_command_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_gm_command_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_gm_command_result::clear_packet_id() {
  packet_id_ = 7505;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_gm_command_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_gm_command_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_gm_command_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_gm_command_result.packet_id)
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_gm_command_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_gm_command_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_gm_command_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_gm_command_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_gm_command_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_gm_command_result.result)
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_gm_command_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_gm_command_result.result)
}

// -------------------------------------------------------------------

// packetc2w_ask_check_payment

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_check_payment];
inline bool packetc2w_ask_check_payment::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ask_check_payment::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ask_check_payment::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ask_check_payment::clear_packet_id() {
  packet_id_ = 5006;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ask_check_payment::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_ask_check_payment.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ask_check_payment::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_ask_check_payment.packet_id)
}

// optional string orderid = 2;
inline bool packetc2w_ask_check_payment::has_orderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_ask_check_payment::set_has_orderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_ask_check_payment::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_ask_check_payment::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& packetc2w_ask_check_payment::orderid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_ask_check_payment.orderid)
  return *orderid_;
}
inline void packetc2w_ask_check_payment::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_ask_check_payment.orderid)
}
inline void packetc2w_ask_check_payment::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_ask_check_payment.orderid)
}
inline void packetc2w_ask_check_payment::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_ask_check_payment.orderid)
}
inline ::std::string* packetc2w_ask_check_payment::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    orderid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_ask_check_payment.orderid)
  return orderid_;
}
inline ::std::string* packetc2w_ask_check_payment::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_ask_check_payment::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_ask_check_payment.orderid)
}

// optional bool ex_mark = 3 [default = false];
inline bool packetc2w_ask_check_payment::has_ex_mark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_ask_check_payment::set_has_ex_mark() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_ask_check_payment::clear_has_ex_mark() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_ask_check_payment::clear_ex_mark() {
  ex_mark_ = false;
  clear_has_ex_mark();
}
inline bool packetc2w_ask_check_payment::ex_mark() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_ask_check_payment.ex_mark)
  return ex_mark_;
}
inline void packetc2w_ask_check_payment::set_ex_mark(bool value) {
  set_has_ex_mark();
  ex_mark_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_ask_check_payment.ex_mark)
}

// -------------------------------------------------------------------

// packetc2w_ask_test_payment

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_test_payment];
inline bool packetc2w_ask_test_payment::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_ask_test_payment::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_ask_test_payment::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_ask_test_payment::clear_packet_id() {
  packet_id_ = 5007;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_ask_test_payment::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_ask_test_payment.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_ask_test_payment::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_ask_test_payment.packet_id)
}

// optional int32 payid = 2;
inline bool packetc2w_ask_test_payment::has_payid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_ask_test_payment::set_has_payid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_ask_test_payment::clear_has_payid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_ask_test_payment::clear_payid() {
  payid_ = 0;
  clear_has_payid();
}
inline ::google::protobuf::int32 packetc2w_ask_test_payment::payid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_ask_test_payment.payid)
  return payid_;
}
inline void packetc2w_ask_test_payment::set_payid(::google::protobuf::int32 value) {
  set_has_payid();
  payid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_ask_test_payment.payid)
}

// optional bool ex_mark = 3 [default = false];
inline bool packetc2w_ask_test_payment::has_ex_mark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_ask_test_payment::set_has_ex_mark() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_ask_test_payment::clear_has_ex_mark() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_ask_test_payment::clear_ex_mark() {
  ex_mark_ = false;
  clear_has_ex_mark();
}
inline bool packetc2w_ask_test_payment::ex_mark() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_ask_test_payment.ex_mark)
  return ex_mark_;
}
inline void packetc2w_ask_test_payment::set_ex_mark(bool value) {
  set_has_ex_mark();
  ex_mark_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_ask_test_payment.ex_mark)
}

// -------------------------------------------------------------------

// packetw2c_ask_check_payment_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result];
inline bool packetw2c_ask_check_payment_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_ask_check_payment_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_ask_check_payment_result::clear_packet_id() {
  packet_id_ = 7506;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_ask_check_payment_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_ask_check_payment_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_ask_check_payment_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_ask_check_payment_result.packet_id)
}

// optional int32 payid = 2;
inline bool packetw2c_ask_check_payment_result::has_payid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_payid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_ask_check_payment_result::clear_has_payid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_ask_check_payment_result::clear_payid() {
  payid_ = 0;
  clear_has_payid();
}
inline ::google::protobuf::int32 packetw2c_ask_check_payment_result::payid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_ask_check_payment_result.payid)
  return payid_;
}
inline void packetw2c_ask_check_payment_result::set_payid(::google::protobuf::int32 value) {
  set_has_payid();
  payid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_ask_check_payment_result.payid)
}

// optional bool result = 3 [default = true];
inline bool packetw2c_ask_check_payment_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_ask_check_payment_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_ask_check_payment_result::clear_result() {
  result_ = true;
  clear_has_result();
}
inline bool packetw2c_ask_check_payment_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_ask_check_payment_result.result)
  return result_;
}
inline void packetw2c_ask_check_payment_result::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_ask_check_payment_result.result)
}

// optional int32 lottery_rate = 4 [default = 0];
inline bool packetw2c_ask_check_payment_result::has_lottery_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_ask_check_payment_result::set_has_lottery_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_ask_check_payment_result::clear_has_lottery_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_ask_check_payment_result::clear_lottery_rate() {
  lottery_rate_ = 0;
  clear_has_lottery_rate();
}
inline ::google::protobuf::int32 packetw2c_ask_check_payment_result::lottery_rate() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_ask_check_payment_result.lottery_rate)
  return lottery_rate_;
}
inline void packetw2c_ask_check_payment_result::set_lottery_rate(::google::protobuf::int32 value) {
  set_has_lottery_rate();
  lottery_rate_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_ask_check_payment_result.lottery_rate)
}

// -------------------------------------------------------------------

// packetw2c_ask_check_payment_result2

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result2];
inline bool packetw2c_ask_check_payment_result2::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_ask_check_payment_result2::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_ask_check_payment_result2::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_ask_check_payment_result2::clear_packet_id() {
  packet_id_ = 7569;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_ask_check_payment_result2::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_ask_check_payment_result2.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_ask_check_payment_result2::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_ask_check_payment_result2.packet_id)
}

// optional int32 pay_type = 2;
inline bool packetw2c_ask_check_payment_result2::has_pay_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_ask_check_payment_result2::set_has_pay_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_ask_check_payment_result2::clear_has_pay_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_ask_check_payment_result2::clear_pay_type() {
  pay_type_ = 0;
  clear_has_pay_type();
}
inline ::google::protobuf::int32 packetw2c_ask_check_payment_result2::pay_type() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_ask_check_payment_result2.pay_type)
  return pay_type_;
}
inline void packetw2c_ask_check_payment_result2::set_pay_type(::google::protobuf::int32 value) {
  set_has_pay_type();
  pay_type_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_ask_check_payment_result2.pay_type)
}

// optional int32 pay_value = 3;
inline bool packetw2c_ask_check_payment_result2::has_pay_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_ask_check_payment_result2::set_has_pay_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_ask_check_payment_result2::clear_has_pay_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_ask_check_payment_result2::clear_pay_value() {
  pay_value_ = 0;
  clear_has_pay_value();
}
inline ::google::protobuf::int32 packetw2c_ask_check_payment_result2::pay_value() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_ask_check_payment_result2.pay_value)
  return pay_value_;
}
inline void packetw2c_ask_check_payment_result2::set_pay_value(::google::protobuf::int32 value) {
  set_has_pay_value();
  pay_value_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_ask_check_payment_result2.pay_value)
}

// optional int32 vip_exp = 4;
inline bool packetw2c_ask_check_payment_result2::has_vip_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_ask_check_payment_result2::set_has_vip_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_ask_check_payment_result2::clear_has_vip_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_ask_check_payment_result2::clear_vip_exp() {
  vip_exp_ = 0;
  clear_has_vip_exp();
}
inline ::google::protobuf::int32 packetw2c_ask_check_payment_result2::vip_exp() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_ask_check_payment_result2.vip_exp)
  return vip_exp_;
}
inline void packetw2c_ask_check_payment_result2::set_vip_exp(::google::protobuf::int32 value) {
  set_has_vip_exp();
  vip_exp_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_ask_check_payment_result2.vip_exp)
}

// -------------------------------------------------------------------

// packetc2w_leave_game

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_leave_game];
inline bool packetc2w_leave_game::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_leave_game::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_leave_game::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_leave_game::clear_packet_id() {
  packet_id_ = 5008;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_leave_game::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_leave_game.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_leave_game::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_leave_game.packet_id)
}

// -------------------------------------------------------------------

// packetw2c_leave_game_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_leave_game_result];
inline bool packetw2c_leave_game_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_leave_game_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_leave_game_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_leave_game_result::clear_packet_id() {
  packet_id_ = 7507;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_leave_game_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_leave_game_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_leave_game_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_leave_game_result.packet_id)
}

// -------------------------------------------------------------------

// packetw2c_player_kick

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_kick];
inline bool packetw2c_player_kick::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_player_kick::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_player_kick::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_player_kick::clear_packet_id() {
  packet_id_ = 7541;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_player_kick::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_player_kick.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_player_kick::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_player_kick.packet_id)
}

// optional int32 kick_type = 2 [default = 0];
inline bool packetw2c_player_kick::has_kick_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_player_kick::set_has_kick_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_player_kick::clear_has_kick_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_player_kick::clear_kick_type() {
  kick_type_ = 0;
  clear_has_kick_type();
}
inline ::google::protobuf::int32 packetw2c_player_kick::kick_type() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_player_kick.kick_type)
  return kick_type_;
}
inline void packetw2c_player_kick::set_kick_type(::google::protobuf::int32 value) {
  set_has_kick_type();
  kick_type_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_player_kick.kick_type)
}

// -------------------------------------------------------------------

// packetc2w_get_gamelist

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_gamelist];
inline bool packetc2w_get_gamelist::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_get_gamelist::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_get_gamelist::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_get_gamelist::clear_packet_id() {
  packet_id_ = 5048;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_get_gamelist::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_get_gamelist.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_get_gamelist::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_get_gamelist.packet_id)
}

// -------------------------------------------------------------------

// packetw2c_get_gamelist_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_gamelist_result];
inline bool packetw2c_get_gamelist_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_get_gamelist_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_get_gamelist_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_get_gamelist_result::clear_packet_id() {
  packet_id_ = 7552;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_get_gamelist_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_gamelist_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_get_gamelist_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_get_gamelist_result.packet_id)
}

// repeated .client2world_protocols.msg_game_info game_list = 2;
inline int packetw2c_get_gamelist_result::game_list_size() const {
  return game_list_.size();
}
inline void packetw2c_get_gamelist_result::clear_game_list() {
  game_list_.Clear();
}
inline const ::client2world_protocols::msg_game_info& packetw2c_get_gamelist_result::game_list(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_gamelist_result.game_list)
  return game_list_.Get(index);
}
inline ::client2world_protocols::msg_game_info* packetw2c_get_gamelist_result::mutable_game_list(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_get_gamelist_result.game_list)
  return game_list_.Mutable(index);
}
inline ::client2world_protocols::msg_game_info* packetw2c_get_gamelist_result::add_game_list() {
  // @@protoc_insertion_point(field_add:client2world_protocols.packetw2c_get_gamelist_result.game_list)
  return game_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >&
packetw2c_get_gamelist_result::game_list() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.packetw2c_get_gamelist_result.game_list)
  return game_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::msg_game_info >*
packetw2c_get_gamelist_result::mutable_game_list() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.packetw2c_get_gamelist_result.game_list)
  return &game_list_;
}

// -------------------------------------------------------------------

// packetc2w_first_login

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_first_login];
inline bool packetc2w_first_login::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_first_login::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_first_login::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_first_login::clear_packet_id() {
  packet_id_ = 5062;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_first_login::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_first_login.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_first_login::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_first_login.packet_id)
}

// -------------------------------------------------------------------

// packetw2c_first_login_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_first_login_result];
inline bool packetw2c_first_login_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_first_login_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_first_login_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_first_login_result::clear_packet_id() {
  packet_id_ = 7566;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_first_login_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_first_login_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_first_login_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_first_login_result.packet_id)
}

// optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
inline bool packetw2c_first_login_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_first_login_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_first_login_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_first_login_result::clear_result() {
  result_ = 2;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_first_login_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_first_login_result.result)
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_first_login_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_first_login_result.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5fprotocol_2eproto__INCLUDED
