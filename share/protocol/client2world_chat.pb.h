// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_chat.proto

#ifndef PROTOBUF_client2world_5fchat_2eproto__INCLUDED
#define PROTOBUF_client2world_5fchat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5fchat_2eproto();
void protobuf_AssignDesc_client2world_5fchat_2eproto();
void protobuf_ShutdownFile_client2world_5fchat_2eproto();

class packetc2w_chat;
class packetw2c_chat_result;
class packetw2c_notify;
class packetc2w_player_notify;
class packetw2c_player_notify_result;
class packetc2w_player_continuous_send_speaker;
class packetw2c_player_continuous_send_speaker_result;

// ===================================================================

class packetc2w_chat : public ::google::protobuf::Message {
 public:
  packetc2w_chat();
  virtual ~packetc2w_chat();

  packetc2w_chat(const packetc2w_chat& from);

  inline packetc2w_chat& operator=(const packetc2w_chat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_chat& default_instance();

  void Swap(packetc2w_chat* other);

  // implements Message ----------------------------------------------

  packetc2w_chat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_chat& from);
  void MergeFrom(const packetc2w_chat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_chat];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 audio_time = 3 [default = 0];
  inline bool has_audio_time() const;
  inline void clear_audio_time();
  static const int kAudioTimeFieldNumber = 3;
  inline ::google::protobuf::int32 audio_time() const;
  inline void set_audio_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_chat)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_audio_time();
  inline void clear_has_audio_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  int packet_id_;
  ::google::protobuf::int32 audio_time_;
  friend void  protobuf_AddDesc_client2world_5fchat_2eproto();
  friend void protobuf_AssignDesc_client2world_5fchat_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fchat_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_chat* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_chat_result : public ::google::protobuf::Message {
 public:
  packetw2c_chat_result();
  virtual ~packetw2c_chat_result();

  packetw2c_chat_result(const packetw2c_chat_result& from);

  inline packetw2c_chat_result& operator=(const packetw2c_chat_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_chat_result& default_instance();

  void Swap(packetw2c_chat_result* other);

  // implements Message ----------------------------------------------

  packetw2c_chat_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_chat_result& from);
  void MergeFrom(const packetw2c_chat_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_chat_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string talkerNickName = 3;
  inline bool has_talkernickname() const;
  inline void clear_talkernickname();
  static const int kTalkerNickNameFieldNumber = 3;
  inline const ::std::string& talkernickname() const;
  inline void set_talkernickname(const ::std::string& value);
  inline void set_talkernickname(const char* value);
  inline void set_talkernickname(const char* value, size_t size);
  inline ::std::string* mutable_talkernickname();
  inline ::std::string* release_talkernickname();
  inline void set_allocated_talkernickname(::std::string* talkernickname);

  // optional int32 talkerId = 4;
  inline bool has_talkerid() const;
  inline void clear_talkerid();
  static const int kTalkerIdFieldNumber = 4;
  inline ::google::protobuf::int32 talkerid() const;
  inline void set_talkerid(::google::protobuf::int32 value);

  // optional int32 result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 audio_time = 6 [default = 0];
  inline bool has_audio_time() const;
  inline void clear_audio_time();
  static const int kAudioTimeFieldNumber = 6;
  inline ::google::protobuf::int32 audio_time() const;
  inline void set_audio_time(::google::protobuf::int32 value);

  // optional int32 audio_len = 7 [default = 0];
  inline bool has_audio_len() const;
  inline void clear_audio_len();
  static const int kAudioLenFieldNumber = 7;
  inline ::google::protobuf::int32 audio_len() const;
  inline void set_audio_len(::google::protobuf::int32 value);

  // optional int32 talkerVIPLevel = 8;
  inline bool has_talkerviplevel() const;
  inline void clear_talkerviplevel();
  static const int kTalkerVIPLevelFieldNumber = 8;
  inline ::google::protobuf::int32 talkerviplevel() const;
  inline void set_talkerviplevel(::google::protobuf::int32 value);

  // optional bool hasMonthCard = 9;
  inline bool has_hasmonthcard() const;
  inline void clear_hasmonthcard();
  static const int kHasMonthCardFieldNumber = 9;
  inline bool hasmonthcard() const;
  inline void set_hasmonthcard(bool value);

  // optional int32 chatType = 10 [default = 0];
  inline bool has_chattype() const;
  inline void clear_chattype();
  static const int kChatTypeFieldNumber = 10;
  inline ::google::protobuf::int32 chattype() const;
  inline void set_chattype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_chat_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_talkernickname();
  inline void clear_has_talkernickname();
  inline void set_has_talkerid();
  inline void clear_has_talkerid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_audio_time();
  inline void clear_has_audio_time();
  inline void set_has_audio_len();
  inline void clear_has_audio_len();
  inline void set_has_talkerviplevel();
  inline void clear_has_talkerviplevel();
  inline void set_has_hasmonthcard();
  inline void clear_has_hasmonthcard();
  inline void set_has_chattype();
  inline void clear_has_chattype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  int packet_id_;
  ::google::protobuf::int32 talkerid_;
  ::std::string* talkernickname_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 audio_time_;
  ::google::protobuf::int32 audio_len_;
  ::google::protobuf::int32 talkerviplevel_;
  bool hasmonthcard_;
  ::google::protobuf::int32 chattype_;
  friend void  protobuf_AddDesc_client2world_5fchat_2eproto();
  friend void protobuf_AssignDesc_client2world_5fchat_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fchat_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_chat_result* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_notify : public ::google::protobuf::Message {
 public:
  packetw2c_notify();
  virtual ~packetw2c_notify();

  packetw2c_notify(const packetw2c_notify& from);

  inline packetw2c_notify& operator=(const packetw2c_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_notify& default_instance();

  void Swap(packetw2c_notify* other);

  // implements Message ----------------------------------------------

  packetw2c_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_notify& from);
  void MergeFrom(const packetw2c_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 notifyType = 3;
  inline bool has_notifytype() const;
  inline void clear_notifytype();
  static const int kNotifyTypeFieldNumber = 3;
  inline ::google::protobuf::int32 notifytype() const;
  inline void set_notifytype(::google::protobuf::int32 value);

  // optional string talkerNickName = 4;
  inline bool has_talkernickname() const;
  inline void clear_talkernickname();
  static const int kTalkerNickNameFieldNumber = 4;
  inline const ::std::string& talkernickname() const;
  inline void set_talkernickname(const ::std::string& value);
  inline void set_talkernickname(const char* value);
  inline void set_talkernickname(const char* value, size_t size);
  inline ::std::string* mutable_talkernickname();
  inline ::std::string* release_talkernickname();
  inline void set_allocated_talkernickname(::std::string* talkernickname);

  // optional int32 playerId = 5;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 5;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional int32 talkerVIPLevel = 6;
  inline bool has_talkerviplevel() const;
  inline void clear_talkerviplevel();
  static const int kTalkerVIPLevelFieldNumber = 6;
  inline ::google::protobuf::int32 talkerviplevel() const;
  inline void set_talkerviplevel(::google::protobuf::int32 value);

  // optional bool hasMonthCard = 7;
  inline bool has_hasmonthcard() const;
  inline void clear_hasmonthcard();
  static const int kHasMonthCardFieldNumber = 7;
  inline bool hasmonthcard() const;
  inline void set_hasmonthcard(bool value);

  // optional int32 repCount = 8 [default = 1];
  inline bool has_repcount() const;
  inline void clear_repcount();
  static const int kRepCountFieldNumber = 8;
  inline ::google::protobuf::int32 repcount() const;
  inline void set_repcount(::google::protobuf::int32 value);

  // optional int32 interval = 9 [default = 0];
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 9;
  inline ::google::protobuf::int32 interval() const;
  inline void set_interval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_notifytype();
  inline void clear_has_notifytype();
  inline void set_has_talkernickname();
  inline void clear_has_talkernickname();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_talkerviplevel();
  inline void clear_has_talkerviplevel();
  inline void set_has_hasmonthcard();
  inline void clear_has_hasmonthcard();
  inline void set_has_repcount();
  inline void clear_has_repcount();
  inline void set_has_interval();
  inline void clear_has_interval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  int packet_id_;
  ::google::protobuf::int32 notifytype_;
  ::std::string* talkernickname_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 talkerviplevel_;
  bool hasmonthcard_;
  ::google::protobuf::int32 repcount_;
  ::google::protobuf::int32 interval_;
  friend void  protobuf_AddDesc_client2world_5fchat_2eproto();
  friend void protobuf_AssignDesc_client2world_5fchat_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fchat_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_player_notify : public ::google::protobuf::Message {
 public:
  packetc2w_player_notify();
  virtual ~packetc2w_player_notify();

  packetc2w_player_notify(const packetc2w_player_notify& from);

  inline packetc2w_player_notify& operator=(const packetc2w_player_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_player_notify& default_instance();

  void Swap(packetc2w_player_notify* other);

  // implements Message ----------------------------------------------

  packetc2w_player_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_player_notify& from);
  void MergeFrom(const packetc2w_player_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_player_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fchat_2eproto();
  friend void protobuf_AssignDesc_client2world_5fchat_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fchat_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_player_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_player_notify_result : public ::google::protobuf::Message {
 public:
  packetw2c_player_notify_result();
  virtual ~packetw2c_player_notify_result();

  packetw2c_player_notify_result(const packetw2c_player_notify_result& from);

  inline packetw2c_player_notify_result& operator=(const packetw2c_player_notify_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_player_notify_result& default_instance();

  void Swap(packetw2c_player_notify_result* other);

  // implements Message ----------------------------------------------

  packetw2c_player_notify_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_player_notify_result& from);
  void MergeFrom(const packetw2c_player_notify_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_notify_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_player_notify_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fchat_2eproto();
  friend void protobuf_AssignDesc_client2world_5fchat_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fchat_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_player_notify_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_player_continuous_send_speaker : public ::google::protobuf::Message {
 public:
  packetc2w_player_continuous_send_speaker();
  virtual ~packetc2w_player_continuous_send_speaker();

  packetc2w_player_continuous_send_speaker(const packetc2w_player_continuous_send_speaker& from);

  inline packetc2w_player_continuous_send_speaker& operator=(const packetc2w_player_continuous_send_speaker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_player_continuous_send_speaker& default_instance();

  void Swap(packetc2w_player_continuous_send_speaker* other);

  // implements Message ----------------------------------------------

  packetc2w_player_continuous_send_speaker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_player_continuous_send_speaker& from);
  void MergeFrom(const packetc2w_player_continuous_send_speaker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_continuous_send_speaker];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_player_continuous_send_speaker)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  int packet_id_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_client2world_5fchat_2eproto();
  friend void protobuf_AssignDesc_client2world_5fchat_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fchat_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_player_continuous_send_speaker* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_player_continuous_send_speaker_result : public ::google::protobuf::Message {
 public:
  packetw2c_player_continuous_send_speaker_result();
  virtual ~packetw2c_player_continuous_send_speaker_result();

  packetw2c_player_continuous_send_speaker_result(const packetw2c_player_continuous_send_speaker_result& from);

  inline packetw2c_player_continuous_send_speaker_result& operator=(const packetw2c_player_continuous_send_speaker_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_player_continuous_send_speaker_result& default_instance();

  void Swap(packetw2c_player_continuous_send_speaker_result* other);

  // implements Message ----------------------------------------------

  packetw2c_player_continuous_send_speaker_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_player_continuous_send_speaker_result& from);
  void MergeFrom(const packetw2c_player_continuous_send_speaker_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_continuous_send_speaker_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 remainCount = 4;
  inline bool has_remaincount() const;
  inline void clear_remaincount();
  static const int kRemainCountFieldNumber = 4;
  inline ::google::protobuf::int32 remaincount() const;
  inline void set_remaincount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_player_continuous_send_speaker_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_remaincount();
  inline void clear_has_remaincount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 remaincount_;
  friend void  protobuf_AddDesc_client2world_5fchat_2eproto();
  friend void protobuf_AssignDesc_client2world_5fchat_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fchat_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_player_continuous_send_speaker_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2w_chat

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_chat];
inline bool packetc2w_chat::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_chat::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_chat::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_chat::clear_packet_id() {
  packet_id_ = 5021;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_chat::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_chat.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_chat::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_chat.packet_id)
}

// optional string content = 2;
inline bool packetc2w_chat::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_chat::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_chat::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_chat::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& packetc2w_chat::content() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_chat.content)
  return *content_;
}
inline void packetc2w_chat::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_chat.content)
}
inline void packetc2w_chat::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_chat.content)
}
inline void packetc2w_chat::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_chat.content)
}
inline ::std::string* packetc2w_chat::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_chat.content)
  return content_;
}
inline ::std::string* packetc2w_chat::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_chat::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_chat.content)
}

// optional int32 audio_time = 3 [default = 0];
inline bool packetc2w_chat::has_audio_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_chat::set_has_audio_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_chat::clear_has_audio_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_chat::clear_audio_time() {
  audio_time_ = 0;
  clear_has_audio_time();
}
inline ::google::protobuf::int32 packetc2w_chat::audio_time() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_chat.audio_time)
  return audio_time_;
}
inline void packetc2w_chat::set_audio_time(::google::protobuf::int32 value) {
  set_has_audio_time();
  audio_time_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_chat.audio_time)
}

// -------------------------------------------------------------------

// packetw2c_chat_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_chat_result];
inline bool packetw2c_chat_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_chat_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_chat_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_chat_result::clear_packet_id() {
  packet_id_ = 7522;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_chat_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_chat_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_chat_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_chat_result.packet_id)
}

// optional string content = 2;
inline bool packetw2c_chat_result::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_chat_result::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_chat_result::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_chat_result::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& packetw2c_chat_result::content() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_chat_result.content)
  return *content_;
}
inline void packetw2c_chat_result::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_chat_result.content)
}
inline void packetw2c_chat_result::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetw2c_chat_result.content)
}
inline void packetw2c_chat_result::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetw2c_chat_result.content)
}
inline ::std::string* packetw2c_chat_result::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_chat_result.content)
  return content_;
}
inline ::std::string* packetw2c_chat_result::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetw2c_chat_result::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_chat_result.content)
}

// optional string talkerNickName = 3;
inline bool packetw2c_chat_result::has_talkernickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_chat_result::set_has_talkernickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_chat_result::clear_has_talkernickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_chat_result::clear_talkernickname() {
  if (talkernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkernickname_->clear();
  }
  clear_has_talkernickname();
}
inline const ::std::string& packetw2c_chat_result::talkernickname() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_chat_result.talkerNickName)
  return *talkernickname_;
}
inline void packetw2c_chat_result::set_talkernickname(const ::std::string& value) {
  set_has_talkernickname();
  if (talkernickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkernickname_ = new ::std::string;
  }
  talkernickname_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_chat_result.talkerNickName)
}
inline void packetw2c_chat_result::set_talkernickname(const char* value) {
  set_has_talkernickname();
  if (talkernickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkernickname_ = new ::std::string;
  }
  talkernickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetw2c_chat_result.talkerNickName)
}
inline void packetw2c_chat_result::set_talkernickname(const char* value, size_t size) {
  set_has_talkernickname();
  if (talkernickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkernickname_ = new ::std::string;
  }
  talkernickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetw2c_chat_result.talkerNickName)
}
inline ::std::string* packetw2c_chat_result::mutable_talkernickname() {
  set_has_talkernickname();
  if (talkernickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkernickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_chat_result.talkerNickName)
  return talkernickname_;
}
inline ::std::string* packetw2c_chat_result::release_talkernickname() {
  clear_has_talkernickname();
  if (talkernickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = talkernickname_;
    talkernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetw2c_chat_result::set_allocated_talkernickname(::std::string* talkernickname) {
  if (talkernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talkernickname_;
  }
  if (talkernickname) {
    set_has_talkernickname();
    talkernickname_ = talkernickname;
  } else {
    clear_has_talkernickname();
    talkernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_chat_result.talkerNickName)
}

// optional int32 talkerId = 4;
inline bool packetw2c_chat_result::has_talkerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_chat_result::set_has_talkerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_chat_result::clear_has_talkerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_chat_result::clear_talkerid() {
  talkerid_ = 0;
  clear_has_talkerid();
}
inline ::google::protobuf::int32 packetw2c_chat_result::talkerid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_chat_result.talkerId)
  return talkerid_;
}
inline void packetw2c_chat_result::set_talkerid(::google::protobuf::int32 value) {
  set_has_talkerid();
  talkerid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_chat_result.talkerId)
}

// optional int32 result = 5;
inline bool packetw2c_chat_result::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_chat_result::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_chat_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_chat_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_chat_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_chat_result.result)
  return result_;
}
inline void packetw2c_chat_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_chat_result.result)
}

// optional int32 audio_time = 6 [default = 0];
inline bool packetw2c_chat_result::has_audio_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetw2c_chat_result::set_has_audio_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetw2c_chat_result::clear_has_audio_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetw2c_chat_result::clear_audio_time() {
  audio_time_ = 0;
  clear_has_audio_time();
}
inline ::google::protobuf::int32 packetw2c_chat_result::audio_time() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_chat_result.audio_time)
  return audio_time_;
}
inline void packetw2c_chat_result::set_audio_time(::google::protobuf::int32 value) {
  set_has_audio_time();
  audio_time_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_chat_result.audio_time)
}

// optional int32 audio_len = 7 [default = 0];
inline bool packetw2c_chat_result::has_audio_len() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetw2c_chat_result::set_has_audio_len() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetw2c_chat_result::clear_has_audio_len() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetw2c_chat_result::clear_audio_len() {
  audio_len_ = 0;
  clear_has_audio_len();
}
inline ::google::protobuf::int32 packetw2c_chat_result::audio_len() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_chat_result.audio_len)
  return audio_len_;
}
inline void packetw2c_chat_result::set_audio_len(::google::protobuf::int32 value) {
  set_has_audio_len();
  audio_len_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_chat_result.audio_len)
}

// optional int32 talkerVIPLevel = 8;
inline bool packetw2c_chat_result::has_talkerviplevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetw2c_chat_result::set_has_talkerviplevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetw2c_chat_result::clear_has_talkerviplevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetw2c_chat_result::clear_talkerviplevel() {
  talkerviplevel_ = 0;
  clear_has_talkerviplevel();
}
inline ::google::protobuf::int32 packetw2c_chat_result::talkerviplevel() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_chat_result.talkerVIPLevel)
  return talkerviplevel_;
}
inline void packetw2c_chat_result::set_talkerviplevel(::google::protobuf::int32 value) {
  set_has_talkerviplevel();
  talkerviplevel_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_chat_result.talkerVIPLevel)
}

// optional bool hasMonthCard = 9;
inline bool packetw2c_chat_result::has_hasmonthcard() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void packetw2c_chat_result::set_has_hasmonthcard() {
  _has_bits_[0] |= 0x00000100u;
}
inline void packetw2c_chat_result::clear_has_hasmonthcard() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void packetw2c_chat_result::clear_hasmonthcard() {
  hasmonthcard_ = false;
  clear_has_hasmonthcard();
}
inline bool packetw2c_chat_result::hasmonthcard() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_chat_result.hasMonthCard)
  return hasmonthcard_;
}
inline void packetw2c_chat_result::set_hasmonthcard(bool value) {
  set_has_hasmonthcard();
  hasmonthcard_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_chat_result.hasMonthCard)
}

// optional int32 chatType = 10 [default = 0];
inline bool packetw2c_chat_result::has_chattype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void packetw2c_chat_result::set_has_chattype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void packetw2c_chat_result::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void packetw2c_chat_result::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
inline ::google::protobuf::int32 packetw2c_chat_result::chattype() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_chat_result.chatType)
  return chattype_;
}
inline void packetw2c_chat_result::set_chattype(::google::protobuf::int32 value) {
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_chat_result.chatType)
}

// -------------------------------------------------------------------

// packetw2c_notify

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify];
inline bool packetw2c_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_notify::clear_packet_id() {
  packet_id_ = 7523;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_notify::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_notify.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_notify::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_notify.packet_id)
}

// optional string content = 2;
inline bool packetw2c_notify::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_notify::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_notify::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_notify::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& packetw2c_notify::content() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_notify.content)
  return *content_;
}
inline void packetw2c_notify::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_notify.content)
}
inline void packetw2c_notify::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetw2c_notify.content)
}
inline void packetw2c_notify::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetw2c_notify.content)
}
inline ::std::string* packetw2c_notify::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_notify.content)
  return content_;
}
inline ::std::string* packetw2c_notify::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetw2c_notify::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_notify.content)
}

// optional int32 notifyType = 3;
inline bool packetw2c_notify::has_notifytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_notify::set_has_notifytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_notify::clear_has_notifytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_notify::clear_notifytype() {
  notifytype_ = 0;
  clear_has_notifytype();
}
inline ::google::protobuf::int32 packetw2c_notify::notifytype() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_notify.notifyType)
  return notifytype_;
}
inline void packetw2c_notify::set_notifytype(::google::protobuf::int32 value) {
  set_has_notifytype();
  notifytype_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_notify.notifyType)
}

// optional string talkerNickName = 4;
inline bool packetw2c_notify::has_talkernickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_notify::set_has_talkernickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_notify::clear_has_talkernickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_notify::clear_talkernickname() {
  if (talkernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkernickname_->clear();
  }
  clear_has_talkernickname();
}
inline const ::std::string& packetw2c_notify::talkernickname() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_notify.talkerNickName)
  return *talkernickname_;
}
inline void packetw2c_notify::set_talkernickname(const ::std::string& value) {
  set_has_talkernickname();
  if (talkernickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkernickname_ = new ::std::string;
  }
  talkernickname_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_notify.talkerNickName)
}
inline void packetw2c_notify::set_talkernickname(const char* value) {
  set_has_talkernickname();
  if (talkernickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkernickname_ = new ::std::string;
  }
  talkernickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetw2c_notify.talkerNickName)
}
inline void packetw2c_notify::set_talkernickname(const char* value, size_t size) {
  set_has_talkernickname();
  if (talkernickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkernickname_ = new ::std::string;
  }
  talkernickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetw2c_notify.talkerNickName)
}
inline ::std::string* packetw2c_notify::mutable_talkernickname() {
  set_has_talkernickname();
  if (talkernickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkernickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_notify.talkerNickName)
  return talkernickname_;
}
inline ::std::string* packetw2c_notify::release_talkernickname() {
  clear_has_talkernickname();
  if (talkernickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = talkernickname_;
    talkernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetw2c_notify::set_allocated_talkernickname(::std::string* talkernickname) {
  if (talkernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talkernickname_;
  }
  if (talkernickname) {
    set_has_talkernickname();
    talkernickname_ = talkernickname;
  } else {
    clear_has_talkernickname();
    talkernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_notify.talkerNickName)
}

// optional int32 playerId = 5;
inline bool packetw2c_notify::has_playerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void packetw2c_notify::set_has_playerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void packetw2c_notify::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void packetw2c_notify::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 packetw2c_notify::playerid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_notify.playerId)
  return playerid_;
}
inline void packetw2c_notify::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_notify.playerId)
}

// optional int32 talkerVIPLevel = 6;
inline bool packetw2c_notify::has_talkerviplevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void packetw2c_notify::set_has_talkerviplevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void packetw2c_notify::clear_has_talkerviplevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void packetw2c_notify::clear_talkerviplevel() {
  talkerviplevel_ = 0;
  clear_has_talkerviplevel();
}
inline ::google::protobuf::int32 packetw2c_notify::talkerviplevel() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_notify.talkerVIPLevel)
  return talkerviplevel_;
}
inline void packetw2c_notify::set_talkerviplevel(::google::protobuf::int32 value) {
  set_has_talkerviplevel();
  talkerviplevel_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_notify.talkerVIPLevel)
}

// optional bool hasMonthCard = 7;
inline bool packetw2c_notify::has_hasmonthcard() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void packetw2c_notify::set_has_hasmonthcard() {
  _has_bits_[0] |= 0x00000040u;
}
inline void packetw2c_notify::clear_has_hasmonthcard() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void packetw2c_notify::clear_hasmonthcard() {
  hasmonthcard_ = false;
  clear_has_hasmonthcard();
}
inline bool packetw2c_notify::hasmonthcard() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_notify.hasMonthCard)
  return hasmonthcard_;
}
inline void packetw2c_notify::set_hasmonthcard(bool value) {
  set_has_hasmonthcard();
  hasmonthcard_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_notify.hasMonthCard)
}

// optional int32 repCount = 8 [default = 1];
inline bool packetw2c_notify::has_repcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void packetw2c_notify::set_has_repcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void packetw2c_notify::clear_has_repcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void packetw2c_notify::clear_repcount() {
  repcount_ = 1;
  clear_has_repcount();
}
inline ::google::protobuf::int32 packetw2c_notify::repcount() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_notify.repCount)
  return repcount_;
}
inline void packetw2c_notify::set_repcount(::google::protobuf::int32 value) {
  set_has_repcount();
  repcount_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_notify.repCount)
}

// optional int32 interval = 9 [default = 0];
inline bool packetw2c_notify::has_interval() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void packetw2c_notify::set_has_interval() {
  _has_bits_[0] |= 0x00000100u;
}
inline void packetw2c_notify::clear_has_interval() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void packetw2c_notify::clear_interval() {
  interval_ = 0;
  clear_has_interval();
}
inline ::google::protobuf::int32 packetw2c_notify::interval() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_notify.interval)
  return interval_;
}
inline void packetw2c_notify::set_interval(::google::protobuf::int32 value) {
  set_has_interval();
  interval_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_notify.interval)
}

// -------------------------------------------------------------------

// packetc2w_player_notify

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_notify];
inline bool packetc2w_player_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_player_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_player_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_player_notify::clear_packet_id() {
  packet_id_ = 5036;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_player_notify::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_player_notify.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_player_notify::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_player_notify.packet_id)
}

// optional string content = 2;
inline bool packetc2w_player_notify::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_player_notify::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_player_notify::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_player_notify::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& packetc2w_player_notify::content() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_player_notify.content)
  return *content_;
}
inline void packetc2w_player_notify::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_player_notify.content)
}
inline void packetc2w_player_notify::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_player_notify.content)
}
inline void packetc2w_player_notify::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_player_notify.content)
}
inline ::std::string* packetc2w_player_notify::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_player_notify.content)
  return content_;
}
inline ::std::string* packetc2w_player_notify::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_player_notify::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_player_notify.content)
}

// -------------------------------------------------------------------

// packetw2c_player_notify_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_notify_result];
inline bool packetw2c_player_notify_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_player_notify_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_player_notify_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_player_notify_result::clear_packet_id() {
  packet_id_ = 7538;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_player_notify_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_player_notify_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_player_notify_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_player_notify_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_player_notify_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_player_notify_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_player_notify_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_player_notify_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_player_notify_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_player_notify_result.result)
  return result_;
}
inline void packetw2c_player_notify_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_player_notify_result.result)
}

// -------------------------------------------------------------------

// packetc2w_player_continuous_send_speaker

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_continuous_send_speaker];
inline bool packetc2w_player_continuous_send_speaker::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_player_continuous_send_speaker::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_player_continuous_send_speaker::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_player_continuous_send_speaker::clear_packet_id() {
  packet_id_ = 5055;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_player_continuous_send_speaker::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_player_continuous_send_speaker.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_player_continuous_send_speaker::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_player_continuous_send_speaker.packet_id)
}

// optional string content = 2;
inline bool packetc2w_player_continuous_send_speaker::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_player_continuous_send_speaker::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_player_continuous_send_speaker::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_player_continuous_send_speaker::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& packetc2w_player_continuous_send_speaker::content() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_player_continuous_send_speaker.content)
  return *content_;
}
inline void packetc2w_player_continuous_send_speaker::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_player_continuous_send_speaker.content)
}
inline void packetc2w_player_continuous_send_speaker::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_player_continuous_send_speaker.content)
}
inline void packetc2w_player_continuous_send_speaker::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_player_continuous_send_speaker.content)
}
inline ::std::string* packetc2w_player_continuous_send_speaker::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_player_continuous_send_speaker.content)
  return content_;
}
inline ::std::string* packetc2w_player_continuous_send_speaker::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_player_continuous_send_speaker::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_player_continuous_send_speaker.content)
}

// optional int32 count = 3;
inline bool packetc2w_player_continuous_send_speaker::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_player_continuous_send_speaker::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_player_continuous_send_speaker::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_player_continuous_send_speaker::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 packetc2w_player_continuous_send_speaker::count() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_player_continuous_send_speaker.count)
  return count_;
}
inline void packetc2w_player_continuous_send_speaker::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_player_continuous_send_speaker.count)
}

// -------------------------------------------------------------------

// packetw2c_player_continuous_send_speaker_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_continuous_send_speaker_result];
inline bool packetw2c_player_continuous_send_speaker_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_player_continuous_send_speaker_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_player_continuous_send_speaker_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_player_continuous_send_speaker_result::clear_packet_id() {
  packet_id_ = 7558;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_player_continuous_send_speaker_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_player_continuous_send_speaker_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_player_continuous_send_speaker_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_player_continuous_send_speaker_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_player_continuous_send_speaker_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_player_continuous_send_speaker_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_player_continuous_send_speaker_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_player_continuous_send_speaker_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_player_continuous_send_speaker_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_player_continuous_send_speaker_result.result)
  return result_;
}
inline void packetw2c_player_continuous_send_speaker_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_player_continuous_send_speaker_result.result)
}

// optional int32 count = 3;
inline bool packetw2c_player_continuous_send_speaker_result::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_player_continuous_send_speaker_result::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_player_continuous_send_speaker_result::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_player_continuous_send_speaker_result::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 packetw2c_player_continuous_send_speaker_result::count() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_player_continuous_send_speaker_result.count)
  return count_;
}
inline void packetw2c_player_continuous_send_speaker_result::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_player_continuous_send_speaker_result.count)
}

// optional int32 remainCount = 4;
inline bool packetw2c_player_continuous_send_speaker_result::has_remaincount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_player_continuous_send_speaker_result::set_has_remaincount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_player_continuous_send_speaker_result::clear_has_remaincount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_player_continuous_send_speaker_result::clear_remaincount() {
  remaincount_ = 0;
  clear_has_remaincount();
}
inline ::google::protobuf::int32 packetw2c_player_continuous_send_speaker_result::remaincount() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_player_continuous_send_speaker_result.remainCount)
  return remaincount_;
}
inline void packetw2c_player_continuous_send_speaker_result::set_remaincount(::google::protobuf::int32 value) {
  set_has_remaincount();
  remaincount_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_player_continuous_send_speaker_result.remainCount)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5fchat_2eproto__INCLUDED
