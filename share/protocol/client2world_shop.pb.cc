// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_shop.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_shop.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2w_buy_commodity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_buy_commodity_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_buy_commodity_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_buy_commodity_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_check_apple_order_form_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_check_apple_order_form_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_open_first_gift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_open_first_gift_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_ask_recharge_history_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_ask_recharge_history_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_recharge_history_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_recharge_history_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fshop_2eproto() {
  protobuf_AddDesc_client2world_5fshop_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_shop.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2w_buy_commodity_descriptor_ = file->message_type(0);
  static const int packetc2w_buy_commodity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_buy_commodity, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_buy_commodity, commodityid_),
  };
  packetc2w_buy_commodity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_buy_commodity_descriptor_,
      packetc2w_buy_commodity::default_instance_,
      packetc2w_buy_commodity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_buy_commodity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_buy_commodity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_buy_commodity));
  packetw2c_buy_commodity_result_descriptor_ = file->message_type(1);
  static const int packetw2c_buy_commodity_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_buy_commodity_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_buy_commodity_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_buy_commodity_result, commodityid_),
  };
  packetw2c_buy_commodity_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_buy_commodity_result_descriptor_,
      packetw2c_buy_commodity_result::default_instance_,
      packetw2c_buy_commodity_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_buy_commodity_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_buy_commodity_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_buy_commodity_result));
  packetw2c_check_apple_order_form_descriptor_ = file->message_type(2);
  static const int packetw2c_check_apple_order_form_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_check_apple_order_form, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_check_apple_order_form, apple_),
  };
  packetw2c_check_apple_order_form_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_check_apple_order_form_descriptor_,
      packetw2c_check_apple_order_form::default_instance_,
      packetw2c_check_apple_order_form_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_check_apple_order_form, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_check_apple_order_form, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_check_apple_order_form));
  packetw2c_open_first_gift_descriptor_ = file->message_type(3);
  static const int packetw2c_open_first_gift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_open_first_gift, packet_id_),
  };
  packetw2c_open_first_gift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_open_first_gift_descriptor_,
      packetw2c_open_first_gift::default_instance_,
      packetw2c_open_first_gift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_open_first_gift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_open_first_gift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_open_first_gift));
  packetc2w_ask_recharge_history_descriptor_ = file->message_type(4);
  static const int packetc2w_ask_recharge_history_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_recharge_history, packet_id_),
  };
  packetc2w_ask_recharge_history_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_ask_recharge_history_descriptor_,
      packetc2w_ask_recharge_history::default_instance_,
      packetc2w_ask_recharge_history_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_recharge_history, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_recharge_history, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_ask_recharge_history));
  packetw2c_recharge_history_result_descriptor_ = file->message_type(5);
  static const int packetw2c_recharge_history_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recharge_history_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recharge_history_result, history_infos_),
  };
  packetw2c_recharge_history_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_recharge_history_result_descriptor_,
      packetw2c_recharge_history_result::default_instance_,
      packetw2c_recharge_history_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recharge_history_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recharge_history_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_recharge_history_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fshop_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_buy_commodity_descriptor_, &packetc2w_buy_commodity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_buy_commodity_result_descriptor_, &packetw2c_buy_commodity_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_check_apple_order_form_descriptor_, &packetw2c_check_apple_order_form::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_open_first_gift_descriptor_, &packetw2c_open_first_gift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_ask_recharge_history_descriptor_, &packetc2w_ask_recharge_history::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_recharge_history_result_descriptor_, &packetw2c_recharge_history_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fshop_2eproto() {
  delete packetc2w_buy_commodity::default_instance_;
  delete packetc2w_buy_commodity_reflection_;
  delete packetw2c_buy_commodity_result::default_instance_;
  delete packetw2c_buy_commodity_result_reflection_;
  delete packetw2c_check_apple_order_form::default_instance_;
  delete packetw2c_check_apple_order_form_reflection_;
  delete packetw2c_open_first_gift::default_instance_;
  delete packetw2c_open_first_gift_reflection_;
  delete packetc2w_ask_recharge_history::default_instance_;
  delete packetc2w_ask_recharge_history_reflection_;
  delete packetw2c_recharge_history_result::default_instance_;
  delete packetw2c_recharge_history_result_reflection_;
}

void protobuf_AddDesc_client2world_5fshop_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027client2world_shop.proto\022\026client2world_"
    "protocols\032\033client2world_msg_type.proto\032\022"
    "msg_type_def.proto\032\022msg_info_def.proto\"\205"
    "\001\n\027packetc2w_buy_commodity\022U\n\tpacket_id\030"
    "\001 \001(\0162).client2world_protocols.e_server_"
    "msg_type:\027e_mst_c2w_buy_commodity\022\023\n\013com"
    "modityId\030\002 \001(\005\"\243\001\n\036packetw2c_buy_commodi"
    "ty_result\022\\\n\tpacket_id\030\001 \001(\0162).client2wo"
    "rld_protocols.e_server_msg_type:\036e_mst_w"
    "2c_buy_commodity_result\022\016\n\006result\030\002 \001(\005\022"
    "\023\n\013commodityId\030\003 \001(\005\"\221\001\n packetw2c_check"
    "_apple_order_form\022^\n\tpacket_id\030\001 \001(\0162).c"
    "lient2world_protocols.e_server_msg_type:"
    " e_mst_c2w_check_apple_order_form\022\r\n\005app"
    "le\030\002 \001(\t\"t\n\031packetw2c_open_first_gift\022W\n"
    "\tpacket_id\030\001 \001(\0162).client2world_protocol"
    "s.e_server_msg_type:\031e_mst_w2c_open_firs"
    "t_gift\"~\n\036packetc2w_ask_recharge_history"
    "\022\\\n\tpacket_id\030\001 \001(\0162).client2world_proto"
    "cols.e_server_msg_type:\036e_mst_c2w_ask_re"
    "charge_history\"\233\001\n!packetw2c_recharge_hi"
    "story_result\022_\n\tpacket_id\030\001 \001(\0162).client"
    "2world_protocols.e_server_msg_type:!e_ms"
    "t_w2c_recharge_history_result\022\025\n\rhistory"
    "_infos\030\002 \003(\t", 972);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_shop.proto", &protobuf_RegisterTypes);
  packetc2w_buy_commodity::default_instance_ = new packetc2w_buy_commodity();
  packetw2c_buy_commodity_result::default_instance_ = new packetw2c_buy_commodity_result();
  packetw2c_check_apple_order_form::default_instance_ = new packetw2c_check_apple_order_form();
  packetw2c_open_first_gift::default_instance_ = new packetw2c_open_first_gift();
  packetc2w_ask_recharge_history::default_instance_ = new packetc2w_ask_recharge_history();
  packetw2c_recharge_history_result::default_instance_ = new packetw2c_recharge_history_result();
  packetc2w_buy_commodity::default_instance_->InitAsDefaultInstance();
  packetw2c_buy_commodity_result::default_instance_->InitAsDefaultInstance();
  packetw2c_check_apple_order_form::default_instance_->InitAsDefaultInstance();
  packetw2c_open_first_gift::default_instance_->InitAsDefaultInstance();
  packetc2w_ask_recharge_history::default_instance_->InitAsDefaultInstance();
  packetw2c_recharge_history_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fshop_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fshop_2eproto {
  StaticDescriptorInitializer_client2world_5fshop_2eproto() {
    protobuf_AddDesc_client2world_5fshop_2eproto();
  }
} static_descriptor_initializer_client2world_5fshop_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2w_buy_commodity::kPacketIdFieldNumber;
const int packetc2w_buy_commodity::kCommodityIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_buy_commodity::packetc2w_buy_commodity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_buy_commodity)
}

void packetc2w_buy_commodity::InitAsDefaultInstance() {
}

packetc2w_buy_commodity::packetc2w_buy_commodity(const packetc2w_buy_commodity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_buy_commodity)
}

void packetc2w_buy_commodity::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5023;
  commodityid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_buy_commodity::~packetc2w_buy_commodity() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_buy_commodity)
  SharedDtor();
}

void packetc2w_buy_commodity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_buy_commodity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_buy_commodity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_buy_commodity_descriptor_;
}

const packetc2w_buy_commodity& packetc2w_buy_commodity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fshop_2eproto();
  return *default_instance_;
}

packetc2w_buy_commodity* packetc2w_buy_commodity::default_instance_ = NULL;

packetc2w_buy_commodity* packetc2w_buy_commodity::New() const {
  return new packetc2w_buy_commodity;
}

void packetc2w_buy_commodity::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5023;
    commodityid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_buy_commodity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_buy_commodity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_buy_commodity];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_commodityId;
        break;
      }

      // optional int32 commodityId = 2;
      case 2: {
        if (tag == 16) {
         parse_commodityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commodityid_)));
          set_has_commodityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_buy_commodity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_buy_commodity)
  return false;
#undef DO_
}

void packetc2w_buy_commodity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_buy_commodity)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_buy_commodity];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 commodityId = 2;
  if (has_commodityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->commodityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_buy_commodity)
}

::google::protobuf::uint8* packetc2w_buy_commodity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_buy_commodity)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_buy_commodity];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 commodityId = 2;
  if (has_commodityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->commodityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_buy_commodity)
  return target;
}

int packetc2w_buy_commodity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_buy_commodity];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 commodityId = 2;
    if (has_commodityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commodityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_buy_commodity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_buy_commodity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_buy_commodity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_buy_commodity::MergeFrom(const packetc2w_buy_commodity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_commodityid()) {
      set_commodityid(from.commodityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_buy_commodity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_buy_commodity::CopyFrom(const packetc2w_buy_commodity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_buy_commodity::IsInitialized() const {

  return true;
}

void packetc2w_buy_commodity::Swap(packetc2w_buy_commodity* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(commodityid_, other->commodityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_buy_commodity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_buy_commodity_descriptor_;
  metadata.reflection = packetc2w_buy_commodity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_buy_commodity_result::kPacketIdFieldNumber;
const int packetw2c_buy_commodity_result::kResultFieldNumber;
const int packetw2c_buy_commodity_result::kCommodityIdFieldNumber;
#endif  // !_MSC_VER

packetw2c_buy_commodity_result::packetw2c_buy_commodity_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_buy_commodity_result)
}

void packetw2c_buy_commodity_result::InitAsDefaultInstance() {
}

packetw2c_buy_commodity_result::packetw2c_buy_commodity_result(const packetw2c_buy_commodity_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_buy_commodity_result)
}

void packetw2c_buy_commodity_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7525;
  result_ = 0;
  commodityid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_buy_commodity_result::~packetw2c_buy_commodity_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_buy_commodity_result)
  SharedDtor();
}

void packetw2c_buy_commodity_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_buy_commodity_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_buy_commodity_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_buy_commodity_result_descriptor_;
}

const packetw2c_buy_commodity_result& packetw2c_buy_commodity_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fshop_2eproto();
  return *default_instance_;
}

packetw2c_buy_commodity_result* packetw2c_buy_commodity_result::default_instance_ = NULL;

packetw2c_buy_commodity_result* packetw2c_buy_commodity_result::New() const {
  return new packetw2c_buy_commodity_result;
}

void packetw2c_buy_commodity_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_buy_commodity_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(result_, commodityid_);
    packet_id_ = 7525;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_buy_commodity_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_buy_commodity_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_buy_commodity_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_commodityId;
        break;
      }

      // optional int32 commodityId = 3;
      case 3: {
        if (tag == 24) {
         parse_commodityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commodityid_)));
          set_has_commodityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_buy_commodity_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_buy_commodity_result)
  return false;
#undef DO_
}

void packetw2c_buy_commodity_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_buy_commodity_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_buy_commodity_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 commodityId = 3;
  if (has_commodityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->commodityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_buy_commodity_result)
}

::google::protobuf::uint8* packetw2c_buy_commodity_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_buy_commodity_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_buy_commodity_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 commodityId = 3;
  if (has_commodityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->commodityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_buy_commodity_result)
  return target;
}

int packetw2c_buy_commodity_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_buy_commodity_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 commodityId = 3;
    if (has_commodityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commodityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_buy_commodity_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_buy_commodity_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_buy_commodity_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_buy_commodity_result::MergeFrom(const packetw2c_buy_commodity_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_commodityid()) {
      set_commodityid(from.commodityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_buy_commodity_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_buy_commodity_result::CopyFrom(const packetw2c_buy_commodity_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_buy_commodity_result::IsInitialized() const {

  return true;
}

void packetw2c_buy_commodity_result::Swap(packetw2c_buy_commodity_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(commodityid_, other->commodityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_buy_commodity_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_buy_commodity_result_descriptor_;
  metadata.reflection = packetw2c_buy_commodity_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_check_apple_order_form::kPacketIdFieldNumber;
const int packetw2c_check_apple_order_form::kAppleFieldNumber;
#endif  // !_MSC_VER

packetw2c_check_apple_order_form::packetw2c_check_apple_order_form()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_check_apple_order_form)
}

void packetw2c_check_apple_order_form::InitAsDefaultInstance() {
}

packetw2c_check_apple_order_form::packetw2c_check_apple_order_form(const packetw2c_check_apple_order_form& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_check_apple_order_form)
}

void packetw2c_check_apple_order_form::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5050;
  apple_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_check_apple_order_form::~packetw2c_check_apple_order_form() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_check_apple_order_form)
  SharedDtor();
}

void packetw2c_check_apple_order_form::SharedDtor() {
  if (apple_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete apple_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_check_apple_order_form::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_check_apple_order_form::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_check_apple_order_form_descriptor_;
}

const packetw2c_check_apple_order_form& packetw2c_check_apple_order_form::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fshop_2eproto();
  return *default_instance_;
}

packetw2c_check_apple_order_form* packetw2c_check_apple_order_form::default_instance_ = NULL;

packetw2c_check_apple_order_form* packetw2c_check_apple_order_form::New() const {
  return new packetw2c_check_apple_order_form;
}

void packetw2c_check_apple_order_form::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5050;
    if (has_apple()) {
      if (apple_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        apple_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_check_apple_order_form::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_check_apple_order_form)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_check_apple_order_form];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_apple;
        break;
      }

      // optional string apple = 2;
      case 2: {
        if (tag == 18) {
         parse_apple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apple()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->apple().data(), this->apple().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apple");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_check_apple_order_form)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_check_apple_order_form)
  return false;
#undef DO_
}

void packetw2c_check_apple_order_form::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_check_apple_order_form)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_check_apple_order_form];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string apple = 2;
  if (has_apple()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apple().data(), this->apple().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apple");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->apple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_check_apple_order_form)
}

::google::protobuf::uint8* packetw2c_check_apple_order_form::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_check_apple_order_form)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_check_apple_order_form];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string apple = 2;
  if (has_apple()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apple().data(), this->apple().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apple");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->apple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_check_apple_order_form)
  return target;
}

int packetw2c_check_apple_order_form::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_check_apple_order_form];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string apple = 2;
    if (has_apple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_check_apple_order_form::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_check_apple_order_form* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_check_apple_order_form*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_check_apple_order_form::MergeFrom(const packetw2c_check_apple_order_form& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_apple()) {
      set_apple(from.apple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_check_apple_order_form::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_check_apple_order_form::CopyFrom(const packetw2c_check_apple_order_form& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_check_apple_order_form::IsInitialized() const {

  return true;
}

void packetw2c_check_apple_order_form::Swap(packetw2c_check_apple_order_form* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(apple_, other->apple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_check_apple_order_form::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_check_apple_order_form_descriptor_;
  metadata.reflection = packetw2c_check_apple_order_form_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_open_first_gift::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetw2c_open_first_gift::packetw2c_open_first_gift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_open_first_gift)
}

void packetw2c_open_first_gift::InitAsDefaultInstance() {
}

packetw2c_open_first_gift::packetw2c_open_first_gift(const packetw2c_open_first_gift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_open_first_gift)
}

void packetw2c_open_first_gift::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7570;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_open_first_gift::~packetw2c_open_first_gift() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_open_first_gift)
  SharedDtor();
}

void packetw2c_open_first_gift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_open_first_gift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_open_first_gift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_open_first_gift_descriptor_;
}

const packetw2c_open_first_gift& packetw2c_open_first_gift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fshop_2eproto();
  return *default_instance_;
}

packetw2c_open_first_gift* packetw2c_open_first_gift::default_instance_ = NULL;

packetw2c_open_first_gift* packetw2c_open_first_gift::New() const {
  return new packetw2c_open_first_gift;
}

void packetw2c_open_first_gift::Clear() {
  packet_id_ = 7570;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_open_first_gift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_open_first_gift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_open_first_gift];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_open_first_gift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_open_first_gift)
  return false;
#undef DO_
}

void packetw2c_open_first_gift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_open_first_gift)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_open_first_gift];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_open_first_gift)
}

::google::protobuf::uint8* packetw2c_open_first_gift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_open_first_gift)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_open_first_gift];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_open_first_gift)
  return target;
}

int packetw2c_open_first_gift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_open_first_gift];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_open_first_gift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_open_first_gift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_open_first_gift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_open_first_gift::MergeFrom(const packetw2c_open_first_gift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_open_first_gift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_open_first_gift::CopyFrom(const packetw2c_open_first_gift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_open_first_gift::IsInitialized() const {

  return true;
}

void packetw2c_open_first_gift::Swap(packetw2c_open_first_gift* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_open_first_gift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_open_first_gift_descriptor_;
  metadata.reflection = packetw2c_open_first_gift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_ask_recharge_history::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_ask_recharge_history::packetc2w_ask_recharge_history()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_ask_recharge_history)
}

void packetc2w_ask_recharge_history::InitAsDefaultInstance() {
}

packetc2w_ask_recharge_history::packetc2w_ask_recharge_history(const packetc2w_ask_recharge_history& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_ask_recharge_history)
}

void packetc2w_ask_recharge_history::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5065;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_ask_recharge_history::~packetc2w_ask_recharge_history() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_ask_recharge_history)
  SharedDtor();
}

void packetc2w_ask_recharge_history::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_ask_recharge_history::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_ask_recharge_history::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_ask_recharge_history_descriptor_;
}

const packetc2w_ask_recharge_history& packetc2w_ask_recharge_history::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fshop_2eproto();
  return *default_instance_;
}

packetc2w_ask_recharge_history* packetc2w_ask_recharge_history::default_instance_ = NULL;

packetc2w_ask_recharge_history* packetc2w_ask_recharge_history::New() const {
  return new packetc2w_ask_recharge_history;
}

void packetc2w_ask_recharge_history::Clear() {
  packet_id_ = 5065;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_ask_recharge_history::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_ask_recharge_history)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_recharge_history];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_ask_recharge_history)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_ask_recharge_history)
  return false;
#undef DO_
}

void packetc2w_ask_recharge_history::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_ask_recharge_history)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_recharge_history];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_ask_recharge_history)
}

::google::protobuf::uint8* packetc2w_ask_recharge_history::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_ask_recharge_history)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_recharge_history];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_ask_recharge_history)
  return target;
}

int packetc2w_ask_recharge_history::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_recharge_history];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_ask_recharge_history::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_ask_recharge_history* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_ask_recharge_history*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_ask_recharge_history::MergeFrom(const packetc2w_ask_recharge_history& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_ask_recharge_history::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_ask_recharge_history::CopyFrom(const packetc2w_ask_recharge_history& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_ask_recharge_history::IsInitialized() const {

  return true;
}

void packetc2w_ask_recharge_history::Swap(packetc2w_ask_recharge_history* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_ask_recharge_history::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_ask_recharge_history_descriptor_;
  metadata.reflection = packetc2w_ask_recharge_history_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_recharge_history_result::kPacketIdFieldNumber;
const int packetw2c_recharge_history_result::kHistoryInfosFieldNumber;
#endif  // !_MSC_VER

packetw2c_recharge_history_result::packetw2c_recharge_history_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_recharge_history_result)
}

void packetw2c_recharge_history_result::InitAsDefaultInstance() {
}

packetw2c_recharge_history_result::packetw2c_recharge_history_result(const packetw2c_recharge_history_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_recharge_history_result)
}

void packetw2c_recharge_history_result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 7571;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_recharge_history_result::~packetw2c_recharge_history_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_recharge_history_result)
  SharedDtor();
}

void packetw2c_recharge_history_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_recharge_history_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_recharge_history_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_recharge_history_result_descriptor_;
}

const packetw2c_recharge_history_result& packetw2c_recharge_history_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fshop_2eproto();
  return *default_instance_;
}

packetw2c_recharge_history_result* packetw2c_recharge_history_result::default_instance_ = NULL;

packetw2c_recharge_history_result* packetw2c_recharge_history_result::New() const {
  return new packetw2c_recharge_history_result;
}

void packetw2c_recharge_history_result::Clear() {
  packet_id_ = 7571;
  history_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_recharge_history_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_recharge_history_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recharge_history_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_history_infos;
        break;
      }

      // repeated string history_infos = 2;
      case 2: {
        if (tag == 18) {
         parse_history_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_history_infos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->history_infos(this->history_infos_size() - 1).data(),
            this->history_infos(this->history_infos_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "history_infos");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_history_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_recharge_history_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_recharge_history_result)
  return false;
#undef DO_
}

void packetw2c_recharge_history_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_recharge_history_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recharge_history_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated string history_infos = 2;
  for (int i = 0; i < this->history_infos_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->history_infos(i).data(), this->history_infos(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "history_infos");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->history_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_recharge_history_result)
}

::google::protobuf::uint8* packetw2c_recharge_history_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_recharge_history_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recharge_history_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated string history_infos = 2;
  for (int i = 0; i < this->history_infos_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->history_infos(i).data(), this->history_infos(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "history_infos");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->history_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_recharge_history_result)
  return target;
}

int packetw2c_recharge_history_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recharge_history_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated string history_infos = 2;
  total_size += 1 * this->history_infos_size();
  for (int i = 0; i < this->history_infos_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->history_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_recharge_history_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_recharge_history_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_recharge_history_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_recharge_history_result::MergeFrom(const packetw2c_recharge_history_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_infos_.MergeFrom(from.history_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_recharge_history_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_recharge_history_result::CopyFrom(const packetw2c_recharge_history_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_recharge_history_result::IsInitialized() const {

  return true;
}

void packetw2c_recharge_history_result::Swap(packetw2c_recharge_history_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    history_infos_.Swap(&other->history_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_recharge_history_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_recharge_history_result_descriptor_;
  metadata.reflection = packetw2c_recharge_history_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
