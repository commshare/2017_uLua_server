// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_bind_phone.proto

#ifndef PROTOBUF_client2world_5fbind_5fphone_2eproto__INCLUDED
#define PROTOBUF_client2world_5fbind_5fphone_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
void protobuf_AssignDesc_client2world_5fbind_5fphone_2eproto();
void protobuf_ShutdownFile_client2world_5fbind_5fphone_2eproto();

class packetc2w_req_bind_phone;
class packetw2c_req_bind_phone_result;
class packetc2w_req_verify_code;
class packetw2c_req_verify_code_result;
class packetc2w_req_relieve_phone;
class packetw2c_req_relieve_phone_result;
class packetc2w_req_relieve_verify;
class packetw2c_req_relieve_verify_result;

// ===================================================================

class packetc2w_req_bind_phone : public ::google::protobuf::Message {
 public:
  packetc2w_req_bind_phone();
  virtual ~packetc2w_req_bind_phone();

  packetc2w_req_bind_phone(const packetc2w_req_bind_phone& from);

  inline packetc2w_req_bind_phone& operator=(const packetc2w_req_bind_phone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_bind_phone& default_instance();

  void Swap(packetc2w_req_bind_phone* other);

  // implements Message ----------------------------------------------

  packetc2w_req_bind_phone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_bind_phone& from);
  void MergeFrom(const packetc2w_req_bind_phone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_bind_phone];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string phone = 2;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 2;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_bind_phone)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_phone();
  inline void clear_has_phone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* phone_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_AssignDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fbind_5fphone_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_bind_phone* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_bind_phone_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_bind_phone_result();
  virtual ~packetw2c_req_bind_phone_result();

  packetw2c_req_bind_phone_result(const packetw2c_req_bind_phone_result& from);

  inline packetw2c_req_bind_phone_result& operator=(const packetw2c_req_bind_phone_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_bind_phone_result& default_instance();

  void Swap(packetw2c_req_bind_phone_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_bind_phone_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_bind_phone_result& from);
  void MergeFrom(const packetw2c_req_bind_phone_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_bind_phone_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_bind_phone_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_AssignDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fbind_5fphone_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_bind_phone_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_verify_code : public ::google::protobuf::Message {
 public:
  packetc2w_req_verify_code();
  virtual ~packetc2w_req_verify_code();

  packetc2w_req_verify_code(const packetc2w_req_verify_code& from);

  inline packetc2w_req_verify_code& operator=(const packetc2w_req_verify_code& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_verify_code& default_instance();

  void Swap(packetc2w_req_verify_code* other);

  // implements Message ----------------------------------------------

  packetc2w_req_verify_code* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_verify_code& from);
  void MergeFrom(const packetc2w_req_verify_code& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_verify_code];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_verify_code)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* code_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_AssignDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fbind_5fphone_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_verify_code* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_verify_code_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_verify_code_result();
  virtual ~packetw2c_req_verify_code_result();

  packetw2c_req_verify_code_result(const packetw2c_req_verify_code_result& from);

  inline packetw2c_req_verify_code_result& operator=(const packetw2c_req_verify_code_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_verify_code_result& default_instance();

  void Swap(packetw2c_req_verify_code_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_verify_code_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_verify_code_result& from);
  void MergeFrom(const packetw2c_req_verify_code_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_verify_code_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_verify_code_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_AssignDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fbind_5fphone_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_verify_code_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_relieve_phone : public ::google::protobuf::Message {
 public:
  packetc2w_req_relieve_phone();
  virtual ~packetc2w_req_relieve_phone();

  packetc2w_req_relieve_phone(const packetc2w_req_relieve_phone& from);

  inline packetc2w_req_relieve_phone& operator=(const packetc2w_req_relieve_phone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_relieve_phone& default_instance();

  void Swap(packetc2w_req_relieve_phone* other);

  // implements Message ----------------------------------------------

  packetc2w_req_relieve_phone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_relieve_phone& from);
  void MergeFrom(const packetc2w_req_relieve_phone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_relieve_phone];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_relieve_phone)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* code_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_AssignDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fbind_5fphone_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_relieve_phone* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_relieve_phone_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_relieve_phone_result();
  virtual ~packetw2c_req_relieve_phone_result();

  packetw2c_req_relieve_phone_result(const packetw2c_req_relieve_phone_result& from);

  inline packetw2c_req_relieve_phone_result& operator=(const packetw2c_req_relieve_phone_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_relieve_phone_result& default_instance();

  void Swap(packetw2c_req_relieve_phone_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_relieve_phone_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_relieve_phone_result& from);
  void MergeFrom(const packetw2c_req_relieve_phone_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_relieve_phone_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_relieve_phone_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_AssignDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fbind_5fphone_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_relieve_phone_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_relieve_verify : public ::google::protobuf::Message {
 public:
  packetc2w_req_relieve_verify();
  virtual ~packetc2w_req_relieve_verify();

  packetc2w_req_relieve_verify(const packetc2w_req_relieve_verify& from);

  inline packetc2w_req_relieve_verify& operator=(const packetc2w_req_relieve_verify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_relieve_verify& default_instance();

  void Swap(packetc2w_req_relieve_verify* other);

  // implements Message ----------------------------------------------

  packetc2w_req_relieve_verify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_relieve_verify& from);
  void MergeFrom(const packetc2w_req_relieve_verify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_relieve_verify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_relieve_verify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_AssignDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fbind_5fphone_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_relieve_verify* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_relieve_verify_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_relieve_verify_result();
  virtual ~packetw2c_req_relieve_verify_result();

  packetw2c_req_relieve_verify_result(const packetw2c_req_relieve_verify_result& from);

  inline packetw2c_req_relieve_verify_result& operator=(const packetw2c_req_relieve_verify_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_relieve_verify_result& default_instance();

  void Swap(packetw2c_req_relieve_verify_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_relieve_verify_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_relieve_verify_result& from);
  void MergeFrom(const packetw2c_req_relieve_verify_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_relieve_verify_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_relieve_verify_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_AssignDesc_client2world_5fbind_5fphone_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fbind_5fphone_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_relieve_verify_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2w_req_bind_phone

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_bind_phone];
inline bool packetc2w_req_bind_phone::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_bind_phone::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_bind_phone::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_bind_phone::clear_packet_id() {
  packet_id_ = 5039;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_bind_phone::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_bind_phone.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_bind_phone::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_bind_phone.packet_id)
}

// optional string phone = 2;
inline bool packetc2w_req_bind_phone::has_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_req_bind_phone::set_has_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_req_bind_phone::clear_has_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_req_bind_phone::clear_phone() {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& packetc2w_req_bind_phone::phone() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_bind_phone.phone)
  return *phone_;
}
inline void packetc2w_req_bind_phone::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_bind_phone.phone)
}
inline void packetc2w_req_bind_phone::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_req_bind_phone.phone)
}
inline void packetc2w_req_bind_phone::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_req_bind_phone.phone)
}
inline ::std::string* packetc2w_req_bind_phone::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_req_bind_phone.phone)
  return phone_;
}
inline ::std::string* packetc2w_req_bind_phone::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_req_bind_phone::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_req_bind_phone.phone)
}

// -------------------------------------------------------------------

// packetw2c_req_bind_phone_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_bind_phone_result];
inline bool packetw2c_req_bind_phone_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_bind_phone_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_bind_phone_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_bind_phone_result::clear_packet_id() {
  packet_id_ = 7542;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_bind_phone_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_bind_phone_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_bind_phone_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_bind_phone_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_req_bind_phone_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_req_bind_phone_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_req_bind_phone_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_req_bind_phone_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_req_bind_phone_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_bind_phone_result.result)
  return result_;
}
inline void packetw2c_req_bind_phone_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_bind_phone_result.result)
}

// -------------------------------------------------------------------

// packetc2w_req_verify_code

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_verify_code];
inline bool packetc2w_req_verify_code::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_verify_code::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_verify_code::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_verify_code::clear_packet_id() {
  packet_id_ = 5040;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_verify_code::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_verify_code.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_verify_code::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_verify_code.packet_id)
}

// optional string code = 2;
inline bool packetc2w_req_verify_code::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_req_verify_code::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_req_verify_code::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_req_verify_code::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& packetc2w_req_verify_code::code() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_verify_code.code)
  return *code_;
}
inline void packetc2w_req_verify_code::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_verify_code.code)
}
inline void packetc2w_req_verify_code::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_req_verify_code.code)
}
inline void packetc2w_req_verify_code::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_req_verify_code.code)
}
inline ::std::string* packetc2w_req_verify_code::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_req_verify_code.code)
  return code_;
}
inline ::std::string* packetc2w_req_verify_code::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_req_verify_code::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_req_verify_code.code)
}

// -------------------------------------------------------------------

// packetw2c_req_verify_code_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_verify_code_result];
inline bool packetw2c_req_verify_code_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_verify_code_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_verify_code_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_verify_code_result::clear_packet_id() {
  packet_id_ = 7543;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_verify_code_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_verify_code_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_verify_code_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_verify_code_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_req_verify_code_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_req_verify_code_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_req_verify_code_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_req_verify_code_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_req_verify_code_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_verify_code_result.result)
  return result_;
}
inline void packetw2c_req_verify_code_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_verify_code_result.result)
}

// -------------------------------------------------------------------

// packetc2w_req_relieve_phone

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_relieve_phone];
inline bool packetc2w_req_relieve_phone::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_relieve_phone::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_relieve_phone::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_relieve_phone::clear_packet_id() {
  packet_id_ = 5070;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_relieve_phone::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_relieve_phone.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_relieve_phone::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_relieve_phone.packet_id)
}

// optional string code = 2;
inline bool packetc2w_req_relieve_phone::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_req_relieve_phone::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_req_relieve_phone::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_req_relieve_phone::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& packetc2w_req_relieve_phone::code() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_relieve_phone.code)
  return *code_;
}
inline void packetc2w_req_relieve_phone::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_relieve_phone.code)
}
inline void packetc2w_req_relieve_phone::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_req_relieve_phone.code)
}
inline void packetc2w_req_relieve_phone::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_req_relieve_phone.code)
}
inline ::std::string* packetc2w_req_relieve_phone::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_req_relieve_phone.code)
  return code_;
}
inline ::std::string* packetc2w_req_relieve_phone::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_req_relieve_phone::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_req_relieve_phone.code)
}

// -------------------------------------------------------------------

// packetw2c_req_relieve_phone_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_relieve_phone_result];
inline bool packetw2c_req_relieve_phone_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_relieve_phone_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_relieve_phone_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_relieve_phone_result::clear_packet_id() {
  packet_id_ = 7576;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_relieve_phone_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_relieve_phone_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_relieve_phone_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_relieve_phone_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_req_relieve_phone_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_req_relieve_phone_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_req_relieve_phone_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_req_relieve_phone_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_req_relieve_phone_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_relieve_phone_result.result)
  return result_;
}
inline void packetw2c_req_relieve_phone_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_relieve_phone_result.result)
}

// -------------------------------------------------------------------

// packetc2w_req_relieve_verify

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_relieve_verify];
inline bool packetc2w_req_relieve_verify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_relieve_verify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_relieve_verify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_relieve_verify::clear_packet_id() {
  packet_id_ = 5071;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_relieve_verify::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_relieve_verify.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_relieve_verify::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_relieve_verify.packet_id)
}

// -------------------------------------------------------------------

// packetw2c_req_relieve_verify_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_relieve_verify_result];
inline bool packetw2c_req_relieve_verify_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_relieve_verify_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_relieve_verify_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_relieve_verify_result::clear_packet_id() {
  packet_id_ = 7577;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_relieve_verify_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_relieve_verify_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_relieve_verify_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_relieve_verify_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_req_relieve_verify_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_req_relieve_verify_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_req_relieve_verify_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_req_relieve_verify_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_req_relieve_verify_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_relieve_verify_result.result)
  return result_;
}
inline void packetw2c_req_relieve_verify_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_relieve_verify_result.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5fbind_5fphone_2eproto__INCLUDED
