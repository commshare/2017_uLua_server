// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_info_def.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_info_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msg_info_def {

namespace {

const ::google::protobuf::Descriptor* msg_gift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_gift_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_quest_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_quest_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoxInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityReceiveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityReceiveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_account_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_account_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_account_info_ex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_account_info_ex_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5finfo_5fdef_2eproto() {
  protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_info_def.proto");
  GOOGLE_CHECK(file != NULL);
  msg_gift_descriptor_ = file->message_type(0);
  static const int msg_gift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_gift, giftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_gift, count_),
  };
  msg_gift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_gift_descriptor_,
      msg_gift::default_instance_,
      msg_gift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_gift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_gift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_gift));
  ItemInfo_descriptor_ = file->message_type(1);
  static const int ItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, count_),
  };
  ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemInfo));
  msg_quest_info_descriptor_ = file->message_type(2);
  static const int msg_quest_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_quest_info, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_quest_info, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_quest_info, received_),
  };
  msg_quest_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_quest_info_descriptor_,
      msg_quest_info::default_instance_,
      msg_quest_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_quest_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_quest_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_quest_info));
  ServiceInfo_descriptor_ = file->message_type(3);
  static const int ServiceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, infotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, value_),
  };
  ServiceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceInfo_descriptor_,
      ServiceInfo::default_instance_,
      ServiceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceInfo));
  BoxInfo_descriptor_ = file->message_type(4);
  static const int BoxInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, containgold_),
  };
  BoxInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoxInfo_descriptor_,
      BoxInfo::default_instance_,
      BoxInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoxInfo));
  ActivityReceiveInfo_descriptor_ = file->message_type(5);
  static const int ActivityReceiveInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityReceiveInfo, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityReceiveInfo, isreceive_),
  };
  ActivityReceiveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityReceiveInfo_descriptor_,
      ActivityReceiveInfo::default_instance_,
      ActivityReceiveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityReceiveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityReceiveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityReceiveInfo));
  msg_account_info_descriptor_ = file->message_type(6);
  static const int msg_account_info_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, viplvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, icon_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, selfsignature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, giftstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, maxgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, maxticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, bagitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, curphotoframeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, hasreceiveonlinerewardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, remainonlinerewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, payids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, issafedepositboxpwdempty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, safeboxgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, collected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, newguildhasfinishstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, sendgiftcoincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, update_icon_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, updatenicknamecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, isbindmobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, serviceinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, monthcardremainsecondtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, hasreceiverechargereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, currecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, experience_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, boxinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, thankyoujoincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, boxlotterycounttoday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, receiveinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, monthcard_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, isfirstlogined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, chip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, hasreceivemonthcardreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, firstgifttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, isbuyfirstgift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, privilege_),
  };
  msg_account_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_account_info_descriptor_,
      msg_account_info::default_instance_,
      msg_account_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_account_info));
  msg_account_info_ex_descriptor_ = file->message_type(7);
  static const int msg_account_info_ex_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info_ex, is_robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info_ex, lucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info_ex, temp_income_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info_ex, total_income_),
  };
  msg_account_info_ex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_account_info_ex_descriptor_,
      msg_account_info_ex::default_instance_,
      msg_account_info_ex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info_ex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_account_info_ex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_account_info_ex));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5finfo_5fdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_gift_descriptor_, &msg_gift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_quest_info_descriptor_, &msg_quest_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceInfo_descriptor_, &ServiceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoxInfo_descriptor_, &BoxInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityReceiveInfo_descriptor_, &ActivityReceiveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_account_info_descriptor_, &msg_account_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_account_info_ex_descriptor_, &msg_account_info_ex::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5finfo_5fdef_2eproto() {
  delete msg_gift::default_instance_;
  delete msg_gift_reflection_;
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete msg_quest_info::default_instance_;
  delete msg_quest_info_reflection_;
  delete ServiceInfo::default_instance_;
  delete ServiceInfo_reflection_;
  delete BoxInfo::default_instance_;
  delete BoxInfo_reflection_;
  delete ActivityReceiveInfo::default_instance_;
  delete ActivityReceiveInfo_reflection_;
  delete msg_account_info::default_instance_;
  delete msg_account_info_reflection_;
  delete msg_account_info_ex::default_instance_;
  delete msg_account_info_ex_reflection_;
}

void protobuf_AddDesc_msg_5finfo_5fdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022msg_info_def.proto\022\014msg_info_def\")\n\010ms"
    "g_gift\022\016\n\006giftId\030\001 \001(\005\022\r\n\005count\030\002 \001(\003\")\n"
    "\010ItemInfo\022\016\n\006itemId\030\001 \001(\005\022\r\n\005count\030\002 \001(\005"
    "\"B\n\016msg_quest_info\022\017\n\007questid\030\001 \001(\005\022\r\n\005c"
    "ount\030\002 \001(\005\022\020\n\010received\030\003 \001(\010\";\n\013ServiceI"
    "nfo\022\020\n\010infoType\030\001 \001(\005\022\013\n\003key\030\002 \001(\t\022\r\n\005va"
    "lue\030\003 \001(\t\".\n\007BoxInfo\022\016\n\006isOpen\030\001 \001(\010\022\023\n\013"
    "containGold\030\002 \001(\003\"<\n\023ActivityReceiveInfo"
    "\022\022\n\nactivityId\030\001 \001(\005\022\021\n\tisReceive\030\002 \001(\010\""
    "\344\010\n\020msg_account_info\022\013\n\003aid\030\001 \001(\005\022\020\n\010nic"
    "kname\030\003 \001(\t\022\014\n\004gold\030\004 \001(\003\022\016\n\006viplvl\030\005 \001("
    "\005\022\016\n\006vipexp\030\006 \001(\005\022\023\n\013icon_custom\030\010 \001(\t\022\013"
    "\n\003sex\030\t \001(\005\022\025\n\rselfSignature\030\n \001(\t\022(\n\010gi"
    "ftStat\030\013 \003(\0132\026.msg_info_def.msg_gift\022\017\n\007"
    "maxGold\030\014 \001(\003\022\021\n\tmaxTicket\030\r \001(\005\022\016\n\006Tick"
    "et\030\016 \001(\005\022(\n\010bagItems\030\017 \003(\0132\026.msg_info_de"
    "f.ItemInfo\022\027\n\017curPhotoFrameId\030\020 \001(\005\022#\n\033h"
    "asReceiveOnlineRewardCount\030\021 \001(\005\022\036\n\026rema"
    "inOnlineRewardTime\030\022 \001(\005\022\016\n\006payids\030\023 \003(\005"
    "\022 \n\030isSafeDepositBoxPwdEmpty\030\024 \001(\010\022\023\n\013sa"
    "feBoxGold\030\025 \001(\003\022\021\n\tcollected\030\026 \001(\005\022\035\n\025ne"
    "wGuildHasFinishStep\030\027 \001(\005\022\031\n\021sendGiftCoi"
    "nCount\030\030 \001(\003\022\031\n\021update_icon_count\030\031 \001(\005\022"
    "\033\n\023updateNicknameCount\030\032 \001(\005\022\031\n\021isBindMo"
    "bilePhone\030\033 \001(\010\022/\n\014serviceInfos\030\034 \003(\0132\031."
    "msg_info_def.ServiceInfo\022!\n\031monthCardRem"
    "ainSecondTime\030\035 \001(\005\022 \n\030hasReceiveRecharg"
    "eReward\030\036 \001(\010\022\023\n\013curRecharge\030\037 \001(\005\022\026\n\016Ex"
    "perience_VIP\030  \001(\005\022*\n\013boxInfoList\030! \003(\0132"
    "\025.msg_info_def.BoxInfo\022\031\n\021thankYouJoinCo"
    "unt\030\" \001(\005\022\034\n\024boxLotteryCountToday\030# \001(\005\022"
    "\023\n\013create_time\030$ \001(\005\0226\n\013receiveInfo\030% \003("
    "\0132!.msg_info_def.ActivityReceiveInfo\022\026\n\016"
    "monthCard_time\030& \001(\005\022\026\n\016isFirstLogined\030\'"
    " \001(\010\022\014\n\004chip\030( \001(\005\022!\n\031hasReceiveMonthCar"
    "dReward\030) \001(\010\022\025\n\rfirstGiftTime\030* \001(\005\022\035\n\016"
    "isBuyFirstGift\030+ \001(\010:\005false\022\021\n\tPrivilege"
    "\030, \001(\005\"h\n\023msg_account_info_ex\022\027\n\010is_robo"
    "t\030\001 \001(\010:\005false\022\r\n\005lucky\030\002 \001(\005\022\023\n\013temp_in"
    "come\030\003 \001(\003\022\024\n\014total_income\030\004 \001(\003", 1592);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_info_def.proto", &protobuf_RegisterTypes);
  msg_gift::default_instance_ = new msg_gift();
  ItemInfo::default_instance_ = new ItemInfo();
  msg_quest_info::default_instance_ = new msg_quest_info();
  ServiceInfo::default_instance_ = new ServiceInfo();
  BoxInfo::default_instance_ = new BoxInfo();
  ActivityReceiveInfo::default_instance_ = new ActivityReceiveInfo();
  msg_account_info::default_instance_ = new msg_account_info();
  msg_account_info_ex::default_instance_ = new msg_account_info_ex();
  msg_gift::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  msg_quest_info::default_instance_->InitAsDefaultInstance();
  ServiceInfo::default_instance_->InitAsDefaultInstance();
  BoxInfo::default_instance_->InitAsDefaultInstance();
  ActivityReceiveInfo::default_instance_->InitAsDefaultInstance();
  msg_account_info::default_instance_->InitAsDefaultInstance();
  msg_account_info_ex::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5finfo_5fdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5finfo_5fdef_2eproto {
  StaticDescriptorInitializer_msg_5finfo_5fdef_2eproto() {
    protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  }
} static_descriptor_initializer_msg_5finfo_5fdef_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int msg_gift::kGiftIdFieldNumber;
const int msg_gift::kCountFieldNumber;
#endif  // !_MSC_VER

msg_gift::msg_gift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_info_def.msg_gift)
}

void msg_gift::InitAsDefaultInstance() {
}

msg_gift::msg_gift(const msg_gift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_info_def.msg_gift)
}

void msg_gift::SharedCtor() {
  _cached_size_ = 0;
  giftid_ = 0;
  count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_gift::~msg_gift() {
  // @@protoc_insertion_point(destructor:msg_info_def.msg_gift)
  SharedDtor();
}

void msg_gift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_gift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_gift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_gift_descriptor_;
}

const msg_gift& msg_gift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  return *default_instance_;
}

msg_gift* msg_gift::default_instance_ = NULL;

msg_gift* msg_gift::New() const {
  return new msg_gift;
}

void msg_gift::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<msg_gift*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(count_, giftid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_gift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_info_def.msg_gift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 giftId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int64 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_info_def.msg_gift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_info_def.msg_gift)
  return false;
#undef DO_
}

void msg_gift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_info_def.msg_gift)
  // optional int32 giftId = 1;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->giftid(), output);
  }

  // optional int64 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_info_def.msg_gift)
}

::google::protobuf::uint8* msg_gift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_info_def.msg_gift)
  // optional int32 giftId = 1;
  if (has_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->giftid(), target);
  }

  // optional int64 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_info_def.msg_gift)
  return target;
}

int msg_gift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 giftId = 1;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftid());
    }

    // optional int64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_gift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_gift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_gift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_gift::MergeFrom(const msg_gift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_gift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_gift::CopyFrom(const msg_gift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_gift::IsInitialized() const {

  return true;
}

void msg_gift::Swap(msg_gift* other) {
  if (other != this) {
    std::swap(giftid_, other->giftid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_gift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_gift_descriptor_;
  metadata.reflection = msg_gift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kItemIdFieldNumber;
const int ItemInfo::kCountFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_info_def.ItemInfo)
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_info_def.ItemInfo)
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:msg_info_def.ItemInfo)
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_info_def.ItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_info_def.ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_info_def.ItemInfo)
  return false;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_info_def.ItemInfo)
  // optional int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_info_def.ItemInfo)
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_info_def.ItemInfo)
  // optional int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_info_def.ItemInfo)
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_quest_info::kQuestidFieldNumber;
const int msg_quest_info::kCountFieldNumber;
const int msg_quest_info::kReceivedFieldNumber;
#endif  // !_MSC_VER

msg_quest_info::msg_quest_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_info_def.msg_quest_info)
}

void msg_quest_info::InitAsDefaultInstance() {
}

msg_quest_info::msg_quest_info(const msg_quest_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_info_def.msg_quest_info)
}

void msg_quest_info::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  count_ = 0;
  received_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_quest_info::~msg_quest_info() {
  // @@protoc_insertion_point(destructor:msg_info_def.msg_quest_info)
  SharedDtor();
}

void msg_quest_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_quest_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_quest_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_quest_info_descriptor_;
}

const msg_quest_info& msg_quest_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  return *default_instance_;
}

msg_quest_info* msg_quest_info::default_instance_ = NULL;

msg_quest_info* msg_quest_info::New() const {
  return new msg_quest_info;
}

void msg_quest_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<msg_quest_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(questid_, received_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_quest_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_info_def.msg_quest_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 questid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_received;
        break;
      }

      // optional bool received = 3;
      case 3: {
        if (tag == 24) {
         parse_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &received_)));
          set_has_received();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_info_def.msg_quest_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_info_def.msg_quest_info)
  return false;
#undef DO_
}

void msg_quest_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_info_def.msg_quest_info)
  // optional int32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional bool received = 3;
  if (has_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->received(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_info_def.msg_quest_info)
}

::google::protobuf::uint8* msg_quest_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_info_def.msg_quest_info)
  // optional int32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional bool received = 3;
  if (has_received()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->received(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_info_def.msg_quest_info)
  return target;
}

int msg_quest_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional bool received = 3;
    if (has_received()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_quest_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_quest_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_quest_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_quest_info::MergeFrom(const msg_quest_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_received()) {
      set_received(from.received());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_quest_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_quest_info::CopyFrom(const msg_quest_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_quest_info::IsInitialized() const {

  return true;
}

void msg_quest_info::Swap(msg_quest_info* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(count_, other->count_);
    std::swap(received_, other->received_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_quest_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_quest_info_descriptor_;
  metadata.reflection = msg_quest_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceInfo::kInfoTypeFieldNumber;
const int ServiceInfo::kKeyFieldNumber;
const int ServiceInfo::kValueFieldNumber;
#endif  // !_MSC_VER

ServiceInfo::ServiceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_info_def.ServiceInfo)
}

void ServiceInfo::InitAsDefaultInstance() {
}

ServiceInfo::ServiceInfo(const ServiceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_info_def.ServiceInfo)
}

void ServiceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  infotype_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceInfo::~ServiceInfo() {
  // @@protoc_insertion_point(destructor:msg_info_def.ServiceInfo)
  SharedDtor();
}

void ServiceInfo::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ServiceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceInfo_descriptor_;
}

const ServiceInfo& ServiceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  return *default_instance_;
}

ServiceInfo* ServiceInfo::default_instance_ = NULL;

ServiceInfo* ServiceInfo::New() const {
  return new ServiceInfo;
}

void ServiceInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    infotype_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_info_def.ServiceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 infoType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infotype_)));
          set_has_infotype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_info_def.ServiceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_info_def.ServiceInfo)
  return false;
#undef DO_
}

void ServiceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_info_def.ServiceInfo)
  // optional int32 infoType = 1;
  if (has_infotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->infotype(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_info_def.ServiceInfo)
}

::google::protobuf::uint8* ServiceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_info_def.ServiceInfo)
  // optional int32 infoType = 1;
  if (has_infotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->infotype(), target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_info_def.ServiceInfo)
  return target;
}

int ServiceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 infoType = 1;
    if (has_infotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->infotype());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceInfo::MergeFrom(const ServiceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infotype()) {
      set_infotype(from.infotype());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceInfo::CopyFrom(const ServiceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceInfo::IsInitialized() const {

  return true;
}

void ServiceInfo::Swap(ServiceInfo* other) {
  if (other != this) {
    std::swap(infotype_, other->infotype_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceInfo_descriptor_;
  metadata.reflection = ServiceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoxInfo::kIsOpenFieldNumber;
const int BoxInfo::kContainGoldFieldNumber;
#endif  // !_MSC_VER

BoxInfo::BoxInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_info_def.BoxInfo)
}

void BoxInfo::InitAsDefaultInstance() {
}

BoxInfo::BoxInfo(const BoxInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_info_def.BoxInfo)
}

void BoxInfo::SharedCtor() {
  _cached_size_ = 0;
  isopen_ = false;
  containgold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoxInfo::~BoxInfo() {
  // @@protoc_insertion_point(destructor:msg_info_def.BoxInfo)
  SharedDtor();
}

void BoxInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxInfo_descriptor_;
}

const BoxInfo& BoxInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  return *default_instance_;
}

BoxInfo* BoxInfo::default_instance_ = NULL;

BoxInfo* BoxInfo::New() const {
  return new BoxInfo;
}

void BoxInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BoxInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(containgold_, isopen_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_info_def.BoxInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isOpen = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_containGold;
        break;
      }

      // optional int64 containGold = 2;
      case 2: {
        if (tag == 16) {
         parse_containGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &containgold_)));
          set_has_containgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_info_def.BoxInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_info_def.BoxInfo)
  return false;
#undef DO_
}

void BoxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_info_def.BoxInfo)
  // optional bool isOpen = 1;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isopen(), output);
  }

  // optional int64 containGold = 2;
  if (has_containgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->containgold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_info_def.BoxInfo)
}

::google::protobuf::uint8* BoxInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_info_def.BoxInfo)
  // optional bool isOpen = 1;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isopen(), target);
  }

  // optional int64 containGold = 2;
  if (has_containgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->containgold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_info_def.BoxInfo)
  return target;
}

int BoxInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isOpen = 1;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

    // optional int64 containGold = 2;
    if (has_containgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->containgold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoxInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoxInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoxInfo::MergeFrom(const BoxInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_containgold()) {
      set_containgold(from.containgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoxInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxInfo::CopyFrom(const BoxInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxInfo::IsInitialized() const {

  return true;
}

void BoxInfo::Swap(BoxInfo* other) {
  if (other != this) {
    std::swap(isopen_, other->isopen_);
    std::swap(containgold_, other->containgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoxInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxInfo_descriptor_;
  metadata.reflection = BoxInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityReceiveInfo::kActivityIdFieldNumber;
const int ActivityReceiveInfo::kIsReceiveFieldNumber;
#endif  // !_MSC_VER

ActivityReceiveInfo::ActivityReceiveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_info_def.ActivityReceiveInfo)
}

void ActivityReceiveInfo::InitAsDefaultInstance() {
}

ActivityReceiveInfo::ActivityReceiveInfo(const ActivityReceiveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_info_def.ActivityReceiveInfo)
}

void ActivityReceiveInfo::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0;
  isreceive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityReceiveInfo::~ActivityReceiveInfo() {
  // @@protoc_insertion_point(destructor:msg_info_def.ActivityReceiveInfo)
  SharedDtor();
}

void ActivityReceiveInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityReceiveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityReceiveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityReceiveInfo_descriptor_;
}

const ActivityReceiveInfo& ActivityReceiveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  return *default_instance_;
}

ActivityReceiveInfo* ActivityReceiveInfo::default_instance_ = NULL;

ActivityReceiveInfo* ActivityReceiveInfo::New() const {
  return new ActivityReceiveInfo;
}

void ActivityReceiveInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityReceiveInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(activityid_, isreceive_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityReceiveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_info_def.ActivityReceiveInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isReceive;
        break;
      }

      // optional bool isReceive = 2;
      case 2: {
        if (tag == 16) {
         parse_isReceive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreceive_)));
          set_has_isreceive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_info_def.ActivityReceiveInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_info_def.ActivityReceiveInfo)
  return false;
#undef DO_
}

void ActivityReceiveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_info_def.ActivityReceiveInfo)
  // optional int32 activityId = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activityid(), output);
  }

  // optional bool isReceive = 2;
  if (has_isreceive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isreceive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_info_def.ActivityReceiveInfo)
}

::google::protobuf::uint8* ActivityReceiveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_info_def.ActivityReceiveInfo)
  // optional int32 activityId = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activityid(), target);
  }

  // optional bool isReceive = 2;
  if (has_isreceive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isreceive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_info_def.ActivityReceiveInfo)
  return target;
}

int ActivityReceiveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 activityId = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activityid());
    }

    // optional bool isReceive = 2;
    if (has_isreceive()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityReceiveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityReceiveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityReceiveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityReceiveInfo::MergeFrom(const ActivityReceiveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_isreceive()) {
      set_isreceive(from.isreceive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityReceiveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityReceiveInfo::CopyFrom(const ActivityReceiveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityReceiveInfo::IsInitialized() const {

  return true;
}

void ActivityReceiveInfo::Swap(ActivityReceiveInfo* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(isreceive_, other->isreceive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityReceiveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityReceiveInfo_descriptor_;
  metadata.reflection = ActivityReceiveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_account_info::kAidFieldNumber;
const int msg_account_info::kNicknameFieldNumber;
const int msg_account_info::kGoldFieldNumber;
const int msg_account_info::kViplvlFieldNumber;
const int msg_account_info::kVipexpFieldNumber;
const int msg_account_info::kIconCustomFieldNumber;
const int msg_account_info::kSexFieldNumber;
const int msg_account_info::kSelfSignatureFieldNumber;
const int msg_account_info::kGiftStatFieldNumber;
const int msg_account_info::kMaxGoldFieldNumber;
const int msg_account_info::kMaxTicketFieldNumber;
const int msg_account_info::kTicketFieldNumber;
const int msg_account_info::kBagItemsFieldNumber;
const int msg_account_info::kCurPhotoFrameIdFieldNumber;
const int msg_account_info::kHasReceiveOnlineRewardCountFieldNumber;
const int msg_account_info::kRemainOnlineRewardTimeFieldNumber;
const int msg_account_info::kPayidsFieldNumber;
const int msg_account_info::kIsSafeDepositBoxPwdEmptyFieldNumber;
const int msg_account_info::kSafeBoxGoldFieldNumber;
const int msg_account_info::kCollectedFieldNumber;
const int msg_account_info::kNewGuildHasFinishStepFieldNumber;
const int msg_account_info::kSendGiftCoinCountFieldNumber;
const int msg_account_info::kUpdateIconCountFieldNumber;
const int msg_account_info::kUpdateNicknameCountFieldNumber;
const int msg_account_info::kIsBindMobilePhoneFieldNumber;
const int msg_account_info::kServiceInfosFieldNumber;
const int msg_account_info::kMonthCardRemainSecondTimeFieldNumber;
const int msg_account_info::kHasReceiveRechargeRewardFieldNumber;
const int msg_account_info::kCurRechargeFieldNumber;
const int msg_account_info::kExperienceVIPFieldNumber;
const int msg_account_info::kBoxInfoListFieldNumber;
const int msg_account_info::kThankYouJoinCountFieldNumber;
const int msg_account_info::kBoxLotteryCountTodayFieldNumber;
const int msg_account_info::kCreateTimeFieldNumber;
const int msg_account_info::kReceiveInfoFieldNumber;
const int msg_account_info::kMonthCardTimeFieldNumber;
const int msg_account_info::kIsFirstLoginedFieldNumber;
const int msg_account_info::kChipFieldNumber;
const int msg_account_info::kHasReceiveMonthCardRewardFieldNumber;
const int msg_account_info::kFirstGiftTimeFieldNumber;
const int msg_account_info::kIsBuyFirstGiftFieldNumber;
const int msg_account_info::kPrivilegeFieldNumber;
#endif  // !_MSC_VER

msg_account_info::msg_account_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_info_def.msg_account_info)
}

void msg_account_info::InitAsDefaultInstance() {
}

msg_account_info::msg_account_info(const msg_account_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_info_def.msg_account_info)
}

void msg_account_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  aid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gold_ = GOOGLE_LONGLONG(0);
  viplvl_ = 0;
  vipexp_ = 0;
  icon_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  selfsignature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxgold_ = GOOGLE_LONGLONG(0);
  maxticket_ = 0;
  ticket_ = 0;
  curphotoframeid_ = 0;
  hasreceiveonlinerewardcount_ = 0;
  remainonlinerewardtime_ = 0;
  issafedepositboxpwdempty_ = false;
  safeboxgold_ = GOOGLE_LONGLONG(0);
  collected_ = 0;
  newguildhasfinishstep_ = 0;
  sendgiftcoincount_ = GOOGLE_LONGLONG(0);
  update_icon_count_ = 0;
  updatenicknamecount_ = 0;
  isbindmobilephone_ = false;
  monthcardremainsecondtime_ = 0;
  hasreceiverechargereward_ = false;
  currecharge_ = 0;
  experience_vip_ = 0;
  thankyoujoincount_ = 0;
  boxlotterycounttoday_ = 0;
  create_time_ = 0;
  monthcard_time_ = 0;
  isfirstlogined_ = false;
  chip_ = 0;
  hasreceivemonthcardreward_ = false;
  firstgifttime_ = 0;
  isbuyfirstgift_ = false;
  privilege_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_account_info::~msg_account_info() {
  // @@protoc_insertion_point(destructor:msg_info_def.msg_account_info)
  SharedDtor();
}

void msg_account_info::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (icon_custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_custom_;
  }
  if (selfsignature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete selfsignature_;
  }
  if (this != default_instance_) {
  }
}

void msg_account_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_account_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_account_info_descriptor_;
}

const msg_account_info& msg_account_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  return *default_instance_;
}

msg_account_info* msg_account_info::default_instance_ = NULL;

msg_account_info* msg_account_info::New() const {
  return new msg_account_info;
}

void msg_account_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<msg_account_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(aid_, gold_);
    ZR_(vipexp_, sex_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_icon_custom()) {
      if (icon_custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_custom_->clear();
      }
    }
    if (has_selfsignature()) {
      if (selfsignature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        selfsignature_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 60928) {
    ZR_(maxgold_, ticket_);
    ZR_(curphotoframeid_, hasreceiveonlinerewardcount_);
    remainonlinerewardtime_ = 0;
  }
  if (_has_bits_[16 / 32] & 16646144) {
    ZR_(collected_, updatenicknamecount_);
    issafedepositboxpwdempty_ = false;
  }
  if (_has_bits_[24 / 32] & 3170893824) {
    ZR_(isbindmobilephone_, hasreceiverechargereward_);
    ZR_(experience_vip_, thankyoujoincount_);
    monthcardremainsecondtime_ = 0;
    currecharge_ = 0;
  }
  if (_has_bits_[32 / 32] & 251) {
    ZR_(boxlotterycounttoday_, create_time_);
    ZR_(monthcard_time_, hasreceivemonthcardreward_);
    isfirstlogined_ = false;
  }
  ZR_(isbuyfirstgift_, privilege_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  giftstat_.Clear();
  bagitems_.Clear();
  payids_.Clear();
  serviceinfos_.Clear();
  boxinfolist_.Clear();
  receiveinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_account_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_info_def.msg_account_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional int64 gold = 4;
      case 4: {
        if (tag == 32) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_viplvl;
        break;
      }

      // optional int32 viplvl = 5;
      case 5: {
        if (tag == 40) {
         parse_viplvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplvl_)));
          set_has_viplvl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_vipexp;
        break;
      }

      // optional int32 vipexp = 6;
      case 6: {
        if (tag == 48) {
         parse_vipexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_icon_custom;
        break;
      }

      // optional string icon_custom = 8;
      case 8: {
        if (tag == 66) {
         parse_icon_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon_custom().data(), this->icon_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "icon_custom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sex;
        break;
      }

      // optional int32 sex = 9;
      case 9: {
        if (tag == 72) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_selfSignature;
        break;
      }

      // optional string selfSignature = 10;
      case 10: {
        if (tag == 82) {
         parse_selfSignature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfsignature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->selfsignature().data(), this->selfsignature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "selfsignature");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_giftStat;
        break;
      }

      // repeated .msg_info_def.msg_gift giftStat = 11;
      case 11: {
        if (tag == 90) {
         parse_giftStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_giftstat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_giftStat;
        if (input->ExpectTag(96)) goto parse_maxGold;
        break;
      }

      // optional int64 maxGold = 12;
      case 12: {
        if (tag == 96) {
         parse_maxGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxgold_)));
          set_has_maxgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_maxTicket;
        break;
      }

      // optional int32 maxTicket = 13;
      case 13: {
        if (tag == 104) {
         parse_maxTicket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxticket_)));
          set_has_maxticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_Ticket;
        break;
      }

      // optional int32 Ticket = 14;
      case 14: {
        if (tag == 112) {
         parse_Ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_bagItems;
        break;
      }

      // repeated .msg_info_def.ItemInfo bagItems = 15;
      case 15: {
        if (tag == 122) {
         parse_bagItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bagitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_bagItems;
        if (input->ExpectTag(128)) goto parse_curPhotoFrameId;
        break;
      }

      // optional int32 curPhotoFrameId = 16;
      case 16: {
        if (tag == 128) {
         parse_curPhotoFrameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curphotoframeid_)));
          set_has_curphotoframeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_hasReceiveOnlineRewardCount;
        break;
      }

      // optional int32 hasReceiveOnlineRewardCount = 17;
      case 17: {
        if (tag == 136) {
         parse_hasReceiveOnlineRewardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasreceiveonlinerewardcount_)));
          set_has_hasreceiveonlinerewardcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_remainOnlineRewardTime;
        break;
      }

      // optional int32 remainOnlineRewardTime = 18;
      case 18: {
        if (tag == 144) {
         parse_remainOnlineRewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainonlinerewardtime_)));
          set_has_remainonlinerewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_payids;
        break;
      }

      // repeated int32 payids = 19;
      case 19: {
        if (tag == 152) {
         parse_payids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_payids())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_payids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_payids;
        if (input->ExpectTag(160)) goto parse_isSafeDepositBoxPwdEmpty;
        break;
      }

      // optional bool isSafeDepositBoxPwdEmpty = 20;
      case 20: {
        if (tag == 160) {
         parse_isSafeDepositBoxPwdEmpty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issafedepositboxpwdempty_)));
          set_has_issafedepositboxpwdempty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_safeBoxGold;
        break;
      }

      // optional int64 safeBoxGold = 21;
      case 21: {
        if (tag == 168) {
         parse_safeBoxGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &safeboxgold_)));
          set_has_safeboxgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_collected;
        break;
      }

      // optional int32 collected = 22;
      case 22: {
        if (tag == 176) {
         parse_collected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collected_)));
          set_has_collected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_newGuildHasFinishStep;
        break;
      }

      // optional int32 newGuildHasFinishStep = 23;
      case 23: {
        if (tag == 184) {
         parse_newGuildHasFinishStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newguildhasfinishstep_)));
          set_has_newguildhasfinishstep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_sendGiftCoinCount;
        break;
      }

      // optional int64 sendGiftCoinCount = 24;
      case 24: {
        if (tag == 192) {
         parse_sendGiftCoinCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendgiftcoincount_)));
          set_has_sendgiftcoincount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_update_icon_count;
        break;
      }

      // optional int32 update_icon_count = 25;
      case 25: {
        if (tag == 200) {
         parse_update_icon_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_icon_count_)));
          set_has_update_icon_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_updateNicknameCount;
        break;
      }

      // optional int32 updateNicknameCount = 26;
      case 26: {
        if (tag == 208) {
         parse_updateNicknameCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatenicknamecount_)));
          set_has_updatenicknamecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_isBindMobilePhone;
        break;
      }

      // optional bool isBindMobilePhone = 27;
      case 27: {
        if (tag == 216) {
         parse_isBindMobilePhone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbindmobilephone_)));
          set_has_isbindmobilephone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_serviceInfos;
        break;
      }

      // repeated .msg_info_def.ServiceInfo serviceInfos = 28;
      case 28: {
        if (tag == 226) {
         parse_serviceInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serviceinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_serviceInfos;
        if (input->ExpectTag(232)) goto parse_monthCardRemainSecondTime;
        break;
      }

      // optional int32 monthCardRemainSecondTime = 29;
      case 29: {
        if (tag == 232) {
         parse_monthCardRemainSecondTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monthcardremainsecondtime_)));
          set_has_monthcardremainsecondtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_hasReceiveRechargeReward;
        break;
      }

      // optional bool hasReceiveRechargeReward = 30;
      case 30: {
        if (tag == 240) {
         parse_hasReceiveRechargeReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasreceiverechargereward_)));
          set_has_hasreceiverechargereward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_curRecharge;
        break;
      }

      // optional int32 curRecharge = 31;
      case 31: {
        if (tag == 248) {
         parse_curRecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currecharge_)));
          set_has_currecharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_Experience_VIP;
        break;
      }

      // optional int32 Experience_VIP = 32;
      case 32: {
        if (tag == 256) {
         parse_Experience_VIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experience_vip_)));
          set_has_experience_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_boxInfoList;
        break;
      }

      // repeated .msg_info_def.BoxInfo boxInfoList = 33;
      case 33: {
        if (tag == 266) {
         parse_boxInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxinfolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_boxInfoList;
        if (input->ExpectTag(272)) goto parse_thankYouJoinCount;
        break;
      }

      // optional int32 thankYouJoinCount = 34;
      case 34: {
        if (tag == 272) {
         parse_thankYouJoinCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thankyoujoincount_)));
          set_has_thankyoujoincount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_boxLotteryCountToday;
        break;
      }

      // optional int32 boxLotteryCountToday = 35;
      case 35: {
        if (tag == 280) {
         parse_boxLotteryCountToday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxlotterycounttoday_)));
          set_has_boxlotterycounttoday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 36;
      case 36: {
        if (tag == 288) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_receiveInfo;
        break;
      }

      // repeated .msg_info_def.ActivityReceiveInfo receiveInfo = 37;
      case 37: {
        if (tag == 298) {
         parse_receiveInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_receiveinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_receiveInfo;
        if (input->ExpectTag(304)) goto parse_monthCard_time;
        break;
      }

      // optional int32 monthCard_time = 38;
      case 38: {
        if (tag == 304) {
         parse_monthCard_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monthcard_time_)));
          set_has_monthcard_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_isFirstLogined;
        break;
      }

      // optional bool isFirstLogined = 39;
      case 39: {
        if (tag == 312) {
         parse_isFirstLogined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirstlogined_)));
          set_has_isfirstlogined();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_chip;
        break;
      }

      // optional int32 chip = 40;
      case 40: {
        if (tag == 320) {
         parse_chip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chip_)));
          set_has_chip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_hasReceiveMonthCardReward;
        break;
      }

      // optional bool hasReceiveMonthCardReward = 41;
      case 41: {
        if (tag == 328) {
         parse_hasReceiveMonthCardReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasreceivemonthcardreward_)));
          set_has_hasreceivemonthcardreward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_firstGiftTime;
        break;
      }

      // optional int32 firstGiftTime = 42;
      case 42: {
        if (tag == 336) {
         parse_firstGiftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstgifttime_)));
          set_has_firstgifttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_isBuyFirstGift;
        break;
      }

      // optional bool isBuyFirstGift = 43 [default = false];
      case 43: {
        if (tag == 344) {
         parse_isBuyFirstGift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbuyfirstgift_)));
          set_has_isbuyfirstgift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_Privilege;
        break;
      }

      // optional int32 Privilege = 44;
      case 44: {
        if (tag == 352) {
         parse_Privilege:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &privilege_)));
          set_has_privilege();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_info_def.msg_account_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_info_def.msg_account_info)
  return false;
#undef DO_
}

void msg_account_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_info_def.msg_account_info)
  // optional int32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->aid(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional int64 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gold(), output);
  }

  // optional int32 viplvl = 5;
  if (has_viplvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->viplvl(), output);
  }

  // optional int32 vipexp = 6;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vipexp(), output);
  }

  // optional string icon_custom = 8;
  if (has_icon_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_custom().data(), this->icon_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon_custom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->icon_custom(), output);
  }

  // optional int32 sex = 9;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sex(), output);
  }

  // optional string selfSignature = 10;
  if (has_selfsignature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->selfsignature().data(), this->selfsignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "selfsignature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->selfsignature(), output);
  }

  // repeated .msg_info_def.msg_gift giftStat = 11;
  for (int i = 0; i < this->giftstat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->giftstat(i), output);
  }

  // optional int64 maxGold = 12;
  if (has_maxgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->maxgold(), output);
  }

  // optional int32 maxTicket = 13;
  if (has_maxticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->maxticket(), output);
  }

  // optional int32 Ticket = 14;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ticket(), output);
  }

  // repeated .msg_info_def.ItemInfo bagItems = 15;
  for (int i = 0; i < this->bagitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->bagitems(i), output);
  }

  // optional int32 curPhotoFrameId = 16;
  if (has_curphotoframeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->curphotoframeid(), output);
  }

  // optional int32 hasReceiveOnlineRewardCount = 17;
  if (has_hasreceiveonlinerewardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->hasreceiveonlinerewardcount(), output);
  }

  // optional int32 remainOnlineRewardTime = 18;
  if (has_remainonlinerewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->remainonlinerewardtime(), output);
  }

  // repeated int32 payids = 19;
  for (int i = 0; i < this->payids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->payids(i), output);
  }

  // optional bool isSafeDepositBoxPwdEmpty = 20;
  if (has_issafedepositboxpwdempty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->issafedepositboxpwdempty(), output);
  }

  // optional int64 safeBoxGold = 21;
  if (has_safeboxgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->safeboxgold(), output);
  }

  // optional int32 collected = 22;
  if (has_collected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->collected(), output);
  }

  // optional int32 newGuildHasFinishStep = 23;
  if (has_newguildhasfinishstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->newguildhasfinishstep(), output);
  }

  // optional int64 sendGiftCoinCount = 24;
  if (has_sendgiftcoincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->sendgiftcoincount(), output);
  }

  // optional int32 update_icon_count = 25;
  if (has_update_icon_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->update_icon_count(), output);
  }

  // optional int32 updateNicknameCount = 26;
  if (has_updatenicknamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->updatenicknamecount(), output);
  }

  // optional bool isBindMobilePhone = 27;
  if (has_isbindmobilephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->isbindmobilephone(), output);
  }

  // repeated .msg_info_def.ServiceInfo serviceInfos = 28;
  for (int i = 0; i < this->serviceinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->serviceinfos(i), output);
  }

  // optional int32 monthCardRemainSecondTime = 29;
  if (has_monthcardremainsecondtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->monthcardremainsecondtime(), output);
  }

  // optional bool hasReceiveRechargeReward = 30;
  if (has_hasreceiverechargereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->hasreceiverechargereward(), output);
  }

  // optional int32 curRecharge = 31;
  if (has_currecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->currecharge(), output);
  }

  // optional int32 Experience_VIP = 32;
  if (has_experience_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->experience_vip(), output);
  }

  // repeated .msg_info_def.BoxInfo boxInfoList = 33;
  for (int i = 0; i < this->boxinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->boxinfolist(i), output);
  }

  // optional int32 thankYouJoinCount = 34;
  if (has_thankyoujoincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->thankyoujoincount(), output);
  }

  // optional int32 boxLotteryCountToday = 35;
  if (has_boxlotterycounttoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->boxlotterycounttoday(), output);
  }

  // optional int32 create_time = 36;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->create_time(), output);
  }

  // repeated .msg_info_def.ActivityReceiveInfo receiveInfo = 37;
  for (int i = 0; i < this->receiveinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->receiveinfo(i), output);
  }

  // optional int32 monthCard_time = 38;
  if (has_monthcard_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->monthcard_time(), output);
  }

  // optional bool isFirstLogined = 39;
  if (has_isfirstlogined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->isfirstlogined(), output);
  }

  // optional int32 chip = 40;
  if (has_chip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->chip(), output);
  }

  // optional bool hasReceiveMonthCardReward = 41;
  if (has_hasreceivemonthcardreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->hasreceivemonthcardreward(), output);
  }

  // optional int32 firstGiftTime = 42;
  if (has_firstgifttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->firstgifttime(), output);
  }

  // optional bool isBuyFirstGift = 43 [default = false];
  if (has_isbuyfirstgift()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->isbuyfirstgift(), output);
  }

  // optional int32 Privilege = 44;
  if (has_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->privilege(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_info_def.msg_account_info)
}

::google::protobuf::uint8* msg_account_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_info_def.msg_account_info)
  // optional int32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->aid(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional int64 gold = 4;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gold(), target);
  }

  // optional int32 viplvl = 5;
  if (has_viplvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->viplvl(), target);
  }

  // optional int32 vipexp = 6;
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vipexp(), target);
  }

  // optional string icon_custom = 8;
  if (has_icon_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_custom().data(), this->icon_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon_custom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->icon_custom(), target);
  }

  // optional int32 sex = 9;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sex(), target);
  }

  // optional string selfSignature = 10;
  if (has_selfsignature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->selfsignature().data(), this->selfsignature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "selfsignature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->selfsignature(), target);
  }

  // repeated .msg_info_def.msg_gift giftStat = 11;
  for (int i = 0; i < this->giftstat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->giftstat(i), target);
  }

  // optional int64 maxGold = 12;
  if (has_maxgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->maxgold(), target);
  }

  // optional int32 maxTicket = 13;
  if (has_maxticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->maxticket(), target);
  }

  // optional int32 Ticket = 14;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->ticket(), target);
  }

  // repeated .msg_info_def.ItemInfo bagItems = 15;
  for (int i = 0; i < this->bagitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->bagitems(i), target);
  }

  // optional int32 curPhotoFrameId = 16;
  if (has_curphotoframeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->curphotoframeid(), target);
  }

  // optional int32 hasReceiveOnlineRewardCount = 17;
  if (has_hasreceiveonlinerewardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->hasreceiveonlinerewardcount(), target);
  }

  // optional int32 remainOnlineRewardTime = 18;
  if (has_remainonlinerewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->remainonlinerewardtime(), target);
  }

  // repeated int32 payids = 19;
  for (int i = 0; i < this->payids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->payids(i), target);
  }

  // optional bool isSafeDepositBoxPwdEmpty = 20;
  if (has_issafedepositboxpwdempty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->issafedepositboxpwdempty(), target);
  }

  // optional int64 safeBoxGold = 21;
  if (has_safeboxgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->safeboxgold(), target);
  }

  // optional int32 collected = 22;
  if (has_collected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->collected(), target);
  }

  // optional int32 newGuildHasFinishStep = 23;
  if (has_newguildhasfinishstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->newguildhasfinishstep(), target);
  }

  // optional int64 sendGiftCoinCount = 24;
  if (has_sendgiftcoincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->sendgiftcoincount(), target);
  }

  // optional int32 update_icon_count = 25;
  if (has_update_icon_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->update_icon_count(), target);
  }

  // optional int32 updateNicknameCount = 26;
  if (has_updatenicknamecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->updatenicknamecount(), target);
  }

  // optional bool isBindMobilePhone = 27;
  if (has_isbindmobilephone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->isbindmobilephone(), target);
  }

  // repeated .msg_info_def.ServiceInfo serviceInfos = 28;
  for (int i = 0; i < this->serviceinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->serviceinfos(i), target);
  }

  // optional int32 monthCardRemainSecondTime = 29;
  if (has_monthcardremainsecondtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->monthcardremainsecondtime(), target);
  }

  // optional bool hasReceiveRechargeReward = 30;
  if (has_hasreceiverechargereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->hasreceiverechargereward(), target);
  }

  // optional int32 curRecharge = 31;
  if (has_currecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->currecharge(), target);
  }

  // optional int32 Experience_VIP = 32;
  if (has_experience_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->experience_vip(), target);
  }

  // repeated .msg_info_def.BoxInfo boxInfoList = 33;
  for (int i = 0; i < this->boxinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->boxinfolist(i), target);
  }

  // optional int32 thankYouJoinCount = 34;
  if (has_thankyoujoincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->thankyoujoincount(), target);
  }

  // optional int32 boxLotteryCountToday = 35;
  if (has_boxlotterycounttoday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->boxlotterycounttoday(), target);
  }

  // optional int32 create_time = 36;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->create_time(), target);
  }

  // repeated .msg_info_def.ActivityReceiveInfo receiveInfo = 37;
  for (int i = 0; i < this->receiveinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->receiveinfo(i), target);
  }

  // optional int32 monthCard_time = 38;
  if (has_monthcard_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->monthcard_time(), target);
  }

  // optional bool isFirstLogined = 39;
  if (has_isfirstlogined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->isfirstlogined(), target);
  }

  // optional int32 chip = 40;
  if (has_chip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->chip(), target);
  }

  // optional bool hasReceiveMonthCardReward = 41;
  if (has_hasreceivemonthcardreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->hasreceivemonthcardreward(), target);
  }

  // optional int32 firstGiftTime = 42;
  if (has_firstgifttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->firstgifttime(), target);
  }

  // optional bool isBuyFirstGift = 43 [default = false];
  if (has_isbuyfirstgift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->isbuyfirstgift(), target);
  }

  // optional int32 Privilege = 44;
  if (has_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->privilege(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_info_def.msg_account_info)
  return target;
}

int msg_account_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aid());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int64 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int32 viplvl = 5;
    if (has_viplvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplvl());
    }

    // optional int32 vipexp = 6;
    if (has_vipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipexp());
    }

    // optional string icon_custom = 8;
    if (has_icon_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_custom());
    }

    // optional int32 sex = 9;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string selfSignature = 10;
    if (has_selfsignature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfsignature());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int64 maxGold = 12;
    if (has_maxgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxgold());
    }

    // optional int32 maxTicket = 13;
    if (has_maxticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxticket());
    }

    // optional int32 Ticket = 14;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket());
    }

    // optional int32 curPhotoFrameId = 16;
    if (has_curphotoframeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curphotoframeid());
    }

    // optional int32 hasReceiveOnlineRewardCount = 17;
    if (has_hasreceiveonlinerewardcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasreceiveonlinerewardcount());
    }

    // optional int32 remainOnlineRewardTime = 18;
    if (has_remainonlinerewardtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remainonlinerewardtime());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional bool isSafeDepositBoxPwdEmpty = 20;
    if (has_issafedepositboxpwdempty()) {
      total_size += 2 + 1;
    }

    // optional int64 safeBoxGold = 21;
    if (has_safeboxgold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->safeboxgold());
    }

    // optional int32 collected = 22;
    if (has_collected()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collected());
    }

    // optional int32 newGuildHasFinishStep = 23;
    if (has_newguildhasfinishstep()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newguildhasfinishstep());
    }

    // optional int64 sendGiftCoinCount = 24;
    if (has_sendgiftcoincount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendgiftcoincount());
    }

    // optional int32 update_icon_count = 25;
    if (has_update_icon_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_icon_count());
    }

    // optional int32 updateNicknameCount = 26;
    if (has_updatenicknamecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatenicknamecount());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool isBindMobilePhone = 27;
    if (has_isbindmobilephone()) {
      total_size += 2 + 1;
    }

    // optional int32 monthCardRemainSecondTime = 29;
    if (has_monthcardremainsecondtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monthcardremainsecondtime());
    }

    // optional bool hasReceiveRechargeReward = 30;
    if (has_hasreceiverechargereward()) {
      total_size += 2 + 1;
    }

    // optional int32 curRecharge = 31;
    if (has_currecharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currecharge());
    }

    // optional int32 Experience_VIP = 32;
    if (has_experience_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->experience_vip());
    }

    // optional int32 thankYouJoinCount = 34;
    if (has_thankyoujoincount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thankyoujoincount());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 boxLotteryCountToday = 35;
    if (has_boxlotterycounttoday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boxlotterycounttoday());
    }

    // optional int32 create_time = 36;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional int32 monthCard_time = 38;
    if (has_monthcard_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monthcard_time());
    }

    // optional bool isFirstLogined = 39;
    if (has_isfirstlogined()) {
      total_size += 2 + 1;
    }

    // optional int32 chip = 40;
    if (has_chip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chip());
    }

    // optional bool hasReceiveMonthCardReward = 41;
    if (has_hasreceivemonthcardreward()) {
      total_size += 2 + 1;
    }

    // optional int32 firstGiftTime = 42;
    if (has_firstgifttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstgifttime());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional bool isBuyFirstGift = 43 [default = false];
    if (has_isbuyfirstgift()) {
      total_size += 2 + 1;
    }

    // optional int32 Privilege = 44;
    if (has_privilege()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->privilege());
    }

  }
  // repeated .msg_info_def.msg_gift giftStat = 11;
  total_size += 1 * this->giftstat_size();
  for (int i = 0; i < this->giftstat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->giftstat(i));
  }

  // repeated .msg_info_def.ItemInfo bagItems = 15;
  total_size += 1 * this->bagitems_size();
  for (int i = 0; i < this->bagitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bagitems(i));
  }

  // repeated int32 payids = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->payids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->payids(i));
    }
    total_size += 2 * this->payids_size() + data_size;
  }

  // repeated .msg_info_def.ServiceInfo serviceInfos = 28;
  total_size += 2 * this->serviceinfos_size();
  for (int i = 0; i < this->serviceinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serviceinfos(i));
  }

  // repeated .msg_info_def.BoxInfo boxInfoList = 33;
  total_size += 2 * this->boxinfolist_size();
  for (int i = 0; i < this->boxinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxinfolist(i));
  }

  // repeated .msg_info_def.ActivityReceiveInfo receiveInfo = 37;
  total_size += 2 * this->receiveinfo_size();
  for (int i = 0; i < this->receiveinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->receiveinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_account_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_account_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_account_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_account_info::MergeFrom(const msg_account_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  giftstat_.MergeFrom(from.giftstat_);
  bagitems_.MergeFrom(from.bagitems_);
  payids_.MergeFrom(from.payids_);
  serviceinfos_.MergeFrom(from.serviceinfos_);
  boxinfolist_.MergeFrom(from.boxinfolist_);
  receiveinfo_.MergeFrom(from.receiveinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_viplvl()) {
      set_viplvl(from.viplvl());
    }
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_icon_custom()) {
      set_icon_custom(from.icon_custom());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_selfsignature()) {
      set_selfsignature(from.selfsignature());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_maxgold()) {
      set_maxgold(from.maxgold());
    }
    if (from.has_maxticket()) {
      set_maxticket(from.maxticket());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_curphotoframeid()) {
      set_curphotoframeid(from.curphotoframeid());
    }
    if (from.has_hasreceiveonlinerewardcount()) {
      set_hasreceiveonlinerewardcount(from.hasreceiveonlinerewardcount());
    }
    if (from.has_remainonlinerewardtime()) {
      set_remainonlinerewardtime(from.remainonlinerewardtime());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_issafedepositboxpwdempty()) {
      set_issafedepositboxpwdempty(from.issafedepositboxpwdempty());
    }
    if (from.has_safeboxgold()) {
      set_safeboxgold(from.safeboxgold());
    }
    if (from.has_collected()) {
      set_collected(from.collected());
    }
    if (from.has_newguildhasfinishstep()) {
      set_newguildhasfinishstep(from.newguildhasfinishstep());
    }
    if (from.has_sendgiftcoincount()) {
      set_sendgiftcoincount(from.sendgiftcoincount());
    }
    if (from.has_update_icon_count()) {
      set_update_icon_count(from.update_icon_count());
    }
    if (from.has_updatenicknamecount()) {
      set_updatenicknamecount(from.updatenicknamecount());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_isbindmobilephone()) {
      set_isbindmobilephone(from.isbindmobilephone());
    }
    if (from.has_monthcardremainsecondtime()) {
      set_monthcardremainsecondtime(from.monthcardremainsecondtime());
    }
    if (from.has_hasreceiverechargereward()) {
      set_hasreceiverechargereward(from.hasreceiverechargereward());
    }
    if (from.has_currecharge()) {
      set_currecharge(from.currecharge());
    }
    if (from.has_experience_vip()) {
      set_experience_vip(from.experience_vip());
    }
    if (from.has_thankyoujoincount()) {
      set_thankyoujoincount(from.thankyoujoincount());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_boxlotterycounttoday()) {
      set_boxlotterycounttoday(from.boxlotterycounttoday());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_monthcard_time()) {
      set_monthcard_time(from.monthcard_time());
    }
    if (from.has_isfirstlogined()) {
      set_isfirstlogined(from.isfirstlogined());
    }
    if (from.has_chip()) {
      set_chip(from.chip());
    }
    if (from.has_hasreceivemonthcardreward()) {
      set_hasreceivemonthcardreward(from.hasreceivemonthcardreward());
    }
    if (from.has_firstgifttime()) {
      set_firstgifttime(from.firstgifttime());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_isbuyfirstgift()) {
      set_isbuyfirstgift(from.isbuyfirstgift());
    }
    if (from.has_privilege()) {
      set_privilege(from.privilege());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_account_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_account_info::CopyFrom(const msg_account_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_account_info::IsInitialized() const {

  return true;
}

void msg_account_info::Swap(msg_account_info* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(nickname_, other->nickname_);
    std::swap(gold_, other->gold_);
    std::swap(viplvl_, other->viplvl_);
    std::swap(vipexp_, other->vipexp_);
    std::swap(icon_custom_, other->icon_custom_);
    std::swap(sex_, other->sex_);
    std::swap(selfsignature_, other->selfsignature_);
    giftstat_.Swap(&other->giftstat_);
    std::swap(maxgold_, other->maxgold_);
    std::swap(maxticket_, other->maxticket_);
    std::swap(ticket_, other->ticket_);
    bagitems_.Swap(&other->bagitems_);
    std::swap(curphotoframeid_, other->curphotoframeid_);
    std::swap(hasreceiveonlinerewardcount_, other->hasreceiveonlinerewardcount_);
    std::swap(remainonlinerewardtime_, other->remainonlinerewardtime_);
    payids_.Swap(&other->payids_);
    std::swap(issafedepositboxpwdempty_, other->issafedepositboxpwdempty_);
    std::swap(safeboxgold_, other->safeboxgold_);
    std::swap(collected_, other->collected_);
    std::swap(newguildhasfinishstep_, other->newguildhasfinishstep_);
    std::swap(sendgiftcoincount_, other->sendgiftcoincount_);
    std::swap(update_icon_count_, other->update_icon_count_);
    std::swap(updatenicknamecount_, other->updatenicknamecount_);
    std::swap(isbindmobilephone_, other->isbindmobilephone_);
    serviceinfos_.Swap(&other->serviceinfos_);
    std::swap(monthcardremainsecondtime_, other->monthcardremainsecondtime_);
    std::swap(hasreceiverechargereward_, other->hasreceiverechargereward_);
    std::swap(currecharge_, other->currecharge_);
    std::swap(experience_vip_, other->experience_vip_);
    boxinfolist_.Swap(&other->boxinfolist_);
    std::swap(thankyoujoincount_, other->thankyoujoincount_);
    std::swap(boxlotterycounttoday_, other->boxlotterycounttoday_);
    std::swap(create_time_, other->create_time_);
    receiveinfo_.Swap(&other->receiveinfo_);
    std::swap(monthcard_time_, other->monthcard_time_);
    std::swap(isfirstlogined_, other->isfirstlogined_);
    std::swap(chip_, other->chip_);
    std::swap(hasreceivemonthcardreward_, other->hasreceivemonthcardreward_);
    std::swap(firstgifttime_, other->firstgifttime_);
    std::swap(isbuyfirstgift_, other->isbuyfirstgift_);
    std::swap(privilege_, other->privilege_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_account_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_account_info_descriptor_;
  metadata.reflection = msg_account_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_account_info_ex::kIsRobotFieldNumber;
const int msg_account_info_ex::kLuckyFieldNumber;
const int msg_account_info_ex::kTempIncomeFieldNumber;
const int msg_account_info_ex::kTotalIncomeFieldNumber;
#endif  // !_MSC_VER

msg_account_info_ex::msg_account_info_ex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_info_def.msg_account_info_ex)
}

void msg_account_info_ex::InitAsDefaultInstance() {
}

msg_account_info_ex::msg_account_info_ex(const msg_account_info_ex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_info_def.msg_account_info_ex)
}

void msg_account_info_ex::SharedCtor() {
  _cached_size_ = 0;
  is_robot_ = false;
  lucky_ = 0;
  temp_income_ = GOOGLE_LONGLONG(0);
  total_income_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_account_info_ex::~msg_account_info_ex() {
  // @@protoc_insertion_point(destructor:msg_info_def.msg_account_info_ex)
  SharedDtor();
}

void msg_account_info_ex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_account_info_ex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_account_info_ex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_account_info_ex_descriptor_;
}

const msg_account_info_ex& msg_account_info_ex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  return *default_instance_;
}

msg_account_info_ex* msg_account_info_ex::default_instance_ = NULL;

msg_account_info_ex* msg_account_info_ex::New() const {
  return new msg_account_info_ex;
}

void msg_account_info_ex::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<msg_account_info_ex*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(is_robot_, total_income_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_account_info_ex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_info_def.msg_account_info_ex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_robot = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_robot_)));
          set_has_is_robot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lucky;
        break;
      }

      // optional int32 lucky = 2;
      case 2: {
        if (tag == 16) {
         parse_lucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lucky_)));
          set_has_lucky();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_temp_income;
        break;
      }

      // optional int64 temp_income = 3;
      case 3: {
        if (tag == 24) {
         parse_temp_income:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &temp_income_)));
          set_has_temp_income();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_income;
        break;
      }

      // optional int64 total_income = 4;
      case 4: {
        if (tag == 32) {
         parse_total_income:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_income_)));
          set_has_total_income();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_info_def.msg_account_info_ex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_info_def.msg_account_info_ex)
  return false;
#undef DO_
}

void msg_account_info_ex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_info_def.msg_account_info_ex)
  // optional bool is_robot = 1 [default = false];
  if (has_is_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_robot(), output);
  }

  // optional int32 lucky = 2;
  if (has_lucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lucky(), output);
  }

  // optional int64 temp_income = 3;
  if (has_temp_income()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->temp_income(), output);
  }

  // optional int64 total_income = 4;
  if (has_total_income()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_income(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_info_def.msg_account_info_ex)
}

::google::protobuf::uint8* msg_account_info_ex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_info_def.msg_account_info_ex)
  // optional bool is_robot = 1 [default = false];
  if (has_is_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_robot(), target);
  }

  // optional int32 lucky = 2;
  if (has_lucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lucky(), target);
  }

  // optional int64 temp_income = 3;
  if (has_temp_income()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->temp_income(), target);
  }

  // optional int64 total_income = 4;
  if (has_total_income()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_income(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_info_def.msg_account_info_ex)
  return target;
}

int msg_account_info_ex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_robot = 1 [default = false];
    if (has_is_robot()) {
      total_size += 1 + 1;
    }

    // optional int32 lucky = 2;
    if (has_lucky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lucky());
    }

    // optional int64 temp_income = 3;
    if (has_temp_income()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->temp_income());
    }

    // optional int64 total_income = 4;
    if (has_total_income()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_income());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_account_info_ex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_account_info_ex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_account_info_ex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_account_info_ex::MergeFrom(const msg_account_info_ex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_robot()) {
      set_is_robot(from.is_robot());
    }
    if (from.has_lucky()) {
      set_lucky(from.lucky());
    }
    if (from.has_temp_income()) {
      set_temp_income(from.temp_income());
    }
    if (from.has_total_income()) {
      set_total_income(from.total_income());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_account_info_ex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_account_info_ex::CopyFrom(const msg_account_info_ex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_account_info_ex::IsInitialized() const {

  return true;
}

void msg_account_info_ex::Swap(msg_account_info_ex* other) {
  if (other != this) {
    std::swap(is_robot_, other->is_robot_);
    std::swap(lucky_, other->lucky_);
    std::swap(temp_income_, other->temp_income_);
    std::swap(total_income_, other->total_income_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_account_info_ex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_account_info_ex_descriptor_;
  metadata.reflection = msg_account_info_ex_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg_info_def

// @@protoc_insertion_point(global_scope)
