// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_happysupremacy_def.proto

#ifndef PROTOBUF_game_5fhappysupremacy_5fdef_2eproto__INCLUDED
#define PROTOBUF_game_5fhappysupremacy_5fdef_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_happysupremacy_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fhappysupremacy_5fdef_2eproto();
void protobuf_AssignDesc_game_5fhappysupremacy_5fdef_2eproto();
void protobuf_ShutdownFile_game_5fhappysupremacy_5fdef_2eproto();


enum e_server_msg_type {
  e_mst_start_c2l = 10000,
  e_mst_c2l_get_room_info = 10001,
  e_mst_c2l_enter_room = 10002,
  e_mst_c2l_leave_room = 10003,
  e_mst_c2l_add_bet = 10004,
  e_mst_c2l_repeat_bet = 10005,
  e_mst_c2l_clear_bet = 10006,
  e_mst_c2l_get_room_scene_info = 10007,
  e_mst_c2l_check_state = 10008,
  e_mst_c2l_gm = 10009,
  e_mst_c2l_ask_for_banker = 10010,
  e_mst_c2l_leave_banker = 10011,
  e_mst_c2l_ask_first_for_banker = 10012,
  e_mst_c2l_ask_player_list = 10013,
  e_mst_c2l_ask_banker_list = 10014,
  e_mst_c2l_ask_history_list = 10015,
  e_mst_c2l_gm_change_result = 11001,
  e_mst_c2l_gm_talk_server = 11002,
  e_mst_start_l2c = 15000,
  e_mst_l2c_get_room_info_result = 15001,
  e_mst_l2c_enter_room_result = 15002,
  e_mst_l2c_leave_room_result = 15003,
  e_mst_l2c_add_bet = 15004,
  e_mst_l2c_repeat_bet = 15005,
  e_mst_l2c_clear_bet = 15006,
  e_mst_l2c_bc_begin_bet = 15007,
  e_mst_l2c_bc_begin_award = 15008,
  e_mst_l2c_bc_total_bet_info = 15009,
  e_mst_l2c_get_room_scene_info = 15010,
  e_mst_l2c_check_state_result = 15013,
  e_mst_l2c_bc_accept_gift = 15015,
  e_mst_l2c_ask_for_banker = 15016,
  e_mst_l2c_leave_banker = 15017,
  e_mst_l2c_ask_first_for_banker = 15018,
  e_mst_l2c_bc_change_banker = 15019,
  e_mst_l2c_ask_player_list = 15020,
  e_mst_l2c_ask_banker_list = 15021,
  e_mst_l2c_ask_history_list = 15022,
  e_mst_l2c_bc_rob_banker_info = 15023,
  e_mst_l2c_gm_change_result = 16001,
  e_mst_l2c_gm_talk_server = 16002,
  e_mst_l2c_notice_gm_all_bet_info = 16100,
  e_mst_l2c_notice_gm_stock_info = 17001,
  e_mst_clend_index = 20000
};
bool e_server_msg_type_IsValid(int value);
const e_server_msg_type e_server_msg_type_MIN = e_mst_start_c2l;
const e_server_msg_type e_server_msg_type_MAX = e_mst_clend_index;
const int e_server_msg_type_ARRAYSIZE = e_server_msg_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor();
inline const ::std::string& e_server_msg_type_Name(e_server_msg_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_server_msg_type_descriptor(), value);
}
inline bool e_server_msg_type_Parse(
    const ::std::string& name, e_server_msg_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_server_msg_type>(
    e_server_msg_type_descriptor(), name, value);
}
enum e_game_state {
  e_state_game_begin = 0,
  e_state_game_bet = 1,
  e_state_game_award = 2
};
bool e_game_state_IsValid(int value);
const e_game_state e_game_state_MIN = e_state_game_begin;
const e_game_state e_game_state_MAX = e_state_game_award;
const int e_game_state_ARRAYSIZE = e_game_state_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_game_state_descriptor();
inline const ::std::string& e_game_state_Name(e_game_state value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_game_state_descriptor(), value);
}
inline bool e_game_state_Parse(
    const ::std::string& name, e_game_state* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_game_state>(
    e_game_state_descriptor(), name, value);
}
enum e_card_flower {
  e_flower_diamond = 0,
  e_flower_club = 1,
  e_flower_spade = 2,
  e_flower_heart = 3
};
bool e_card_flower_IsValid(int value);
const e_card_flower e_card_flower_MIN = e_flower_diamond;
const e_card_flower e_card_flower_MAX = e_flower_heart;
const int e_card_flower_ARRAYSIZE = e_card_flower_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_card_flower_descriptor();
inline const ::std::string& e_card_flower_Name(e_card_flower value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_card_flower_descriptor(), value);
}
inline bool e_card_flower_Parse(
    const ::std::string& name, e_card_flower* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_card_flower>(
    e_card_flower_descriptor(), name, value);
}
enum e_card_owner {
  e_owner_none = 0,
  e_owner_banker = 1,
  e_owner_forwarddoor = 2,
  e_owner_reversedoor = 3,
  e_owner_oppositedoor = 4
};
bool e_card_owner_IsValid(int value);
const e_card_owner e_card_owner_MIN = e_owner_none;
const e_card_owner e_card_owner_MAX = e_owner_oppositedoor;
const int e_card_owner_ARRAYSIZE = e_card_owner_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_card_owner_descriptor();
inline const ::std::string& e_card_owner_Name(e_card_owner value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_card_owner_descriptor(), value);
}
inline bool e_card_owner_Parse(
    const ::std::string& name, e_card_owner* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_card_owner>(
    e_card_owner_descriptor(), name, value);
}
enum e_bet_type {
  e_bettype_forwarddoor = 1,
  e_bettype_reversedoor = 2,
  e_bettype_oppositedoor = 3,
  e_bettype_forward_opposite_door = 4,
  e_bettype_reverse_opposite_door = 5,
  e_bettype_forward_reverse_door = 6
};
bool e_bet_type_IsValid(int value);
const e_bet_type e_bet_type_MIN = e_bettype_forwarddoor;
const e_bet_type e_bet_type_MAX = e_bettype_forward_reverse_door;
const int e_bet_type_ARRAYSIZE = e_bet_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_bet_type_descriptor();
inline const ::std::string& e_bet_type_Name(e_bet_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_bet_type_descriptor(), value);
}
inline bool e_bet_type_Parse(
    const ::std::string& name, e_bet_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_bet_type>(
    e_bet_type_descriptor(), name, value);
}
enum e_bet_result {
  e_betresult_nowin_nolose = 1,
  e_betresult_win = 2,
  e_betresult_lose = 3
};
bool e_bet_result_IsValid(int value);
const e_bet_result e_bet_result_MIN = e_betresult_nowin_nolose;
const e_bet_result e_bet_result_MAX = e_betresult_lose;
const int e_bet_result_ARRAYSIZE = e_bet_result_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_bet_result_descriptor();
inline const ::std::string& e_bet_result_Name(e_bet_result value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_bet_result_descriptor(), value);
}
inline bool e_bet_result_Parse(
    const ::std::string& name, e_bet_result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_bet_result>(
    e_bet_result_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_happysupremacy_protocols

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::game_happysupremacy_protocols::e_server_msg_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_happysupremacy_protocols::e_server_msg_type>() {
  return ::game_happysupremacy_protocols::e_server_msg_type_descriptor();
}
template <> struct is_proto_enum< ::game_happysupremacy_protocols::e_game_state> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_happysupremacy_protocols::e_game_state>() {
  return ::game_happysupremacy_protocols::e_game_state_descriptor();
}
template <> struct is_proto_enum< ::game_happysupremacy_protocols::e_card_flower> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_happysupremacy_protocols::e_card_flower>() {
  return ::game_happysupremacy_protocols::e_card_flower_descriptor();
}
template <> struct is_proto_enum< ::game_happysupremacy_protocols::e_card_owner> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_happysupremacy_protocols::e_card_owner>() {
  return ::game_happysupremacy_protocols::e_card_owner_descriptor();
}
template <> struct is_proto_enum< ::game_happysupremacy_protocols::e_bet_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_happysupremacy_protocols::e_bet_type>() {
  return ::game_happysupremacy_protocols::e_bet_type_descriptor();
}
template <> struct is_proto_enum< ::game_happysupremacy_protocols::e_bet_result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_happysupremacy_protocols::e_bet_result>() {
  return ::game_happysupremacy_protocols::e_bet_result_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fhappysupremacy_5fdef_2eproto__INCLUDED
