// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_showhand_def.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_showhand_def.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game_showhand_protocols {

namespace {

const ::google::protobuf::Descriptor* msg_table_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_table_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_player_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_player_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_player_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_result_point_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_result_point_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_bet_result_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_bet_result_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_bet_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_bet_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* p_bet_state_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  p_bet_state_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_game_state_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_bet_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fshowhand_5fdef_2eproto() {
  protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_showhand_def.proto");
  GOOGLE_CHECK(file != NULL);
  msg_table_info_descriptor_ = file->message_type(0);
  static const int msg_table_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_info, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_info, player_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_info, player_right_),
  };
  msg_table_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_table_info_descriptor_,
      msg_table_info::default_instance_,
      msg_table_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_table_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_table_info));
  msg_player_info_descriptor_ = file->message_type(1);
  static const int msg_player_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_head_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_head_custom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, player_vip_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, is_left_),
  };
  msg_player_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_info_descriptor_,
      msg_player_info::default_instance_,
      msg_player_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_info));
  msg_player_result_descriptor_ = file->message_type(2);
  static const int msg_player_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_result, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_result, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_result, wingoldcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_result, combinecards_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_result, synctotalgoldcount_),
  };
  msg_player_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_player_result_descriptor_,
      msg_player_result::default_instance_,
      msg_player_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_player_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_player_result));
  msg_result_point_info_descriptor_ = file->message_type(3);
  static const int msg_result_point_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_point_info, combinecardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_point_info, owner_),
  };
  msg_result_point_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_result_point_info_descriptor_,
      msg_result_point_info::default_instance_,
      msg_result_point_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_point_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_result_point_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_result_point_info));
  msg_bet_result_info_descriptor_ = file->message_type(4);
  static const int msg_bet_result_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_result_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_result_info, bet_count_),
  };
  msg_bet_result_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_bet_result_info_descriptor_,
      msg_bet_result_info::default_instance_,
      msg_bet_result_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_result_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_result_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_bet_result_info));
  msg_bet_info_descriptor_ = file->message_type(5);
  static const int msg_bet_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, bet_count_),
  };
  msg_bet_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_bet_info_descriptor_,
      msg_bet_info::default_instance_,
      msg_bet_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_bet_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_bet_info));
  p_bet_state_descriptor_ = file->message_type(6);
  static const int p_bet_state_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(p_bet_state, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(p_bet_state, bet_type_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(p_bet_state, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(p_bet_state, last_betinfo_),
  };
  p_bet_state_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      p_bet_state_descriptor_,
      p_bet_state::default_instance_,
      p_bet_state_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(p_bet_state, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(p_bet_state, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(p_bet_state));
  e_server_msg_type_descriptor_ = file->enum_type(0);
  e_game_state_descriptor_ = file->enum_type(1);
  e_bet_type_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fshowhand_5fdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_table_info_descriptor_, &msg_table_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_info_descriptor_, &msg_player_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_player_result_descriptor_, &msg_player_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_result_point_info_descriptor_, &msg_result_point_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_bet_result_info_descriptor_, &msg_bet_result_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_bet_info_descriptor_, &msg_bet_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    p_bet_state_descriptor_, &p_bet_state::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fshowhand_5fdef_2eproto() {
  delete msg_table_info::default_instance_;
  delete msg_table_info_reflection_;
  delete msg_player_info::default_instance_;
  delete msg_player_info_reflection_;
  delete msg_player_result::default_instance_;
  delete msg_player_result_reflection_;
  delete msg_result_point_info::default_instance_;
  delete msg_result_point_info_reflection_;
  delete msg_bet_result_info::default_instance_;
  delete msg_bet_result_info_reflection_;
  delete msg_bet_info::default_instance_;
  delete msg_bet_info_reflection_;
  delete p_bet_state::default_instance_;
  delete p_bet_state_reflection_;
}

void protobuf_AddDesc_game_5fshowhand_5fdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027game_showhand_def.proto\022\027game_showhand"
    "_protocols\"\240\001\n\016msg_table_info\022\017\n\007tableid"
    "\030\001 \001(\r\022=\n\013player_left\030\002 \001(\0132(.game_showh"
    "and_protocols.msg_player_info\022>\n\014player_"
    "right\030\003 \001(\0132(.game_showhand_protocols.ms"
    "g_player_info\"\317\001\n\017msg_player_info\022\021\n\tpla"
    "yer_id\030\001 \001(\005\022\027\n\017player_nickname\030\002 \001(\t\022\031\n"
    "\021player_head_frame\030\003 \001(\005\022\032\n\022player_head_"
    "custom\030\004 \001(\t\022\023\n\013player_gold\030\005 \001(\003\022\025\n\rpla"
    "yer_vip_lv\030\006 \001(\005\022\r\n\005state\030\007 \001(\r\022\r\n\005cards"
    "\030\010 \003(\005\022\017\n\007is_left\030\t \001(\010\"\177\n\021msg_player_re"
    "sult\022\021\n\tplayer_id\030\001 \001(\005\022\014\n\004card\030\002 \001(\005\022\024\n"
    "\014winGoldCount\030\003 \001(\003\022\027\n\017combinecards_id\030\004"
    " \001(\005\022\032\n\022synctotalGoldCount\030\005 \001(\003\"@\n\025msg_"
    "result_point_info\022\030\n\rcombinecardId\030\001 \001(\r"
    ":\0010\022\r\n\005owner\030\002 \001(\r\"[\n\023msg_bet_result_inf"
    "o\0221\n\004type\030\001 \001(\0162#.game_showhand_protocol"
    "s.e_bet_type\022\021\n\tbet_count\030\002 \001(\003\"T\n\014msg_b"
    "et_info\0221\n\004type\030\001 \001(\0162#.game_showhand_pr"
    "otocols.e_bet_type\022\021\n\tbet_count\030\002 \001(\003\"\250\001"
    "\n\013p_bet_state\022\021\n\tplayer_id\030\001 \001(\005\022:\n\rbet_"
    "type_list\030\002 \003(\0162#.game_showhand_protocol"
    "s.e_bet_type\022\r\n\005state\030\003 \001(\005\022;\n\014last_beti"
    "nfo\030\004 \001(\0132%.game_showhand_protocols.msg_"
    "bet_info*\202\n\n\021e_server_msg_type\022\024\n\017e_mst_"
    "start_c2l\020\220N\022\034\n\027e_mst_c2l_get_room_info\020"
    "\221N\022\036\n\031e_mst_c2l_enter_game_room\020\222N\022\035\n\030e_"
    "mst_c2l_quit_game_room\020\223N\022 \n\033e_mst_c2l_d"
    "esk_rule_setting\020\224N\022\032\n\025e_mst_c2l_choose_"
    "desk\020\225N\022#\n\036e_mst_c2l_get_table_scene_inf"
    "o\020\226N\022\030\n\023e_mst_c2l_quit_desk\020\227N\022\033\n\026e_mst_"
    "c2l_player_ready\020\230N\022\030\n\023e_mst_c2l_view_ca"
    "rd\020\231N\022\027\n\022e_mst_c2l_bet_info\020\232N\022\032\n\025e_mst_"
    "c2l_check_state\020\233N\022\037\n\032e_mst_c2l_gm_chang"
    "e_result\020\371U\022\024\n\017e_mst_start_l2c\020\230u\022#\n\036e_m"
    "st_l2c_get_room_info_result\020\231u\022%\n e_mst_"
    "l2c_enter_game_room_result\020\232u\022\'\n\"e_mst_l"
    "2c_desk_rule_setting_result\020\233u\022!\n\034e_mst_"
    "l2c_choose_desk_result\020\234u\022#\n\036e_mst_l2c_g"
    "et_table_scene_info\020\235u\022\"\n\035e_mst_l2c_play"
    "er_ready_result\020\236u\022\037\n\032e_mst_l2c_view_car"
    "d_result\020\237u\022\031\n\024e_mst_l2c_bet_result\020\240u\022$"
    "\n\037e_mst_l2c_quit_game_room_result\020\241u\022\037\n\032"
    "e_mst_l2c_quit_desk_result\020\242u\022!\n\034e_mst_l"
    "2c_check_state_result\020\243u\022(\n#e_mst_l2c_no"
    "tice_start_game_message\020\255u\022\'\n\"e_mst_l2c_"
    "notice_start_bet_message\020\256u\022&\n!e_mst_l2c"
    "_notice_sendcard_message\020\257u\022)\n$e_mst_l2c"
    "_notice_start_award_message\020\260u\022(\n#e_mst_"
    "l2c_notice_join_table_message\020\266u\022)\n$e_ms"
    "t_l2c_notice_leave_table_message\020\267u\022*\n%e"
    "_mst_l2c_notice_table_player_message\020\270u\022"
    "\'\n\"e_mst_l2c_notice_gm_all_cards_info\020\201}"
    "\022\037\n\032e_mst_l2c_gm_change_result\020\202}\022$\n\036e_m"
    "st_l2c_notice_gm_stock_info\020\351\204\001\022#\n\035e_mst"
    "_l2c_notice_gm_luck_info\020\352\204\001\022\027\n\021e_mst_cl"
    "end_index\020\240\234\001*\240\001\n\014e_game_state\022\025\n\021e_stat"
    "e_game_none\020\000\022\030\n\024e_state_game_prepare\020\001\022"
    "\026\n\022e_state_game_start\020\002\022\031\n\025e_state_game_"
    "takecard\020\003\022\024\n\020e_state_game_bet\020\004\022\026\n\022e_st"
    "ate_game_award\020\005*\253\001\n\ne_bet_type\022\017\n\013e_cal"
    "l_none\020\000\022\027\n\023e_call_common_add_1\020\001\022\027\n\023e_c"
    "all_common_add_2\020\002\022\027\n\023e_call_common_add_"
    "3\020\003\022\030\n\024e_call_common_follow\020\004\022\022\n\016e_call_"
    "abandon\020\005\022\023\n\017e_call_showhand\020\006", 2590);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_showhand_def.proto", &protobuf_RegisterTypes);
  msg_table_info::default_instance_ = new msg_table_info();
  msg_player_info::default_instance_ = new msg_player_info();
  msg_player_result::default_instance_ = new msg_player_result();
  msg_result_point_info::default_instance_ = new msg_result_point_info();
  msg_bet_result_info::default_instance_ = new msg_bet_result_info();
  msg_bet_info::default_instance_ = new msg_bet_info();
  p_bet_state::default_instance_ = new p_bet_state();
  msg_table_info::default_instance_->InitAsDefaultInstance();
  msg_player_info::default_instance_->InitAsDefaultInstance();
  msg_player_result::default_instance_->InitAsDefaultInstance();
  msg_result_point_info::default_instance_->InitAsDefaultInstance();
  msg_bet_result_info::default_instance_->InitAsDefaultInstance();
  msg_bet_info::default_instance_->InitAsDefaultInstance();
  p_bet_state::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fshowhand_5fdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fshowhand_5fdef_2eproto {
  StaticDescriptorInitializer_game_5fshowhand_5fdef_2eproto() {
    protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  }
} static_descriptor_initializer_game_5fshowhand_5fdef_2eproto_;
const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_server_msg_type_descriptor_;
}
bool e_server_msg_type_IsValid(int value) {
  switch(value) {
    case 10000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 11001:
    case 15000:
    case 15001:
    case 15002:
    case 15003:
    case 15004:
    case 15005:
    case 15006:
    case 15007:
    case 15008:
    case 15009:
    case 15010:
    case 15011:
    case 15021:
    case 15022:
    case 15023:
    case 15024:
    case 15030:
    case 15031:
    case 15032:
    case 16001:
    case 16002:
    case 17001:
    case 17002:
    case 20000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_game_state_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_game_state_descriptor_;
}
bool e_game_state_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_bet_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_bet_type_descriptor_;
}
bool e_bet_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int msg_table_info::kTableidFieldNumber;
const int msg_table_info::kPlayerLeftFieldNumber;
const int msg_table_info::kPlayerRightFieldNumber;
#endif  // !_MSC_VER

msg_table_info::msg_table_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_showhand_protocols.msg_table_info)
}

void msg_table_info::InitAsDefaultInstance() {
  player_left_ = const_cast< ::game_showhand_protocols::msg_player_info*>(&::game_showhand_protocols::msg_player_info::default_instance());
  player_right_ = const_cast< ::game_showhand_protocols::msg_player_info*>(&::game_showhand_protocols::msg_player_info::default_instance());
}

msg_table_info::msg_table_info(const msg_table_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_showhand_protocols.msg_table_info)
}

void msg_table_info::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0u;
  player_left_ = NULL;
  player_right_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_table_info::~msg_table_info() {
  // @@protoc_insertion_point(destructor:game_showhand_protocols.msg_table_info)
  SharedDtor();
}

void msg_table_info::SharedDtor() {
  if (this != default_instance_) {
    delete player_left_;
    delete player_right_;
  }
}

void msg_table_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_table_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_table_info_descriptor_;
}

const msg_table_info& msg_table_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  return *default_instance_;
}

msg_table_info* msg_table_info::default_instance_ = NULL;

msg_table_info* msg_table_info::New() const {
  return new msg_table_info;
}

void msg_table_info::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    tableid_ = 0u;
    if (has_player_left()) {
      if (player_left_ != NULL) player_left_->::game_showhand_protocols::msg_player_info::Clear();
    }
    if (has_player_right()) {
      if (player_right_ != NULL) player_right_->::game_showhand_protocols::msg_player_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_table_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_showhand_protocols.msg_table_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_left;
        break;
      }

      // optional .game_showhand_protocols.msg_player_info player_left = 2;
      case 2: {
        if (tag == 18) {
         parse_player_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_right;
        break;
      }

      // optional .game_showhand_protocols.msg_player_info player_right = 3;
      case 3: {
        if (tag == 26) {
         parse_player_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_showhand_protocols.msg_table_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_showhand_protocols.msg_table_info)
  return false;
#undef DO_
}

void msg_table_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_showhand_protocols.msg_table_info)
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tableid(), output);
  }

  // optional .game_showhand_protocols.msg_player_info player_left = 2;
  if (has_player_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_left(), output);
  }

  // optional .game_showhand_protocols.msg_player_info player_right = 3;
  if (has_player_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_right(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_showhand_protocols.msg_table_info)
}

::google::protobuf::uint8* msg_table_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_showhand_protocols.msg_table_info)
  // optional uint32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tableid(), target);
  }

  // optional .game_showhand_protocols.msg_player_info player_left = 2;
  if (has_player_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_left(), target);
  }

  // optional .game_showhand_protocols.msg_player_info player_right = 3;
  if (has_player_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_right(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_showhand_protocols.msg_table_info)
  return target;
}

int msg_table_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tableid());
    }

    // optional .game_showhand_protocols.msg_player_info player_left = 2;
    if (has_player_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_left());
    }

    // optional .game_showhand_protocols.msg_player_info player_right = 3;
    if (has_player_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_right());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_table_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_table_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_table_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_table_info::MergeFrom(const msg_table_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_player_left()) {
      mutable_player_left()->::game_showhand_protocols::msg_player_info::MergeFrom(from.player_left());
    }
    if (from.has_player_right()) {
      mutable_player_right()->::game_showhand_protocols::msg_player_info::MergeFrom(from.player_right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_table_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_table_info::CopyFrom(const msg_table_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_info::IsInitialized() const {

  return true;
}

void msg_table_info::Swap(msg_table_info* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(player_left_, other->player_left_);
    std::swap(player_right_, other->player_right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_table_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_table_info_descriptor_;
  metadata.reflection = msg_table_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_player_info::kPlayerIdFieldNumber;
const int msg_player_info::kPlayerNicknameFieldNumber;
const int msg_player_info::kPlayerHeadFrameFieldNumber;
const int msg_player_info::kPlayerHeadCustomFieldNumber;
const int msg_player_info::kPlayerGoldFieldNumber;
const int msg_player_info::kPlayerVipLvFieldNumber;
const int msg_player_info::kStateFieldNumber;
const int msg_player_info::kCardsFieldNumber;
const int msg_player_info::kIsLeftFieldNumber;
#endif  // !_MSC_VER

msg_player_info::msg_player_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_showhand_protocols.msg_player_info)
}

void msg_player_info::InitAsDefaultInstance() {
}

msg_player_info::msg_player_info(const msg_player_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_showhand_protocols.msg_player_info)
}

void msg_player_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0;
  player_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_head_frame_ = 0;
  player_head_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_gold_ = GOOGLE_LONGLONG(0);
  player_vip_lv_ = 0;
  state_ = 0u;
  is_left_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_info::~msg_player_info() {
  // @@protoc_insertion_point(destructor:game_showhand_protocols.msg_player_info)
  SharedDtor();
}

void msg_player_info::SharedDtor() {
  if (player_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_nickname_;
  }
  if (player_head_custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete player_head_custom_;
  }
  if (this != default_instance_) {
  }
}

void msg_player_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_info_descriptor_;
}

const msg_player_info& msg_player_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  return *default_instance_;
}

msg_player_info* msg_player_info::default_instance_ = NULL;

msg_player_info* msg_player_info::New() const {
  return new msg_player_info;
}

void msg_player_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<msg_player_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(player_id_, player_head_frame_);
    ZR_(player_gold_, state_);
    if (has_player_nickname()) {
      if (player_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_nickname_->clear();
      }
    }
    if (has_player_head_custom()) {
      if (player_head_custom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        player_head_custom_->clear();
      }
    }
  }
  is_left_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_showhand_protocols.msg_player_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_nickname;
        break;
      }

      // optional string player_nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_player_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_nickname().data(), this->player_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_head_frame;
        break;
      }

      // optional int32 player_head_frame = 3;
      case 3: {
        if (tag == 24) {
         parse_player_head_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_head_frame_)));
          set_has_player_head_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_head_custom;
        break;
      }

      // optional string player_head_custom = 4;
      case 4: {
        if (tag == 34) {
         parse_player_head_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_head_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_head_custom().data(), this->player_head_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "player_head_custom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 5;
      case 5: {
        if (tag == 40) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_player_vip_lv;
        break;
      }

      // optional int32 player_vip_lv = 6;
      case 6: {
        if (tag == 48) {
         parse_player_vip_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_vip_lv_)));
          set_has_player_vip_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }

      // optional uint32 state = 7;
      case 7: {
        if (tag == 56) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 8;
      case 8: {
        if (tag == 64) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_cards())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cards;
        if (input->ExpectTag(72)) goto parse_is_left;
        break;
      }

      // optional bool is_left = 9;
      case 9: {
        if (tag == 72) {
         parse_is_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_left_)));
          set_has_is_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_showhand_protocols.msg_player_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_showhand_protocols.msg_player_info)
  return false;
#undef DO_
}

void msg_player_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_showhand_protocols.msg_player_info)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string player_nickname = 2;
  if (has_player_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_nickname().data(), this->player_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_nickname(), output);
  }

  // optional int32 player_head_frame = 3;
  if (has_player_head_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_head_frame(), output);
  }

  // optional string player_head_custom = 4;
  if (has_player_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_head_custom().data(), this->player_head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_head_custom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->player_head_custom(), output);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->player_gold(), output);
  }

  // optional int32 player_vip_lv = 6;
  if (has_player_vip_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_vip_lv(), output);
  }

  // optional uint32 state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->state(), output);
  }

  // repeated int32 cards = 8;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->cards(i), output);
  }

  // optional bool is_left = 9;
  if (has_is_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_left(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_showhand_protocols.msg_player_info)
}

::google::protobuf::uint8* msg_player_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_showhand_protocols.msg_player_info)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string player_nickname = 2;
  if (has_player_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_nickname().data(), this->player_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_nickname(), target);
  }

  // optional int32 player_head_frame = 3;
  if (has_player_head_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_head_frame(), target);
  }

  // optional string player_head_custom = 4;
  if (has_player_head_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_head_custom().data(), this->player_head_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "player_head_custom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->player_head_custom(), target);
  }

  // optional int64 player_gold = 5;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->player_gold(), target);
  }

  // optional int32 player_vip_lv = 6;
  if (has_player_vip_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_vip_lv(), target);
  }

  // optional uint32 state = 7;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->state(), target);
  }

  // repeated int32 cards = 8;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->cards(i), target);
  }

  // optional bool is_left = 9;
  if (has_is_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_left(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_showhand_protocols.msg_player_info)
  return target;
}

int msg_player_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string player_nickname = 2;
    if (has_player_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_nickname());
    }

    // optional int32 player_head_frame = 3;
    if (has_player_head_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_head_frame());
    }

    // optional string player_head_custom = 4;
    if (has_player_head_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_head_custom());
    }

    // optional int64 player_gold = 5;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

    // optional int32 player_vip_lv = 6;
    if (has_player_vip_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_vip_lv());
    }

    // optional uint32 state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_left = 9;
    if (has_is_left()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 cards = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_info::MergeFrom(const msg_player_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_nickname()) {
      set_player_nickname(from.player_nickname());
    }
    if (from.has_player_head_frame()) {
      set_player_head_frame(from.player_head_frame());
    }
    if (from.has_player_head_custom()) {
      set_player_head_custom(from.player_head_custom());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
    if (from.has_player_vip_lv()) {
      set_player_vip_lv(from.player_vip_lv());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_left()) {
      set_is_left(from.is_left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_info::CopyFrom(const msg_player_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_info::IsInitialized() const {

  return true;
}

void msg_player_info::Swap(msg_player_info* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_nickname_, other->player_nickname_);
    std::swap(player_head_frame_, other->player_head_frame_);
    std::swap(player_head_custom_, other->player_head_custom_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(player_vip_lv_, other->player_vip_lv_);
    std::swap(state_, other->state_);
    cards_.Swap(&other->cards_);
    std::swap(is_left_, other->is_left_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_info_descriptor_;
  metadata.reflection = msg_player_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_player_result::kPlayerIdFieldNumber;
const int msg_player_result::kCardFieldNumber;
const int msg_player_result::kWinGoldCountFieldNumber;
const int msg_player_result::kCombinecardsIdFieldNumber;
const int msg_player_result::kSynctotalGoldCountFieldNumber;
#endif  // !_MSC_VER

msg_player_result::msg_player_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_showhand_protocols.msg_player_result)
}

void msg_player_result::InitAsDefaultInstance() {
}

msg_player_result::msg_player_result(const msg_player_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_showhand_protocols.msg_player_result)
}

void msg_player_result::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  card_ = 0;
  wingoldcount_ = GOOGLE_LONGLONG(0);
  combinecards_id_ = 0;
  synctotalgoldcount_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_player_result::~msg_player_result() {
  // @@protoc_insertion_point(destructor:game_showhand_protocols.msg_player_result)
  SharedDtor();
}

void msg_player_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_player_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_player_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_player_result_descriptor_;
}

const msg_player_result& msg_player_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  return *default_instance_;
}

msg_player_result* msg_player_result::default_instance_ = NULL;

msg_player_result* msg_player_result::New() const {
  return new msg_player_result;
}

void msg_player_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<msg_player_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(player_id_, combinecards_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_player_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_showhand_protocols.msg_player_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card;
        break;
      }

      // optional int32 card = 2;
      case 2: {
        if (tag == 16) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_winGoldCount;
        break;
      }

      // optional int64 winGoldCount = 3;
      case 3: {
        if (tag == 24) {
         parse_winGoldCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wingoldcount_)));
          set_has_wingoldcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_combinecards_id;
        break;
      }

      // optional int32 combinecards_id = 4;
      case 4: {
        if (tag == 32) {
         parse_combinecards_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combinecards_id_)));
          set_has_combinecards_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_synctotalGoldCount;
        break;
      }

      // optional int64 synctotalGoldCount = 5;
      case 5: {
        if (tag == 40) {
         parse_synctotalGoldCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &synctotalgoldcount_)));
          set_has_synctotalgoldcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_showhand_protocols.msg_player_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_showhand_protocols.msg_player_result)
  return false;
#undef DO_
}

void msg_player_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_showhand_protocols.msg_player_result)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int32 card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card(), output);
  }

  // optional int64 winGoldCount = 3;
  if (has_wingoldcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->wingoldcount(), output);
  }

  // optional int32 combinecards_id = 4;
  if (has_combinecards_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->combinecards_id(), output);
  }

  // optional int64 synctotalGoldCount = 5;
  if (has_synctotalgoldcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->synctotalgoldcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_showhand_protocols.msg_player_result)
}

::google::protobuf::uint8* msg_player_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_showhand_protocols.msg_player_result)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int32 card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card(), target);
  }

  // optional int64 winGoldCount = 3;
  if (has_wingoldcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->wingoldcount(), target);
  }

  // optional int32 combinecards_id = 4;
  if (has_combinecards_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->combinecards_id(), target);
  }

  // optional int64 synctotalGoldCount = 5;
  if (has_synctotalgoldcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->synctotalgoldcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_showhand_protocols.msg_player_result)
  return target;
}

int msg_player_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int64 winGoldCount = 3;
    if (has_wingoldcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wingoldcount());
    }

    // optional int32 combinecards_id = 4;
    if (has_combinecards_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combinecards_id());
    }

    // optional int64 synctotalGoldCount = 5;
    if (has_synctotalgoldcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->synctotalgoldcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_player_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_player_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_player_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_player_result::MergeFrom(const msg_player_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_wingoldcount()) {
      set_wingoldcount(from.wingoldcount());
    }
    if (from.has_combinecards_id()) {
      set_combinecards_id(from.combinecards_id());
    }
    if (from.has_synctotalgoldcount()) {
      set_synctotalgoldcount(from.synctotalgoldcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_player_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_player_result::CopyFrom(const msg_player_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_player_result::IsInitialized() const {

  return true;
}

void msg_player_result::Swap(msg_player_result* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(card_, other->card_);
    std::swap(wingoldcount_, other->wingoldcount_);
    std::swap(combinecards_id_, other->combinecards_id_);
    std::swap(synctotalgoldcount_, other->synctotalgoldcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_player_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_player_result_descriptor_;
  metadata.reflection = msg_player_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_result_point_info::kCombinecardIdFieldNumber;
const int msg_result_point_info::kOwnerFieldNumber;
#endif  // !_MSC_VER

msg_result_point_info::msg_result_point_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_showhand_protocols.msg_result_point_info)
}

void msg_result_point_info::InitAsDefaultInstance() {
}

msg_result_point_info::msg_result_point_info(const msg_result_point_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_showhand_protocols.msg_result_point_info)
}

void msg_result_point_info::SharedCtor() {
  _cached_size_ = 0;
  combinecardid_ = 0u;
  owner_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_result_point_info::~msg_result_point_info() {
  // @@protoc_insertion_point(destructor:game_showhand_protocols.msg_result_point_info)
  SharedDtor();
}

void msg_result_point_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_result_point_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_result_point_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_result_point_info_descriptor_;
}

const msg_result_point_info& msg_result_point_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  return *default_instance_;
}

msg_result_point_info* msg_result_point_info::default_instance_ = NULL;

msg_result_point_info* msg_result_point_info::New() const {
  return new msg_result_point_info;
}

void msg_result_point_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<msg_result_point_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(combinecardid_, owner_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_result_point_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_showhand_protocols.msg_result_point_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 combinecardId = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combinecardid_)));
          set_has_combinecardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner;
        break;
      }

      // optional uint32 owner = 2;
      case 2: {
        if (tag == 16) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_showhand_protocols.msg_result_point_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_showhand_protocols.msg_result_point_info)
  return false;
#undef DO_
}

void msg_result_point_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_showhand_protocols.msg_result_point_info)
  // optional uint32 combinecardId = 1 [default = 0];
  if (has_combinecardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->combinecardid(), output);
  }

  // optional uint32 owner = 2;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_showhand_protocols.msg_result_point_info)
}

::google::protobuf::uint8* msg_result_point_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_showhand_protocols.msg_result_point_info)
  // optional uint32 combinecardId = 1 [default = 0];
  if (has_combinecardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->combinecardid(), target);
  }

  // optional uint32 owner = 2;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_showhand_protocols.msg_result_point_info)
  return target;
}

int msg_result_point_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 combinecardId = 1 [default = 0];
    if (has_combinecardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combinecardid());
    }

    // optional uint32 owner = 2;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_result_point_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_result_point_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_result_point_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_result_point_info::MergeFrom(const msg_result_point_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_combinecardid()) {
      set_combinecardid(from.combinecardid());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_result_point_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_result_point_info::CopyFrom(const msg_result_point_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_result_point_info::IsInitialized() const {

  return true;
}

void msg_result_point_info::Swap(msg_result_point_info* other) {
  if (other != this) {
    std::swap(combinecardid_, other->combinecardid_);
    std::swap(owner_, other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_result_point_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_result_point_info_descriptor_;
  metadata.reflection = msg_result_point_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_bet_result_info::kTypeFieldNumber;
const int msg_bet_result_info::kBetCountFieldNumber;
#endif  // !_MSC_VER

msg_bet_result_info::msg_bet_result_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_showhand_protocols.msg_bet_result_info)
}

void msg_bet_result_info::InitAsDefaultInstance() {
}

msg_bet_result_info::msg_bet_result_info(const msg_bet_result_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_showhand_protocols.msg_bet_result_info)
}

void msg_bet_result_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  bet_count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_bet_result_info::~msg_bet_result_info() {
  // @@protoc_insertion_point(destructor:game_showhand_protocols.msg_bet_result_info)
  SharedDtor();
}

void msg_bet_result_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_bet_result_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_bet_result_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_bet_result_info_descriptor_;
}

const msg_bet_result_info& msg_bet_result_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  return *default_instance_;
}

msg_bet_result_info* msg_bet_result_info::default_instance_ = NULL;

msg_bet_result_info* msg_bet_result_info::New() const {
  return new msg_bet_result_info;
}

void msg_bet_result_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<msg_bet_result_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bet_count_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_bet_result_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_showhand_protocols.msg_bet_result_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_bet_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_bet_type_IsValid(value)) {
            set_type(static_cast< ::game_showhand_protocols::e_bet_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bet_count;
        break;
      }

      // optional int64 bet_count = 2;
      case 2: {
        if (tag == 16) {
         parse_bet_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_count_)));
          set_has_bet_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_showhand_protocols.msg_bet_result_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_showhand_protocols.msg_bet_result_info)
  return false;
#undef DO_
}

void msg_bet_result_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_showhand_protocols.msg_bet_result_info)
  // optional .game_showhand_protocols.e_bet_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 bet_count = 2;
  if (has_bet_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bet_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_showhand_protocols.msg_bet_result_info)
}

::google::protobuf::uint8* msg_bet_result_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_showhand_protocols.msg_bet_result_info)
  // optional .game_showhand_protocols.e_bet_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int64 bet_count = 2;
  if (has_bet_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bet_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_showhand_protocols.msg_bet_result_info)
  return target;
}

int msg_bet_result_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_bet_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 bet_count = 2;
    if (has_bet_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_bet_result_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_bet_result_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_bet_result_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_bet_result_info::MergeFrom(const msg_bet_result_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bet_count()) {
      set_bet_count(from.bet_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_bet_result_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_bet_result_info::CopyFrom(const msg_bet_result_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_bet_result_info::IsInitialized() const {

  return true;
}

void msg_bet_result_info::Swap(msg_bet_result_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(bet_count_, other->bet_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_bet_result_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_bet_result_info_descriptor_;
  metadata.reflection = msg_bet_result_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_bet_info::kTypeFieldNumber;
const int msg_bet_info::kBetCountFieldNumber;
#endif  // !_MSC_VER

msg_bet_info::msg_bet_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_showhand_protocols.msg_bet_info)
}

void msg_bet_info::InitAsDefaultInstance() {
}

msg_bet_info::msg_bet_info(const msg_bet_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_showhand_protocols.msg_bet_info)
}

void msg_bet_info::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  bet_count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_bet_info::~msg_bet_info() {
  // @@protoc_insertion_point(destructor:game_showhand_protocols.msg_bet_info)
  SharedDtor();
}

void msg_bet_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_bet_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_bet_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_bet_info_descriptor_;
}

const msg_bet_info& msg_bet_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  return *default_instance_;
}

msg_bet_info* msg_bet_info::default_instance_ = NULL;

msg_bet_info* msg_bet_info::New() const {
  return new msg_bet_info;
}

void msg_bet_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<msg_bet_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bet_count_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_bet_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_showhand_protocols.msg_bet_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .game_showhand_protocols.e_bet_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_bet_type_IsValid(value)) {
            set_type(static_cast< ::game_showhand_protocols::e_bet_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bet_count;
        break;
      }

      // optional int64 bet_count = 2;
      case 2: {
        if (tag == 16) {
         parse_bet_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_count_)));
          set_has_bet_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_showhand_protocols.msg_bet_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_showhand_protocols.msg_bet_info)
  return false;
#undef DO_
}

void msg_bet_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_showhand_protocols.msg_bet_info)
  // optional .game_showhand_protocols.e_bet_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 bet_count = 2;
  if (has_bet_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bet_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_showhand_protocols.msg_bet_info)
}

::google::protobuf::uint8* msg_bet_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_showhand_protocols.msg_bet_info)
  // optional .game_showhand_protocols.e_bet_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int64 bet_count = 2;
  if (has_bet_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bet_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_showhand_protocols.msg_bet_info)
  return target;
}

int msg_bet_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .game_showhand_protocols.e_bet_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 bet_count = 2;
    if (has_bet_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bet_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_bet_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_bet_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_bet_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_bet_info::MergeFrom(const msg_bet_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bet_count()) {
      set_bet_count(from.bet_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_bet_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_bet_info::CopyFrom(const msg_bet_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_bet_info::IsInitialized() const {

  return true;
}

void msg_bet_info::Swap(msg_bet_info* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(bet_count_, other->bet_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_bet_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_bet_info_descriptor_;
  metadata.reflection = msg_bet_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int p_bet_state::kPlayerIdFieldNumber;
const int p_bet_state::kBetTypeListFieldNumber;
const int p_bet_state::kStateFieldNumber;
const int p_bet_state::kLastBetinfoFieldNumber;
#endif  // !_MSC_VER

p_bet_state::p_bet_state()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:game_showhand_protocols.p_bet_state)
}

void p_bet_state::InitAsDefaultInstance() {
  last_betinfo_ = const_cast< ::game_showhand_protocols::msg_bet_info*>(&::game_showhand_protocols::msg_bet_info::default_instance());
}

p_bet_state::p_bet_state(const p_bet_state& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:game_showhand_protocols.p_bet_state)
}

void p_bet_state::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  state_ = 0;
  last_betinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

p_bet_state::~p_bet_state() {
  // @@protoc_insertion_point(destructor:game_showhand_protocols.p_bet_state)
  SharedDtor();
}

void p_bet_state::SharedDtor() {
  if (this != default_instance_) {
    delete last_betinfo_;
  }
}

void p_bet_state::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* p_bet_state::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return p_bet_state_descriptor_;
}

const p_bet_state& p_bet_state::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fshowhand_5fdef_2eproto();
  return *default_instance_;
}

p_bet_state* p_bet_state::default_instance_ = NULL;

p_bet_state* p_bet_state::New() const {
  return new p_bet_state;
}

void p_bet_state::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<p_bet_state*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(player_id_, state_);
    if (has_last_betinfo()) {
      if (last_betinfo_ != NULL) last_betinfo_->::game_showhand_protocols::msg_bet_info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  bet_type_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool p_bet_state::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game_showhand_protocols.p_bet_state)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bet_type_list;
        break;
      }

      // repeated .game_showhand_protocols.e_bet_type bet_type_list = 2;
      case 2: {
        if (tag == 16) {
         parse_bet_type_list:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::game_showhand_protocols::e_bet_type_IsValid(value)) {
            add_bet_type_list(static_cast< ::game_showhand_protocols::e_bet_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::game_showhand_protocols::e_bet_type_IsValid,
                 this->mutable_bet_type_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bet_type_list;
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_last_betinfo;
        break;
      }

      // optional .game_showhand_protocols.msg_bet_info last_betinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_last_betinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_betinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game_showhand_protocols.p_bet_state)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game_showhand_protocols.p_bet_state)
  return false;
#undef DO_
}

void p_bet_state::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game_showhand_protocols.p_bet_state)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // repeated .game_showhand_protocols.e_bet_type bet_type_list = 2;
  for (int i = 0; i < this->bet_type_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->bet_type_list(i), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional .game_showhand_protocols.msg_bet_info last_betinfo = 4;
  if (has_last_betinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->last_betinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:game_showhand_protocols.p_bet_state)
}

::google::protobuf::uint8* p_bet_state::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game_showhand_protocols.p_bet_state)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // repeated .game_showhand_protocols.e_bet_type bet_type_list = 2;
  for (int i = 0; i < this->bet_type_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->bet_type_list(i), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional .game_showhand_protocols.msg_bet_info last_betinfo = 4;
  if (has_last_betinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->last_betinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game_showhand_protocols.p_bet_state)
  return target;
}

int p_bet_state::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .game_showhand_protocols.msg_bet_info last_betinfo = 4;
    if (has_last_betinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_betinfo());
    }

  }
  // repeated .game_showhand_protocols.e_bet_type bet_type_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bet_type_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->bet_type_list(i));
    }
    total_size += 1 * this->bet_type_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void p_bet_state::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const p_bet_state* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const p_bet_state*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void p_bet_state::MergeFrom(const p_bet_state& from) {
  GOOGLE_CHECK_NE(&from, this);
  bet_type_list_.MergeFrom(from.bet_type_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_last_betinfo()) {
      mutable_last_betinfo()->::game_showhand_protocols::msg_bet_info::MergeFrom(from.last_betinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void p_bet_state::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void p_bet_state::CopyFrom(const p_bet_state& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool p_bet_state::IsInitialized() const {

  return true;
}

void p_bet_state::Swap(p_bet_state* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    bet_type_list_.Swap(&other->bet_type_list_);
    std::swap(state_, other->state_);
    std::swap(last_betinfo_, other->last_betinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata p_bet_state::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = p_bet_state_descriptor_;
  metadata.reflection = p_bet_state_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_showhand_protocols

// @@protoc_insertion_point(global_scope)
