// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_friend.proto

#ifndef PROTOBUF_client2world_5ffriend_2eproto__INCLUDED
#define PROTOBUF_client2world_5ffriend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5ffriend_2eproto();
void protobuf_AssignDesc_client2world_5ffriend_2eproto();
void protobuf_ShutdownFile_client2world_5ffriend_2eproto();

class FriendInfo;
class packetc2w_add_friend;
class packetw2c_add_friend_result;
class packetc2w_remove_friend;
class packetw2c_remove_friend_result;
class packetc2w_req_friend_list;
class packetw2c_req_friend_list_result;
class packetc2w_search_friend;
class packetw2c_search_friend_result;
class packetc2w_enter_friend_room;
class packetw2c_enter_friend_room_result;
class packetc2w_get_friend_gameid;
class packetw2c_get_friend_gameid_result;

// ===================================================================

class FriendInfo : public ::google::protobuf::Message {
 public:
  FriendInfo();
  virtual ~FriendInfo();

  FriendInfo(const FriendInfo& from);

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendInfo& default_instance();

  void Swap(FriendInfo* other);

  // implements Message ----------------------------------------------

  FriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendInfo& from);
  void MergeFrom(const FriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 friendId = 1;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 1;
  inline ::google::protobuf::int32 friendid() const;
  inline void set_friendid(::google::protobuf::int32 value);

  // optional int32 sex = 2;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 2;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional bool online = 3;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 3;
  inline bool online() const;
  inline void set_online(bool value);

  // optional int32 vipLevel = 4;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 4;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional string nickName = 5;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 5;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string iconCustom = 6;
  inline bool has_iconcustom() const;
  inline void clear_iconcustom();
  static const int kIconCustomFieldNumber = 6;
  inline const ::std::string& iconcustom() const;
  inline void set_iconcustom(const ::std::string& value);
  inline void set_iconcustom(const char* value);
  inline void set_iconcustom(const char* value, size_t size);
  inline ::std::string* mutable_iconcustom();
  inline ::std::string* release_iconcustom();
  inline void set_allocated_iconcustom(::std::string* iconcustom);

  // optional int32 photoFrameId = 7;
  inline bool has_photoframeid() const;
  inline void clear_photoframeid();
  static const int kPhotoFrameIdFieldNumber = 7;
  inline ::google::protobuf::int32 photoframeid() const;
  inline void set_photoframeid(::google::protobuf::int32 value);

  // optional string selfSignature = 8;
  inline bool has_selfsignature() const;
  inline void clear_selfsignature();
  static const int kSelfSignatureFieldNumber = 8;
  inline const ::std::string& selfsignature() const;
  inline void set_selfsignature(const ::std::string& value);
  inline void set_selfsignature(const char* value);
  inline void set_selfsignature(const char* value, size_t size);
  inline ::std::string* mutable_selfsignature();
  inline ::std::string* release_selfsignature();
  inline void set_allocated_selfsignature(::std::string* selfsignature);

  // repeated .msg_info_def.msg_gift giftList = 9;
  inline int giftlist_size() const;
  inline void clear_giftlist();
  static const int kGiftListFieldNumber = 9;
  inline const ::msg_info_def::msg_gift& giftlist(int index) const;
  inline ::msg_info_def::msg_gift* mutable_giftlist(int index);
  inline ::msg_info_def::msg_gift* add_giftlist();
  inline const ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_gift >&
      giftlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_gift >*
      mutable_giftlist();

  // optional int64 giftCoinCount = 10;
  inline bool has_giftcoincount() const;
  inline void clear_giftcoincount();
  static const int kGiftCoinCountFieldNumber = 10;
  inline ::google::protobuf::int64 giftcoincount() const;
  inline void set_giftcoincount(::google::protobuf::int64 value);

  // optional int64 gold = 11;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 11;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int32 fishLevel = 12;
  inline bool has_fishlevel() const;
  inline void clear_fishlevel();
  static const int kFishLevelFieldNumber = 12;
  inline ::google::protobuf::int32 fishlevel() const;
  inline void set_fishlevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.FriendInfo)
 private:
  inline void set_has_friendid();
  inline void clear_has_friendid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_iconcustom();
  inline void clear_has_iconcustom();
  inline void set_has_photoframeid();
  inline void clear_has_photoframeid();
  inline void set_has_selfsignature();
  inline void clear_has_selfsignature();
  inline void set_has_giftcoincount();
  inline void clear_has_giftcoincount();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_fishlevel();
  inline void clear_has_fishlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 friendid_;
  ::google::protobuf::int32 sex_;
  bool online_;
  ::google::protobuf::int32 viplevel_;
  ::std::string* nickname_;
  ::std::string* iconcustom_;
  ::std::string* selfsignature_;
  ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_gift > giftlist_;
  ::google::protobuf::int32 photoframeid_;
  ::google::protobuf::int32 fishlevel_;
  ::google::protobuf::int64 giftcoincount_;
  ::google::protobuf::int64 gold_;
  friend void  protobuf_AddDesc_client2world_5ffriend_2eproto();
  friend void protobuf_AssignDesc_client2world_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_client2world_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static FriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_add_friend : public ::google::protobuf::Message {
 public:
  packetc2w_add_friend();
  virtual ~packetc2w_add_friend();

  packetc2w_add_friend(const packetc2w_add_friend& from);

  inline packetc2w_add_friend& operator=(const packetc2w_add_friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_add_friend& default_instance();

  void Swap(packetc2w_add_friend* other);

  // implements Message ----------------------------------------------

  packetc2w_add_friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_add_friend& from);
  void MergeFrom(const packetc2w_add_friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_add_friend];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 friendId = 2;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 2;
  inline ::google::protobuf::int32 friendid() const;
  inline void set_friendid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_add_friend)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_friendid();
  inline void clear_has_friendid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 friendid_;
  friend void  protobuf_AddDesc_client2world_5ffriend_2eproto();
  friend void protobuf_AssignDesc_client2world_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_client2world_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_add_friend* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_add_friend_result : public ::google::protobuf::Message {
 public:
  packetw2c_add_friend_result();
  virtual ~packetw2c_add_friend_result();

  packetw2c_add_friend_result(const packetw2c_add_friend_result& from);

  inline packetw2c_add_friend_result& operator=(const packetw2c_add_friend_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_add_friend_result& default_instance();

  void Swap(packetw2c_add_friend_result* other);

  // implements Message ----------------------------------------------

  packetw2c_add_friend_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_add_friend_result& from);
  void MergeFrom(const packetw2c_add_friend_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_add_friend_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .client2world_protocols.FriendInfo info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::client2world_protocols::FriendInfo& info() const;
  inline ::client2world_protocols::FriendInfo* mutable_info();
  inline ::client2world_protocols::FriendInfo* release_info();
  inline void set_allocated_info(::client2world_protocols::FriendInfo* info);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_add_friend_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  ::client2world_protocols::FriendInfo* info_;
  friend void  protobuf_AddDesc_client2world_5ffriend_2eproto();
  friend void protobuf_AssignDesc_client2world_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_client2world_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_add_friend_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_remove_friend : public ::google::protobuf::Message {
 public:
  packetc2w_remove_friend();
  virtual ~packetc2w_remove_friend();

  packetc2w_remove_friend(const packetc2w_remove_friend& from);

  inline packetc2w_remove_friend& operator=(const packetc2w_remove_friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_remove_friend& default_instance();

  void Swap(packetc2w_remove_friend* other);

  // implements Message ----------------------------------------------

  packetc2w_remove_friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_remove_friend& from);
  void MergeFrom(const packetc2w_remove_friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_remove_friend];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 friendId = 2;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 2;
  inline ::google::protobuf::int32 friendid() const;
  inline void set_friendid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_remove_friend)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_friendid();
  inline void clear_has_friendid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 friendid_;
  friend void  protobuf_AddDesc_client2world_5ffriend_2eproto();
  friend void protobuf_AssignDesc_client2world_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_client2world_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_remove_friend* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_remove_friend_result : public ::google::protobuf::Message {
 public:
  packetw2c_remove_friend_result();
  virtual ~packetw2c_remove_friend_result();

  packetw2c_remove_friend_result(const packetw2c_remove_friend_result& from);

  inline packetw2c_remove_friend_result& operator=(const packetw2c_remove_friend_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_remove_friend_result& default_instance();

  void Swap(packetw2c_remove_friend_result* other);

  // implements Message ----------------------------------------------

  packetw2c_remove_friend_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_remove_friend_result& from);
  void MergeFrom(const packetw2c_remove_friend_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_remove_friend_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 friendId = 2;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 2;
  inline ::google::protobuf::int32 friendid() const;
  inline void set_friendid(::google::protobuf::int32 value);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_remove_friend_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_friendid();
  inline void clear_has_friendid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 friendid_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5ffriend_2eproto();
  friend void protobuf_AssignDesc_client2world_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_client2world_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_remove_friend_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_friend_list : public ::google::protobuf::Message {
 public:
  packetc2w_req_friend_list();
  virtual ~packetc2w_req_friend_list();

  packetc2w_req_friend_list(const packetc2w_req_friend_list& from);

  inline packetc2w_req_friend_list& operator=(const packetc2w_req_friend_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_friend_list& default_instance();

  void Swap(packetc2w_req_friend_list* other);

  // implements Message ----------------------------------------------

  packetc2w_req_friend_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_friend_list& from);
  void MergeFrom(const packetc2w_req_friend_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_friend_list];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_friend_list)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5ffriend_2eproto();
  friend void protobuf_AssignDesc_client2world_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_client2world_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_friend_list* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_friend_list_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_friend_list_result();
  virtual ~packetw2c_req_friend_list_result();

  packetw2c_req_friend_list_result(const packetw2c_req_friend_list_result& from);

  inline packetw2c_req_friend_list_result& operator=(const packetw2c_req_friend_list_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_friend_list_result& default_instance();

  void Swap(packetw2c_req_friend_list_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_friend_list_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_friend_list_result& from);
  void MergeFrom(const packetw2c_req_friend_list_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_friend_list_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.FriendInfo friendList = 2;
  inline int friendlist_size() const;
  inline void clear_friendlist();
  static const int kFriendListFieldNumber = 2;
  inline const ::client2world_protocols::FriendInfo& friendlist(int index) const;
  inline ::client2world_protocols::FriendInfo* mutable_friendlist(int index);
  inline ::client2world_protocols::FriendInfo* add_friendlist();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::FriendInfo >&
      friendlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::FriendInfo >*
      mutable_friendlist();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_friend_list_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::FriendInfo > friendlist_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5ffriend_2eproto();
  friend void protobuf_AssignDesc_client2world_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_client2world_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_friend_list_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_search_friend : public ::google::protobuf::Message {
 public:
  packetc2w_search_friend();
  virtual ~packetc2w_search_friend();

  packetc2w_search_friend(const packetc2w_search_friend& from);

  inline packetc2w_search_friend& operator=(const packetc2w_search_friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_search_friend& default_instance();

  void Swap(packetc2w_search_friend* other);

  // implements Message ----------------------------------------------

  packetc2w_search_friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_search_friend& from);
  void MergeFrom(const packetc2w_search_friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_search_friend];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 playerId = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_search_friend)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 playerid_;
  friend void  protobuf_AddDesc_client2world_5ffriend_2eproto();
  friend void protobuf_AssignDesc_client2world_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_client2world_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_search_friend* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_search_friend_result : public ::google::protobuf::Message {
 public:
  packetw2c_search_friend_result();
  virtual ~packetw2c_search_friend_result();

  packetw2c_search_friend_result(const packetw2c_search_friend_result& from);

  inline packetw2c_search_friend_result& operator=(const packetw2c_search_friend_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_search_friend_result& default_instance();

  void Swap(packetw2c_search_friend_result* other);

  // implements Message ----------------------------------------------

  packetw2c_search_friend_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_search_friend_result& from);
  void MergeFrom(const packetw2c_search_friend_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_search_friend_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional .client2world_protocols.FriendInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::client2world_protocols::FriendInfo& info() const;
  inline ::client2world_protocols::FriendInfo* mutable_info();
  inline ::client2world_protocols::FriendInfo* release_info();
  inline void set_allocated_info(::client2world_protocols::FriendInfo* info);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_search_friend_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::client2world_protocols::FriendInfo* info_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5ffriend_2eproto();
  friend void protobuf_AssignDesc_client2world_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_client2world_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_search_friend_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_enter_friend_room : public ::google::protobuf::Message {
 public:
  packetc2w_enter_friend_room();
  virtual ~packetc2w_enter_friend_room();

  packetc2w_enter_friend_room(const packetc2w_enter_friend_room& from);

  inline packetc2w_enter_friend_room& operator=(const packetc2w_enter_friend_room& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_enter_friend_room& default_instance();

  void Swap(packetc2w_enter_friend_room* other);

  // implements Message ----------------------------------------------

  packetc2w_enter_friend_room* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_enter_friend_room& from);
  void MergeFrom(const packetc2w_enter_friend_room& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_enter_friend_room];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 friendId = 2;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 2;
  inline ::google::protobuf::int32 friendid() const;
  inline void set_friendid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_enter_friend_room)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_friendid();
  inline void clear_has_friendid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 friendid_;
  friend void  protobuf_AddDesc_client2world_5ffriend_2eproto();
  friend void protobuf_AssignDesc_client2world_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_client2world_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_enter_friend_room* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_enter_friend_room_result : public ::google::protobuf::Message {
 public:
  packetw2c_enter_friend_room_result();
  virtual ~packetw2c_enter_friend_room_result();

  packetw2c_enter_friend_room_result(const packetw2c_enter_friend_room_result& from);

  inline packetw2c_enter_friend_room_result& operator=(const packetw2c_enter_friend_room_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_enter_friend_room_result& default_instance();

  void Swap(packetw2c_enter_friend_room_result* other);

  // implements Message ----------------------------------------------

  packetw2c_enter_friend_room_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_enter_friend_room_result& from);
  void MergeFrom(const packetw2c_enter_friend_room_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_enter_friend_room_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 gameId = 3;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIdFieldNumber = 3;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_enter_friend_room_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 gameid_;
  friend void  protobuf_AddDesc_client2world_5ffriend_2eproto();
  friend void protobuf_AssignDesc_client2world_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_client2world_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_enter_friend_room_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_get_friend_gameid : public ::google::protobuf::Message {
 public:
  packetc2w_get_friend_gameid();
  virtual ~packetc2w_get_friend_gameid();

  packetc2w_get_friend_gameid(const packetc2w_get_friend_gameid& from);

  inline packetc2w_get_friend_gameid& operator=(const packetc2w_get_friend_gameid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_get_friend_gameid& default_instance();

  void Swap(packetc2w_get_friend_gameid* other);

  // implements Message ----------------------------------------------

  packetc2w_get_friend_gameid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_get_friend_gameid& from);
  void MergeFrom(const packetc2w_get_friend_gameid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_friend_gameid];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 friendId = 2;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 2;
  inline ::google::protobuf::int32 friendid() const;
  inline void set_friendid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_get_friend_gameid)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_friendid();
  inline void clear_has_friendid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 friendid_;
  friend void  protobuf_AddDesc_client2world_5ffriend_2eproto();
  friend void protobuf_AssignDesc_client2world_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_client2world_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_get_friend_gameid* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_get_friend_gameid_result : public ::google::protobuf::Message {
 public:
  packetw2c_get_friend_gameid_result();
  virtual ~packetw2c_get_friend_gameid_result();

  packetw2c_get_friend_gameid_result(const packetw2c_get_friend_gameid_result& from);

  inline packetw2c_get_friend_gameid_result& operator=(const packetw2c_get_friend_gameid_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_get_friend_gameid_result& default_instance();

  void Swap(packetw2c_get_friend_gameid_result* other);

  // implements Message ----------------------------------------------

  packetw2c_get_friend_gameid_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_get_friend_gameid_result& from);
  void MergeFrom(const packetw2c_get_friend_gameid_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_friend_gameid_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 gameId = 3;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIdFieldNumber = 3;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // optional int32 friendId = 4;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 4;
  inline ::google::protobuf::int32 friendid() const;
  inline void set_friendid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_get_friend_gameid_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_friendid();
  inline void clear_has_friendid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 friendid_;
  friend void  protobuf_AddDesc_client2world_5ffriend_2eproto();
  friend void protobuf_AssignDesc_client2world_5ffriend_2eproto();
  friend void protobuf_ShutdownFile_client2world_5ffriend_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_get_friend_gameid_result* default_instance_;
};
// ===================================================================


// ===================================================================

// FriendInfo

// optional int32 friendId = 1;
inline bool FriendInfo::has_friendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendInfo::set_has_friendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendInfo::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendInfo::clear_friendid() {
  friendid_ = 0;
  clear_has_friendid();
}
inline ::google::protobuf::int32 FriendInfo::friendid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.FriendInfo.friendId)
  return friendid_;
}
inline void FriendInfo::set_friendid(::google::protobuf::int32 value) {
  set_has_friendid();
  friendid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.FriendInfo.friendId)
}

// optional int32 sex = 2;
inline bool FriendInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 FriendInfo::sex() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.FriendInfo.sex)
  return sex_;
}
inline void FriendInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.FriendInfo.sex)
}

// optional bool online = 3;
inline bool FriendInfo::has_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendInfo::set_has_online() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendInfo::clear_has_online() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendInfo::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool FriendInfo::online() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.FriendInfo.online)
  return online_;
}
inline void FriendInfo::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.FriendInfo.online)
}

// optional int32 vipLevel = 4;
inline bool FriendInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendInfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 FriendInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.FriendInfo.vipLevel)
  return viplevel_;
}
inline void FriendInfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.FriendInfo.vipLevel)
}

// optional string nickName = 5;
inline bool FriendInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& FriendInfo::nickname() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.FriendInfo.nickName)
  return *nickname_;
}
inline void FriendInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.FriendInfo.nickName)
}
inline void FriendInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.FriendInfo.nickName)
}
inline void FriendInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.FriendInfo.nickName)
}
inline ::std::string* FriendInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.FriendInfo.nickName)
  return nickname_;
}
inline ::std::string* FriendInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.FriendInfo.nickName)
}

// optional string iconCustom = 6;
inline bool FriendInfo::has_iconcustom() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendInfo::set_has_iconcustom() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendInfo::clear_has_iconcustom() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendInfo::clear_iconcustom() {
  if (iconcustom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconcustom_->clear();
  }
  clear_has_iconcustom();
}
inline const ::std::string& FriendInfo::iconcustom() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.FriendInfo.iconCustom)
  return *iconcustom_;
}
inline void FriendInfo::set_iconcustom(const ::std::string& value) {
  set_has_iconcustom();
  if (iconcustom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconcustom_ = new ::std::string;
  }
  iconcustom_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.FriendInfo.iconCustom)
}
inline void FriendInfo::set_iconcustom(const char* value) {
  set_has_iconcustom();
  if (iconcustom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconcustom_ = new ::std::string;
  }
  iconcustom_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.FriendInfo.iconCustom)
}
inline void FriendInfo::set_iconcustom(const char* value, size_t size) {
  set_has_iconcustom();
  if (iconcustom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconcustom_ = new ::std::string;
  }
  iconcustom_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.FriendInfo.iconCustom)
}
inline ::std::string* FriendInfo::mutable_iconcustom() {
  set_has_iconcustom();
  if (iconcustom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconcustom_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.FriendInfo.iconCustom)
  return iconcustom_;
}
inline ::std::string* FriendInfo::release_iconcustom() {
  clear_has_iconcustom();
  if (iconcustom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = iconcustom_;
    iconcustom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendInfo::set_allocated_iconcustom(::std::string* iconcustom) {
  if (iconcustom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iconcustom_;
  }
  if (iconcustom) {
    set_has_iconcustom();
    iconcustom_ = iconcustom;
  } else {
    clear_has_iconcustom();
    iconcustom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.FriendInfo.iconCustom)
}

// optional int32 photoFrameId = 7;
inline bool FriendInfo::has_photoframeid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendInfo::set_has_photoframeid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendInfo::clear_has_photoframeid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendInfo::clear_photoframeid() {
  photoframeid_ = 0;
  clear_has_photoframeid();
}
inline ::google::protobuf::int32 FriendInfo::photoframeid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.FriendInfo.photoFrameId)
  return photoframeid_;
}
inline void FriendInfo::set_photoframeid(::google::protobuf::int32 value) {
  set_has_photoframeid();
  photoframeid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.FriendInfo.photoFrameId)
}

// optional string selfSignature = 8;
inline bool FriendInfo::has_selfsignature() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FriendInfo::set_has_selfsignature() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FriendInfo::clear_has_selfsignature() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FriendInfo::clear_selfsignature() {
  if (selfsignature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfsignature_->clear();
  }
  clear_has_selfsignature();
}
inline const ::std::string& FriendInfo::selfsignature() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.FriendInfo.selfSignature)
  return *selfsignature_;
}
inline void FriendInfo::set_selfsignature(const ::std::string& value) {
  set_has_selfsignature();
  if (selfsignature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfsignature_ = new ::std::string;
  }
  selfsignature_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.FriendInfo.selfSignature)
}
inline void FriendInfo::set_selfsignature(const char* value) {
  set_has_selfsignature();
  if (selfsignature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfsignature_ = new ::std::string;
  }
  selfsignature_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.FriendInfo.selfSignature)
}
inline void FriendInfo::set_selfsignature(const char* value, size_t size) {
  set_has_selfsignature();
  if (selfsignature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfsignature_ = new ::std::string;
  }
  selfsignature_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.FriendInfo.selfSignature)
}
inline ::std::string* FriendInfo::mutable_selfsignature() {
  set_has_selfsignature();
  if (selfsignature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfsignature_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.FriendInfo.selfSignature)
  return selfsignature_;
}
inline ::std::string* FriendInfo::release_selfsignature() {
  clear_has_selfsignature();
  if (selfsignature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = selfsignature_;
    selfsignature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendInfo::set_allocated_selfsignature(::std::string* selfsignature) {
  if (selfsignature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete selfsignature_;
  }
  if (selfsignature) {
    set_has_selfsignature();
    selfsignature_ = selfsignature;
  } else {
    clear_has_selfsignature();
    selfsignature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.FriendInfo.selfSignature)
}

// repeated .msg_info_def.msg_gift giftList = 9;
inline int FriendInfo::giftlist_size() const {
  return giftlist_.size();
}
inline void FriendInfo::clear_giftlist() {
  giftlist_.Clear();
}
inline const ::msg_info_def::msg_gift& FriendInfo::giftlist(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.FriendInfo.giftList)
  return giftlist_.Get(index);
}
inline ::msg_info_def::msg_gift* FriendInfo::mutable_giftlist(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.FriendInfo.giftList)
  return giftlist_.Mutable(index);
}
inline ::msg_info_def::msg_gift* FriendInfo::add_giftlist() {
  // @@protoc_insertion_point(field_add:client2world_protocols.FriendInfo.giftList)
  return giftlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_gift >&
FriendInfo::giftlist() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.FriendInfo.giftList)
  return giftlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_gift >*
FriendInfo::mutable_giftlist() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.FriendInfo.giftList)
  return &giftlist_;
}

// optional int64 giftCoinCount = 10;
inline bool FriendInfo::has_giftcoincount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FriendInfo::set_has_giftcoincount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FriendInfo::clear_has_giftcoincount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FriendInfo::clear_giftcoincount() {
  giftcoincount_ = GOOGLE_LONGLONG(0);
  clear_has_giftcoincount();
}
inline ::google::protobuf::int64 FriendInfo::giftcoincount() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.FriendInfo.giftCoinCount)
  return giftcoincount_;
}
inline void FriendInfo::set_giftcoincount(::google::protobuf::int64 value) {
  set_has_giftcoincount();
  giftcoincount_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.FriendInfo.giftCoinCount)
}

// optional int64 gold = 11;
inline bool FriendInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FriendInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FriendInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FriendInfo::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 FriendInfo::gold() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.FriendInfo.gold)
  return gold_;
}
inline void FriendInfo::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.FriendInfo.gold)
}

// optional int32 fishLevel = 12;
inline bool FriendInfo::has_fishlevel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FriendInfo::set_has_fishlevel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FriendInfo::clear_has_fishlevel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FriendInfo::clear_fishlevel() {
  fishlevel_ = 0;
  clear_has_fishlevel();
}
inline ::google::protobuf::int32 FriendInfo::fishlevel() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.FriendInfo.fishLevel)
  return fishlevel_;
}
inline void FriendInfo::set_fishlevel(::google::protobuf::int32 value) {
  set_has_fishlevel();
  fishlevel_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.FriendInfo.fishLevel)
}

// -------------------------------------------------------------------

// packetc2w_add_friend

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_add_friend];
inline bool packetc2w_add_friend::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_add_friend::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_add_friend::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_add_friend::clear_packet_id() {
  packet_id_ = 5024;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_add_friend::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_add_friend.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_add_friend::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_add_friend.packet_id)
}

// optional int32 friendId = 2;
inline bool packetc2w_add_friend::has_friendid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_add_friend::set_has_friendid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_add_friend::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_add_friend::clear_friendid() {
  friendid_ = 0;
  clear_has_friendid();
}
inline ::google::protobuf::int32 packetc2w_add_friend::friendid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_add_friend.friendId)
  return friendid_;
}
inline void packetc2w_add_friend::set_friendid(::google::protobuf::int32 value) {
  set_has_friendid();
  friendid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_add_friend.friendId)
}

// -------------------------------------------------------------------

// packetw2c_add_friend_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_add_friend_result];
inline bool packetw2c_add_friend_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_add_friend_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_add_friend_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_add_friend_result::clear_packet_id() {
  packet_id_ = 7526;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_add_friend_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_add_friend_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_add_friend_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_add_friend_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_add_friend_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_add_friend_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_add_friend_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_add_friend_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_add_friend_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_add_friend_result.result)
  return result_;
}
inline void packetw2c_add_friend_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_add_friend_result.result)
}

// optional .client2world_protocols.FriendInfo info = 3;
inline bool packetw2c_add_friend_result::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_add_friend_result::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_add_friend_result::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_add_friend_result::clear_info() {
  if (info_ != NULL) info_->::client2world_protocols::FriendInfo::Clear();
  clear_has_info();
}
inline const ::client2world_protocols::FriendInfo& packetw2c_add_friend_result::info() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_add_friend_result.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::client2world_protocols::FriendInfo* packetw2c_add_friend_result::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::client2world_protocols::FriendInfo;
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_add_friend_result.info)
  return info_;
}
inline ::client2world_protocols::FriendInfo* packetw2c_add_friend_result::release_info() {
  clear_has_info();
  ::client2world_protocols::FriendInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void packetw2c_add_friend_result::set_allocated_info(::client2world_protocols::FriendInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_add_friend_result.info)
}

// -------------------------------------------------------------------

// packetc2w_remove_friend

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_remove_friend];
inline bool packetc2w_remove_friend::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_remove_friend::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_remove_friend::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_remove_friend::clear_packet_id() {
  packet_id_ = 5026;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_remove_friend::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_remove_friend.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_remove_friend::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_remove_friend.packet_id)
}

// optional int32 friendId = 2;
inline bool packetc2w_remove_friend::has_friendid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_remove_friend::set_has_friendid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_remove_friend::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_remove_friend::clear_friendid() {
  friendid_ = 0;
  clear_has_friendid();
}
inline ::google::protobuf::int32 packetc2w_remove_friend::friendid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_remove_friend.friendId)
  return friendid_;
}
inline void packetc2w_remove_friend::set_friendid(::google::protobuf::int32 value) {
  set_has_friendid();
  friendid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_remove_friend.friendId)
}

// -------------------------------------------------------------------

// packetw2c_remove_friend_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_remove_friend_result];
inline bool packetw2c_remove_friend_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_remove_friend_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_remove_friend_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_remove_friend_result::clear_packet_id() {
  packet_id_ = 7528;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_remove_friend_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_remove_friend_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_remove_friend_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_remove_friend_result.packet_id)
}

// optional int32 friendId = 2;
inline bool packetw2c_remove_friend_result::has_friendid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_remove_friend_result::set_has_friendid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_remove_friend_result::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_remove_friend_result::clear_friendid() {
  friendid_ = 0;
  clear_has_friendid();
}
inline ::google::protobuf::int32 packetw2c_remove_friend_result::friendid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_remove_friend_result.friendId)
  return friendid_;
}
inline void packetw2c_remove_friend_result::set_friendid(::google::protobuf::int32 value) {
  set_has_friendid();
  friendid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_remove_friend_result.friendId)
}

// optional int32 result = 3;
inline bool packetw2c_remove_friend_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_remove_friend_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_remove_friend_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_remove_friend_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_remove_friend_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_remove_friend_result.result)
  return result_;
}
inline void packetw2c_remove_friend_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_remove_friend_result.result)
}

// -------------------------------------------------------------------

// packetc2w_req_friend_list

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_friend_list];
inline bool packetc2w_req_friend_list::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_friend_list::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_friend_list::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_friend_list::clear_packet_id() {
  packet_id_ = 5025;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_friend_list::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_friend_list.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_friend_list::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_friend_list.packet_id)
}

// -------------------------------------------------------------------

// packetw2c_req_friend_list_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_friend_list_result];
inline bool packetw2c_req_friend_list_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_friend_list_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_friend_list_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_friend_list_result::clear_packet_id() {
  packet_id_ = 7527;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_friend_list_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_friend_list_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_friend_list_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_friend_list_result.packet_id)
}

// repeated .client2world_protocols.FriendInfo friendList = 2;
inline int packetw2c_req_friend_list_result::friendlist_size() const {
  return friendlist_.size();
}
inline void packetw2c_req_friend_list_result::clear_friendlist() {
  friendlist_.Clear();
}
inline const ::client2world_protocols::FriendInfo& packetw2c_req_friend_list_result::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_friend_list_result.friendList)
  return friendlist_.Get(index);
}
inline ::client2world_protocols::FriendInfo* packetw2c_req_friend_list_result::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_req_friend_list_result.friendList)
  return friendlist_.Mutable(index);
}
inline ::client2world_protocols::FriendInfo* packetw2c_req_friend_list_result::add_friendlist() {
  // @@protoc_insertion_point(field_add:client2world_protocols.packetw2c_req_friend_list_result.friendList)
  return friendlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::FriendInfo >&
packetw2c_req_friend_list_result::friendlist() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.packetw2c_req_friend_list_result.friendList)
  return friendlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::FriendInfo >*
packetw2c_req_friend_list_result::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.packetw2c_req_friend_list_result.friendList)
  return &friendlist_;
}

// -------------------------------------------------------------------

// packetc2w_search_friend

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_search_friend];
inline bool packetc2w_search_friend::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_search_friend::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_search_friend::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_search_friend::clear_packet_id() {
  packet_id_ = 5027;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_search_friend::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_search_friend.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_search_friend::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_search_friend.packet_id)
}

// optional int32 playerId = 2;
inline bool packetc2w_search_friend::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_search_friend::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_search_friend::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_search_friend::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 packetc2w_search_friend::playerid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_search_friend.playerId)
  return playerid_;
}
inline void packetc2w_search_friend::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_search_friend.playerId)
}

// -------------------------------------------------------------------

// packetw2c_search_friend_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_search_friend_result];
inline bool packetw2c_search_friend_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_search_friend_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_search_friend_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_search_friend_result::clear_packet_id() {
  packet_id_ = 7529;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_search_friend_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_search_friend_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_search_friend_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_search_friend_result.packet_id)
}

// optional .client2world_protocols.FriendInfo info = 2;
inline bool packetw2c_search_friend_result::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_search_friend_result::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_search_friend_result::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_search_friend_result::clear_info() {
  if (info_ != NULL) info_->::client2world_protocols::FriendInfo::Clear();
  clear_has_info();
}
inline const ::client2world_protocols::FriendInfo& packetw2c_search_friend_result::info() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_search_friend_result.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::client2world_protocols::FriendInfo* packetw2c_search_friend_result::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::client2world_protocols::FriendInfo;
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_search_friend_result.info)
  return info_;
}
inline ::client2world_protocols::FriendInfo* packetw2c_search_friend_result::release_info() {
  clear_has_info();
  ::client2world_protocols::FriendInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void packetw2c_search_friend_result::set_allocated_info(::client2world_protocols::FriendInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_search_friend_result.info)
}

// optional int32 result = 3;
inline bool packetw2c_search_friend_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_search_friend_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_search_friend_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_search_friend_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_search_friend_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_search_friend_result.result)
  return result_;
}
inline void packetw2c_search_friend_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_search_friend_result.result)
}

// -------------------------------------------------------------------

// packetc2w_enter_friend_room

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_enter_friend_room];
inline bool packetc2w_enter_friend_room::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_enter_friend_room::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_enter_friend_room::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_enter_friend_room::clear_packet_id() {
  packet_id_ = 5035;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_enter_friend_room::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_enter_friend_room.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_enter_friend_room::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_enter_friend_room.packet_id)
}

// optional int32 friendId = 2;
inline bool packetc2w_enter_friend_room::has_friendid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_enter_friend_room::set_has_friendid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_enter_friend_room::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_enter_friend_room::clear_friendid() {
  friendid_ = 0;
  clear_has_friendid();
}
inline ::google::protobuf::int32 packetc2w_enter_friend_room::friendid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_enter_friend_room.friendId)
  return friendid_;
}
inline void packetc2w_enter_friend_room::set_friendid(::google::protobuf::int32 value) {
  set_has_friendid();
  friendid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_enter_friend_room.friendId)
}

// -------------------------------------------------------------------

// packetw2c_enter_friend_room_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_enter_friend_room_result];
inline bool packetw2c_enter_friend_room_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_enter_friend_room_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_enter_friend_room_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_enter_friend_room_result::clear_packet_id() {
  packet_id_ = 7537;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_enter_friend_room_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_enter_friend_room_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_enter_friend_room_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_enter_friend_room_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_enter_friend_room_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_enter_friend_room_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_enter_friend_room_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_enter_friend_room_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_enter_friend_room_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_enter_friend_room_result.result)
  return result_;
}
inline void packetw2c_enter_friend_room_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_enter_friend_room_result.result)
}

// optional int32 gameId = 3;
inline bool packetw2c_enter_friend_room_result::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_enter_friend_room_result::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_enter_friend_room_result::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_enter_friend_room_result::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 packetw2c_enter_friend_room_result::gameid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_enter_friend_room_result.gameId)
  return gameid_;
}
inline void packetw2c_enter_friend_room_result::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_enter_friend_room_result.gameId)
}

// -------------------------------------------------------------------

// packetc2w_get_friend_gameid

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_friend_gameid];
inline bool packetc2w_get_friend_gameid::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_get_friend_gameid::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_get_friend_gameid::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_get_friend_gameid::clear_packet_id() {
  packet_id_ = 5041;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_get_friend_gameid::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_get_friend_gameid.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_get_friend_gameid::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_get_friend_gameid.packet_id)
}

// optional int32 friendId = 2;
inline bool packetc2w_get_friend_gameid::has_friendid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_get_friend_gameid::set_has_friendid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_get_friend_gameid::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_get_friend_gameid::clear_friendid() {
  friendid_ = 0;
  clear_has_friendid();
}
inline ::google::protobuf::int32 packetc2w_get_friend_gameid::friendid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_get_friend_gameid.friendId)
  return friendid_;
}
inline void packetc2w_get_friend_gameid::set_friendid(::google::protobuf::int32 value) {
  set_has_friendid();
  friendid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_get_friend_gameid.friendId)
}

// -------------------------------------------------------------------

// packetw2c_get_friend_gameid_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_friend_gameid_result];
inline bool packetw2c_get_friend_gameid_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_get_friend_gameid_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_get_friend_gameid_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_get_friend_gameid_result::clear_packet_id() {
  packet_id_ = 7544;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_get_friend_gameid_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_friend_gameid_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_get_friend_gameid_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_get_friend_gameid_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_get_friend_gameid_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_get_friend_gameid_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_get_friend_gameid_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_get_friend_gameid_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_get_friend_gameid_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_friend_gameid_result.result)
  return result_;
}
inline void packetw2c_get_friend_gameid_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_get_friend_gameid_result.result)
}

// optional int32 gameId = 3;
inline bool packetw2c_get_friend_gameid_result::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_get_friend_gameid_result::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_get_friend_gameid_result::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_get_friend_gameid_result::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 packetw2c_get_friend_gameid_result::gameid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_friend_gameid_result.gameId)
  return gameid_;
}
inline void packetw2c_get_friend_gameid_result::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_get_friend_gameid_result.gameId)
}

// optional int32 friendId = 4;
inline bool packetw2c_get_friend_gameid_result::has_friendid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_get_friend_gameid_result::set_has_friendid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_get_friend_gameid_result::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_get_friend_gameid_result::clear_friendid() {
  friendid_ = 0;
  clear_has_friendid();
}
inline ::google::protobuf::int32 packetw2c_get_friend_gameid_result::friendid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_friend_gameid_result.friendId)
  return friendid_;
}
inline void packetw2c_get_friend_gameid_result::set_friendid(::google::protobuf::int32 value) {
  set_has_friendid();
  friendid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_get_friend_gameid_result.friendId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5ffriend_2eproto__INCLUDED
