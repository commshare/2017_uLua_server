// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_safe_deposit_box.proto

#ifndef PROTOBUF_client2world_5fsafe_5fdeposit_5fbox_2eproto__INCLUDED
#define PROTOBUF_client2world_5fsafe_5fdeposit_5fbox_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto();

class packetc2w_set_password;
class packetw2c_set_password_result;
class packetc2w_modify_password;
class packetw2c_modify_password_result;
class packetc2w_reset_password;
class packetw2c_reset_password_result;
class packetc2w_deposit_gold;
class packetw2c_deposit_gold_result;
class packetc2w_draw_gold;
class packetw2c_draw_gold_result;
class packetc2w_get_safe_box_security_code;
class packetw2c_get_safe_box_security_code_result;
class packetc2w_check_password;
class packetw2c_check_password_result;

// ===================================================================

class packetc2w_set_password : public ::google::protobuf::Message {
 public:
  packetc2w_set_password();
  virtual ~packetc2w_set_password();

  packetc2w_set_password(const packetc2w_set_password& from);

  inline packetc2w_set_password& operator=(const packetc2w_set_password& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_set_password& default_instance();

  void Swap(packetc2w_set_password* other);

  // implements Message ----------------------------------------------

  packetc2w_set_password* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_set_password& from);
  void MergeFrom(const packetc2w_set_password& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_set_password];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string pwd1 = 2;
  inline bool has_pwd1() const;
  inline void clear_pwd1();
  static const int kPwd1FieldNumber = 2;
  inline const ::std::string& pwd1() const;
  inline void set_pwd1(const ::std::string& value);
  inline void set_pwd1(const char* value);
  inline void set_pwd1(const char* value, size_t size);
  inline ::std::string* mutable_pwd1();
  inline ::std::string* release_pwd1();
  inline void set_allocated_pwd1(::std::string* pwd1);

  // optional string pwd2 = 3;
  inline bool has_pwd2() const;
  inline void clear_pwd2();
  static const int kPwd2FieldNumber = 3;
  inline const ::std::string& pwd2() const;
  inline void set_pwd2(const ::std::string& value);
  inline void set_pwd2(const char* value);
  inline void set_pwd2(const char* value, size_t size);
  inline ::std::string* mutable_pwd2();
  inline ::std::string* release_pwd2();
  inline void set_allocated_pwd2(::std::string* pwd2);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_set_password)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_pwd1();
  inline void clear_has_pwd1();
  inline void set_has_pwd2();
  inline void clear_has_pwd2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pwd1_;
  ::std::string* pwd2_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_set_password* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_set_password_result : public ::google::protobuf::Message {
 public:
  packetw2c_set_password_result();
  virtual ~packetw2c_set_password_result();

  packetw2c_set_password_result(const packetw2c_set_password_result& from);

  inline packetw2c_set_password_result& operator=(const packetw2c_set_password_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_set_password_result& default_instance();

  void Swap(packetw2c_set_password_result* other);

  // implements Message ----------------------------------------------

  packetw2c_set_password_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_set_password_result& from);
  void MergeFrom(const packetw2c_set_password_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_set_password_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_set_password_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_set_password_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_modify_password : public ::google::protobuf::Message {
 public:
  packetc2w_modify_password();
  virtual ~packetc2w_modify_password();

  packetc2w_modify_password(const packetc2w_modify_password& from);

  inline packetc2w_modify_password& operator=(const packetc2w_modify_password& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_modify_password& default_instance();

  void Swap(packetc2w_modify_password* other);

  // implements Message ----------------------------------------------

  packetc2w_modify_password* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_modify_password& from);
  void MergeFrom(const packetc2w_modify_password& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_modify_password];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string old_pwd = 2;
  inline bool has_old_pwd() const;
  inline void clear_old_pwd();
  static const int kOldPwdFieldNumber = 2;
  inline const ::std::string& old_pwd() const;
  inline void set_old_pwd(const ::std::string& value);
  inline void set_old_pwd(const char* value);
  inline void set_old_pwd(const char* value, size_t size);
  inline ::std::string* mutable_old_pwd();
  inline ::std::string* release_old_pwd();
  inline void set_allocated_old_pwd(::std::string* old_pwd);

  // optional string new_pwd1 = 3;
  inline bool has_new_pwd1() const;
  inline void clear_new_pwd1();
  static const int kNewPwd1FieldNumber = 3;
  inline const ::std::string& new_pwd1() const;
  inline void set_new_pwd1(const ::std::string& value);
  inline void set_new_pwd1(const char* value);
  inline void set_new_pwd1(const char* value, size_t size);
  inline ::std::string* mutable_new_pwd1();
  inline ::std::string* release_new_pwd1();
  inline void set_allocated_new_pwd1(::std::string* new_pwd1);

  // optional string new_pwd2 = 4;
  inline bool has_new_pwd2() const;
  inline void clear_new_pwd2();
  static const int kNewPwd2FieldNumber = 4;
  inline const ::std::string& new_pwd2() const;
  inline void set_new_pwd2(const ::std::string& value);
  inline void set_new_pwd2(const char* value);
  inline void set_new_pwd2(const char* value, size_t size);
  inline ::std::string* mutable_new_pwd2();
  inline ::std::string* release_new_pwd2();
  inline void set_allocated_new_pwd2(::std::string* new_pwd2);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_modify_password)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_old_pwd();
  inline void clear_has_old_pwd();
  inline void set_has_new_pwd1();
  inline void clear_has_new_pwd1();
  inline void set_has_new_pwd2();
  inline void clear_has_new_pwd2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* old_pwd_;
  ::std::string* new_pwd1_;
  ::std::string* new_pwd2_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_modify_password* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_modify_password_result : public ::google::protobuf::Message {
 public:
  packetw2c_modify_password_result();
  virtual ~packetw2c_modify_password_result();

  packetw2c_modify_password_result(const packetw2c_modify_password_result& from);

  inline packetw2c_modify_password_result& operator=(const packetw2c_modify_password_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_modify_password_result& default_instance();

  void Swap(packetw2c_modify_password_result* other);

  // implements Message ----------------------------------------------

  packetw2c_modify_password_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_modify_password_result& from);
  void MergeFrom(const packetw2c_modify_password_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_modify_password_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_modify_password_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_modify_password_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_reset_password : public ::google::protobuf::Message {
 public:
  packetc2w_reset_password();
  virtual ~packetc2w_reset_password();

  packetc2w_reset_password(const packetc2w_reset_password& from);

  inline packetc2w_reset_password& operator=(const packetc2w_reset_password& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_reset_password& default_instance();

  void Swap(packetc2w_reset_password* other);

  // implements Message ----------------------------------------------

  packetc2w_reset_password* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_reset_password& from);
  void MergeFrom(const packetc2w_reset_password& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_reset_password];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string pwd1 = 2;
  inline bool has_pwd1() const;
  inline void clear_pwd1();
  static const int kPwd1FieldNumber = 2;
  inline const ::std::string& pwd1() const;
  inline void set_pwd1(const ::std::string& value);
  inline void set_pwd1(const char* value);
  inline void set_pwd1(const char* value, size_t size);
  inline ::std::string* mutable_pwd1();
  inline ::std::string* release_pwd1();
  inline void set_allocated_pwd1(::std::string* pwd1);

  // optional string pwd2 = 3;
  inline bool has_pwd2() const;
  inline void clear_pwd2();
  static const int kPwd2FieldNumber = 3;
  inline const ::std::string& pwd2() const;
  inline void set_pwd2(const ::std::string& value);
  inline void set_pwd2(const char* value);
  inline void set_pwd2(const char* value, size_t size);
  inline ::std::string* mutable_pwd2();
  inline ::std::string* release_pwd2();
  inline void set_allocated_pwd2(::std::string* pwd2);

  // optional string safeCode = 4;
  inline bool has_safecode() const;
  inline void clear_safecode();
  static const int kSafeCodeFieldNumber = 4;
  inline const ::std::string& safecode() const;
  inline void set_safecode(const ::std::string& value);
  inline void set_safecode(const char* value);
  inline void set_safecode(const char* value, size_t size);
  inline ::std::string* mutable_safecode();
  inline ::std::string* release_safecode();
  inline void set_allocated_safecode(::std::string* safecode);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_reset_password)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_pwd1();
  inline void clear_has_pwd1();
  inline void set_has_pwd2();
  inline void clear_has_pwd2();
  inline void set_has_safecode();
  inline void clear_has_safecode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pwd1_;
  ::std::string* pwd2_;
  ::std::string* safecode_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_reset_password* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_reset_password_result : public ::google::protobuf::Message {
 public:
  packetw2c_reset_password_result();
  virtual ~packetw2c_reset_password_result();

  packetw2c_reset_password_result(const packetw2c_reset_password_result& from);

  inline packetw2c_reset_password_result& operator=(const packetw2c_reset_password_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_reset_password_result& default_instance();

  void Swap(packetw2c_reset_password_result* other);

  // implements Message ----------------------------------------------

  packetw2c_reset_password_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_reset_password_result& from);
  void MergeFrom(const packetw2c_reset_password_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_reset_password_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_reset_password_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_reset_password_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_deposit_gold : public ::google::protobuf::Message {
 public:
  packetc2w_deposit_gold();
  virtual ~packetc2w_deposit_gold();

  packetc2w_deposit_gold(const packetc2w_deposit_gold& from);

  inline packetc2w_deposit_gold& operator=(const packetc2w_deposit_gold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_deposit_gold& default_instance();

  void Swap(packetc2w_deposit_gold* other);

  // implements Message ----------------------------------------------

  packetc2w_deposit_gold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_deposit_gold& from);
  void MergeFrom(const packetc2w_deposit_gold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_deposit_gold];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional string pwd = 3;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 3;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_deposit_gold)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_pwd();
  inline void clear_has_pwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 gold_;
  ::std::string* pwd_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_deposit_gold* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_deposit_gold_result : public ::google::protobuf::Message {
 public:
  packetw2c_deposit_gold_result();
  virtual ~packetw2c_deposit_gold_result();

  packetw2c_deposit_gold_result(const packetw2c_deposit_gold_result& from);

  inline packetw2c_deposit_gold_result& operator=(const packetw2c_deposit_gold_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_deposit_gold_result& default_instance();

  void Swap(packetw2c_deposit_gold_result* other);

  // implements Message ----------------------------------------------

  packetw2c_deposit_gold_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_deposit_gold_result& from);
  void MergeFrom(const packetw2c_deposit_gold_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_deposit_gold_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_deposit_gold_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 gold_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_deposit_gold_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_draw_gold : public ::google::protobuf::Message {
 public:
  packetc2w_draw_gold();
  virtual ~packetc2w_draw_gold();

  packetc2w_draw_gold(const packetc2w_draw_gold& from);

  inline packetc2w_draw_gold& operator=(const packetc2w_draw_gold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_draw_gold& default_instance();

  void Swap(packetc2w_draw_gold* other);

  // implements Message ----------------------------------------------

  packetc2w_draw_gold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_draw_gold& from);
  void MergeFrom(const packetc2w_draw_gold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_draw_gold];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional string pwd = 3;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 3;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_draw_gold)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_pwd();
  inline void clear_has_pwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 gold_;
  ::std::string* pwd_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_draw_gold* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_draw_gold_result : public ::google::protobuf::Message {
 public:
  packetw2c_draw_gold_result();
  virtual ~packetw2c_draw_gold_result();

  packetw2c_draw_gold_result(const packetw2c_draw_gold_result& from);

  inline packetw2c_draw_gold_result& operator=(const packetw2c_draw_gold_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_draw_gold_result& default_instance();

  void Swap(packetw2c_draw_gold_result* other);

  // implements Message ----------------------------------------------

  packetw2c_draw_gold_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_draw_gold_result& from);
  void MergeFrom(const packetw2c_draw_gold_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_draw_gold_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_draw_gold_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 gold_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_draw_gold_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_get_safe_box_security_code : public ::google::protobuf::Message {
 public:
  packetc2w_get_safe_box_security_code();
  virtual ~packetc2w_get_safe_box_security_code();

  packetc2w_get_safe_box_security_code(const packetc2w_get_safe_box_security_code& from);

  inline packetc2w_get_safe_box_security_code& operator=(const packetc2w_get_safe_box_security_code& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_get_safe_box_security_code& default_instance();

  void Swap(packetc2w_get_safe_box_security_code* other);

  // implements Message ----------------------------------------------

  packetc2w_get_safe_box_security_code* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_get_safe_box_security_code& from);
  void MergeFrom(const packetc2w_get_safe_box_security_code& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_safe_box_security_code];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_get_safe_box_security_code)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_get_safe_box_security_code* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_get_safe_box_security_code_result : public ::google::protobuf::Message {
 public:
  packetw2c_get_safe_box_security_code_result();
  virtual ~packetw2c_get_safe_box_security_code_result();

  packetw2c_get_safe_box_security_code_result(const packetw2c_get_safe_box_security_code_result& from);

  inline packetw2c_get_safe_box_security_code_result& operator=(const packetw2c_get_safe_box_security_code_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_get_safe_box_security_code_result& default_instance();

  void Swap(packetw2c_get_safe_box_security_code_result* other);

  // implements Message ----------------------------------------------

  packetw2c_get_safe_box_security_code_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_get_safe_box_security_code_result& from);
  void MergeFrom(const packetw2c_get_safe_box_security_code_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_safe_box_security_code_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_get_safe_box_security_code_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_get_safe_box_security_code_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_check_password : public ::google::protobuf::Message {
 public:
  packetc2w_check_password();
  virtual ~packetc2w_check_password();

  packetc2w_check_password(const packetc2w_check_password& from);

  inline packetc2w_check_password& operator=(const packetc2w_check_password& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_check_password& default_instance();

  void Swap(packetc2w_check_password* other);

  // implements Message ----------------------------------------------

  packetc2w_check_password* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_check_password& from);
  void MergeFrom(const packetc2w_check_password& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_check_password];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string pwd = 2;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 2;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_check_password)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_pwd();
  inline void clear_has_pwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pwd_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_check_password* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_check_password_result : public ::google::protobuf::Message {
 public:
  packetw2c_check_password_result();
  virtual ~packetw2c_check_password_result();

  packetw2c_check_password_result(const packetw2c_check_password_result& from);

  inline packetw2c_check_password_result& operator=(const packetw2c_check_password_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_check_password_result& default_instance();

  void Swap(packetw2c_check_password_result* other);

  // implements Message ----------------------------------------------

  packetw2c_check_password_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_check_password_result& from);
  void MergeFrom(const packetw2c_check_password_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_check_password_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_check_password_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_check_password_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2w_set_password

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_set_password];
inline bool packetc2w_set_password::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_set_password::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_set_password::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_set_password::clear_packet_id() {
  packet_id_ = 5029;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_set_password::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_set_password.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_set_password::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_set_password.packet_id)
}

// optional string pwd1 = 2;
inline bool packetc2w_set_password::has_pwd1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_set_password::set_has_pwd1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_set_password::clear_has_pwd1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_set_password::clear_pwd1() {
  if (pwd1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd1_->clear();
  }
  clear_has_pwd1();
}
inline const ::std::string& packetc2w_set_password::pwd1() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_set_password.pwd1)
  return *pwd1_;
}
inline void packetc2w_set_password::set_pwd1(const ::std::string& value) {
  set_has_pwd1();
  if (pwd1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd1_ = new ::std::string;
  }
  pwd1_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_set_password.pwd1)
}
inline void packetc2w_set_password::set_pwd1(const char* value) {
  set_has_pwd1();
  if (pwd1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd1_ = new ::std::string;
  }
  pwd1_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_set_password.pwd1)
}
inline void packetc2w_set_password::set_pwd1(const char* value, size_t size) {
  set_has_pwd1();
  if (pwd1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd1_ = new ::std::string;
  }
  pwd1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_set_password.pwd1)
}
inline ::std::string* packetc2w_set_password::mutable_pwd1() {
  set_has_pwd1();
  if (pwd1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_set_password.pwd1)
  return pwd1_;
}
inline ::std::string* packetc2w_set_password::release_pwd1() {
  clear_has_pwd1();
  if (pwd1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd1_;
    pwd1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_set_password::set_allocated_pwd1(::std::string* pwd1) {
  if (pwd1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd1_;
  }
  if (pwd1) {
    set_has_pwd1();
    pwd1_ = pwd1;
  } else {
    clear_has_pwd1();
    pwd1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_set_password.pwd1)
}

// optional string pwd2 = 3;
inline bool packetc2w_set_password::has_pwd2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_set_password::set_has_pwd2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_set_password::clear_has_pwd2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_set_password::clear_pwd2() {
  if (pwd2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd2_->clear();
  }
  clear_has_pwd2();
}
inline const ::std::string& packetc2w_set_password::pwd2() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_set_password.pwd2)
  return *pwd2_;
}
inline void packetc2w_set_password::set_pwd2(const ::std::string& value) {
  set_has_pwd2();
  if (pwd2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd2_ = new ::std::string;
  }
  pwd2_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_set_password.pwd2)
}
inline void packetc2w_set_password::set_pwd2(const char* value) {
  set_has_pwd2();
  if (pwd2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd2_ = new ::std::string;
  }
  pwd2_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_set_password.pwd2)
}
inline void packetc2w_set_password::set_pwd2(const char* value, size_t size) {
  set_has_pwd2();
  if (pwd2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd2_ = new ::std::string;
  }
  pwd2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_set_password.pwd2)
}
inline ::std::string* packetc2w_set_password::mutable_pwd2() {
  set_has_pwd2();
  if (pwd2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_set_password.pwd2)
  return pwd2_;
}
inline ::std::string* packetc2w_set_password::release_pwd2() {
  clear_has_pwd2();
  if (pwd2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd2_;
    pwd2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_set_password::set_allocated_pwd2(::std::string* pwd2) {
  if (pwd2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd2_;
  }
  if (pwd2) {
    set_has_pwd2();
    pwd2_ = pwd2;
  } else {
    clear_has_pwd2();
    pwd2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_set_password.pwd2)
}

// -------------------------------------------------------------------

// packetw2c_set_password_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_set_password_result];
inline bool packetw2c_set_password_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_set_password_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_set_password_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_set_password_result::clear_packet_id() {
  packet_id_ = 7531;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_set_password_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_set_password_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_set_password_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_set_password_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_set_password_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_set_password_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_set_password_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_set_password_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_set_password_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_set_password_result.result)
  return result_;
}
inline void packetw2c_set_password_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_set_password_result.result)
}

// -------------------------------------------------------------------

// packetc2w_modify_password

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_modify_password];
inline bool packetc2w_modify_password::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_modify_password::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_modify_password::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_modify_password::clear_packet_id() {
  packet_id_ = 5034;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_modify_password::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_modify_password.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_modify_password::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_modify_password.packet_id)
}

// optional string old_pwd = 2;
inline bool packetc2w_modify_password::has_old_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_modify_password::set_has_old_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_modify_password::clear_has_old_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_modify_password::clear_old_pwd() {
  if (old_pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_pwd_->clear();
  }
  clear_has_old_pwd();
}
inline const ::std::string& packetc2w_modify_password::old_pwd() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_modify_password.old_pwd)
  return *old_pwd_;
}
inline void packetc2w_modify_password::set_old_pwd(const ::std::string& value) {
  set_has_old_pwd();
  if (old_pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_pwd_ = new ::std::string;
  }
  old_pwd_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_modify_password.old_pwd)
}
inline void packetc2w_modify_password::set_old_pwd(const char* value) {
  set_has_old_pwd();
  if (old_pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_pwd_ = new ::std::string;
  }
  old_pwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_modify_password.old_pwd)
}
inline void packetc2w_modify_password::set_old_pwd(const char* value, size_t size) {
  set_has_old_pwd();
  if (old_pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_pwd_ = new ::std::string;
  }
  old_pwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_modify_password.old_pwd)
}
inline ::std::string* packetc2w_modify_password::mutable_old_pwd() {
  set_has_old_pwd();
  if (old_pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_pwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_modify_password.old_pwd)
  return old_pwd_;
}
inline ::std::string* packetc2w_modify_password::release_old_pwd() {
  clear_has_old_pwd();
  if (old_pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = old_pwd_;
    old_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_modify_password::set_allocated_old_pwd(::std::string* old_pwd) {
  if (old_pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete old_pwd_;
  }
  if (old_pwd) {
    set_has_old_pwd();
    old_pwd_ = old_pwd;
  } else {
    clear_has_old_pwd();
    old_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_modify_password.old_pwd)
}

// optional string new_pwd1 = 3;
inline bool packetc2w_modify_password::has_new_pwd1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_modify_password::set_has_new_pwd1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_modify_password::clear_has_new_pwd1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_modify_password::clear_new_pwd1() {
  if (new_pwd1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pwd1_->clear();
  }
  clear_has_new_pwd1();
}
inline const ::std::string& packetc2w_modify_password::new_pwd1() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_modify_password.new_pwd1)
  return *new_pwd1_;
}
inline void packetc2w_modify_password::set_new_pwd1(const ::std::string& value) {
  set_has_new_pwd1();
  if (new_pwd1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pwd1_ = new ::std::string;
  }
  new_pwd1_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_modify_password.new_pwd1)
}
inline void packetc2w_modify_password::set_new_pwd1(const char* value) {
  set_has_new_pwd1();
  if (new_pwd1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pwd1_ = new ::std::string;
  }
  new_pwd1_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_modify_password.new_pwd1)
}
inline void packetc2w_modify_password::set_new_pwd1(const char* value, size_t size) {
  set_has_new_pwd1();
  if (new_pwd1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pwd1_ = new ::std::string;
  }
  new_pwd1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_modify_password.new_pwd1)
}
inline ::std::string* packetc2w_modify_password::mutable_new_pwd1() {
  set_has_new_pwd1();
  if (new_pwd1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pwd1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_modify_password.new_pwd1)
  return new_pwd1_;
}
inline ::std::string* packetc2w_modify_password::release_new_pwd1() {
  clear_has_new_pwd1();
  if (new_pwd1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = new_pwd1_;
    new_pwd1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_modify_password::set_allocated_new_pwd1(::std::string* new_pwd1) {
  if (new_pwd1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_pwd1_;
  }
  if (new_pwd1) {
    set_has_new_pwd1();
    new_pwd1_ = new_pwd1;
  } else {
    clear_has_new_pwd1();
    new_pwd1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_modify_password.new_pwd1)
}

// optional string new_pwd2 = 4;
inline bool packetc2w_modify_password::has_new_pwd2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2w_modify_password::set_has_new_pwd2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2w_modify_password::clear_has_new_pwd2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2w_modify_password::clear_new_pwd2() {
  if (new_pwd2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pwd2_->clear();
  }
  clear_has_new_pwd2();
}
inline const ::std::string& packetc2w_modify_password::new_pwd2() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_modify_password.new_pwd2)
  return *new_pwd2_;
}
inline void packetc2w_modify_password::set_new_pwd2(const ::std::string& value) {
  set_has_new_pwd2();
  if (new_pwd2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pwd2_ = new ::std::string;
  }
  new_pwd2_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_modify_password.new_pwd2)
}
inline void packetc2w_modify_password::set_new_pwd2(const char* value) {
  set_has_new_pwd2();
  if (new_pwd2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pwd2_ = new ::std::string;
  }
  new_pwd2_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_modify_password.new_pwd2)
}
inline void packetc2w_modify_password::set_new_pwd2(const char* value, size_t size) {
  set_has_new_pwd2();
  if (new_pwd2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pwd2_ = new ::std::string;
  }
  new_pwd2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_modify_password.new_pwd2)
}
inline ::std::string* packetc2w_modify_password::mutable_new_pwd2() {
  set_has_new_pwd2();
  if (new_pwd2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    new_pwd2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_modify_password.new_pwd2)
  return new_pwd2_;
}
inline ::std::string* packetc2w_modify_password::release_new_pwd2() {
  clear_has_new_pwd2();
  if (new_pwd2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = new_pwd2_;
    new_pwd2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_modify_password::set_allocated_new_pwd2(::std::string* new_pwd2) {
  if (new_pwd2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_pwd2_;
  }
  if (new_pwd2) {
    set_has_new_pwd2();
    new_pwd2_ = new_pwd2;
  } else {
    clear_has_new_pwd2();
    new_pwd2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_modify_password.new_pwd2)
}

// -------------------------------------------------------------------

// packetw2c_modify_password_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_modify_password_result];
inline bool packetw2c_modify_password_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_modify_password_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_modify_password_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_modify_password_result::clear_packet_id() {
  packet_id_ = 7536;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_modify_password_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_modify_password_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_modify_password_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_modify_password_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_modify_password_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_modify_password_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_modify_password_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_modify_password_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_modify_password_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_modify_password_result.result)
  return result_;
}
inline void packetw2c_modify_password_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_modify_password_result.result)
}

// -------------------------------------------------------------------

// packetc2w_reset_password

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_reset_password];
inline bool packetc2w_reset_password::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_reset_password::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_reset_password::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_reset_password::clear_packet_id() {
  packet_id_ = 5066;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_reset_password::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_reset_password.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_reset_password::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_reset_password.packet_id)
}

// optional string pwd1 = 2;
inline bool packetc2w_reset_password::has_pwd1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_reset_password::set_has_pwd1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_reset_password::clear_has_pwd1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_reset_password::clear_pwd1() {
  if (pwd1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd1_->clear();
  }
  clear_has_pwd1();
}
inline const ::std::string& packetc2w_reset_password::pwd1() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_reset_password.pwd1)
  return *pwd1_;
}
inline void packetc2w_reset_password::set_pwd1(const ::std::string& value) {
  set_has_pwd1();
  if (pwd1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd1_ = new ::std::string;
  }
  pwd1_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_reset_password.pwd1)
}
inline void packetc2w_reset_password::set_pwd1(const char* value) {
  set_has_pwd1();
  if (pwd1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd1_ = new ::std::string;
  }
  pwd1_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_reset_password.pwd1)
}
inline void packetc2w_reset_password::set_pwd1(const char* value, size_t size) {
  set_has_pwd1();
  if (pwd1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd1_ = new ::std::string;
  }
  pwd1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_reset_password.pwd1)
}
inline ::std::string* packetc2w_reset_password::mutable_pwd1() {
  set_has_pwd1();
  if (pwd1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_reset_password.pwd1)
  return pwd1_;
}
inline ::std::string* packetc2w_reset_password::release_pwd1() {
  clear_has_pwd1();
  if (pwd1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd1_;
    pwd1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_reset_password::set_allocated_pwd1(::std::string* pwd1) {
  if (pwd1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd1_;
  }
  if (pwd1) {
    set_has_pwd1();
    pwd1_ = pwd1;
  } else {
    clear_has_pwd1();
    pwd1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_reset_password.pwd1)
}

// optional string pwd2 = 3;
inline bool packetc2w_reset_password::has_pwd2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_reset_password::set_has_pwd2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_reset_password::clear_has_pwd2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_reset_password::clear_pwd2() {
  if (pwd2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd2_->clear();
  }
  clear_has_pwd2();
}
inline const ::std::string& packetc2w_reset_password::pwd2() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_reset_password.pwd2)
  return *pwd2_;
}
inline void packetc2w_reset_password::set_pwd2(const ::std::string& value) {
  set_has_pwd2();
  if (pwd2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd2_ = new ::std::string;
  }
  pwd2_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_reset_password.pwd2)
}
inline void packetc2w_reset_password::set_pwd2(const char* value) {
  set_has_pwd2();
  if (pwd2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd2_ = new ::std::string;
  }
  pwd2_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_reset_password.pwd2)
}
inline void packetc2w_reset_password::set_pwd2(const char* value, size_t size) {
  set_has_pwd2();
  if (pwd2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd2_ = new ::std::string;
  }
  pwd2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_reset_password.pwd2)
}
inline ::std::string* packetc2w_reset_password::mutable_pwd2() {
  set_has_pwd2();
  if (pwd2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_reset_password.pwd2)
  return pwd2_;
}
inline ::std::string* packetc2w_reset_password::release_pwd2() {
  clear_has_pwd2();
  if (pwd2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd2_;
    pwd2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_reset_password::set_allocated_pwd2(::std::string* pwd2) {
  if (pwd2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd2_;
  }
  if (pwd2) {
    set_has_pwd2();
    pwd2_ = pwd2;
  } else {
    clear_has_pwd2();
    pwd2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_reset_password.pwd2)
}

// optional string safeCode = 4;
inline bool packetc2w_reset_password::has_safecode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2w_reset_password::set_has_safecode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2w_reset_password::clear_has_safecode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2w_reset_password::clear_safecode() {
  if (safecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    safecode_->clear();
  }
  clear_has_safecode();
}
inline const ::std::string& packetc2w_reset_password::safecode() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_reset_password.safeCode)
  return *safecode_;
}
inline void packetc2w_reset_password::set_safecode(const ::std::string& value) {
  set_has_safecode();
  if (safecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    safecode_ = new ::std::string;
  }
  safecode_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_reset_password.safeCode)
}
inline void packetc2w_reset_password::set_safecode(const char* value) {
  set_has_safecode();
  if (safecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    safecode_ = new ::std::string;
  }
  safecode_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_reset_password.safeCode)
}
inline void packetc2w_reset_password::set_safecode(const char* value, size_t size) {
  set_has_safecode();
  if (safecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    safecode_ = new ::std::string;
  }
  safecode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_reset_password.safeCode)
}
inline ::std::string* packetc2w_reset_password::mutable_safecode() {
  set_has_safecode();
  if (safecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    safecode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_reset_password.safeCode)
  return safecode_;
}
inline ::std::string* packetc2w_reset_password::release_safecode() {
  clear_has_safecode();
  if (safecode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = safecode_;
    safecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_reset_password::set_allocated_safecode(::std::string* safecode) {
  if (safecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete safecode_;
  }
  if (safecode) {
    set_has_safecode();
    safecode_ = safecode;
  } else {
    clear_has_safecode();
    safecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_reset_password.safeCode)
}

// -------------------------------------------------------------------

// packetw2c_reset_password_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_reset_password_result];
inline bool packetw2c_reset_password_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_reset_password_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_reset_password_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_reset_password_result::clear_packet_id() {
  packet_id_ = 7572;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_reset_password_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_reset_password_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_reset_password_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_reset_password_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_reset_password_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_reset_password_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_reset_password_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_reset_password_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_reset_password_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_reset_password_result.result)
  return result_;
}
inline void packetw2c_reset_password_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_reset_password_result.result)
}

// -------------------------------------------------------------------

// packetc2w_deposit_gold

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_deposit_gold];
inline bool packetc2w_deposit_gold::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_deposit_gold::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_deposit_gold::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_deposit_gold::clear_packet_id() {
  packet_id_ = 5030;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_deposit_gold::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_deposit_gold.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_deposit_gold::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_deposit_gold.packet_id)
}

// optional int64 gold = 2;
inline bool packetc2w_deposit_gold::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_deposit_gold::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_deposit_gold::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_deposit_gold::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetc2w_deposit_gold::gold() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_deposit_gold.gold)
  return gold_;
}
inline void packetc2w_deposit_gold::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_deposit_gold.gold)
}

// optional string pwd = 3;
inline bool packetc2w_deposit_gold::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_deposit_gold::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_deposit_gold::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_deposit_gold::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& packetc2w_deposit_gold::pwd() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_deposit_gold.pwd)
  return *pwd_;
}
inline void packetc2w_deposit_gold::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_deposit_gold.pwd)
}
inline void packetc2w_deposit_gold::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_deposit_gold.pwd)
}
inline void packetc2w_deposit_gold::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_deposit_gold.pwd)
}
inline ::std::string* packetc2w_deposit_gold::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_deposit_gold.pwd)
  return pwd_;
}
inline ::std::string* packetc2w_deposit_gold::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_deposit_gold::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_deposit_gold.pwd)
}

// -------------------------------------------------------------------

// packetw2c_deposit_gold_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_deposit_gold_result];
inline bool packetw2c_deposit_gold_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_deposit_gold_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_deposit_gold_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_deposit_gold_result::clear_packet_id() {
  packet_id_ = 7532;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_deposit_gold_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_deposit_gold_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_deposit_gold_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_deposit_gold_result.packet_id)
}

// optional int64 gold = 2;
inline bool packetw2c_deposit_gold_result::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_deposit_gold_result::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_deposit_gold_result::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_deposit_gold_result::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetw2c_deposit_gold_result::gold() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_deposit_gold_result.gold)
  return gold_;
}
inline void packetw2c_deposit_gold_result::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_deposit_gold_result.gold)
}

// optional int32 result = 3;
inline bool packetw2c_deposit_gold_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_deposit_gold_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_deposit_gold_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_deposit_gold_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_deposit_gold_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_deposit_gold_result.result)
  return result_;
}
inline void packetw2c_deposit_gold_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_deposit_gold_result.result)
}

// -------------------------------------------------------------------

// packetc2w_draw_gold

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_draw_gold];
inline bool packetc2w_draw_gold::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_draw_gold::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_draw_gold::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_draw_gold::clear_packet_id() {
  packet_id_ = 5031;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_draw_gold::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_draw_gold.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_draw_gold::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_draw_gold.packet_id)
}

// optional int64 gold = 2;
inline bool packetc2w_draw_gold::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_draw_gold::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_draw_gold::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_draw_gold::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetc2w_draw_gold::gold() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_draw_gold.gold)
  return gold_;
}
inline void packetc2w_draw_gold::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_draw_gold.gold)
}

// optional string pwd = 3;
inline bool packetc2w_draw_gold::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_draw_gold::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_draw_gold::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_draw_gold::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& packetc2w_draw_gold::pwd() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_draw_gold.pwd)
  return *pwd_;
}
inline void packetc2w_draw_gold::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_draw_gold.pwd)
}
inline void packetc2w_draw_gold::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_draw_gold.pwd)
}
inline void packetc2w_draw_gold::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_draw_gold.pwd)
}
inline ::std::string* packetc2w_draw_gold::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_draw_gold.pwd)
  return pwd_;
}
inline ::std::string* packetc2w_draw_gold::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_draw_gold::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_draw_gold.pwd)
}

// -------------------------------------------------------------------

// packetw2c_draw_gold_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_draw_gold_result];
inline bool packetw2c_draw_gold_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_draw_gold_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_draw_gold_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_draw_gold_result::clear_packet_id() {
  packet_id_ = 7533;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_draw_gold_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_draw_gold_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_draw_gold_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_draw_gold_result.packet_id)
}

// optional int64 gold = 2;
inline bool packetw2c_draw_gold_result::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_draw_gold_result::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_draw_gold_result::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_draw_gold_result::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 packetw2c_draw_gold_result::gold() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_draw_gold_result.gold)
  return gold_;
}
inline void packetw2c_draw_gold_result::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_draw_gold_result.gold)
}

// optional int32 result = 3;
inline bool packetw2c_draw_gold_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_draw_gold_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_draw_gold_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_draw_gold_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_draw_gold_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_draw_gold_result.result)
  return result_;
}
inline void packetw2c_draw_gold_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_draw_gold_result.result)
}

// -------------------------------------------------------------------

// packetc2w_get_safe_box_security_code

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_safe_box_security_code];
inline bool packetc2w_get_safe_box_security_code::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_get_safe_box_security_code::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_get_safe_box_security_code::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_get_safe_box_security_code::clear_packet_id() {
  packet_id_ = 5044;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_get_safe_box_security_code::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_get_safe_box_security_code.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_get_safe_box_security_code::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_get_safe_box_security_code.packet_id)
}

// -------------------------------------------------------------------

// packetw2c_get_safe_box_security_code_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_safe_box_security_code_result];
inline bool packetw2c_get_safe_box_security_code_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_get_safe_box_security_code_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_get_safe_box_security_code_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_get_safe_box_security_code_result::clear_packet_id() {
  packet_id_ = 7548;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_get_safe_box_security_code_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_safe_box_security_code_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_get_safe_box_security_code_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_get_safe_box_security_code_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_get_safe_box_security_code_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_get_safe_box_security_code_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_get_safe_box_security_code_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_get_safe_box_security_code_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_get_safe_box_security_code_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_safe_box_security_code_result.result)
  return result_;
}
inline void packetw2c_get_safe_box_security_code_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_get_safe_box_security_code_result.result)
}

// -------------------------------------------------------------------

// packetc2w_check_password

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_check_password];
inline bool packetc2w_check_password::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_check_password::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_check_password::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_check_password::clear_packet_id() {
  packet_id_ = 5068;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_check_password::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_check_password.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_check_password::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_check_password.packet_id)
}

// optional string pwd = 2;
inline bool packetc2w_check_password::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_check_password::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_check_password::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_check_password::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& packetc2w_check_password::pwd() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_check_password.pwd)
  return *pwd_;
}
inline void packetc2w_check_password::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_check_password.pwd)
}
inline void packetc2w_check_password::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_check_password.pwd)
}
inline void packetc2w_check_password::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_check_password.pwd)
}
inline ::std::string* packetc2w_check_password::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_check_password.pwd)
  return pwd_;
}
inline ::std::string* packetc2w_check_password::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_check_password::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_check_password.pwd)
}

// -------------------------------------------------------------------

// packetw2c_check_password_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_check_password_result];
inline bool packetw2c_check_password_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_check_password_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_check_password_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_check_password_result::clear_packet_id() {
  packet_id_ = 7574;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_check_password_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_check_password_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_check_password_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_check_password_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_check_password_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_check_password_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_check_password_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_check_password_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_check_password_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_check_password_result.result)
  return result_;
}
inline void packetw2c_check_password_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_check_password_result.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5fsafe_5fdeposit_5fbox_2eproto__INCLUDED
