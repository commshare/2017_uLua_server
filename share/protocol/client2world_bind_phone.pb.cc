// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_bind_phone.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_bind_phone.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2w_req_bind_phone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_bind_phone_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_bind_phone_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_bind_phone_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_verify_code_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_verify_code_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_verify_code_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_verify_code_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_relieve_phone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_relieve_phone_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_relieve_phone_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_relieve_phone_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_relieve_verify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_relieve_verify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_relieve_verify_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_relieve_verify_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fbind_5fphone_2eproto() {
  protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_bind_phone.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2w_req_bind_phone_descriptor_ = file->message_type(0);
  static const int packetc2w_req_bind_phone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_bind_phone, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_bind_phone, phone_),
  };
  packetc2w_req_bind_phone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_bind_phone_descriptor_,
      packetc2w_req_bind_phone::default_instance_,
      packetc2w_req_bind_phone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_bind_phone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_bind_phone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_bind_phone));
  packetw2c_req_bind_phone_result_descriptor_ = file->message_type(1);
  static const int packetw2c_req_bind_phone_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_bind_phone_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_bind_phone_result, result_),
  };
  packetw2c_req_bind_phone_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_bind_phone_result_descriptor_,
      packetw2c_req_bind_phone_result::default_instance_,
      packetw2c_req_bind_phone_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_bind_phone_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_bind_phone_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_bind_phone_result));
  packetc2w_req_verify_code_descriptor_ = file->message_type(2);
  static const int packetc2w_req_verify_code_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_verify_code, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_verify_code, code_),
  };
  packetc2w_req_verify_code_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_verify_code_descriptor_,
      packetc2w_req_verify_code::default_instance_,
      packetc2w_req_verify_code_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_verify_code, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_verify_code, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_verify_code));
  packetw2c_req_verify_code_result_descriptor_ = file->message_type(3);
  static const int packetw2c_req_verify_code_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_verify_code_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_verify_code_result, result_),
  };
  packetw2c_req_verify_code_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_verify_code_result_descriptor_,
      packetw2c_req_verify_code_result::default_instance_,
      packetw2c_req_verify_code_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_verify_code_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_verify_code_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_verify_code_result));
  packetc2w_req_relieve_phone_descriptor_ = file->message_type(4);
  static const int packetc2w_req_relieve_phone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_relieve_phone, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_relieve_phone, code_),
  };
  packetc2w_req_relieve_phone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_relieve_phone_descriptor_,
      packetc2w_req_relieve_phone::default_instance_,
      packetc2w_req_relieve_phone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_relieve_phone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_relieve_phone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_relieve_phone));
  packetw2c_req_relieve_phone_result_descriptor_ = file->message_type(5);
  static const int packetw2c_req_relieve_phone_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_relieve_phone_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_relieve_phone_result, result_),
  };
  packetw2c_req_relieve_phone_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_relieve_phone_result_descriptor_,
      packetw2c_req_relieve_phone_result::default_instance_,
      packetw2c_req_relieve_phone_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_relieve_phone_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_relieve_phone_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_relieve_phone_result));
  packetc2w_req_relieve_verify_descriptor_ = file->message_type(6);
  static const int packetc2w_req_relieve_verify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_relieve_verify, packet_id_),
  };
  packetc2w_req_relieve_verify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_relieve_verify_descriptor_,
      packetc2w_req_relieve_verify::default_instance_,
      packetc2w_req_relieve_verify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_relieve_verify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_relieve_verify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_relieve_verify));
  packetw2c_req_relieve_verify_result_descriptor_ = file->message_type(7);
  static const int packetw2c_req_relieve_verify_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_relieve_verify_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_relieve_verify_result, result_),
  };
  packetw2c_req_relieve_verify_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_relieve_verify_result_descriptor_,
      packetw2c_req_relieve_verify_result::default_instance_,
      packetw2c_req_relieve_verify_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_relieve_verify_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_relieve_verify_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_relieve_verify_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fbind_5fphone_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_bind_phone_descriptor_, &packetc2w_req_bind_phone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_bind_phone_result_descriptor_, &packetw2c_req_bind_phone_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_verify_code_descriptor_, &packetc2w_req_verify_code::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_verify_code_result_descriptor_, &packetw2c_req_verify_code_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_relieve_phone_descriptor_, &packetc2w_req_relieve_phone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_relieve_phone_result_descriptor_, &packetw2c_req_relieve_phone_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_relieve_verify_descriptor_, &packetc2w_req_relieve_verify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_relieve_verify_result_descriptor_, &packetw2c_req_relieve_verify_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fbind_5fphone_2eproto() {
  delete packetc2w_req_bind_phone::default_instance_;
  delete packetc2w_req_bind_phone_reflection_;
  delete packetw2c_req_bind_phone_result::default_instance_;
  delete packetw2c_req_bind_phone_result_reflection_;
  delete packetc2w_req_verify_code::default_instance_;
  delete packetc2w_req_verify_code_reflection_;
  delete packetw2c_req_verify_code_result::default_instance_;
  delete packetw2c_req_verify_code_result_reflection_;
  delete packetc2w_req_relieve_phone::default_instance_;
  delete packetc2w_req_relieve_phone_reflection_;
  delete packetw2c_req_relieve_phone_result::default_instance_;
  delete packetw2c_req_relieve_phone_result_reflection_;
  delete packetc2w_req_relieve_verify::default_instance_;
  delete packetc2w_req_relieve_verify_reflection_;
  delete packetw2c_req_relieve_verify_result::default_instance_;
  delete packetw2c_req_relieve_verify_result_reflection_;
}

void protobuf_AddDesc_client2world_5fbind_5fphone_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035client2world_bind_phone.proto\022\026client2"
    "world_protocols\032\033client2world_msg_type.p"
    "roto\032\022msg_type_def.proto\032\022msg_info_def.p"
    "roto\"\201\001\n\030packetc2w_req_bind_phone\022V\n\tpac"
    "ket_id\030\001 \001(\0162).client2world_protocols.e_"
    "server_msg_type:\030e_mst_c2w_req_bind_phon"
    "e\022\r\n\005phone\030\002 \001(\t\"\220\001\n\037packetw2c_req_bind_"
    "phone_result\022]\n\tpacket_id\030\001 \001(\0162).client"
    "2world_protocols.e_server_msg_type:\037e_ms"
    "t_w2c_req_bind_phone_result\022\016\n\006result\030\002 "
    "\001(\005\"\202\001\n\031packetc2w_req_verify_code\022W\n\tpac"
    "ket_id\030\001 \001(\0162).client2world_protocols.e_"
    "server_msg_type:\031e_mst_c2w_req_verify_co"
    "de\022\014\n\004code\030\002 \001(\t\"\222\001\n packetw2c_req_verif"
    "y_code_result\022^\n\tpacket_id\030\001 \001(\0162).clien"
    "t2world_protocols.e_server_msg_type: e_m"
    "st_w2c_req_verify_code_result\022\016\n\006result\030"
    "\002 \001(\005\"\206\001\n\033packetc2w_req_relieve_phone\022Y\n"
    "\tpacket_id\030\001 \001(\0162).client2world_protocol"
    "s.e_server_msg_type:\033e_mst_c2w_req_relie"
    "ve_phone\022\014\n\004code\030\002 \001(\t\"\226\001\n\"packetw2c_req"
    "_relieve_phone_result\022`\n\tpacket_id\030\001 \001(\016"
    "2).client2world_protocols.e_server_msg_t"
    "ype:\"e_mst_w2c_req_relieve_phone_result\022"
    "\016\n\006result\030\002 \001(\005\"z\n\034packetc2w_req_relieve"
    "_verify\022Z\n\tpacket_id\030\001 \001(\0162).client2worl"
    "d_protocols.e_server_msg_type:\034e_mst_c2w"
    "_req_relieve_verify\"\230\001\n#packetw2c_req_re"
    "lieve_verify_result\022a\n\tpacket_id\030\001 \001(\0162)"
    ".client2world_protocols.e_server_msg_typ"
    "e:#e_mst_w2c_req_relieve_verify_result\022\016"
    "\n\006result\030\002 \001(\005", 1254);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_bind_phone.proto", &protobuf_RegisterTypes);
  packetc2w_req_bind_phone::default_instance_ = new packetc2w_req_bind_phone();
  packetw2c_req_bind_phone_result::default_instance_ = new packetw2c_req_bind_phone_result();
  packetc2w_req_verify_code::default_instance_ = new packetc2w_req_verify_code();
  packetw2c_req_verify_code_result::default_instance_ = new packetw2c_req_verify_code_result();
  packetc2w_req_relieve_phone::default_instance_ = new packetc2w_req_relieve_phone();
  packetw2c_req_relieve_phone_result::default_instance_ = new packetw2c_req_relieve_phone_result();
  packetc2w_req_relieve_verify::default_instance_ = new packetc2w_req_relieve_verify();
  packetw2c_req_relieve_verify_result::default_instance_ = new packetw2c_req_relieve_verify_result();
  packetc2w_req_bind_phone::default_instance_->InitAsDefaultInstance();
  packetw2c_req_bind_phone_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_verify_code::default_instance_->InitAsDefaultInstance();
  packetw2c_req_verify_code_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_relieve_phone::default_instance_->InitAsDefaultInstance();
  packetw2c_req_relieve_phone_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_relieve_verify::default_instance_->InitAsDefaultInstance();
  packetw2c_req_relieve_verify_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fbind_5fphone_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fbind_5fphone_2eproto {
  StaticDescriptorInitializer_client2world_5fbind_5fphone_2eproto() {
    protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  }
} static_descriptor_initializer_client2world_5fbind_5fphone_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_bind_phone::kPacketIdFieldNumber;
const int packetc2w_req_bind_phone::kPhoneFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_bind_phone::packetc2w_req_bind_phone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_bind_phone)
}

void packetc2w_req_bind_phone::InitAsDefaultInstance() {
}

packetc2w_req_bind_phone::packetc2w_req_bind_phone(const packetc2w_req_bind_phone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_bind_phone)
}

void packetc2w_req_bind_phone::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5039;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_bind_phone::~packetc2w_req_bind_phone() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_bind_phone)
  SharedDtor();
}

void packetc2w_req_bind_phone::SharedDtor() {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_req_bind_phone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_bind_phone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_bind_phone_descriptor_;
}

const packetc2w_req_bind_phone& packetc2w_req_bind_phone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  return *default_instance_;
}

packetc2w_req_bind_phone* packetc2w_req_bind_phone::default_instance_ = NULL;

packetc2w_req_bind_phone* packetc2w_req_bind_phone::New() const {
  return new packetc2w_req_bind_phone;
}

void packetc2w_req_bind_phone::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5039;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_bind_phone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_bind_phone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_bind_phone];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        break;
      }

      // optional string phone = 2;
      case 2: {
        if (tag == 18) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_bind_phone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_bind_phone)
  return false;
#undef DO_
}

void packetc2w_req_bind_phone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_bind_phone)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_bind_phone];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->phone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_bind_phone)
}

::google::protobuf::uint8* packetc2w_req_bind_phone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_bind_phone)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_bind_phone];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_bind_phone)
  return target;
}

int packetc2w_req_bind_phone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_bind_phone];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_bind_phone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_bind_phone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_bind_phone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_bind_phone::MergeFrom(const packetc2w_req_bind_phone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_bind_phone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_bind_phone::CopyFrom(const packetc2w_req_bind_phone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_bind_phone::IsInitialized() const {

  return true;
}

void packetc2w_req_bind_phone::Swap(packetc2w_req_bind_phone* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(phone_, other->phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_bind_phone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_bind_phone_descriptor_;
  metadata.reflection = packetc2w_req_bind_phone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_bind_phone_result::kPacketIdFieldNumber;
const int packetw2c_req_bind_phone_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_bind_phone_result::packetw2c_req_bind_phone_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_req_bind_phone_result)
}

void packetw2c_req_bind_phone_result::InitAsDefaultInstance() {
}

packetw2c_req_bind_phone_result::packetw2c_req_bind_phone_result(const packetw2c_req_bind_phone_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_req_bind_phone_result)
}

void packetw2c_req_bind_phone_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7542;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_bind_phone_result::~packetw2c_req_bind_phone_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_req_bind_phone_result)
  SharedDtor();
}

void packetw2c_req_bind_phone_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_bind_phone_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_bind_phone_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_bind_phone_result_descriptor_;
}

const packetw2c_req_bind_phone_result& packetw2c_req_bind_phone_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  return *default_instance_;
}

packetw2c_req_bind_phone_result* packetw2c_req_bind_phone_result::default_instance_ = NULL;

packetw2c_req_bind_phone_result* packetw2c_req_bind_phone_result::New() const {
  return new packetw2c_req_bind_phone_result;
}

void packetw2c_req_bind_phone_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7542;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_bind_phone_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_req_bind_phone_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_bind_phone_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_req_bind_phone_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_req_bind_phone_result)
  return false;
#undef DO_
}

void packetw2c_req_bind_phone_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_req_bind_phone_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_bind_phone_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_req_bind_phone_result)
}

::google::protobuf::uint8* packetw2c_req_bind_phone_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_req_bind_phone_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_bind_phone_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_req_bind_phone_result)
  return target;
}

int packetw2c_req_bind_phone_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_bind_phone_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_bind_phone_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_bind_phone_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_bind_phone_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_bind_phone_result::MergeFrom(const packetw2c_req_bind_phone_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_bind_phone_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_bind_phone_result::CopyFrom(const packetw2c_req_bind_phone_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_bind_phone_result::IsInitialized() const {

  return true;
}

void packetw2c_req_bind_phone_result::Swap(packetw2c_req_bind_phone_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_bind_phone_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_bind_phone_result_descriptor_;
  metadata.reflection = packetw2c_req_bind_phone_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_verify_code::kPacketIdFieldNumber;
const int packetc2w_req_verify_code::kCodeFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_verify_code::packetc2w_req_verify_code()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_verify_code)
}

void packetc2w_req_verify_code::InitAsDefaultInstance() {
}

packetc2w_req_verify_code::packetc2w_req_verify_code(const packetc2w_req_verify_code& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_verify_code)
}

void packetc2w_req_verify_code::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5040;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_verify_code::~packetc2w_req_verify_code() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_verify_code)
  SharedDtor();
}

void packetc2w_req_verify_code::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_req_verify_code::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_verify_code::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_verify_code_descriptor_;
}

const packetc2w_req_verify_code& packetc2w_req_verify_code::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  return *default_instance_;
}

packetc2w_req_verify_code* packetc2w_req_verify_code::default_instance_ = NULL;

packetc2w_req_verify_code* packetc2w_req_verify_code::New() const {
  return new packetc2w_req_verify_code;
}

void packetc2w_req_verify_code::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5040;
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_verify_code::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_verify_code)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_verify_code];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_code;
        break;
      }

      // optional string code = 2;
      case 2: {
        if (tag == 18) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_verify_code)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_verify_code)
  return false;
#undef DO_
}

void packetc2w_req_verify_code::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_verify_code)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_verify_code];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_verify_code)
}

::google::protobuf::uint8* packetc2w_req_verify_code::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_verify_code)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_verify_code];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_verify_code)
  return target;
}

int packetc2w_req_verify_code::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_verify_code];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_verify_code::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_verify_code* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_verify_code*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_verify_code::MergeFrom(const packetc2w_req_verify_code& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_verify_code::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_verify_code::CopyFrom(const packetc2w_req_verify_code& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_verify_code::IsInitialized() const {

  return true;
}

void packetc2w_req_verify_code::Swap(packetc2w_req_verify_code* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_verify_code::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_verify_code_descriptor_;
  metadata.reflection = packetc2w_req_verify_code_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_verify_code_result::kPacketIdFieldNumber;
const int packetw2c_req_verify_code_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_verify_code_result::packetw2c_req_verify_code_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_req_verify_code_result)
}

void packetw2c_req_verify_code_result::InitAsDefaultInstance() {
}

packetw2c_req_verify_code_result::packetw2c_req_verify_code_result(const packetw2c_req_verify_code_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_req_verify_code_result)
}

void packetw2c_req_verify_code_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7543;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_verify_code_result::~packetw2c_req_verify_code_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_req_verify_code_result)
  SharedDtor();
}

void packetw2c_req_verify_code_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_verify_code_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_verify_code_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_verify_code_result_descriptor_;
}

const packetw2c_req_verify_code_result& packetw2c_req_verify_code_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  return *default_instance_;
}

packetw2c_req_verify_code_result* packetw2c_req_verify_code_result::default_instance_ = NULL;

packetw2c_req_verify_code_result* packetw2c_req_verify_code_result::New() const {
  return new packetw2c_req_verify_code_result;
}

void packetw2c_req_verify_code_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7543;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_verify_code_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_req_verify_code_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_verify_code_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_req_verify_code_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_req_verify_code_result)
  return false;
#undef DO_
}

void packetw2c_req_verify_code_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_req_verify_code_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_verify_code_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_req_verify_code_result)
}

::google::protobuf::uint8* packetw2c_req_verify_code_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_req_verify_code_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_verify_code_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_req_verify_code_result)
  return target;
}

int packetw2c_req_verify_code_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_verify_code_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_verify_code_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_verify_code_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_verify_code_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_verify_code_result::MergeFrom(const packetw2c_req_verify_code_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_verify_code_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_verify_code_result::CopyFrom(const packetw2c_req_verify_code_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_verify_code_result::IsInitialized() const {

  return true;
}

void packetw2c_req_verify_code_result::Swap(packetw2c_req_verify_code_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_verify_code_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_verify_code_result_descriptor_;
  metadata.reflection = packetw2c_req_verify_code_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_relieve_phone::kPacketIdFieldNumber;
const int packetc2w_req_relieve_phone::kCodeFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_relieve_phone::packetc2w_req_relieve_phone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_relieve_phone)
}

void packetc2w_req_relieve_phone::InitAsDefaultInstance() {
}

packetc2w_req_relieve_phone::packetc2w_req_relieve_phone(const packetc2w_req_relieve_phone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_relieve_phone)
}

void packetc2w_req_relieve_phone::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5070;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_relieve_phone::~packetc2w_req_relieve_phone() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_relieve_phone)
  SharedDtor();
}

void packetc2w_req_relieve_phone::SharedDtor() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_req_relieve_phone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_relieve_phone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_relieve_phone_descriptor_;
}

const packetc2w_req_relieve_phone& packetc2w_req_relieve_phone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  return *default_instance_;
}

packetc2w_req_relieve_phone* packetc2w_req_relieve_phone::default_instance_ = NULL;

packetc2w_req_relieve_phone* packetc2w_req_relieve_phone::New() const {
  return new packetc2w_req_relieve_phone;
}

void packetc2w_req_relieve_phone::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5070;
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_relieve_phone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_relieve_phone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_relieve_phone];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_code;
        break;
      }

      // optional string code = 2;
      case 2: {
        if (tag == 18) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_relieve_phone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_relieve_phone)
  return false;
#undef DO_
}

void packetc2w_req_relieve_phone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_relieve_phone)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_relieve_phone];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_relieve_phone)
}

::google::protobuf::uint8* packetc2w_req_relieve_phone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_relieve_phone)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_relieve_phone];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_relieve_phone)
  return target;
}

int packetc2w_req_relieve_phone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_relieve_phone];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_relieve_phone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_relieve_phone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_relieve_phone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_relieve_phone::MergeFrom(const packetc2w_req_relieve_phone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_relieve_phone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_relieve_phone::CopyFrom(const packetc2w_req_relieve_phone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_relieve_phone::IsInitialized() const {

  return true;
}

void packetc2w_req_relieve_phone::Swap(packetc2w_req_relieve_phone* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_relieve_phone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_relieve_phone_descriptor_;
  metadata.reflection = packetc2w_req_relieve_phone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_relieve_phone_result::kPacketIdFieldNumber;
const int packetw2c_req_relieve_phone_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_relieve_phone_result::packetw2c_req_relieve_phone_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_req_relieve_phone_result)
}

void packetw2c_req_relieve_phone_result::InitAsDefaultInstance() {
}

packetw2c_req_relieve_phone_result::packetw2c_req_relieve_phone_result(const packetw2c_req_relieve_phone_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_req_relieve_phone_result)
}

void packetw2c_req_relieve_phone_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7576;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_relieve_phone_result::~packetw2c_req_relieve_phone_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_req_relieve_phone_result)
  SharedDtor();
}

void packetw2c_req_relieve_phone_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_relieve_phone_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_relieve_phone_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_relieve_phone_result_descriptor_;
}

const packetw2c_req_relieve_phone_result& packetw2c_req_relieve_phone_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  return *default_instance_;
}

packetw2c_req_relieve_phone_result* packetw2c_req_relieve_phone_result::default_instance_ = NULL;

packetw2c_req_relieve_phone_result* packetw2c_req_relieve_phone_result::New() const {
  return new packetw2c_req_relieve_phone_result;
}

void packetw2c_req_relieve_phone_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7576;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_relieve_phone_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_req_relieve_phone_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_relieve_phone_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_req_relieve_phone_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_req_relieve_phone_result)
  return false;
#undef DO_
}

void packetw2c_req_relieve_phone_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_req_relieve_phone_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_relieve_phone_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_req_relieve_phone_result)
}

::google::protobuf::uint8* packetw2c_req_relieve_phone_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_req_relieve_phone_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_relieve_phone_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_req_relieve_phone_result)
  return target;
}

int packetw2c_req_relieve_phone_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_relieve_phone_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_relieve_phone_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_relieve_phone_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_relieve_phone_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_relieve_phone_result::MergeFrom(const packetw2c_req_relieve_phone_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_relieve_phone_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_relieve_phone_result::CopyFrom(const packetw2c_req_relieve_phone_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_relieve_phone_result::IsInitialized() const {

  return true;
}

void packetw2c_req_relieve_phone_result::Swap(packetw2c_req_relieve_phone_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_relieve_phone_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_relieve_phone_result_descriptor_;
  metadata.reflection = packetw2c_req_relieve_phone_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_relieve_verify::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_relieve_verify::packetc2w_req_relieve_verify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_relieve_verify)
}

void packetc2w_req_relieve_verify::InitAsDefaultInstance() {
}

packetc2w_req_relieve_verify::packetc2w_req_relieve_verify(const packetc2w_req_relieve_verify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_relieve_verify)
}

void packetc2w_req_relieve_verify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5071;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_relieve_verify::~packetc2w_req_relieve_verify() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_relieve_verify)
  SharedDtor();
}

void packetc2w_req_relieve_verify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_relieve_verify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_relieve_verify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_relieve_verify_descriptor_;
}

const packetc2w_req_relieve_verify& packetc2w_req_relieve_verify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  return *default_instance_;
}

packetc2w_req_relieve_verify* packetc2w_req_relieve_verify::default_instance_ = NULL;

packetc2w_req_relieve_verify* packetc2w_req_relieve_verify::New() const {
  return new packetc2w_req_relieve_verify;
}

void packetc2w_req_relieve_verify::Clear() {
  packet_id_ = 5071;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_relieve_verify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_relieve_verify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_relieve_verify];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_relieve_verify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_relieve_verify)
  return false;
#undef DO_
}

void packetc2w_req_relieve_verify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_relieve_verify)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_relieve_verify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_relieve_verify)
}

::google::protobuf::uint8* packetc2w_req_relieve_verify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_relieve_verify)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_relieve_verify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_relieve_verify)
  return target;
}

int packetc2w_req_relieve_verify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_relieve_verify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_relieve_verify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_relieve_verify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_relieve_verify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_relieve_verify::MergeFrom(const packetc2w_req_relieve_verify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_relieve_verify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_relieve_verify::CopyFrom(const packetc2w_req_relieve_verify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_relieve_verify::IsInitialized() const {

  return true;
}

void packetc2w_req_relieve_verify::Swap(packetc2w_req_relieve_verify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_relieve_verify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_relieve_verify_descriptor_;
  metadata.reflection = packetc2w_req_relieve_verify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_relieve_verify_result::kPacketIdFieldNumber;
const int packetw2c_req_relieve_verify_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_relieve_verify_result::packetw2c_req_relieve_verify_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_req_relieve_verify_result)
}

void packetw2c_req_relieve_verify_result::InitAsDefaultInstance() {
}

packetw2c_req_relieve_verify_result::packetw2c_req_relieve_verify_result(const packetw2c_req_relieve_verify_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_req_relieve_verify_result)
}

void packetw2c_req_relieve_verify_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7577;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_relieve_verify_result::~packetw2c_req_relieve_verify_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_req_relieve_verify_result)
  SharedDtor();
}

void packetw2c_req_relieve_verify_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_relieve_verify_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_relieve_verify_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_relieve_verify_result_descriptor_;
}

const packetw2c_req_relieve_verify_result& packetw2c_req_relieve_verify_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fbind_5fphone_2eproto();
  return *default_instance_;
}

packetw2c_req_relieve_verify_result* packetw2c_req_relieve_verify_result::default_instance_ = NULL;

packetw2c_req_relieve_verify_result* packetw2c_req_relieve_verify_result::New() const {
  return new packetw2c_req_relieve_verify_result;
}

void packetw2c_req_relieve_verify_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7577;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_relieve_verify_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_req_relieve_verify_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_relieve_verify_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_req_relieve_verify_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_req_relieve_verify_result)
  return false;
#undef DO_
}

void packetw2c_req_relieve_verify_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_req_relieve_verify_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_relieve_verify_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_req_relieve_verify_result)
}

::google::protobuf::uint8* packetw2c_req_relieve_verify_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_req_relieve_verify_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_relieve_verify_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_req_relieve_verify_result)
  return target;
}

int packetw2c_req_relieve_verify_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_relieve_verify_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_relieve_verify_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_relieve_verify_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_relieve_verify_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_relieve_verify_result::MergeFrom(const packetw2c_req_relieve_verify_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_relieve_verify_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_relieve_verify_result::CopyFrom(const packetw2c_req_relieve_verify_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_relieve_verify_result::IsInitialized() const {

  return true;
}

void packetw2c_req_relieve_verify_result::Swap(packetw2c_req_relieve_verify_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_relieve_verify_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_relieve_verify_result_descriptor_;
  metadata.reflection = packetw2c_req_relieve_verify_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
