// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_landlord_def.proto

#ifndef PROTOBUF_game_5flandlord_5fdef_2eproto__INCLUDED
#define PROTOBUF_game_5flandlord_5fdef_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace game_landlord_protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5flandlord_5fdef_2eproto();
void protobuf_AssignDesc_game_5flandlord_5fdef_2eproto();
void protobuf_ShutdownFile_game_5flandlord_5fdef_2eproto();


enum e_server_msg_type {
  e_mst_start_c2l = 10000,
  e_mst_c2l_enter_room = 10001,
  e_mst_c2l_get_room_scene_info = 10002,
  e_mst_c2l_check_state = 10003,
  e_mst_c2l_leave_room = 10004,
  e_mst_c2l_rob_landlord = 10005,
  e_mst_c2l_playhand = 10006,
  e_mst_c2l_start_match = 10007,
  e_mst_start_l2c = 15000,
  e_mst_l2c_enter_room = 15001,
  e_mst_l2c_get_room_scene_info = 15002,
  e_mst_l2c_check_state = 15003,
  e_mst_l2c_leave_room = 15004,
  e_mst_l2c_playhand = 15005,
  e_mst_l2c_start_match_result = 15006,
  e_mst_l2c_rob_landlord_result = 15007,
  e_mst_l2c_notice_startgame = 15101,
  e_mst_l2c_notice_playhand = 15102,
  e_mst_l2c_notice_rob_landlord = 15103,
  e_mst_l2c_notice_winlose = 15104,
  e_mst_l2c_notice_rob_landlord_result = 15105,
  e_mst_l2c_notice_who_playhand = 15106,
  e_mst_clend_index = 20000
};
bool e_server_msg_type_IsValid(int value);
const e_server_msg_type e_server_msg_type_MIN = e_mst_start_c2l;
const e_server_msg_type e_server_msg_type_MAX = e_mst_clend_index;
const int e_server_msg_type_ARRAYSIZE = e_server_msg_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_server_msg_type_descriptor();
inline const ::std::string& e_server_msg_type_Name(e_server_msg_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_server_msg_type_descriptor(), value);
}
inline bool e_server_msg_type_Parse(
    const ::std::string& name, e_server_msg_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_server_msg_type>(
    e_server_msg_type_descriptor(), name, value);
}
enum e_server_error_code {
  e_error_code_success = 1,
  e_error_code_failed = 2,
  e_error_code_not_enough_money = 3
};
bool e_server_error_code_IsValid(int value);
const e_server_error_code e_server_error_code_MIN = e_error_code_success;
const e_server_error_code e_server_error_code_MAX = e_error_code_not_enough_money;
const int e_server_error_code_ARRAYSIZE = e_server_error_code_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_server_error_code_descriptor();
inline const ::std::string& e_server_error_code_Name(e_server_error_code value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_server_error_code_descriptor(), value);
}
inline bool e_server_error_code_Parse(
    const ::std::string& name, e_server_error_code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_server_error_code>(
    e_server_error_code_descriptor(), name, value);
}
enum e_game_state {
  e_game_state_none = 0,
  e_game_state_matching = 1,
  e_game_state_startgame = 2,
  e_game_state_sendcarding = 3,
  e_game_state_robLandlore = 4,
  e_game_state_playhand = 5,
  e_game_state_award = 6
};
bool e_game_state_IsValid(int value);
const e_game_state e_game_state_MIN = e_game_state_none;
const e_game_state e_game_state_MAX = e_game_state_award;
const int e_game_state_ARRAYSIZE = e_game_state_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_game_state_descriptor();
inline const ::std::string& e_game_state_Name(e_game_state value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_game_state_descriptor(), value);
}
inline bool e_game_state_Parse(
    const ::std::string& name, e_game_state* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_game_state>(
    e_game_state_descriptor(), name, value);
}
enum e_player_game_state {
  e_player_game_state_none = 0,
  e_player_game_state_matching = 1,
  e_player_game_state_sendcarding = 2,
  e_player_game_state_robLandlord = 3,
  e_player_game_state_other_robLandlord = 4,
  e_player_game_state_playhanding = 5,
  e_player_game_state_other_playhanding = 6,
  e_player_game_state_awarding = 7
};
bool e_player_game_state_IsValid(int value);
const e_player_game_state e_player_game_state_MIN = e_player_game_state_none;
const e_player_game_state e_player_game_state_MAX = e_player_game_state_awarding;
const int e_player_game_state_ARRAYSIZE = e_player_game_state_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_player_game_state_descriptor();
inline const ::std::string& e_player_game_state_Name(e_player_game_state value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_player_game_state_descriptor(), value);
}
inline bool e_player_game_state_Parse(
    const ::std::string& name, e_player_game_state* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_player_game_state>(
    e_player_game_state_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace game_landlord_protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::game_landlord_protocol::e_server_msg_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_landlord_protocol::e_server_msg_type>() {
  return ::game_landlord_protocol::e_server_msg_type_descriptor();
}
template <> struct is_proto_enum< ::game_landlord_protocol::e_server_error_code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_landlord_protocol::e_server_error_code>() {
  return ::game_landlord_protocol::e_server_error_code_descriptor();
}
template <> struct is_proto_enum< ::game_landlord_protocol::e_game_state> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_landlord_protocol::e_game_state>() {
  return ::game_landlord_protocol::e_game_state_descriptor();
}
template <> struct is_proto_enum< ::game_landlord_protocol::e_player_game_state> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_landlord_protocol::e_player_game_state>() {
  return ::game_landlord_protocol::e_player_game_state_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5flandlord_5fdef_2eproto__INCLUDED
