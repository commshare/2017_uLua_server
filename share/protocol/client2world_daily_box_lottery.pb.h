// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_daily_box_lottery.proto

#ifndef PROTOBUF_client2world_5fdaily_5fbox_5flottery_2eproto__INCLUDED
#define PROTOBUF_client2world_5fdaily_5fbox_5flottery_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5fdaily_5fbox_5flottery_2eproto();
void protobuf_AssignDesc_client2world_5fdaily_5fbox_5flottery_2eproto();
void protobuf_ShutdownFile_client2world_5fdaily_5fbox_5flottery_2eproto();

class packetc2w_req_lottery_box;
class packetw2c_req_lottery_box_result;
class packetc2w_thankyou_exchange_ticket;
class packetw2c_thankyou_exchange_ticket_result;

// ===================================================================

class packetc2w_req_lottery_box : public ::google::protobuf::Message {
 public:
  packetc2w_req_lottery_box();
  virtual ~packetc2w_req_lottery_box();

  packetc2w_req_lottery_box(const packetc2w_req_lottery_box& from);

  inline packetc2w_req_lottery_box& operator=(const packetc2w_req_lottery_box& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_lottery_box& default_instance();

  void Swap(packetc2w_req_lottery_box* other);

  // implements Message ----------------------------------------------

  packetc2w_req_lottery_box* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_lottery_box& from);
  void MergeFrom(const packetc2w_req_lottery_box& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_lottery_box];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 boxIndex = 2;
  inline bool has_boxindex() const;
  inline void clear_boxindex();
  static const int kBoxIndexFieldNumber = 2;
  inline ::google::protobuf::int32 boxindex() const;
  inline void set_boxindex(::google::protobuf::int32 value);

  // optional bool useTicket = 3;
  inline bool has_useticket() const;
  inline void clear_useticket();
  static const int kUseTicketFieldNumber = 3;
  inline bool useticket() const;
  inline void set_useticket(bool value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_lottery_box)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_boxindex();
  inline void clear_has_boxindex();
  inline void set_has_useticket();
  inline void clear_has_useticket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 boxindex_;
  bool useticket_;
  friend void  protobuf_AddDesc_client2world_5fdaily_5fbox_5flottery_2eproto();
  friend void protobuf_AssignDesc_client2world_5fdaily_5fbox_5flottery_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fdaily_5fbox_5flottery_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_lottery_box* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_lottery_box_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_lottery_box_result();
  virtual ~packetw2c_req_lottery_box_result();

  packetw2c_req_lottery_box_result(const packetw2c_req_lottery_box_result& from);

  inline packetw2c_req_lottery_box_result& operator=(const packetw2c_req_lottery_box_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_lottery_box_result& default_instance();

  void Swap(packetw2c_req_lottery_box_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_lottery_box_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_lottery_box_result& from);
  void MergeFrom(const packetw2c_req_lottery_box_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_lottery_box_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional bool useTicket = 3;
  inline bool has_useticket() const;
  inline void clear_useticket();
  static const int kUseTicketFieldNumber = 3;
  inline bool useticket() const;
  inline void set_useticket(bool value);

  // optional int32 rewardType = 4;
  inline bool has_rewardtype() const;
  inline void clear_rewardtype();
  static const int kRewardTypeFieldNumber = 4;
  inline ::google::protobuf::int32 rewardtype() const;
  inline void set_rewardtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_lottery_box_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_useticket();
  inline void clear_has_useticket();
  inline void set_has_rewardtype();
  inline void clear_has_rewardtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  bool useticket_;
  ::google::protobuf::int32 rewardtype_;
  friend void  protobuf_AddDesc_client2world_5fdaily_5fbox_5flottery_2eproto();
  friend void protobuf_AssignDesc_client2world_5fdaily_5fbox_5flottery_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fdaily_5fbox_5flottery_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_lottery_box_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_thankyou_exchange_ticket : public ::google::protobuf::Message {
 public:
  packetc2w_thankyou_exchange_ticket();
  virtual ~packetc2w_thankyou_exchange_ticket();

  packetc2w_thankyou_exchange_ticket(const packetc2w_thankyou_exchange_ticket& from);

  inline packetc2w_thankyou_exchange_ticket& operator=(const packetc2w_thankyou_exchange_ticket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_thankyou_exchange_ticket& default_instance();

  void Swap(packetc2w_thankyou_exchange_ticket* other);

  // implements Message ----------------------------------------------

  packetc2w_thankyou_exchange_ticket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_thankyou_exchange_ticket& from);
  void MergeFrom(const packetc2w_thankyou_exchange_ticket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_thankyou_exchange_ticket];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_thankyou_exchange_ticket)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fdaily_5fbox_5flottery_2eproto();
  friend void protobuf_AssignDesc_client2world_5fdaily_5fbox_5flottery_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fdaily_5fbox_5flottery_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_thankyou_exchange_ticket* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_thankyou_exchange_ticket_result : public ::google::protobuf::Message {
 public:
  packetw2c_thankyou_exchange_ticket_result();
  virtual ~packetw2c_thankyou_exchange_ticket_result();

  packetw2c_thankyou_exchange_ticket_result(const packetw2c_thankyou_exchange_ticket_result& from);

  inline packetw2c_thankyou_exchange_ticket_result& operator=(const packetw2c_thankyou_exchange_ticket_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_thankyou_exchange_ticket_result& default_instance();

  void Swap(packetw2c_thankyou_exchange_ticket_result* other);

  // implements Message ----------------------------------------------

  packetw2c_thankyou_exchange_ticket_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_thankyou_exchange_ticket_result& from);
  void MergeFrom(const packetw2c_thankyou_exchange_ticket_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_thankyou_exchange_ticket_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_thankyou_exchange_ticket_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fdaily_5fbox_5flottery_2eproto();
  friend void protobuf_AssignDesc_client2world_5fdaily_5fbox_5flottery_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fdaily_5fbox_5flottery_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_thankyou_exchange_ticket_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2w_req_lottery_box

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_lottery_box];
inline bool packetc2w_req_lottery_box::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_lottery_box::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_lottery_box::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_lottery_box::clear_packet_id() {
  packet_id_ = 5052;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_lottery_box::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_lottery_box.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_lottery_box::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_lottery_box.packet_id)
}

// optional int32 boxIndex = 2;
inline bool packetc2w_req_lottery_box::has_boxindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_req_lottery_box::set_has_boxindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_req_lottery_box::clear_has_boxindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_req_lottery_box::clear_boxindex() {
  boxindex_ = 0;
  clear_has_boxindex();
}
inline ::google::protobuf::int32 packetc2w_req_lottery_box::boxindex() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_lottery_box.boxIndex)
  return boxindex_;
}
inline void packetc2w_req_lottery_box::set_boxindex(::google::protobuf::int32 value) {
  set_has_boxindex();
  boxindex_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_lottery_box.boxIndex)
}

// optional bool useTicket = 3;
inline bool packetc2w_req_lottery_box::has_useticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_req_lottery_box::set_has_useticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_req_lottery_box::clear_has_useticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_req_lottery_box::clear_useticket() {
  useticket_ = false;
  clear_has_useticket();
}
inline bool packetc2w_req_lottery_box::useticket() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_lottery_box.useTicket)
  return useticket_;
}
inline void packetc2w_req_lottery_box::set_useticket(bool value) {
  set_has_useticket();
  useticket_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_lottery_box.useTicket)
}

// -------------------------------------------------------------------

// packetw2c_req_lottery_box_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_lottery_box_result];
inline bool packetw2c_req_lottery_box_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_lottery_box_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_lottery_box_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_lottery_box_result::clear_packet_id() {
  packet_id_ = 7555;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_lottery_box_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_lottery_box_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_lottery_box_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_lottery_box_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_req_lottery_box_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_req_lottery_box_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_req_lottery_box_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_req_lottery_box_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_req_lottery_box_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_lottery_box_result.result)
  return result_;
}
inline void packetw2c_req_lottery_box_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_lottery_box_result.result)
}

// optional bool useTicket = 3;
inline bool packetw2c_req_lottery_box_result::has_useticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_req_lottery_box_result::set_has_useticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_req_lottery_box_result::clear_has_useticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_req_lottery_box_result::clear_useticket() {
  useticket_ = false;
  clear_has_useticket();
}
inline bool packetw2c_req_lottery_box_result::useticket() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_lottery_box_result.useTicket)
  return useticket_;
}
inline void packetw2c_req_lottery_box_result::set_useticket(bool value) {
  set_has_useticket();
  useticket_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_lottery_box_result.useTicket)
}

// optional int32 rewardType = 4;
inline bool packetw2c_req_lottery_box_result::has_rewardtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_req_lottery_box_result::set_has_rewardtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_req_lottery_box_result::clear_has_rewardtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_req_lottery_box_result::clear_rewardtype() {
  rewardtype_ = 0;
  clear_has_rewardtype();
}
inline ::google::protobuf::int32 packetw2c_req_lottery_box_result::rewardtype() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_lottery_box_result.rewardType)
  return rewardtype_;
}
inline void packetw2c_req_lottery_box_result::set_rewardtype(::google::protobuf::int32 value) {
  set_has_rewardtype();
  rewardtype_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_lottery_box_result.rewardType)
}

// -------------------------------------------------------------------

// packetc2w_thankyou_exchange_ticket

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_thankyou_exchange_ticket];
inline bool packetc2w_thankyou_exchange_ticket::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_thankyou_exchange_ticket::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_thankyou_exchange_ticket::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_thankyou_exchange_ticket::clear_packet_id() {
  packet_id_ = 5053;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_thankyou_exchange_ticket::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_thankyou_exchange_ticket.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_thankyou_exchange_ticket::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_thankyou_exchange_ticket.packet_id)
}

// -------------------------------------------------------------------

// packetw2c_thankyou_exchange_ticket_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_thankyou_exchange_ticket_result];
inline bool packetw2c_thankyou_exchange_ticket_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_thankyou_exchange_ticket_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_thankyou_exchange_ticket_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_thankyou_exchange_ticket_result::clear_packet_id() {
  packet_id_ = 7556;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_thankyou_exchange_ticket_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_thankyou_exchange_ticket_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_thankyou_exchange_ticket_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_thankyou_exchange_ticket_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_thankyou_exchange_ticket_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_thankyou_exchange_ticket_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_thankyou_exchange_ticket_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_thankyou_exchange_ticket_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_thankyou_exchange_ticket_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_thankyou_exchange_ticket_result.result)
  return result_;
}
inline void packetw2c_thankyou_exchange_ticket_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_thankyou_exchange_ticket_result.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5fdaily_5fbox_5flottery_2eproto__INCLUDED
