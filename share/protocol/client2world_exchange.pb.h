// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_exchange.proto

#ifndef PROTOBUF_client2world_5fexchange_2eproto__INCLUDED
#define PROTOBUF_client2world_5fexchange_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5fexchange_2eproto();
void protobuf_AssignDesc_client2world_5fexchange_2eproto();
void protobuf_ShutdownFile_client2world_5fexchange_2eproto();

class packetc2w_exchange;
class packetw2c_exchange_result;
class packetc2w_get_exchange_state;
class ExchangeInfo;
class packetw2c_get_exchange_state_result;
class packetc2w_shopping;
class packetw2c_shopping_result;

// ===================================================================

class packetc2w_exchange : public ::google::protobuf::Message {
 public:
  packetc2w_exchange();
  virtual ~packetc2w_exchange();

  packetc2w_exchange(const packetc2w_exchange& from);

  inline packetc2w_exchange& operator=(const packetc2w_exchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_exchange& default_instance();

  void Swap(packetc2w_exchange* other);

  // implements Message ----------------------------------------------

  packetc2w_exchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_exchange& from);
  void MergeFrom(const packetc2w_exchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_exchange];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 exchangeId = 2;
  inline bool has_exchangeid() const;
  inline void clear_exchangeid();
  static const int kExchangeIdFieldNumber = 2;
  inline ::google::protobuf::int32 exchangeid() const;
  inline void set_exchangeid(::google::protobuf::int32 value);

  // optional string phone = 3;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 3;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_exchange)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_exchangeid();
  inline void clear_has_exchangeid();
  inline void set_has_phone();
  inline void clear_has_phone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 exchangeid_;
  ::std::string* phone_;
  friend void  protobuf_AddDesc_client2world_5fexchange_2eproto();
  friend void protobuf_AssignDesc_client2world_5fexchange_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fexchange_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_exchange* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_exchange_result : public ::google::protobuf::Message {
 public:
  packetw2c_exchange_result();
  virtual ~packetw2c_exchange_result();

  packetw2c_exchange_result(const packetw2c_exchange_result& from);

  inline packetw2c_exchange_result& operator=(const packetw2c_exchange_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_exchange_result& default_instance();

  void Swap(packetw2c_exchange_result* other);

  // implements Message ----------------------------------------------

  packetw2c_exchange_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_exchange_result& from);
  void MergeFrom(const packetw2c_exchange_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_exchange_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 exchangeId = 2;
  inline bool has_exchangeid() const;
  inline void clear_exchangeid();
  static const int kExchangeIdFieldNumber = 2;
  inline ::google::protobuf::int32 exchangeid() const;
  inline void set_exchangeid(::google::protobuf::int32 value);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_exchange_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_exchangeid();
  inline void clear_has_exchangeid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 exchangeid_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fexchange_2eproto();
  friend void protobuf_AssignDesc_client2world_5fexchange_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fexchange_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_exchange_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_get_exchange_state : public ::google::protobuf::Message {
 public:
  packetc2w_get_exchange_state();
  virtual ~packetc2w_get_exchange_state();

  packetc2w_get_exchange_state(const packetc2w_get_exchange_state& from);

  inline packetc2w_get_exchange_state& operator=(const packetc2w_get_exchange_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_get_exchange_state& default_instance();

  void Swap(packetc2w_get_exchange_state* other);

  // implements Message ----------------------------------------------

  packetc2w_get_exchange_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_get_exchange_state& from);
  void MergeFrom(const packetc2w_get_exchange_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_exchange_state];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_get_exchange_state)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fexchange_2eproto();
  friend void protobuf_AssignDesc_client2world_5fexchange_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fexchange_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_get_exchange_state* default_instance_;
};
// -------------------------------------------------------------------

class ExchangeInfo : public ::google::protobuf::Message {
 public:
  ExchangeInfo();
  virtual ~ExchangeInfo();

  ExchangeInfo(const ExchangeInfo& from);

  inline ExchangeInfo& operator=(const ExchangeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeInfo& default_instance();

  void Swap(ExchangeInfo* other);

  // implements Message ----------------------------------------------

  ExchangeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeInfo& from);
  void MergeFrom(const ExchangeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 chgId = 2;
  inline bool has_chgid() const;
  inline void clear_chgid();
  static const int kChgIdFieldNumber = 2;
  inline ::google::protobuf::int32 chgid() const;
  inline void set_chgid(::google::protobuf::int32 value);

  // optional bool isReceive = 3;
  inline bool has_isreceive() const;
  inline void clear_isreceive();
  static const int kIsReceiveFieldNumber = 3;
  inline bool isreceive() const;
  inline void set_isreceive(bool value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.ExchangeInfo)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_chgid();
  inline void clear_has_chgid();
  inline void set_has_isreceive();
  inline void clear_has_isreceive();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 chgid_;
  bool isreceive_;
  friend void  protobuf_AddDesc_client2world_5fexchange_2eproto();
  friend void protobuf_AssignDesc_client2world_5fexchange_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fexchange_2eproto();

  void InitAsDefaultInstance();
  static ExchangeInfo* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_get_exchange_state_result : public ::google::protobuf::Message {
 public:
  packetw2c_get_exchange_state_result();
  virtual ~packetw2c_get_exchange_state_result();

  packetw2c_get_exchange_state_result(const packetw2c_get_exchange_state_result& from);

  inline packetw2c_get_exchange_state_result& operator=(const packetw2c_get_exchange_state_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_get_exchange_state_result& default_instance();

  void Swap(packetw2c_get_exchange_state_result* other);

  // implements Message ----------------------------------------------

  packetw2c_get_exchange_state_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_get_exchange_state_result& from);
  void MergeFrom(const packetw2c_get_exchange_state_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_exchange_state_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.ExchangeInfo infoList = 2;
  inline int infolist_size() const;
  inline void clear_infolist();
  static const int kInfoListFieldNumber = 2;
  inline const ::client2world_protocols::ExchangeInfo& infolist(int index) const;
  inline ::client2world_protocols::ExchangeInfo* mutable_infolist(int index);
  inline ::client2world_protocols::ExchangeInfo* add_infolist();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::ExchangeInfo >&
      infolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::ExchangeInfo >*
      mutable_infolist();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_get_exchange_state_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::ExchangeInfo > infolist_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fexchange_2eproto();
  friend void protobuf_AssignDesc_client2world_5fexchange_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fexchange_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_get_exchange_state_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_shopping : public ::google::protobuf::Message {
 public:
  packetc2w_shopping();
  virtual ~packetc2w_shopping();

  packetc2w_shopping(const packetc2w_shopping& from);

  inline packetc2w_shopping& operator=(const packetc2w_shopping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_shopping& default_instance();

  void Swap(packetc2w_shopping* other);

  // implements Message ----------------------------------------------

  packetc2w_shopping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_shopping& from);
  void MergeFrom(const packetc2w_shopping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_shopping];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 shopid = 2;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopidFieldNumber = 2;
  inline ::google::protobuf::int32 shopid() const;
  inline void set_shopid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_shopping)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_shopid();
  inline void clear_has_shopid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 shopid_;
  friend void  protobuf_AddDesc_client2world_5fexchange_2eproto();
  friend void protobuf_AssignDesc_client2world_5fexchange_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fexchange_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_shopping* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_shopping_result : public ::google::protobuf::Message {
 public:
  packetw2c_shopping_result();
  virtual ~packetw2c_shopping_result();

  packetw2c_shopping_result(const packetw2c_shopping_result& from);

  inline packetw2c_shopping_result& operator=(const packetw2c_shopping_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_shopping_result& default_instance();

  void Swap(packetw2c_shopping_result* other);

  // implements Message ----------------------------------------------

  packetw2c_shopping_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_shopping_result& from);
  void MergeFrom(const packetw2c_shopping_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_shopping_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 shopid = 2;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopidFieldNumber = 2;
  inline ::google::protobuf::int32 shopid() const;
  inline void set_shopid(::google::protobuf::int32 value);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_shopping_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_shopid();
  inline void clear_has_shopid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 shopid_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fexchange_2eproto();
  friend void protobuf_AssignDesc_client2world_5fexchange_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fexchange_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_shopping_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2w_exchange

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_exchange];
inline bool packetc2w_exchange::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_exchange::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_exchange::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_exchange::clear_packet_id() {
  packet_id_ = 5022;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_exchange::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_exchange.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_exchange::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_exchange.packet_id)
}

// optional int32 exchangeId = 2;
inline bool packetc2w_exchange::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_exchange::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_exchange::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_exchange::clear_exchangeid() {
  exchangeid_ = 0;
  clear_has_exchangeid();
}
inline ::google::protobuf::int32 packetc2w_exchange::exchangeid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_exchange.exchangeId)
  return exchangeid_;
}
inline void packetc2w_exchange::set_exchangeid(::google::protobuf::int32 value) {
  set_has_exchangeid();
  exchangeid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_exchange.exchangeId)
}

// optional string phone = 3;
inline bool packetc2w_exchange::has_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_exchange::set_has_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_exchange::clear_has_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_exchange::clear_phone() {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& packetc2w_exchange::phone() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_exchange.phone)
  return *phone_;
}
inline void packetc2w_exchange::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_exchange.phone)
}
inline void packetc2w_exchange::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_exchange.phone)
}
inline void packetc2w_exchange::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_exchange.phone)
}
inline ::std::string* packetc2w_exchange::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    phone_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_exchange.phone)
  return phone_;
}
inline ::std::string* packetc2w_exchange::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_exchange::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_exchange.phone)
}

// -------------------------------------------------------------------

// packetw2c_exchange_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_exchange_result];
inline bool packetw2c_exchange_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_exchange_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_exchange_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_exchange_result::clear_packet_id() {
  packet_id_ = 7524;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_exchange_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_exchange_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_exchange_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_exchange_result.packet_id)
}

// optional int32 exchangeId = 2;
inline bool packetw2c_exchange_result::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_exchange_result::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_exchange_result::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_exchange_result::clear_exchangeid() {
  exchangeid_ = 0;
  clear_has_exchangeid();
}
inline ::google::protobuf::int32 packetw2c_exchange_result::exchangeid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_exchange_result.exchangeId)
  return exchangeid_;
}
inline void packetw2c_exchange_result::set_exchangeid(::google::protobuf::int32 value) {
  set_has_exchangeid();
  exchangeid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_exchange_result.exchangeId)
}

// optional int32 result = 3;
inline bool packetw2c_exchange_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_exchange_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_exchange_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_exchange_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_exchange_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_exchange_result.result)
  return result_;
}
inline void packetw2c_exchange_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_exchange_result.result)
}

// -------------------------------------------------------------------

// packetc2w_get_exchange_state

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_exchange_state];
inline bool packetc2w_get_exchange_state::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_get_exchange_state::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_get_exchange_state::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_get_exchange_state::clear_packet_id() {
  packet_id_ = 5047;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_get_exchange_state::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_get_exchange_state.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_get_exchange_state::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_get_exchange_state.packet_id)
}

// -------------------------------------------------------------------

// ExchangeInfo

// optional int32 time = 1;
inline bool ExchangeInfo::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExchangeInfo::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExchangeInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExchangeInfo::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ExchangeInfo::time() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.ExchangeInfo.time)
  return time_;
}
inline void ExchangeInfo::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.ExchangeInfo.time)
}

// optional int32 chgId = 2;
inline bool ExchangeInfo::has_chgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExchangeInfo::set_has_chgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExchangeInfo::clear_has_chgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExchangeInfo::clear_chgid() {
  chgid_ = 0;
  clear_has_chgid();
}
inline ::google::protobuf::int32 ExchangeInfo::chgid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.ExchangeInfo.chgId)
  return chgid_;
}
inline void ExchangeInfo::set_chgid(::google::protobuf::int32 value) {
  set_has_chgid();
  chgid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.ExchangeInfo.chgId)
}

// optional bool isReceive = 3;
inline bool ExchangeInfo::has_isreceive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExchangeInfo::set_has_isreceive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExchangeInfo::clear_has_isreceive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExchangeInfo::clear_isreceive() {
  isreceive_ = false;
  clear_has_isreceive();
}
inline bool ExchangeInfo::isreceive() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.ExchangeInfo.isReceive)
  return isreceive_;
}
inline void ExchangeInfo::set_isreceive(bool value) {
  set_has_isreceive();
  isreceive_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.ExchangeInfo.isReceive)
}

// -------------------------------------------------------------------

// packetw2c_get_exchange_state_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_exchange_state_result];
inline bool packetw2c_get_exchange_state_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_get_exchange_state_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_get_exchange_state_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_get_exchange_state_result::clear_packet_id() {
  packet_id_ = 7551;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_get_exchange_state_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_exchange_state_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_get_exchange_state_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_get_exchange_state_result.packet_id)
}

// repeated .client2world_protocols.ExchangeInfo infoList = 2;
inline int packetw2c_get_exchange_state_result::infolist_size() const {
  return infolist_.size();
}
inline void packetw2c_get_exchange_state_result::clear_infolist() {
  infolist_.Clear();
}
inline const ::client2world_protocols::ExchangeInfo& packetw2c_get_exchange_state_result::infolist(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_exchange_state_result.infoList)
  return infolist_.Get(index);
}
inline ::client2world_protocols::ExchangeInfo* packetw2c_get_exchange_state_result::mutable_infolist(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_get_exchange_state_result.infoList)
  return infolist_.Mutable(index);
}
inline ::client2world_protocols::ExchangeInfo* packetw2c_get_exchange_state_result::add_infolist() {
  // @@protoc_insertion_point(field_add:client2world_protocols.packetw2c_get_exchange_state_result.infoList)
  return infolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::ExchangeInfo >&
packetw2c_get_exchange_state_result::infolist() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.packetw2c_get_exchange_state_result.infoList)
  return infolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::ExchangeInfo >*
packetw2c_get_exchange_state_result::mutable_infolist() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.packetw2c_get_exchange_state_result.infoList)
  return &infolist_;
}

// -------------------------------------------------------------------

// packetc2w_shopping

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_shopping];
inline bool packetc2w_shopping::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_shopping::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_shopping::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_shopping::clear_packet_id() {
  packet_id_ = 5069;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_shopping::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_shopping.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_shopping::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_shopping.packet_id)
}

// optional int32 shopid = 2;
inline bool packetc2w_shopping::has_shopid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_shopping::set_has_shopid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_shopping::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_shopping::clear_shopid() {
  shopid_ = 0;
  clear_has_shopid();
}
inline ::google::protobuf::int32 packetc2w_shopping::shopid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_shopping.shopid)
  return shopid_;
}
inline void packetc2w_shopping::set_shopid(::google::protobuf::int32 value) {
  set_has_shopid();
  shopid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_shopping.shopid)
}

// -------------------------------------------------------------------

// packetw2c_shopping_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_shopping_result];
inline bool packetw2c_shopping_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_shopping_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_shopping_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_shopping_result::clear_packet_id() {
  packet_id_ = 7575;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_shopping_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_shopping_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_shopping_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_shopping_result.packet_id)
}

// optional int32 shopid = 2;
inline bool packetw2c_shopping_result::has_shopid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_shopping_result::set_has_shopid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_shopping_result::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_shopping_result::clear_shopid() {
  shopid_ = 0;
  clear_has_shopid();
}
inline ::google::protobuf::int32 packetw2c_shopping_result::shopid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_shopping_result.shopid)
  return shopid_;
}
inline void packetw2c_shopping_result::set_shopid(::google::protobuf::int32 value) {
  set_has_shopid();
  shopid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_shopping_result.shopid)
}

// optional int32 result = 3;
inline bool packetw2c_shopping_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_shopping_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_shopping_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_shopping_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_shopping_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_shopping_result.result)
  return result_;
}
inline void packetw2c_shopping_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_shopping_result.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5fexchange_2eproto__INCLUDED
