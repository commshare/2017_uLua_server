// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_dial_lottery.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_dial_lottery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2w_req_dial_lottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_dial_lottery_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_dial_lottery_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_dial_lottery_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_dial_lottery_flag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_dial_lottery_flag_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_dial_lottery_flag_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_dial_lottery_flag_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_month_card_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_month_card_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_month_card_reward_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_month_card_reward_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fdial_5flottery_2eproto() {
  protobuf_AddDesc_client2world_5fdial_5flottery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_dial_lottery.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2w_req_dial_lottery_descriptor_ = file->message_type(0);
  static const int packetc2w_req_dial_lottery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_dial_lottery, packet_id_),
  };
  packetc2w_req_dial_lottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_dial_lottery_descriptor_,
      packetc2w_req_dial_lottery::default_instance_,
      packetc2w_req_dial_lottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_dial_lottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_dial_lottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_dial_lottery));
  packetw2c_req_dial_lottery_result_descriptor_ = file->message_type(1);
  static const int packetw2c_req_dial_lottery_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_dial_lottery_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_dial_lottery_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_dial_lottery_result, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_dial_lottery_result, hasmonthcardreward_),
  };
  packetw2c_req_dial_lottery_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_dial_lottery_result_descriptor_,
      packetw2c_req_dial_lottery_result::default_instance_,
      packetw2c_req_dial_lottery_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_dial_lottery_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_dial_lottery_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_dial_lottery_result));
  packetc2w_req_dial_lottery_flag_descriptor_ = file->message_type(2);
  static const int packetc2w_req_dial_lottery_flag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_dial_lottery_flag, packet_id_),
  };
  packetc2w_req_dial_lottery_flag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_dial_lottery_flag_descriptor_,
      packetc2w_req_dial_lottery_flag::default_instance_,
      packetc2w_req_dial_lottery_flag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_dial_lottery_flag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_dial_lottery_flag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_dial_lottery_flag));
  packetw2c_req_dial_lottery_flag_result_descriptor_ = file->message_type(3);
  static const int packetw2c_req_dial_lottery_flag_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_dial_lottery_flag_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_dial_lottery_flag_result, islotterytoday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_dial_lottery_flag_result, hassigncount_),
  };
  packetw2c_req_dial_lottery_flag_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_dial_lottery_flag_result_descriptor_,
      packetw2c_req_dial_lottery_flag_result::default_instance_,
      packetw2c_req_dial_lottery_flag_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_dial_lottery_flag_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_dial_lottery_flag_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_dial_lottery_flag_result));
  packetc2w_req_month_card_reward_descriptor_ = file->message_type(4);
  static const int packetc2w_req_month_card_reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_month_card_reward, packet_id_),
  };
  packetc2w_req_month_card_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_month_card_reward_descriptor_,
      packetc2w_req_month_card_reward::default_instance_,
      packetc2w_req_month_card_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_month_card_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_month_card_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_month_card_reward));
  packetw2c_req_month_card_reward_result_descriptor_ = file->message_type(5);
  static const int packetw2c_req_month_card_reward_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_month_card_reward_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_month_card_reward_result, result_),
  };
  packetw2c_req_month_card_reward_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_month_card_reward_result_descriptor_,
      packetw2c_req_month_card_reward_result::default_instance_,
      packetw2c_req_month_card_reward_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_month_card_reward_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_month_card_reward_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_month_card_reward_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fdial_5flottery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_dial_lottery_descriptor_, &packetc2w_req_dial_lottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_dial_lottery_result_descriptor_, &packetw2c_req_dial_lottery_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_dial_lottery_flag_descriptor_, &packetc2w_req_dial_lottery_flag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_dial_lottery_flag_result_descriptor_, &packetw2c_req_dial_lottery_flag_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_month_card_reward_descriptor_, &packetc2w_req_month_card_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_month_card_reward_result_descriptor_, &packetw2c_req_month_card_reward_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fdial_5flottery_2eproto() {
  delete packetc2w_req_dial_lottery::default_instance_;
  delete packetc2w_req_dial_lottery_reflection_;
  delete packetw2c_req_dial_lottery_result::default_instance_;
  delete packetw2c_req_dial_lottery_result_reflection_;
  delete packetc2w_req_dial_lottery_flag::default_instance_;
  delete packetc2w_req_dial_lottery_flag_reflection_;
  delete packetw2c_req_dial_lottery_flag_result::default_instance_;
  delete packetw2c_req_dial_lottery_flag_result_reflection_;
  delete packetc2w_req_month_card_reward::default_instance_;
  delete packetc2w_req_month_card_reward_reflection_;
  delete packetw2c_req_month_card_reward_result::default_instance_;
  delete packetw2c_req_month_card_reward_result_reflection_;
}

void protobuf_AddDesc_client2world_5fdial_5flottery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037client2world_dial_lottery.proto\022\026clien"
    "t2world_protocols\032\033client2world_msg_type"
    ".proto\032\022msg_type_def.proto\032\022msg_info_def"
    ".proto\"v\n\032packetc2w_req_dial_lottery\022X\n\t"
    "packet_id\030\001 \001(\0162).client2world_protocols"
    ".e_server_msg_type:\032e_mst_c2w_req_dial_l"
    "ottery\"\275\001\n!packetw2c_req_dial_lottery_re"
    "sult\022_\n\tpacket_id\030\001 \001(\0162).client2world_p"
    "rotocols.e_server_msg_type:!e_mst_w2c_re"
    "q_dial_lottery_result\022\016\n\006result\030\002 \001(\005\022\013\n"
    "\003num\030\003 \001(\005\022\032\n\022hasMonthCardReward\030\004 \001(\010\"\200"
    "\001\n\037packetc2w_req_dial_lottery_flag\022]\n\tpa"
    "cket_id\030\001 \001(\0162).client2world_protocols.e"
    "_server_msg_type:\037e_mst_c2w_req_dial_lot"
    "tery_flag\"\274\001\n&packetw2c_req_dial_lottery"
    "_flag_result\022d\n\tpacket_id\030\001 \001(\0162).client"
    "2world_protocols.e_server_msg_type:&e_ms"
    "t_w2c_req_dial_lottery_flag_result\022\026\n\016is"
    "LotteryToday\030\002 \001(\010\022\024\n\014hasSignCount\030\003 \001(\005"
    "\"\200\001\n\037packetc2w_req_month_card_reward\022]\n\t"
    "packet_id\030\001 \001(\0162).client2world_protocols"
    ".e_server_msg_type:\037e_mst_c2w_req_month_"
    "card_reward\"\236\001\n&packetw2c_req_month_card"
    "_reward_result\022d\n\tpacket_id\030\001 \001(\0162).clie"
    "nt2world_protocols.e_server_msg_type:&e_"
    "mst_w2c_req_month_card_reward_result\022\016\n\006"
    "result\030\002 \001(\005", 1052);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_dial_lottery.proto", &protobuf_RegisterTypes);
  packetc2w_req_dial_lottery::default_instance_ = new packetc2w_req_dial_lottery();
  packetw2c_req_dial_lottery_result::default_instance_ = new packetw2c_req_dial_lottery_result();
  packetc2w_req_dial_lottery_flag::default_instance_ = new packetc2w_req_dial_lottery_flag();
  packetw2c_req_dial_lottery_flag_result::default_instance_ = new packetw2c_req_dial_lottery_flag_result();
  packetc2w_req_month_card_reward::default_instance_ = new packetc2w_req_month_card_reward();
  packetw2c_req_month_card_reward_result::default_instance_ = new packetw2c_req_month_card_reward_result();
  packetc2w_req_dial_lottery::default_instance_->InitAsDefaultInstance();
  packetw2c_req_dial_lottery_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_dial_lottery_flag::default_instance_->InitAsDefaultInstance();
  packetw2c_req_dial_lottery_flag_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_month_card_reward::default_instance_->InitAsDefaultInstance();
  packetw2c_req_month_card_reward_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fdial_5flottery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fdial_5flottery_2eproto {
  StaticDescriptorInitializer_client2world_5fdial_5flottery_2eproto() {
    protobuf_AddDesc_client2world_5fdial_5flottery_2eproto();
  }
} static_descriptor_initializer_client2world_5fdial_5flottery_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_dial_lottery::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_dial_lottery::packetc2w_req_dial_lottery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_dial_lottery)
}

void packetc2w_req_dial_lottery::InitAsDefaultInstance() {
}

packetc2w_req_dial_lottery::packetc2w_req_dial_lottery(const packetc2w_req_dial_lottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_dial_lottery)
}

void packetc2w_req_dial_lottery::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5009;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_dial_lottery::~packetc2w_req_dial_lottery() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_dial_lottery)
  SharedDtor();
}

void packetc2w_req_dial_lottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_dial_lottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_dial_lottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_dial_lottery_descriptor_;
}

const packetc2w_req_dial_lottery& packetc2w_req_dial_lottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fdial_5flottery_2eproto();
  return *default_instance_;
}

packetc2w_req_dial_lottery* packetc2w_req_dial_lottery::default_instance_ = NULL;

packetc2w_req_dial_lottery* packetc2w_req_dial_lottery::New() const {
  return new packetc2w_req_dial_lottery;
}

void packetc2w_req_dial_lottery::Clear() {
  packet_id_ = 5009;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_dial_lottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_dial_lottery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_dial_lottery];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_dial_lottery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_dial_lottery)
  return false;
#undef DO_
}

void packetc2w_req_dial_lottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_dial_lottery)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_dial_lottery];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_dial_lottery)
}

::google::protobuf::uint8* packetc2w_req_dial_lottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_dial_lottery)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_dial_lottery];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_dial_lottery)
  return target;
}

int packetc2w_req_dial_lottery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_dial_lottery];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_dial_lottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_dial_lottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_dial_lottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_dial_lottery::MergeFrom(const packetc2w_req_dial_lottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_dial_lottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_dial_lottery::CopyFrom(const packetc2w_req_dial_lottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_dial_lottery::IsInitialized() const {

  return true;
}

void packetc2w_req_dial_lottery::Swap(packetc2w_req_dial_lottery* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_dial_lottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_dial_lottery_descriptor_;
  metadata.reflection = packetc2w_req_dial_lottery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_dial_lottery_result::kPacketIdFieldNumber;
const int packetw2c_req_dial_lottery_result::kResultFieldNumber;
const int packetw2c_req_dial_lottery_result::kNumFieldNumber;
const int packetw2c_req_dial_lottery_result::kHasMonthCardRewardFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_dial_lottery_result::packetw2c_req_dial_lottery_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_req_dial_lottery_result)
}

void packetw2c_req_dial_lottery_result::InitAsDefaultInstance() {
}

packetw2c_req_dial_lottery_result::packetw2c_req_dial_lottery_result(const packetw2c_req_dial_lottery_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_req_dial_lottery_result)
}

void packetw2c_req_dial_lottery_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7508;
  result_ = 0;
  num_ = 0;
  hasmonthcardreward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_dial_lottery_result::~packetw2c_req_dial_lottery_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_req_dial_lottery_result)
  SharedDtor();
}

void packetw2c_req_dial_lottery_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_dial_lottery_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_dial_lottery_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_dial_lottery_result_descriptor_;
}

const packetw2c_req_dial_lottery_result& packetw2c_req_dial_lottery_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fdial_5flottery_2eproto();
  return *default_instance_;
}

packetw2c_req_dial_lottery_result* packetw2c_req_dial_lottery_result::default_instance_ = NULL;

packetw2c_req_dial_lottery_result* packetw2c_req_dial_lottery_result::New() const {
  return new packetw2c_req_dial_lottery_result;
}

void packetw2c_req_dial_lottery_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_req_dial_lottery_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(result_, hasmonthcardreward_);
    packet_id_ = 7508;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_dial_lottery_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_req_dial_lottery_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_dial_lottery_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hasMonthCardReward;
        break;
      }

      // optional bool hasMonthCardReward = 4;
      case 4: {
        if (tag == 32) {
         parse_hasMonthCardReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmonthcardreward_)));
          set_has_hasmonthcardreward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_req_dial_lottery_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_req_dial_lottery_result)
  return false;
#undef DO_
}

void packetw2c_req_dial_lottery_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_req_dial_lottery_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_dial_lottery_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional bool hasMonthCardReward = 4;
  if (has_hasmonthcardreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hasmonthcardreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_req_dial_lottery_result)
}

::google::protobuf::uint8* packetw2c_req_dial_lottery_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_req_dial_lottery_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_dial_lottery_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional bool hasMonthCardReward = 4;
  if (has_hasmonthcardreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hasmonthcardreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_req_dial_lottery_result)
  return target;
}

int packetw2c_req_dial_lottery_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_dial_lottery_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional bool hasMonthCardReward = 4;
    if (has_hasmonthcardreward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_dial_lottery_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_dial_lottery_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_dial_lottery_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_dial_lottery_result::MergeFrom(const packetw2c_req_dial_lottery_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_hasmonthcardreward()) {
      set_hasmonthcardreward(from.hasmonthcardreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_dial_lottery_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_dial_lottery_result::CopyFrom(const packetw2c_req_dial_lottery_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_dial_lottery_result::IsInitialized() const {

  return true;
}

void packetw2c_req_dial_lottery_result::Swap(packetw2c_req_dial_lottery_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(num_, other->num_);
    std::swap(hasmonthcardreward_, other->hasmonthcardreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_dial_lottery_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_dial_lottery_result_descriptor_;
  metadata.reflection = packetw2c_req_dial_lottery_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_dial_lottery_flag::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_dial_lottery_flag::packetc2w_req_dial_lottery_flag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_dial_lottery_flag)
}

void packetc2w_req_dial_lottery_flag::InitAsDefaultInstance() {
}

packetc2w_req_dial_lottery_flag::packetc2w_req_dial_lottery_flag(const packetc2w_req_dial_lottery_flag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_dial_lottery_flag)
}

void packetc2w_req_dial_lottery_flag::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5019;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_dial_lottery_flag::~packetc2w_req_dial_lottery_flag() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_dial_lottery_flag)
  SharedDtor();
}

void packetc2w_req_dial_lottery_flag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_dial_lottery_flag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_dial_lottery_flag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_dial_lottery_flag_descriptor_;
}

const packetc2w_req_dial_lottery_flag& packetc2w_req_dial_lottery_flag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fdial_5flottery_2eproto();
  return *default_instance_;
}

packetc2w_req_dial_lottery_flag* packetc2w_req_dial_lottery_flag::default_instance_ = NULL;

packetc2w_req_dial_lottery_flag* packetc2w_req_dial_lottery_flag::New() const {
  return new packetc2w_req_dial_lottery_flag;
}

void packetc2w_req_dial_lottery_flag::Clear() {
  packet_id_ = 5019;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_dial_lottery_flag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_dial_lottery_flag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_dial_lottery_flag];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_dial_lottery_flag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_dial_lottery_flag)
  return false;
#undef DO_
}

void packetc2w_req_dial_lottery_flag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_dial_lottery_flag)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_dial_lottery_flag];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_dial_lottery_flag)
}

::google::protobuf::uint8* packetc2w_req_dial_lottery_flag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_dial_lottery_flag)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_dial_lottery_flag];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_dial_lottery_flag)
  return target;
}

int packetc2w_req_dial_lottery_flag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_dial_lottery_flag];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_dial_lottery_flag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_dial_lottery_flag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_dial_lottery_flag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_dial_lottery_flag::MergeFrom(const packetc2w_req_dial_lottery_flag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_dial_lottery_flag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_dial_lottery_flag::CopyFrom(const packetc2w_req_dial_lottery_flag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_dial_lottery_flag::IsInitialized() const {

  return true;
}

void packetc2w_req_dial_lottery_flag::Swap(packetc2w_req_dial_lottery_flag* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_dial_lottery_flag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_dial_lottery_flag_descriptor_;
  metadata.reflection = packetc2w_req_dial_lottery_flag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_dial_lottery_flag_result::kPacketIdFieldNumber;
const int packetw2c_req_dial_lottery_flag_result::kIsLotteryTodayFieldNumber;
const int packetw2c_req_dial_lottery_flag_result::kHasSignCountFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_dial_lottery_flag_result::packetw2c_req_dial_lottery_flag_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_req_dial_lottery_flag_result)
}

void packetw2c_req_dial_lottery_flag_result::InitAsDefaultInstance() {
}

packetw2c_req_dial_lottery_flag_result::packetw2c_req_dial_lottery_flag_result(const packetw2c_req_dial_lottery_flag_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_req_dial_lottery_flag_result)
}

void packetw2c_req_dial_lottery_flag_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7520;
  islotterytoday_ = false;
  hassigncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_dial_lottery_flag_result::~packetw2c_req_dial_lottery_flag_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_req_dial_lottery_flag_result)
  SharedDtor();
}

void packetw2c_req_dial_lottery_flag_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_dial_lottery_flag_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_dial_lottery_flag_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_dial_lottery_flag_result_descriptor_;
}

const packetw2c_req_dial_lottery_flag_result& packetw2c_req_dial_lottery_flag_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fdial_5flottery_2eproto();
  return *default_instance_;
}

packetw2c_req_dial_lottery_flag_result* packetw2c_req_dial_lottery_flag_result::default_instance_ = NULL;

packetw2c_req_dial_lottery_flag_result* packetw2c_req_dial_lottery_flag_result::New() const {
  return new packetw2c_req_dial_lottery_flag_result;
}

void packetw2c_req_dial_lottery_flag_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_req_dial_lottery_flag_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(islotterytoday_, hassigncount_);
    packet_id_ = 7520;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_dial_lottery_flag_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_req_dial_lottery_flag_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_dial_lottery_flag_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isLotteryToday;
        break;
      }

      // optional bool isLotteryToday = 2;
      case 2: {
        if (tag == 16) {
         parse_isLotteryToday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islotterytoday_)));
          set_has_islotterytoday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hasSignCount;
        break;
      }

      // optional int32 hasSignCount = 3;
      case 3: {
        if (tag == 24) {
         parse_hasSignCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hassigncount_)));
          set_has_hassigncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_req_dial_lottery_flag_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_req_dial_lottery_flag_result)
  return false;
#undef DO_
}

void packetw2c_req_dial_lottery_flag_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_req_dial_lottery_flag_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_dial_lottery_flag_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional bool isLotteryToday = 2;
  if (has_islotterytoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->islotterytoday(), output);
  }

  // optional int32 hasSignCount = 3;
  if (has_hassigncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hassigncount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_req_dial_lottery_flag_result)
}

::google::protobuf::uint8* packetw2c_req_dial_lottery_flag_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_req_dial_lottery_flag_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_dial_lottery_flag_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional bool isLotteryToday = 2;
  if (has_islotterytoday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->islotterytoday(), target);
  }

  // optional int32 hasSignCount = 3;
  if (has_hassigncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hassigncount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_req_dial_lottery_flag_result)
  return target;
}

int packetw2c_req_dial_lottery_flag_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_dial_lottery_flag_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional bool isLotteryToday = 2;
    if (has_islotterytoday()) {
      total_size += 1 + 1;
    }

    // optional int32 hasSignCount = 3;
    if (has_hassigncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hassigncount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_dial_lottery_flag_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_dial_lottery_flag_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_dial_lottery_flag_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_dial_lottery_flag_result::MergeFrom(const packetw2c_req_dial_lottery_flag_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_islotterytoday()) {
      set_islotterytoday(from.islotterytoday());
    }
    if (from.has_hassigncount()) {
      set_hassigncount(from.hassigncount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_dial_lottery_flag_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_dial_lottery_flag_result::CopyFrom(const packetw2c_req_dial_lottery_flag_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_dial_lottery_flag_result::IsInitialized() const {

  return true;
}

void packetw2c_req_dial_lottery_flag_result::Swap(packetw2c_req_dial_lottery_flag_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(islotterytoday_, other->islotterytoday_);
    std::swap(hassigncount_, other->hassigncount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_dial_lottery_flag_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_dial_lottery_flag_result_descriptor_;
  metadata.reflection = packetw2c_req_dial_lottery_flag_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_month_card_reward::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_month_card_reward::packetc2w_req_month_card_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_month_card_reward)
}

void packetc2w_req_month_card_reward::InitAsDefaultInstance() {
}

packetc2w_req_month_card_reward::packetc2w_req_month_card_reward(const packetc2w_req_month_card_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_month_card_reward)
}

void packetc2w_req_month_card_reward::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5064;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_month_card_reward::~packetc2w_req_month_card_reward() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_month_card_reward)
  SharedDtor();
}

void packetc2w_req_month_card_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_month_card_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_month_card_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_month_card_reward_descriptor_;
}

const packetc2w_req_month_card_reward& packetc2w_req_month_card_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fdial_5flottery_2eproto();
  return *default_instance_;
}

packetc2w_req_month_card_reward* packetc2w_req_month_card_reward::default_instance_ = NULL;

packetc2w_req_month_card_reward* packetc2w_req_month_card_reward::New() const {
  return new packetc2w_req_month_card_reward;
}

void packetc2w_req_month_card_reward::Clear() {
  packet_id_ = 5064;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_month_card_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_month_card_reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_month_card_reward];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_month_card_reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_month_card_reward)
  return false;
#undef DO_
}

void packetc2w_req_month_card_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_month_card_reward)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_month_card_reward];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_month_card_reward)
}

::google::protobuf::uint8* packetc2w_req_month_card_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_month_card_reward)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_month_card_reward];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_month_card_reward)
  return target;
}

int packetc2w_req_month_card_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_month_card_reward];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_month_card_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_month_card_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_month_card_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_month_card_reward::MergeFrom(const packetc2w_req_month_card_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_month_card_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_month_card_reward::CopyFrom(const packetc2w_req_month_card_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_month_card_reward::IsInitialized() const {

  return true;
}

void packetc2w_req_month_card_reward::Swap(packetc2w_req_month_card_reward* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_month_card_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_month_card_reward_descriptor_;
  metadata.reflection = packetc2w_req_month_card_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_month_card_reward_result::kPacketIdFieldNumber;
const int packetw2c_req_month_card_reward_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_month_card_reward_result::packetw2c_req_month_card_reward_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_req_month_card_reward_result)
}

void packetw2c_req_month_card_reward_result::InitAsDefaultInstance() {
}

packetw2c_req_month_card_reward_result::packetw2c_req_month_card_reward_result(const packetw2c_req_month_card_reward_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_req_month_card_reward_result)
}

void packetw2c_req_month_card_reward_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7568;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_month_card_reward_result::~packetw2c_req_month_card_reward_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_req_month_card_reward_result)
  SharedDtor();
}

void packetw2c_req_month_card_reward_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_month_card_reward_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_month_card_reward_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_month_card_reward_result_descriptor_;
}

const packetw2c_req_month_card_reward_result& packetw2c_req_month_card_reward_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fdial_5flottery_2eproto();
  return *default_instance_;
}

packetw2c_req_month_card_reward_result* packetw2c_req_month_card_reward_result::default_instance_ = NULL;

packetw2c_req_month_card_reward_result* packetw2c_req_month_card_reward_result::New() const {
  return new packetw2c_req_month_card_reward_result;
}

void packetw2c_req_month_card_reward_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7568;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_month_card_reward_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_req_month_card_reward_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_month_card_reward_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_req_month_card_reward_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_req_month_card_reward_result)
  return false;
#undef DO_
}

void packetw2c_req_month_card_reward_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_req_month_card_reward_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_month_card_reward_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_req_month_card_reward_result)
}

::google::protobuf::uint8* packetw2c_req_month_card_reward_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_req_month_card_reward_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_month_card_reward_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_req_month_card_reward_result)
  return target;
}

int packetw2c_req_month_card_reward_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_month_card_reward_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_month_card_reward_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_month_card_reward_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_month_card_reward_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_month_card_reward_result::MergeFrom(const packetw2c_req_month_card_reward_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_month_card_reward_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_month_card_reward_result::CopyFrom(const packetw2c_req_month_card_reward_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_month_card_reward_result::IsInitialized() const {

  return true;
}

void packetw2c_req_month_card_reward_result::Swap(packetw2c_req_month_card_reward_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_month_card_reward_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_month_card_reward_result_descriptor_;
  metadata.reflection = packetw2c_req_month_card_reward_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
