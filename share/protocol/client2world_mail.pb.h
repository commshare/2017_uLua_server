// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_mail.proto

#ifndef PROTOBUF_client2world_5fmail_2eproto__INCLUDED
#define PROTOBUF_client2world_5fmail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5fmail_2eproto();
void protobuf_AssignDesc_client2world_5fmail_2eproto();
void protobuf_ShutdownFile_client2world_5fmail_2eproto();

class packetc2w_get_mails;
class mail_info;
class packetw2c_get_mails_result;
class packetc2w_recv_mail_gifts;
class packetw2c_recv_mail_gifts_result;
class packetc2w_send_mail;
class packetw2c_send_mail_result;
class packetc2w_remove_mail;
class packetw2c_remove_mail_result;
class packetw2c_accept_gift_notify;
class packetc2w_req_send_mail_log;
class SendMailLogInfo;
class packetw2c_req_send_mail_log_result;
class packetc2w_remove_mail_log;
class packetw2c_remove_mail_log_result;

// ===================================================================

class packetc2w_get_mails : public ::google::protobuf::Message {
 public:
  packetc2w_get_mails();
  virtual ~packetc2w_get_mails();

  packetc2w_get_mails(const packetc2w_get_mails& from);

  inline packetc2w_get_mails& operator=(const packetc2w_get_mails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_get_mails& default_instance();

  void Swap(packetc2w_get_mails* other);

  // implements Message ----------------------------------------------

  packetc2w_get_mails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_get_mails& from);
  void MergeFrom(const packetc2w_get_mails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_mails];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 lastTime = 2;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 2;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_get_mails)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 lasttime_;
  friend void  protobuf_AddDesc_client2world_5fmail_2eproto();
  friend void protobuf_AssignDesc_client2world_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fmail_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_get_mails* default_instance_;
};
// -------------------------------------------------------------------

class mail_info : public ::google::protobuf::Message {
 public:
  mail_info();
  virtual ~mail_info();

  mail_info(const mail_info& from);

  inline mail_info& operator=(const mail_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mail_info& default_instance();

  void Swap(mail_info* other);

  // implements Message ----------------------------------------------

  mail_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mail_info& from);
  void MergeFrom(const mail_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mailId = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 1;
  inline const ::std::string& mailid() const;
  inline void set_mailid(const ::std::string& value);
  inline void set_mailid(const char* value);
  inline void set_mailid(const char* value, size_t size);
  inline ::std::string* mutable_mailid();
  inline ::std::string* release_mailid();
  inline void set_allocated_mailid(::std::string* mailid);

  // optional int32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string sender = 4;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 4;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional bool isRecvive = 6;
  inline bool has_isrecvive() const;
  inline void clear_isrecvive();
  static const int kIsRecviveFieldNumber = 6;
  inline bool isrecvive() const;
  inline void set_isrecvive(bool value);

  // repeated .msg_info_def.msg_gift gifts = 7;
  inline int gifts_size() const;
  inline void clear_gifts();
  static const int kGiftsFieldNumber = 7;
  inline const ::msg_info_def::msg_gift& gifts(int index) const;
  inline ::msg_info_def::msg_gift* mutable_gifts(int index);
  inline ::msg_info_def::msg_gift* add_gifts();
  inline const ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_gift >&
      gifts() const;
  inline ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_gift >*
      mutable_gifts();

  // optional int32 senderId = 8;
  inline bool has_senderid() const;
  inline void clear_senderid();
  static const int kSenderIdFieldNumber = 8;
  inline ::google::protobuf::int32 senderid() const;
  inline void set_senderid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.mail_info)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_isrecvive();
  inline void clear_has_isrecvive();
  inline void set_has_senderid();
  inline void clear_has_senderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mailid_;
  ::std::string* title_;
  ::std::string* sender_;
  ::google::protobuf::int32 time_;
  bool isrecvive_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_gift > gifts_;
  ::google::protobuf::int32 senderid_;
  friend void  protobuf_AddDesc_client2world_5fmail_2eproto();
  friend void protobuf_AssignDesc_client2world_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fmail_2eproto();

  void InitAsDefaultInstance();
  static mail_info* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_get_mails_result : public ::google::protobuf::Message {
 public:
  packetw2c_get_mails_result();
  virtual ~packetw2c_get_mails_result();

  packetw2c_get_mails_result(const packetw2c_get_mails_result& from);

  inline packetw2c_get_mails_result& operator=(const packetw2c_get_mails_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_get_mails_result& default_instance();

  void Swap(packetw2c_get_mails_result* other);

  // implements Message ----------------------------------------------

  packetw2c_get_mails_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_get_mails_result& from);
  void MergeFrom(const packetw2c_get_mails_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_mails_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 lastTime = 2;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 2;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // repeated .client2world_protocols.mail_info mails = 3;
  inline int mails_size() const;
  inline void clear_mails();
  static const int kMailsFieldNumber = 3;
  inline const ::client2world_protocols::mail_info& mails(int index) const;
  inline ::client2world_protocols::mail_info* mutable_mails(int index);
  inline ::client2world_protocols::mail_info* add_mails();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::mail_info >&
      mails() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::mail_info >*
      mutable_mails();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_get_mails_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 lasttime_;
  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::mail_info > mails_;
  friend void  protobuf_AddDesc_client2world_5fmail_2eproto();
  friend void protobuf_AssignDesc_client2world_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fmail_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_get_mails_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_recv_mail_gifts : public ::google::protobuf::Message {
 public:
  packetc2w_recv_mail_gifts();
  virtual ~packetc2w_recv_mail_gifts();

  packetc2w_recv_mail_gifts(const packetc2w_recv_mail_gifts& from);

  inline packetc2w_recv_mail_gifts& operator=(const packetc2w_recv_mail_gifts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_recv_mail_gifts& default_instance();

  void Swap(packetc2w_recv_mail_gifts* other);

  // implements Message ----------------------------------------------

  packetc2w_recv_mail_gifts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_recv_mail_gifts& from);
  void MergeFrom(const packetc2w_recv_mail_gifts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_recv_mail_gifts];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string mailId = 2;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 2;
  inline const ::std::string& mailid() const;
  inline void set_mailid(const ::std::string& value);
  inline void set_mailid(const char* value);
  inline void set_mailid(const char* value, size_t size);
  inline ::std::string* mutable_mailid();
  inline ::std::string* release_mailid();
  inline void set_allocated_mailid(::std::string* mailid);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_recv_mail_gifts)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_mailid();
  inline void clear_has_mailid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mailid_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fmail_2eproto();
  friend void protobuf_AssignDesc_client2world_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fmail_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_recv_mail_gifts* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_recv_mail_gifts_result : public ::google::protobuf::Message {
 public:
  packetw2c_recv_mail_gifts_result();
  virtual ~packetw2c_recv_mail_gifts_result();

  packetw2c_recv_mail_gifts_result(const packetw2c_recv_mail_gifts_result& from);

  inline packetw2c_recv_mail_gifts_result& operator=(const packetw2c_recv_mail_gifts_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_recv_mail_gifts_result& default_instance();

  void Swap(packetw2c_recv_mail_gifts_result* other);

  // implements Message ----------------------------------------------

  packetw2c_recv_mail_gifts_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_recv_mail_gifts_result& from);
  void MergeFrom(const packetw2c_recv_mail_gifts_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recv_mail_gifts_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string mailId = 2;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 2;
  inline const ::std::string& mailid() const;
  inline void set_mailid(const ::std::string& value);
  inline void set_mailid(const char* value);
  inline void set_mailid(const char* value, size_t size);
  inline ::std::string* mutable_mailid();
  inline ::std::string* release_mailid();
  inline void set_allocated_mailid(::std::string* mailid);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_recv_mail_gifts_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mailid_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fmail_2eproto();
  friend void protobuf_AssignDesc_client2world_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fmail_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_recv_mail_gifts_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_send_mail : public ::google::protobuf::Message {
 public:
  packetc2w_send_mail();
  virtual ~packetc2w_send_mail();

  packetc2w_send_mail(const packetc2w_send_mail& from);

  inline packetc2w_send_mail& operator=(const packetc2w_send_mail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_send_mail& default_instance();

  void Swap(packetc2w_send_mail* other);

  // implements Message ----------------------------------------------

  packetc2w_send_mail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_send_mail& from);
  void MergeFrom(const packetc2w_send_mail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_send_mail];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 toPlayerId = 4;
  inline bool has_toplayerid() const;
  inline void clear_toplayerid();
  static const int kToPlayerIdFieldNumber = 4;
  inline ::google::protobuf::int32 toplayerid() const;
  inline void set_toplayerid(::google::protobuf::int32 value);

  // repeated .msg_info_def.msg_gift gifts = 5;
  inline int gifts_size() const;
  inline void clear_gifts();
  static const int kGiftsFieldNumber = 5;
  inline const ::msg_info_def::msg_gift& gifts(int index) const;
  inline ::msg_info_def::msg_gift* mutable_gifts(int index);
  inline ::msg_info_def::msg_gift* add_gifts();
  inline const ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_gift >&
      gifts() const;
  inline ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_gift >*
      mutable_gifts();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_send_mail)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_toplayerid();
  inline void clear_has_toplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  int packet_id_;
  ::google::protobuf::int32 toplayerid_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_gift > gifts_;
  friend void  protobuf_AddDesc_client2world_5fmail_2eproto();
  friend void protobuf_AssignDesc_client2world_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fmail_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_send_mail* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_send_mail_result : public ::google::protobuf::Message {
 public:
  packetw2c_send_mail_result();
  virtual ~packetw2c_send_mail_result();

  packetw2c_send_mail_result(const packetw2c_send_mail_result& from);

  inline packetw2c_send_mail_result& operator=(const packetw2c_send_mail_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_send_mail_result& default_instance();

  void Swap(packetw2c_send_mail_result* other);

  // implements Message ----------------------------------------------

  packetw2c_send_mail_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_send_mail_result& from);
  void MergeFrom(const packetw2c_send_mail_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_send_mail_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 mailType = 4;
  inline bool has_mailtype() const;
  inline void clear_mailtype();
  static const int kMailTypeFieldNumber = 4;
  inline ::google::protobuf::int32 mailtype() const;
  inline void set_mailtype(::google::protobuf::int32 value);

  // optional string mailId = 5;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 5;
  inline const ::std::string& mailid() const;
  inline void set_mailid(const ::std::string& value);
  inline void set_mailid(const char* value);
  inline void set_mailid(const char* value, size_t size);
  inline ::std::string* mutable_mailid();
  inline ::std::string* release_mailid();
  inline void set_allocated_mailid(::std::string* mailid);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_send_mail_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_mailtype();
  inline void clear_has_mailtype();
  inline void set_has_mailid();
  inline void clear_has_mailid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  ::std::string* mailid_;
  ::google::protobuf::int32 mailtype_;
  friend void  protobuf_AddDesc_client2world_5fmail_2eproto();
  friend void protobuf_AssignDesc_client2world_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fmail_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_send_mail_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_remove_mail : public ::google::protobuf::Message {
 public:
  packetc2w_remove_mail();
  virtual ~packetc2w_remove_mail();

  packetc2w_remove_mail(const packetc2w_remove_mail& from);

  inline packetc2w_remove_mail& operator=(const packetc2w_remove_mail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_remove_mail& default_instance();

  void Swap(packetc2w_remove_mail* other);

  // implements Message ----------------------------------------------

  packetc2w_remove_mail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_remove_mail& from);
  void MergeFrom(const packetc2w_remove_mail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_remove_mail];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string mailId = 2;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 2;
  inline const ::std::string& mailid() const;
  inline void set_mailid(const ::std::string& value);
  inline void set_mailid(const char* value);
  inline void set_mailid(const char* value, size_t size);
  inline ::std::string* mutable_mailid();
  inline ::std::string* release_mailid();
  inline void set_allocated_mailid(::std::string* mailid);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_remove_mail)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_mailid();
  inline void clear_has_mailid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mailid_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fmail_2eproto();
  friend void protobuf_AssignDesc_client2world_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fmail_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_remove_mail* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_remove_mail_result : public ::google::protobuf::Message {
 public:
  packetw2c_remove_mail_result();
  virtual ~packetw2c_remove_mail_result();

  packetw2c_remove_mail_result(const packetw2c_remove_mail_result& from);

  inline packetw2c_remove_mail_result& operator=(const packetw2c_remove_mail_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_remove_mail_result& default_instance();

  void Swap(packetw2c_remove_mail_result* other);

  // implements Message ----------------------------------------------

  packetw2c_remove_mail_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_remove_mail_result& from);
  void MergeFrom(const packetw2c_remove_mail_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_remove_mail_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string mailId = 2;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 2;
  inline const ::std::string& mailid() const;
  inline void set_mailid(const ::std::string& value);
  inline void set_mailid(const char* value);
  inline void set_mailid(const char* value, size_t size);
  inline ::std::string* mutable_mailid();
  inline ::std::string* release_mailid();
  inline void set_allocated_mailid(::std::string* mailid);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_remove_mail_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mailid_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fmail_2eproto();
  friend void protobuf_AssignDesc_client2world_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fmail_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_remove_mail_result* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_accept_gift_notify : public ::google::protobuf::Message {
 public:
  packetw2c_accept_gift_notify();
  virtual ~packetw2c_accept_gift_notify();

  packetw2c_accept_gift_notify(const packetw2c_accept_gift_notify& from);

  inline packetw2c_accept_gift_notify& operator=(const packetw2c_accept_gift_notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_accept_gift_notify& default_instance();

  void Swap(packetw2c_accept_gift_notify* other);

  // implements Message ----------------------------------------------

  packetw2c_accept_gift_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_accept_gift_notify& from);
  void MergeFrom(const packetw2c_accept_gift_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_accept_gift_notify];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_accept_gift_notify)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fmail_2eproto();
  friend void protobuf_AssignDesc_client2world_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fmail_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_accept_gift_notify* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_req_send_mail_log : public ::google::protobuf::Message {
 public:
  packetc2w_req_send_mail_log();
  virtual ~packetc2w_req_send_mail_log();

  packetc2w_req_send_mail_log(const packetc2w_req_send_mail_log& from);

  inline packetc2w_req_send_mail_log& operator=(const packetc2w_req_send_mail_log& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_send_mail_log& default_instance();

  void Swap(packetc2w_req_send_mail_log* other);

  // implements Message ----------------------------------------------

  packetc2w_req_send_mail_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_send_mail_log& from);
  void MergeFrom(const packetc2w_req_send_mail_log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_send_mail_log];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 lastTime = 2;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 2;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_send_mail_log)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 lasttime_;
  friend void  protobuf_AddDesc_client2world_5fmail_2eproto();
  friend void protobuf_AssignDesc_client2world_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fmail_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_send_mail_log* default_instance_;
};
// -------------------------------------------------------------------

class SendMailLogInfo : public ::google::protobuf::Message {
 public:
  SendMailLogInfo();
  virtual ~SendMailLogInfo();

  SendMailLogInfo(const SendMailLogInfo& from);

  inline SendMailLogInfo& operator=(const SendMailLogInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMailLogInfo& default_instance();

  void Swap(SendMailLogInfo* other);

  // implements Message ----------------------------------------------

  SendMailLogInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendMailLogInfo& from);
  void MergeFrom(const SendMailLogInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sendTime = 1;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendTimeFieldNumber = 1;
  inline ::google::protobuf::int32 sendtime() const;
  inline void set_sendtime(::google::protobuf::int32 value);

  // optional int32 firendId = 2;
  inline bool has_firendid() const;
  inline void clear_firendid();
  static const int kFirendIdFieldNumber = 2;
  inline ::google::protobuf::int32 firendid() const;
  inline void set_firendid(::google::protobuf::int32 value);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string mailId = 4;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 4;
  inline const ::std::string& mailid() const;
  inline void set_mailid(const ::std::string& value);
  inline void set_mailid(const char* value);
  inline void set_mailid(const char* value, size_t size);
  inline ::std::string* mutable_mailid();
  inline ::std::string* release_mailid();
  inline void set_allocated_mailid(::std::string* mailid);

  // optional string title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string friendNickName = 6;
  inline bool has_friendnickname() const;
  inline void clear_friendnickname();
  static const int kFriendNickNameFieldNumber = 6;
  inline const ::std::string& friendnickname() const;
  inline void set_friendnickname(const ::std::string& value);
  inline void set_friendnickname(const char* value);
  inline void set_friendnickname(const char* value, size_t size);
  inline ::std::string* mutable_friendnickname();
  inline ::std::string* release_friendnickname();
  inline void set_allocated_friendnickname(::std::string* friendnickname);

  // @@protoc_insertion_point(class_scope:client2world_protocols.SendMailLogInfo)
 private:
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_firendid();
  inline void clear_has_firendid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_friendnickname();
  inline void clear_has_friendnickname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 sendtime_;
  ::google::protobuf::int32 firendid_;
  ::std::string* content_;
  ::std::string* mailid_;
  ::std::string* title_;
  ::std::string* friendnickname_;
  friend void  protobuf_AddDesc_client2world_5fmail_2eproto();
  friend void protobuf_AssignDesc_client2world_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fmail_2eproto();

  void InitAsDefaultInstance();
  static SendMailLogInfo* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_send_mail_log_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_send_mail_log_result();
  virtual ~packetw2c_req_send_mail_log_result();

  packetw2c_req_send_mail_log_result(const packetw2c_req_send_mail_log_result& from);

  inline packetw2c_req_send_mail_log_result& operator=(const packetw2c_req_send_mail_log_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_send_mail_log_result& default_instance();

  void Swap(packetw2c_req_send_mail_log_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_send_mail_log_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_send_mail_log_result& from);
  void MergeFrom(const packetw2c_req_send_mail_log_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_send_mail_log_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.SendMailLogInfo logList = 2;
  inline int loglist_size() const;
  inline void clear_loglist();
  static const int kLogListFieldNumber = 2;
  inline const ::client2world_protocols::SendMailLogInfo& loglist(int index) const;
  inline ::client2world_protocols::SendMailLogInfo* mutable_loglist(int index);
  inline ::client2world_protocols::SendMailLogInfo* add_loglist();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SendMailLogInfo >&
      loglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SendMailLogInfo >*
      mutable_loglist();

  // optional int32 lastTime = 3;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 3;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_send_mail_log_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SendMailLogInfo > loglist_;
  int packet_id_;
  ::google::protobuf::int32 lasttime_;
  friend void  protobuf_AddDesc_client2world_5fmail_2eproto();
  friend void protobuf_AssignDesc_client2world_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fmail_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_send_mail_log_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_remove_mail_log : public ::google::protobuf::Message {
 public:
  packetc2w_remove_mail_log();
  virtual ~packetc2w_remove_mail_log();

  packetc2w_remove_mail_log(const packetc2w_remove_mail_log& from);

  inline packetc2w_remove_mail_log& operator=(const packetc2w_remove_mail_log& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_remove_mail_log& default_instance();

  void Swap(packetc2w_remove_mail_log* other);

  // implements Message ----------------------------------------------

  packetc2w_remove_mail_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_remove_mail_log& from);
  void MergeFrom(const packetc2w_remove_mail_log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_remove_mail_log];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string mailId = 2;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 2;
  inline const ::std::string& mailid() const;
  inline void set_mailid(const ::std::string& value);
  inline void set_mailid(const char* value);
  inline void set_mailid(const char* value, size_t size);
  inline ::std::string* mutable_mailid();
  inline ::std::string* release_mailid();
  inline void set_allocated_mailid(::std::string* mailid);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_remove_mail_log)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_mailid();
  inline void clear_has_mailid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mailid_;
  int packet_id_;
  friend void  protobuf_AddDesc_client2world_5fmail_2eproto();
  friend void protobuf_AssignDesc_client2world_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fmail_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_remove_mail_log* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_remove_mail_log_result : public ::google::protobuf::Message {
 public:
  packetw2c_remove_mail_log_result();
  virtual ~packetw2c_remove_mail_log_result();

  packetw2c_remove_mail_log_result(const packetw2c_remove_mail_log_result& from);

  inline packetw2c_remove_mail_log_result& operator=(const packetw2c_remove_mail_log_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_remove_mail_log_result& default_instance();

  void Swap(packetw2c_remove_mail_log_result* other);

  // implements Message ----------------------------------------------

  packetw2c_remove_mail_log_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_remove_mail_log_result& from);
  void MergeFrom(const packetw2c_remove_mail_log_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_remove_mail_log_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional string mailId = 2;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 2;
  inline const ::std::string& mailid() const;
  inline void set_mailid(const ::std::string& value);
  inline void set_mailid(const char* value);
  inline void set_mailid(const char* value, size_t size);
  inline ::std::string* mutable_mailid();
  inline ::std::string* release_mailid();
  inline void set_allocated_mailid(::std::string* mailid);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_remove_mail_log_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mailid_;
  int packet_id_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_client2world_5fmail_2eproto();
  friend void protobuf_AssignDesc_client2world_5fmail_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fmail_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_remove_mail_log_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2w_get_mails

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_mails];
inline bool packetc2w_get_mails::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_get_mails::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_get_mails::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_get_mails::clear_packet_id() {
  packet_id_ = 5014;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_get_mails::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_get_mails.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_get_mails::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_get_mails.packet_id)
}

// optional int32 lastTime = 2;
inline bool packetc2w_get_mails::has_lasttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_get_mails::set_has_lasttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_get_mails::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_get_mails::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 packetc2w_get_mails::lasttime() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_get_mails.lastTime)
  return lasttime_;
}
inline void packetc2w_get_mails::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_get_mails.lastTime)
}

// -------------------------------------------------------------------

// mail_info

// optional string mailId = 1;
inline bool mail_info::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mail_info::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mail_info::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mail_info::clear_mailid() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_->clear();
  }
  clear_has_mailid();
}
inline const ::std::string& mail_info::mailid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.mail_info.mailId)
  return *mailid_;
}
inline void mail_info::set_mailid(const ::std::string& value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.mail_info.mailId)
}
inline void mail_info::set_mailid(const char* value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.mail_info.mailId)
}
inline void mail_info::set_mailid(const char* value, size_t size) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.mail_info.mailId)
}
inline ::std::string* mail_info::mutable_mailid() {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.mail_info.mailId)
  return mailid_;
}
inline ::std::string* mail_info::release_mailid() {
  clear_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mailid_;
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void mail_info::set_allocated_mailid(::std::string* mailid) {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (mailid) {
    set_has_mailid();
    mailid_ = mailid;
  } else {
    clear_has_mailid();
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.mail_info.mailId)
}

// optional int32 time = 2;
inline bool mail_info::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mail_info::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mail_info::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mail_info::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 mail_info::time() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.mail_info.time)
  return time_;
}
inline void mail_info::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.mail_info.time)
}

// optional string title = 3;
inline bool mail_info::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mail_info::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mail_info::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mail_info::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& mail_info::title() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.mail_info.title)
  return *title_;
}
inline void mail_info::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.mail_info.title)
}
inline void mail_info::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.mail_info.title)
}
inline void mail_info::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.mail_info.title)
}
inline ::std::string* mail_info::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.mail_info.title)
  return title_;
}
inline ::std::string* mail_info::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void mail_info::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.mail_info.title)
}

// optional string sender = 4;
inline bool mail_info::has_sender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mail_info::set_has_sender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mail_info::clear_has_sender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mail_info::clear_sender() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& mail_info::sender() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.mail_info.sender)
  return *sender_;
}
inline void mail_info::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.mail_info.sender)
}
inline void mail_info::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.mail_info.sender)
}
inline void mail_info::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.mail_info.sender)
}
inline ::std::string* mail_info::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.mail_info.sender)
  return sender_;
}
inline ::std::string* mail_info::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void mail_info::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.mail_info.sender)
}

// optional string content = 5;
inline bool mail_info::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mail_info::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mail_info::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mail_info::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& mail_info::content() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.mail_info.content)
  return *content_;
}
inline void mail_info::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.mail_info.content)
}
inline void mail_info::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.mail_info.content)
}
inline void mail_info::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.mail_info.content)
}
inline ::std::string* mail_info::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.mail_info.content)
  return content_;
}
inline ::std::string* mail_info::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void mail_info::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.mail_info.content)
}

// optional bool isRecvive = 6;
inline bool mail_info::has_isrecvive() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mail_info::set_has_isrecvive() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mail_info::clear_has_isrecvive() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mail_info::clear_isrecvive() {
  isrecvive_ = false;
  clear_has_isrecvive();
}
inline bool mail_info::isrecvive() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.mail_info.isRecvive)
  return isrecvive_;
}
inline void mail_info::set_isrecvive(bool value) {
  set_has_isrecvive();
  isrecvive_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.mail_info.isRecvive)
}

// repeated .msg_info_def.msg_gift gifts = 7;
inline int mail_info::gifts_size() const {
  return gifts_.size();
}
inline void mail_info::clear_gifts() {
  gifts_.Clear();
}
inline const ::msg_info_def::msg_gift& mail_info::gifts(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.mail_info.gifts)
  return gifts_.Get(index);
}
inline ::msg_info_def::msg_gift* mail_info::mutable_gifts(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.mail_info.gifts)
  return gifts_.Mutable(index);
}
inline ::msg_info_def::msg_gift* mail_info::add_gifts() {
  // @@protoc_insertion_point(field_add:client2world_protocols.mail_info.gifts)
  return gifts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_gift >&
mail_info::gifts() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.mail_info.gifts)
  return gifts_;
}
inline ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_gift >*
mail_info::mutable_gifts() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.mail_info.gifts)
  return &gifts_;
}

// optional int32 senderId = 8;
inline bool mail_info::has_senderid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mail_info::set_has_senderid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mail_info::clear_has_senderid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mail_info::clear_senderid() {
  senderid_ = 0;
  clear_has_senderid();
}
inline ::google::protobuf::int32 mail_info::senderid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.mail_info.senderId)
  return senderid_;
}
inline void mail_info::set_senderid(::google::protobuf::int32 value) {
  set_has_senderid();
  senderid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.mail_info.senderId)
}

// -------------------------------------------------------------------

// packetw2c_get_mails_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_mails_result];
inline bool packetw2c_get_mails_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_get_mails_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_get_mails_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_get_mails_result::clear_packet_id() {
  packet_id_ = 7513;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_get_mails_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_mails_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_get_mails_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_get_mails_result.packet_id)
}

// optional int32 lastTime = 2;
inline bool packetw2c_get_mails_result::has_lasttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_get_mails_result::set_has_lasttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_get_mails_result::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_get_mails_result::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 packetw2c_get_mails_result::lasttime() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_mails_result.lastTime)
  return lasttime_;
}
inline void packetw2c_get_mails_result::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_get_mails_result.lastTime)
}

// repeated .client2world_protocols.mail_info mails = 3;
inline int packetw2c_get_mails_result::mails_size() const {
  return mails_.size();
}
inline void packetw2c_get_mails_result::clear_mails() {
  mails_.Clear();
}
inline const ::client2world_protocols::mail_info& packetw2c_get_mails_result::mails(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_mails_result.mails)
  return mails_.Get(index);
}
inline ::client2world_protocols::mail_info* packetw2c_get_mails_result::mutable_mails(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_get_mails_result.mails)
  return mails_.Mutable(index);
}
inline ::client2world_protocols::mail_info* packetw2c_get_mails_result::add_mails() {
  // @@protoc_insertion_point(field_add:client2world_protocols.packetw2c_get_mails_result.mails)
  return mails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::mail_info >&
packetw2c_get_mails_result::mails() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.packetw2c_get_mails_result.mails)
  return mails_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::mail_info >*
packetw2c_get_mails_result::mutable_mails() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.packetw2c_get_mails_result.mails)
  return &mails_;
}

// -------------------------------------------------------------------

// packetc2w_recv_mail_gifts

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_recv_mail_gifts];
inline bool packetc2w_recv_mail_gifts::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_recv_mail_gifts::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_recv_mail_gifts::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_recv_mail_gifts::clear_packet_id() {
  packet_id_ = 5015;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_recv_mail_gifts::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_recv_mail_gifts.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_recv_mail_gifts::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_recv_mail_gifts.packet_id)
}

// optional string mailId = 2;
inline bool packetc2w_recv_mail_gifts::has_mailid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_recv_mail_gifts::set_has_mailid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_recv_mail_gifts::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_recv_mail_gifts::clear_mailid() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_->clear();
  }
  clear_has_mailid();
}
inline const ::std::string& packetc2w_recv_mail_gifts::mailid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_recv_mail_gifts.mailId)
  return *mailid_;
}
inline void packetc2w_recv_mail_gifts::set_mailid(const ::std::string& value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_recv_mail_gifts.mailId)
}
inline void packetc2w_recv_mail_gifts::set_mailid(const char* value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_recv_mail_gifts.mailId)
}
inline void packetc2w_recv_mail_gifts::set_mailid(const char* value, size_t size) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_recv_mail_gifts.mailId)
}
inline ::std::string* packetc2w_recv_mail_gifts::mutable_mailid() {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_recv_mail_gifts.mailId)
  return mailid_;
}
inline ::std::string* packetc2w_recv_mail_gifts::release_mailid() {
  clear_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mailid_;
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_recv_mail_gifts::set_allocated_mailid(::std::string* mailid) {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (mailid) {
    set_has_mailid();
    mailid_ = mailid;
  } else {
    clear_has_mailid();
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_recv_mail_gifts.mailId)
}

// -------------------------------------------------------------------

// packetw2c_recv_mail_gifts_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recv_mail_gifts_result];
inline bool packetw2c_recv_mail_gifts_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_recv_mail_gifts_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_recv_mail_gifts_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_recv_mail_gifts_result::clear_packet_id() {
  packet_id_ = 7514;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_recv_mail_gifts_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_recv_mail_gifts_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_recv_mail_gifts_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_recv_mail_gifts_result.packet_id)
}

// optional string mailId = 2;
inline bool packetw2c_recv_mail_gifts_result::has_mailid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_recv_mail_gifts_result::set_has_mailid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_recv_mail_gifts_result::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_recv_mail_gifts_result::clear_mailid() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_->clear();
  }
  clear_has_mailid();
}
inline const ::std::string& packetw2c_recv_mail_gifts_result::mailid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_recv_mail_gifts_result.mailId)
  return *mailid_;
}
inline void packetw2c_recv_mail_gifts_result::set_mailid(const ::std::string& value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_recv_mail_gifts_result.mailId)
}
inline void packetw2c_recv_mail_gifts_result::set_mailid(const char* value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetw2c_recv_mail_gifts_result.mailId)
}
inline void packetw2c_recv_mail_gifts_result::set_mailid(const char* value, size_t size) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetw2c_recv_mail_gifts_result.mailId)
}
inline ::std::string* packetw2c_recv_mail_gifts_result::mutable_mailid() {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_recv_mail_gifts_result.mailId)
  return mailid_;
}
inline ::std::string* packetw2c_recv_mail_gifts_result::release_mailid() {
  clear_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mailid_;
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetw2c_recv_mail_gifts_result::set_allocated_mailid(::std::string* mailid) {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (mailid) {
    set_has_mailid();
    mailid_ = mailid;
  } else {
    clear_has_mailid();
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_recv_mail_gifts_result.mailId)
}

// optional int32 result = 3;
inline bool packetw2c_recv_mail_gifts_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_recv_mail_gifts_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_recv_mail_gifts_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_recv_mail_gifts_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_recv_mail_gifts_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_recv_mail_gifts_result.result)
  return result_;
}
inline void packetw2c_recv_mail_gifts_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_recv_mail_gifts_result.result)
}

// -------------------------------------------------------------------

// packetc2w_send_mail

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_send_mail];
inline bool packetc2w_send_mail::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_send_mail::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_send_mail::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_send_mail::clear_packet_id() {
  packet_id_ = 5016;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_send_mail::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_send_mail.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_send_mail::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_send_mail.packet_id)
}

// optional string title = 2;
inline bool packetc2w_send_mail::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_send_mail::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_send_mail::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_send_mail::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& packetc2w_send_mail::title() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_send_mail.title)
  return *title_;
}
inline void packetc2w_send_mail::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_send_mail.title)
}
inline void packetc2w_send_mail::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_send_mail.title)
}
inline void packetc2w_send_mail::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_send_mail.title)
}
inline ::std::string* packetc2w_send_mail::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_send_mail.title)
  return title_;
}
inline ::std::string* packetc2w_send_mail::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_send_mail::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_send_mail.title)
}

// optional string content = 3;
inline bool packetc2w_send_mail::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_send_mail::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_send_mail::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_send_mail::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& packetc2w_send_mail::content() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_send_mail.content)
  return *content_;
}
inline void packetc2w_send_mail::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_send_mail.content)
}
inline void packetc2w_send_mail::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_send_mail.content)
}
inline void packetc2w_send_mail::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_send_mail.content)
}
inline ::std::string* packetc2w_send_mail::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_send_mail.content)
  return content_;
}
inline ::std::string* packetc2w_send_mail::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_send_mail::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_send_mail.content)
}

// optional int32 toPlayerId = 4;
inline bool packetc2w_send_mail::has_toplayerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetc2w_send_mail::set_has_toplayerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetc2w_send_mail::clear_has_toplayerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetc2w_send_mail::clear_toplayerid() {
  toplayerid_ = 0;
  clear_has_toplayerid();
}
inline ::google::protobuf::int32 packetc2w_send_mail::toplayerid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_send_mail.toPlayerId)
  return toplayerid_;
}
inline void packetc2w_send_mail::set_toplayerid(::google::protobuf::int32 value) {
  set_has_toplayerid();
  toplayerid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_send_mail.toPlayerId)
}

// repeated .msg_info_def.msg_gift gifts = 5;
inline int packetc2w_send_mail::gifts_size() const {
  return gifts_.size();
}
inline void packetc2w_send_mail::clear_gifts() {
  gifts_.Clear();
}
inline const ::msg_info_def::msg_gift& packetc2w_send_mail::gifts(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_send_mail.gifts)
  return gifts_.Get(index);
}
inline ::msg_info_def::msg_gift* packetc2w_send_mail::mutable_gifts(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_send_mail.gifts)
  return gifts_.Mutable(index);
}
inline ::msg_info_def::msg_gift* packetc2w_send_mail::add_gifts() {
  // @@protoc_insertion_point(field_add:client2world_protocols.packetc2w_send_mail.gifts)
  return gifts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_gift >&
packetc2w_send_mail::gifts() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.packetc2w_send_mail.gifts)
  return gifts_;
}
inline ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_gift >*
packetc2w_send_mail::mutable_gifts() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.packetc2w_send_mail.gifts)
  return &gifts_;
}

// -------------------------------------------------------------------

// packetw2c_send_mail_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_send_mail_result];
inline bool packetw2c_send_mail_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_send_mail_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_send_mail_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_send_mail_result::clear_packet_id() {
  packet_id_ = 7515;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_send_mail_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_send_mail_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_send_mail_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_send_mail_result.packet_id)
}

// optional int32 result = 2;
inline bool packetw2c_send_mail_result::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_send_mail_result::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_send_mail_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_send_mail_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_send_mail_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_send_mail_result.result)
  return result_;
}
inline void packetw2c_send_mail_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_send_mail_result.result)
}

// optional int32 mailType = 4;
inline bool packetw2c_send_mail_result::has_mailtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_send_mail_result::set_has_mailtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_send_mail_result::clear_has_mailtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_send_mail_result::clear_mailtype() {
  mailtype_ = 0;
  clear_has_mailtype();
}
inline ::google::protobuf::int32 packetw2c_send_mail_result::mailtype() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_send_mail_result.mailType)
  return mailtype_;
}
inline void packetw2c_send_mail_result::set_mailtype(::google::protobuf::int32 value) {
  set_has_mailtype();
  mailtype_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_send_mail_result.mailType)
}

// optional string mailId = 5;
inline bool packetw2c_send_mail_result::has_mailid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_send_mail_result::set_has_mailid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_send_mail_result::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_send_mail_result::clear_mailid() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_->clear();
  }
  clear_has_mailid();
}
inline const ::std::string& packetw2c_send_mail_result::mailid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_send_mail_result.mailId)
  return *mailid_;
}
inline void packetw2c_send_mail_result::set_mailid(const ::std::string& value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_send_mail_result.mailId)
}
inline void packetw2c_send_mail_result::set_mailid(const char* value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetw2c_send_mail_result.mailId)
}
inline void packetw2c_send_mail_result::set_mailid(const char* value, size_t size) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetw2c_send_mail_result.mailId)
}
inline ::std::string* packetw2c_send_mail_result::mutable_mailid() {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_send_mail_result.mailId)
  return mailid_;
}
inline ::std::string* packetw2c_send_mail_result::release_mailid() {
  clear_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mailid_;
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetw2c_send_mail_result::set_allocated_mailid(::std::string* mailid) {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (mailid) {
    set_has_mailid();
    mailid_ = mailid;
  } else {
    clear_has_mailid();
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_send_mail_result.mailId)
}

// -------------------------------------------------------------------

// packetc2w_remove_mail

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_remove_mail];
inline bool packetc2w_remove_mail::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_remove_mail::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_remove_mail::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_remove_mail::clear_packet_id() {
  packet_id_ = 5017;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_remove_mail::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_remove_mail.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_remove_mail::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_remove_mail.packet_id)
}

// optional string mailId = 2;
inline bool packetc2w_remove_mail::has_mailid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_remove_mail::set_has_mailid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_remove_mail::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_remove_mail::clear_mailid() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_->clear();
  }
  clear_has_mailid();
}
inline const ::std::string& packetc2w_remove_mail::mailid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_remove_mail.mailId)
  return *mailid_;
}
inline void packetc2w_remove_mail::set_mailid(const ::std::string& value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_remove_mail.mailId)
}
inline void packetc2w_remove_mail::set_mailid(const char* value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_remove_mail.mailId)
}
inline void packetc2w_remove_mail::set_mailid(const char* value, size_t size) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_remove_mail.mailId)
}
inline ::std::string* packetc2w_remove_mail::mutable_mailid() {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_remove_mail.mailId)
  return mailid_;
}
inline ::std::string* packetc2w_remove_mail::release_mailid() {
  clear_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mailid_;
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_remove_mail::set_allocated_mailid(::std::string* mailid) {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (mailid) {
    set_has_mailid();
    mailid_ = mailid;
  } else {
    clear_has_mailid();
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_remove_mail.mailId)
}

// -------------------------------------------------------------------

// packetw2c_remove_mail_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_remove_mail_result];
inline bool packetw2c_remove_mail_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_remove_mail_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_remove_mail_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_remove_mail_result::clear_packet_id() {
  packet_id_ = 7516;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_remove_mail_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_remove_mail_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_remove_mail_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_remove_mail_result.packet_id)
}

// optional string mailId = 2;
inline bool packetw2c_remove_mail_result::has_mailid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_remove_mail_result::set_has_mailid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_remove_mail_result::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_remove_mail_result::clear_mailid() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_->clear();
  }
  clear_has_mailid();
}
inline const ::std::string& packetw2c_remove_mail_result::mailid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_remove_mail_result.mailId)
  return *mailid_;
}
inline void packetw2c_remove_mail_result::set_mailid(const ::std::string& value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_remove_mail_result.mailId)
}
inline void packetw2c_remove_mail_result::set_mailid(const char* value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetw2c_remove_mail_result.mailId)
}
inline void packetw2c_remove_mail_result::set_mailid(const char* value, size_t size) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetw2c_remove_mail_result.mailId)
}
inline ::std::string* packetw2c_remove_mail_result::mutable_mailid() {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_remove_mail_result.mailId)
  return mailid_;
}
inline ::std::string* packetw2c_remove_mail_result::release_mailid() {
  clear_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mailid_;
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetw2c_remove_mail_result::set_allocated_mailid(::std::string* mailid) {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (mailid) {
    set_has_mailid();
    mailid_ = mailid;
  } else {
    clear_has_mailid();
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_remove_mail_result.mailId)
}

// optional int32 result = 3;
inline bool packetw2c_remove_mail_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_remove_mail_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_remove_mail_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_remove_mail_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_remove_mail_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_remove_mail_result.result)
  return result_;
}
inline void packetw2c_remove_mail_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_remove_mail_result.result)
}

// -------------------------------------------------------------------

// packetw2c_accept_gift_notify

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_accept_gift_notify];
inline bool packetw2c_accept_gift_notify::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_accept_gift_notify::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_accept_gift_notify::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_accept_gift_notify::clear_packet_id() {
  packet_id_ = 7546;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_accept_gift_notify::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_accept_gift_notify.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_accept_gift_notify::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_accept_gift_notify.packet_id)
}

// -------------------------------------------------------------------

// packetc2w_req_send_mail_log

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_send_mail_log];
inline bool packetc2w_req_send_mail_log::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_send_mail_log::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_send_mail_log::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_send_mail_log::clear_packet_id() {
  packet_id_ = 5045;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_send_mail_log::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_send_mail_log.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_send_mail_log::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_send_mail_log.packet_id)
}

// optional int32 lastTime = 2;
inline bool packetc2w_req_send_mail_log::has_lasttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_req_send_mail_log::set_has_lasttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_req_send_mail_log::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_req_send_mail_log::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 packetc2w_req_send_mail_log::lasttime() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_send_mail_log.lastTime)
  return lasttime_;
}
inline void packetc2w_req_send_mail_log::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_send_mail_log.lastTime)
}

// -------------------------------------------------------------------

// SendMailLogInfo

// optional int32 sendTime = 1;
inline bool SendMailLogInfo::has_sendtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMailLogInfo::set_has_sendtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMailLogInfo::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMailLogInfo::clear_sendtime() {
  sendtime_ = 0;
  clear_has_sendtime();
}
inline ::google::protobuf::int32 SendMailLogInfo::sendtime() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SendMailLogInfo.sendTime)
  return sendtime_;
}
inline void SendMailLogInfo::set_sendtime(::google::protobuf::int32 value) {
  set_has_sendtime();
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.SendMailLogInfo.sendTime)
}

// optional int32 firendId = 2;
inline bool SendMailLogInfo::has_firendid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendMailLogInfo::set_has_firendid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendMailLogInfo::clear_has_firendid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendMailLogInfo::clear_firendid() {
  firendid_ = 0;
  clear_has_firendid();
}
inline ::google::protobuf::int32 SendMailLogInfo::firendid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SendMailLogInfo.firendId)
  return firendid_;
}
inline void SendMailLogInfo::set_firendid(::google::protobuf::int32 value) {
  set_has_firendid();
  firendid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.SendMailLogInfo.firendId)
}

// optional string content = 3;
inline bool SendMailLogInfo::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendMailLogInfo::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendMailLogInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendMailLogInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SendMailLogInfo::content() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SendMailLogInfo.content)
  return *content_;
}
inline void SendMailLogInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.SendMailLogInfo.content)
}
inline void SendMailLogInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.SendMailLogInfo.content)
}
inline void SendMailLogInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.SendMailLogInfo.content)
}
inline ::std::string* SendMailLogInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.SendMailLogInfo.content)
  return content_;
}
inline ::std::string* SendMailLogInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendMailLogInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.SendMailLogInfo.content)
}

// optional string mailId = 4;
inline bool SendMailLogInfo::has_mailid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendMailLogInfo::set_has_mailid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendMailLogInfo::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendMailLogInfo::clear_mailid() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_->clear();
  }
  clear_has_mailid();
}
inline const ::std::string& SendMailLogInfo::mailid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SendMailLogInfo.mailId)
  return *mailid_;
}
inline void SendMailLogInfo::set_mailid(const ::std::string& value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.SendMailLogInfo.mailId)
}
inline void SendMailLogInfo::set_mailid(const char* value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.SendMailLogInfo.mailId)
}
inline void SendMailLogInfo::set_mailid(const char* value, size_t size) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.SendMailLogInfo.mailId)
}
inline ::std::string* SendMailLogInfo::mutable_mailid() {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.SendMailLogInfo.mailId)
  return mailid_;
}
inline ::std::string* SendMailLogInfo::release_mailid() {
  clear_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mailid_;
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendMailLogInfo::set_allocated_mailid(::std::string* mailid) {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (mailid) {
    set_has_mailid();
    mailid_ = mailid;
  } else {
    clear_has_mailid();
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.SendMailLogInfo.mailId)
}

// optional string title = 5;
inline bool SendMailLogInfo::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendMailLogInfo::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendMailLogInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendMailLogInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& SendMailLogInfo::title() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SendMailLogInfo.title)
  return *title_;
}
inline void SendMailLogInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.SendMailLogInfo.title)
}
inline void SendMailLogInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.SendMailLogInfo.title)
}
inline void SendMailLogInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.SendMailLogInfo.title)
}
inline ::std::string* SendMailLogInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.SendMailLogInfo.title)
  return title_;
}
inline ::std::string* SendMailLogInfo::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendMailLogInfo::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.SendMailLogInfo.title)
}

// optional string friendNickName = 6;
inline bool SendMailLogInfo::has_friendnickname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SendMailLogInfo::set_has_friendnickname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SendMailLogInfo::clear_has_friendnickname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SendMailLogInfo::clear_friendnickname() {
  if (friendnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendnickname_->clear();
  }
  clear_has_friendnickname();
}
inline const ::std::string& SendMailLogInfo::friendnickname() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.SendMailLogInfo.friendNickName)
  return *friendnickname_;
}
inline void SendMailLogInfo::set_friendnickname(const ::std::string& value) {
  set_has_friendnickname();
  if (friendnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendnickname_ = new ::std::string;
  }
  friendnickname_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.SendMailLogInfo.friendNickName)
}
inline void SendMailLogInfo::set_friendnickname(const char* value) {
  set_has_friendnickname();
  if (friendnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendnickname_ = new ::std::string;
  }
  friendnickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.SendMailLogInfo.friendNickName)
}
inline void SendMailLogInfo::set_friendnickname(const char* value, size_t size) {
  set_has_friendnickname();
  if (friendnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendnickname_ = new ::std::string;
  }
  friendnickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.SendMailLogInfo.friendNickName)
}
inline ::std::string* SendMailLogInfo::mutable_friendnickname() {
  set_has_friendnickname();
  if (friendnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    friendnickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.SendMailLogInfo.friendNickName)
  return friendnickname_;
}
inline ::std::string* SendMailLogInfo::release_friendnickname() {
  clear_has_friendnickname();
  if (friendnickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = friendnickname_;
    friendnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendMailLogInfo::set_allocated_friendnickname(::std::string* friendnickname) {
  if (friendnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friendnickname_;
  }
  if (friendnickname) {
    set_has_friendnickname();
    friendnickname_ = friendnickname;
  } else {
    clear_has_friendnickname();
    friendnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.SendMailLogInfo.friendNickName)
}

// -------------------------------------------------------------------

// packetw2c_req_send_mail_log_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_send_mail_log_result];
inline bool packetw2c_req_send_mail_log_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_send_mail_log_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_send_mail_log_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_send_mail_log_result::clear_packet_id() {
  packet_id_ = 7549;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_send_mail_log_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_send_mail_log_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_send_mail_log_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_send_mail_log_result.packet_id)
}

// repeated .client2world_protocols.SendMailLogInfo logList = 2;
inline int packetw2c_req_send_mail_log_result::loglist_size() const {
  return loglist_.size();
}
inline void packetw2c_req_send_mail_log_result::clear_loglist() {
  loglist_.Clear();
}
inline const ::client2world_protocols::SendMailLogInfo& packetw2c_req_send_mail_log_result::loglist(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_send_mail_log_result.logList)
  return loglist_.Get(index);
}
inline ::client2world_protocols::SendMailLogInfo* packetw2c_req_send_mail_log_result::mutable_loglist(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_req_send_mail_log_result.logList)
  return loglist_.Mutable(index);
}
inline ::client2world_protocols::SendMailLogInfo* packetw2c_req_send_mail_log_result::add_loglist() {
  // @@protoc_insertion_point(field_add:client2world_protocols.packetw2c_req_send_mail_log_result.logList)
  return loglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SendMailLogInfo >&
packetw2c_req_send_mail_log_result::loglist() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.packetw2c_req_send_mail_log_result.logList)
  return loglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::SendMailLogInfo >*
packetw2c_req_send_mail_log_result::mutable_loglist() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.packetw2c_req_send_mail_log_result.logList)
  return &loglist_;
}

// optional int32 lastTime = 3;
inline bool packetw2c_req_send_mail_log_result::has_lasttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_req_send_mail_log_result::set_has_lasttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_req_send_mail_log_result::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_req_send_mail_log_result::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 packetw2c_req_send_mail_log_result::lasttime() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_send_mail_log_result.lastTime)
  return lasttime_;
}
inline void packetw2c_req_send_mail_log_result::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_send_mail_log_result.lastTime)
}

// -------------------------------------------------------------------

// packetc2w_remove_mail_log

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_remove_mail_log];
inline bool packetc2w_remove_mail_log::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_remove_mail_log::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_remove_mail_log::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_remove_mail_log::clear_packet_id() {
  packet_id_ = 5046;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_remove_mail_log::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_remove_mail_log.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_remove_mail_log::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_remove_mail_log.packet_id)
}

// optional string mailId = 2;
inline bool packetc2w_remove_mail_log::has_mailid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_remove_mail_log::set_has_mailid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_remove_mail_log::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_remove_mail_log::clear_mailid() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_->clear();
  }
  clear_has_mailid();
}
inline const ::std::string& packetc2w_remove_mail_log::mailid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_remove_mail_log.mailId)
  return *mailid_;
}
inline void packetc2w_remove_mail_log::set_mailid(const ::std::string& value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_remove_mail_log.mailId)
}
inline void packetc2w_remove_mail_log::set_mailid(const char* value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetc2w_remove_mail_log.mailId)
}
inline void packetc2w_remove_mail_log::set_mailid(const char* value, size_t size) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetc2w_remove_mail_log.mailId)
}
inline ::std::string* packetc2w_remove_mail_log::mutable_mailid() {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetc2w_remove_mail_log.mailId)
  return mailid_;
}
inline ::std::string* packetc2w_remove_mail_log::release_mailid() {
  clear_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mailid_;
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetc2w_remove_mail_log::set_allocated_mailid(::std::string* mailid) {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (mailid) {
    set_has_mailid();
    mailid_ = mailid;
  } else {
    clear_has_mailid();
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetc2w_remove_mail_log.mailId)
}

// -------------------------------------------------------------------

// packetw2c_remove_mail_log_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_remove_mail_log_result];
inline bool packetw2c_remove_mail_log_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_remove_mail_log_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_remove_mail_log_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_remove_mail_log_result::clear_packet_id() {
  packet_id_ = 7550;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_remove_mail_log_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_remove_mail_log_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_remove_mail_log_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_remove_mail_log_result.packet_id)
}

// optional string mailId = 2;
inline bool packetw2c_remove_mail_log_result::has_mailid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_remove_mail_log_result::set_has_mailid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_remove_mail_log_result::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_remove_mail_log_result::clear_mailid() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_->clear();
  }
  clear_has_mailid();
}
inline const ::std::string& packetw2c_remove_mail_log_result::mailid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_remove_mail_log_result.mailId)
  return *mailid_;
}
inline void packetw2c_remove_mail_log_result::set_mailid(const ::std::string& value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_remove_mail_log_result.mailId)
}
inline void packetw2c_remove_mail_log_result::set_mailid(const char* value) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.packetw2c_remove_mail_log_result.mailId)
}
inline void packetw2c_remove_mail_log_result::set_mailid(const char* value, size_t size) {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  mailid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.packetw2c_remove_mail_log_result.mailId)
}
inline ::std::string* packetw2c_remove_mail_log_result::mutable_mailid() {
  set_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mailid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_remove_mail_log_result.mailId)
  return mailid_;
}
inline ::std::string* packetw2c_remove_mail_log_result::release_mailid() {
  clear_has_mailid();
  if (mailid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mailid_;
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void packetw2c_remove_mail_log_result::set_allocated_mailid(::std::string* mailid) {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (mailid) {
    set_has_mailid();
    mailid_ = mailid;
  } else {
    clear_has_mailid();
    mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_remove_mail_log_result.mailId)
}

// optional int32 result = 3;
inline bool packetw2c_remove_mail_log_result::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_remove_mail_log_result::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_remove_mail_log_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_remove_mail_log_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 packetw2c_remove_mail_log_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_remove_mail_log_result.result)
  return result_;
}
inline void packetw2c_remove_mail_log_result::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_remove_mail_log_result.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5fmail_2eproto__INCLUDED
