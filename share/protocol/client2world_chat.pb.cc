// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2w_chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_chat_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_chat_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_chat_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_player_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_player_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_player_notify_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_player_notify_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_player_continuous_send_speaker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_player_continuous_send_speaker_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_player_continuous_send_speaker_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_player_continuous_send_speaker_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fchat_2eproto() {
  protobuf_AddDesc_client2world_5fchat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_chat.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2w_chat_descriptor_ = file->message_type(0);
  static const int packetc2w_chat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_chat, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_chat, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_chat, audio_time_),
  };
  packetc2w_chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_chat_descriptor_,
      packetc2w_chat::default_instance_,
      packetc2w_chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_chat));
  packetw2c_chat_result_descriptor_ = file->message_type(1);
  static const int packetw2c_chat_result_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_chat_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_chat_result, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_chat_result, talkernickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_chat_result, talkerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_chat_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_chat_result, audio_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_chat_result, audio_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_chat_result, talkerviplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_chat_result, hasmonthcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_chat_result, chattype_),
  };
  packetw2c_chat_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_chat_result_descriptor_,
      packetw2c_chat_result::default_instance_,
      packetw2c_chat_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_chat_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_chat_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_chat_result));
  packetw2c_notify_descriptor_ = file->message_type(2);
  static const int packetw2c_notify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify, notifytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify, talkernickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify, talkerviplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify, hasmonthcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify, repcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify, interval_),
  };
  packetw2c_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_notify_descriptor_,
      packetw2c_notify::default_instance_,
      packetw2c_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_notify));
  packetc2w_player_notify_descriptor_ = file->message_type(3);
  static const int packetc2w_player_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_notify, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_notify, content_),
  };
  packetc2w_player_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_player_notify_descriptor_,
      packetc2w_player_notify::default_instance_,
      packetc2w_player_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_player_notify));
  packetw2c_player_notify_result_descriptor_ = file->message_type(4);
  static const int packetw2c_player_notify_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_notify_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_notify_result, result_),
  };
  packetw2c_player_notify_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_player_notify_result_descriptor_,
      packetw2c_player_notify_result::default_instance_,
      packetw2c_player_notify_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_notify_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_notify_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_player_notify_result));
  packetc2w_player_continuous_send_speaker_descriptor_ = file->message_type(5);
  static const int packetc2w_player_continuous_send_speaker_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_continuous_send_speaker, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_continuous_send_speaker, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_continuous_send_speaker, count_),
  };
  packetc2w_player_continuous_send_speaker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_player_continuous_send_speaker_descriptor_,
      packetc2w_player_continuous_send_speaker::default_instance_,
      packetc2w_player_continuous_send_speaker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_continuous_send_speaker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_continuous_send_speaker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_player_continuous_send_speaker));
  packetw2c_player_continuous_send_speaker_result_descriptor_ = file->message_type(6);
  static const int packetw2c_player_continuous_send_speaker_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_continuous_send_speaker_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_continuous_send_speaker_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_continuous_send_speaker_result, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_continuous_send_speaker_result, remaincount_),
  };
  packetw2c_player_continuous_send_speaker_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_player_continuous_send_speaker_result_descriptor_,
      packetw2c_player_continuous_send_speaker_result::default_instance_,
      packetw2c_player_continuous_send_speaker_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_continuous_send_speaker_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_continuous_send_speaker_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_player_continuous_send_speaker_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fchat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_chat_descriptor_, &packetc2w_chat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_chat_result_descriptor_, &packetw2c_chat_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_notify_descriptor_, &packetw2c_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_player_notify_descriptor_, &packetc2w_player_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_player_notify_result_descriptor_, &packetw2c_player_notify_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_player_continuous_send_speaker_descriptor_, &packetc2w_player_continuous_send_speaker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_player_continuous_send_speaker_result_descriptor_, &packetw2c_player_continuous_send_speaker_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fchat_2eproto() {
  delete packetc2w_chat::default_instance_;
  delete packetc2w_chat_reflection_;
  delete packetw2c_chat_result::default_instance_;
  delete packetw2c_chat_result_reflection_;
  delete packetw2c_notify::default_instance_;
  delete packetw2c_notify_reflection_;
  delete packetc2w_player_notify::default_instance_;
  delete packetc2w_player_notify_reflection_;
  delete packetw2c_player_notify_result::default_instance_;
  delete packetw2c_player_notify_result_reflection_;
  delete packetc2w_player_continuous_send_speaker::default_instance_;
  delete packetc2w_player_continuous_send_speaker_reflection_;
  delete packetw2c_player_continuous_send_speaker_result::default_instance_;
  delete packetw2c_player_continuous_send_speaker_result_reflection_;
}

void protobuf_AddDesc_client2world_5fchat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027client2world_chat.proto\022\026client2world_"
    "protocols\032\033client2world_msg_type.proto\032\022"
    "msg_type_def.proto\032\022msg_info_def.proto\"\206"
    "\001\n\016packetc2w_chat\022L\n\tpacket_id\030\001 \001(\0162).c"
    "lient2world_protocols.e_server_msg_type:"
    "\016e_mst_c2w_chat\022\017\n\007content\030\002 \001(\t\022\025\n\naudi"
    "o_time\030\003 \001(\005:\0010\"\247\002\n\025packetw2c_chat_resul"
    "t\022S\n\tpacket_id\030\001 \001(\0162).client2world_prot"
    "ocols.e_server_msg_type:\025e_mst_w2c_chat_"
    "result\022\017\n\007content\030\002 \001(\t\022\026\n\016talkerNickNam"
    "e\030\003 \001(\t\022\020\n\010talkerId\030\004 \001(\005\022\016\n\006result\030\005 \001("
    "\005\022\025\n\naudio_time\030\006 \001(\005:\0010\022\024\n\taudio_len\030\007 "
    "\001(\005:\0010\022\026\n\016talkerVIPLevel\030\010 \001(\005\022\024\n\014hasMon"
    "thCard\030\t \001(\010\022\023\n\010chatType\030\n \001(\005:\0010\"\211\002\n\020pa"
    "cketw2c_notify\022N\n\tpacket_id\030\001 \001(\0162).clie"
    "nt2world_protocols.e_server_msg_type:\020e_"
    "mst_w2c_notify\022\017\n\007content\030\002 \001(\t\022\022\n\nnotif"
    "yType\030\003 \001(\005\022\026\n\016talkerNickName\030\004 \001(\t\022\020\n\010p"
    "layerId\030\005 \001(\005\022\026\n\016talkerVIPLevel\030\006 \001(\005\022\024\n"
    "\014hasMonthCard\030\007 \001(\010\022\023\n\010repCount\030\010 \001(\005:\0011"
    "\022\023\n\010interval\030\t \001(\005:\0010\"\201\001\n\027packetc2w_play"
    "er_notify\022U\n\tpacket_id\030\001 \001(\0162).client2wo"
    "rld_protocols.e_server_msg_type:\027e_mst_c"
    "2w_player_notify\022\017\n\007content\030\002 \001(\t\"\216\001\n\036pa"
    "cketw2c_player_notify_result\022\\\n\tpacket_i"
    "d\030\001 \001(\0162).client2world_protocols.e_serve"
    "r_msg_type:\036e_mst_w2c_player_notify_resu"
    "lt\022\016\n\006result\030\002 \001(\005\"\262\001\n(packetc2w_player_"
    "continuous_send_speaker\022f\n\tpacket_id\030\001 \001"
    "(\0162).client2world_protocols.e_server_msg"
    "_type:(e_mst_c2w_player_continuous_send_"
    "speaker\022\017\n\007content\030\002 \001(\t\022\r\n\005count\030\003 \001(\005\""
    "\324\001\n/packetw2c_player_continuous_send_spe"
    "aker_result\022m\n\tpacket_id\030\001 \001(\0162).client2"
    "world_protocols.e_server_msg_type:/e_mst"
    "_w2c_player_continuous_send_speaker_resu"
    "lt\022\016\n\006result\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\022\023\n\013rem"
    "ainCount\030\004 \001(\005", 1494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_chat.proto", &protobuf_RegisterTypes);
  packetc2w_chat::default_instance_ = new packetc2w_chat();
  packetw2c_chat_result::default_instance_ = new packetw2c_chat_result();
  packetw2c_notify::default_instance_ = new packetw2c_notify();
  packetc2w_player_notify::default_instance_ = new packetc2w_player_notify();
  packetw2c_player_notify_result::default_instance_ = new packetw2c_player_notify_result();
  packetc2w_player_continuous_send_speaker::default_instance_ = new packetc2w_player_continuous_send_speaker();
  packetw2c_player_continuous_send_speaker_result::default_instance_ = new packetw2c_player_continuous_send_speaker_result();
  packetc2w_chat::default_instance_->InitAsDefaultInstance();
  packetw2c_chat_result::default_instance_->InitAsDefaultInstance();
  packetw2c_notify::default_instance_->InitAsDefaultInstance();
  packetc2w_player_notify::default_instance_->InitAsDefaultInstance();
  packetw2c_player_notify_result::default_instance_->InitAsDefaultInstance();
  packetc2w_player_continuous_send_speaker::default_instance_->InitAsDefaultInstance();
  packetw2c_player_continuous_send_speaker_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fchat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fchat_2eproto {
  StaticDescriptorInitializer_client2world_5fchat_2eproto() {
    protobuf_AddDesc_client2world_5fchat_2eproto();
  }
} static_descriptor_initializer_client2world_5fchat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2w_chat::kPacketIdFieldNumber;
const int packetc2w_chat::kContentFieldNumber;
const int packetc2w_chat::kAudioTimeFieldNumber;
#endif  // !_MSC_VER

packetc2w_chat::packetc2w_chat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_chat)
}

void packetc2w_chat::InitAsDefaultInstance() {
}

packetc2w_chat::packetc2w_chat(const packetc2w_chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_chat)
}

void packetc2w_chat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5021;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  audio_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_chat::~packetc2w_chat() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_chat)
  SharedDtor();
}

void packetc2w_chat::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_chat_descriptor_;
}

const packetc2w_chat& packetc2w_chat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fchat_2eproto();
  return *default_instance_;
}

packetc2w_chat* packetc2w_chat::default_instance_ = NULL;

packetc2w_chat* packetc2w_chat::New() const {
  return new packetc2w_chat;
}

void packetc2w_chat::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 5021;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    audio_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_chat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_chat];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_audio_time;
        break;
      }

      // optional int32 audio_time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_audio_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_time_)));
          set_has_audio_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_chat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_chat)
  return false;
#undef DO_
}

void packetc2w_chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_chat)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_chat];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional int32 audio_time = 3 [default = 0];
  if (has_audio_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->audio_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_chat)
}

::google::protobuf::uint8* packetc2w_chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_chat)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_chat];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional int32 audio_time = 3 [default = 0];
  if (has_audio_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->audio_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_chat)
  return target;
}

int packetc2w_chat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_chat];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 audio_time = 3 [default = 0];
    if (has_audio_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audio_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_chat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_chat::MergeFrom(const packetc2w_chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_audio_time()) {
      set_audio_time(from.audio_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_chat::CopyFrom(const packetc2w_chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_chat::IsInitialized() const {

  return true;
}

void packetc2w_chat::Swap(packetc2w_chat* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(content_, other->content_);
    std::swap(audio_time_, other->audio_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_chat_descriptor_;
  metadata.reflection = packetc2w_chat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_chat_result::kPacketIdFieldNumber;
const int packetw2c_chat_result::kContentFieldNumber;
const int packetw2c_chat_result::kTalkerNickNameFieldNumber;
const int packetw2c_chat_result::kTalkerIdFieldNumber;
const int packetw2c_chat_result::kResultFieldNumber;
const int packetw2c_chat_result::kAudioTimeFieldNumber;
const int packetw2c_chat_result::kAudioLenFieldNumber;
const int packetw2c_chat_result::kTalkerVIPLevelFieldNumber;
const int packetw2c_chat_result::kHasMonthCardFieldNumber;
const int packetw2c_chat_result::kChatTypeFieldNumber;
#endif  // !_MSC_VER

packetw2c_chat_result::packetw2c_chat_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_chat_result)
}

void packetw2c_chat_result::InitAsDefaultInstance() {
}

packetw2c_chat_result::packetw2c_chat_result(const packetw2c_chat_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_chat_result)
}

void packetw2c_chat_result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 7522;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talkernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talkerid_ = 0;
  result_ = 0;
  audio_time_ = 0;
  audio_len_ = 0;
  talkerviplevel_ = 0;
  hasmonthcard_ = false;
  chattype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_chat_result::~packetw2c_chat_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_chat_result)
  SharedDtor();
}

void packetw2c_chat_result::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (talkernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talkernickname_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_chat_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_chat_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_chat_result_descriptor_;
}

const packetw2c_chat_result& packetw2c_chat_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fchat_2eproto();
  return *default_instance_;
}

packetw2c_chat_result* packetw2c_chat_result::default_instance_ = NULL;

packetw2c_chat_result* packetw2c_chat_result::New() const {
  return new packetw2c_chat_result;
}

void packetw2c_chat_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_chat_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(result_, talkerviplevel_);
    packet_id_ = 7522;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_talkernickname()) {
      if (talkernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        talkernickname_->clear();
      }
    }
    talkerid_ = 0;
  }
  ZR_(hasmonthcard_, chattype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_chat_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_chat_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_chat_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_talkerNickName;
        break;
      }

      // optional string talkerNickName = 3;
      case 3: {
        if (tag == 26) {
         parse_talkerNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_talkernickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->talkernickname().data(), this->talkernickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "talkernickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_talkerId;
        break;
      }

      // optional int32 talkerId = 4;
      case 4: {
        if (tag == 32) {
         parse_talkerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talkerid_)));
          set_has_talkerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional int32 result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_audio_time;
        break;
      }

      // optional int32 audio_time = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_audio_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_time_)));
          set_has_audio_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_audio_len;
        break;
      }

      // optional int32 audio_len = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_audio_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_len_)));
          set_has_audio_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_talkerVIPLevel;
        break;
      }

      // optional int32 talkerVIPLevel = 8;
      case 8: {
        if (tag == 64) {
         parse_talkerVIPLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talkerviplevel_)));
          set_has_talkerviplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_hasMonthCard;
        break;
      }

      // optional bool hasMonthCard = 9;
      case 9: {
        if (tag == 72) {
         parse_hasMonthCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmonthcard_)));
          set_has_hasmonthcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_chatType;
        break;
      }

      // optional int32 chatType = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_chatType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_chat_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_chat_result)
  return false;
#undef DO_
}

void packetw2c_chat_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_chat_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_chat_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional string talkerNickName = 3;
  if (has_talkernickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talkernickname().data(), this->talkernickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "talkernickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->talkernickname(), output);
  }

  // optional int32 talkerId = 4;
  if (has_talkerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->talkerid(), output);
  }

  // optional int32 result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  // optional int32 audio_time = 6 [default = 0];
  if (has_audio_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->audio_time(), output);
  }

  // optional int32 audio_len = 7 [default = 0];
  if (has_audio_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->audio_len(), output);
  }

  // optional int32 talkerVIPLevel = 8;
  if (has_talkerviplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->talkerviplevel(), output);
  }

  // optional bool hasMonthCard = 9;
  if (has_hasmonthcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->hasmonthcard(), output);
  }

  // optional int32 chatType = 10 [default = 0];
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->chattype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_chat_result)
}

::google::protobuf::uint8* packetw2c_chat_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_chat_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_chat_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional string talkerNickName = 3;
  if (has_talkernickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talkernickname().data(), this->talkernickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "talkernickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->talkernickname(), target);
  }

  // optional int32 talkerId = 4;
  if (has_talkerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->talkerid(), target);
  }

  // optional int32 result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result(), target);
  }

  // optional int32 audio_time = 6 [default = 0];
  if (has_audio_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->audio_time(), target);
  }

  // optional int32 audio_len = 7 [default = 0];
  if (has_audio_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->audio_len(), target);
  }

  // optional int32 talkerVIPLevel = 8;
  if (has_talkerviplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->talkerviplevel(), target);
  }

  // optional bool hasMonthCard = 9;
  if (has_hasmonthcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->hasmonthcard(), target);
  }

  // optional int32 chatType = 10 [default = 0];
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->chattype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_chat_result)
  return target;
}

int packetw2c_chat_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_chat_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string talkerNickName = 3;
    if (has_talkernickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->talkernickname());
    }

    // optional int32 talkerId = 4;
    if (has_talkerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talkerid());
    }

    // optional int32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 audio_time = 6 [default = 0];
    if (has_audio_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audio_time());
    }

    // optional int32 audio_len = 7 [default = 0];
    if (has_audio_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audio_len());
    }

    // optional int32 talkerVIPLevel = 8;
    if (has_talkerviplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talkerviplevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool hasMonthCard = 9;
    if (has_hasmonthcard()) {
      total_size += 1 + 1;
    }

    // optional int32 chatType = 10 [default = 0];
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chattype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_chat_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_chat_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_chat_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_chat_result::MergeFrom(const packetw2c_chat_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_talkernickname()) {
      set_talkernickname(from.talkernickname());
    }
    if (from.has_talkerid()) {
      set_talkerid(from.talkerid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_audio_time()) {
      set_audio_time(from.audio_time());
    }
    if (from.has_audio_len()) {
      set_audio_len(from.audio_len());
    }
    if (from.has_talkerviplevel()) {
      set_talkerviplevel(from.talkerviplevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hasmonthcard()) {
      set_hasmonthcard(from.hasmonthcard());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_chat_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_chat_result::CopyFrom(const packetw2c_chat_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_chat_result::IsInitialized() const {

  return true;
}

void packetw2c_chat_result::Swap(packetw2c_chat_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(content_, other->content_);
    std::swap(talkernickname_, other->talkernickname_);
    std::swap(talkerid_, other->talkerid_);
    std::swap(result_, other->result_);
    std::swap(audio_time_, other->audio_time_);
    std::swap(audio_len_, other->audio_len_);
    std::swap(talkerviplevel_, other->talkerviplevel_);
    std::swap(hasmonthcard_, other->hasmonthcard_);
    std::swap(chattype_, other->chattype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_chat_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_chat_result_descriptor_;
  metadata.reflection = packetw2c_chat_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_notify::kPacketIdFieldNumber;
const int packetw2c_notify::kContentFieldNumber;
const int packetw2c_notify::kNotifyTypeFieldNumber;
const int packetw2c_notify::kTalkerNickNameFieldNumber;
const int packetw2c_notify::kPlayerIdFieldNumber;
const int packetw2c_notify::kTalkerVIPLevelFieldNumber;
const int packetw2c_notify::kHasMonthCardFieldNumber;
const int packetw2c_notify::kRepCountFieldNumber;
const int packetw2c_notify::kIntervalFieldNumber;
#endif  // !_MSC_VER

packetw2c_notify::packetw2c_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_notify)
}

void packetw2c_notify::InitAsDefaultInstance() {
}

packetw2c_notify::packetw2c_notify(const packetw2c_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_notify)
}

void packetw2c_notify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 7523;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notifytype_ = 0;
  talkernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_ = 0;
  talkerviplevel_ = 0;
  hasmonthcard_ = false;
  repcount_ = 1;
  interval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_notify::~packetw2c_notify() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_notify)
  SharedDtor();
}

void packetw2c_notify::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (talkernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talkernickname_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_notify_descriptor_;
}

const packetw2c_notify& packetw2c_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fchat_2eproto();
  return *default_instance_;
}

packetw2c_notify* packetw2c_notify::default_instance_ = NULL;

packetw2c_notify* packetw2c_notify::New() const {
  return new packetw2c_notify;
}

void packetw2c_notify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_notify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(playerid_, hasmonthcard_);
    packet_id_ = 7523;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    notifytype_ = 0;
    if (has_talkernickname()) {
      if (talkernickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        talkernickname_->clear();
      }
    }
    repcount_ = 1;
  }
  interval_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_notify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_notifyType;
        break;
      }

      // optional int32 notifyType = 3;
      case 3: {
        if (tag == 24) {
         parse_notifyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notifytype_)));
          set_has_notifytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_talkerNickName;
        break;
      }

      // optional string talkerNickName = 4;
      case 4: {
        if (tag == 34) {
         parse_talkerNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_talkernickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->talkernickname().data(), this->talkernickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "talkernickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_playerId;
        break;
      }

      // optional int32 playerId = 5;
      case 5: {
        if (tag == 40) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_talkerVIPLevel;
        break;
      }

      // optional int32 talkerVIPLevel = 6;
      case 6: {
        if (tag == 48) {
         parse_talkerVIPLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talkerviplevel_)));
          set_has_talkerviplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hasMonthCard;
        break;
      }

      // optional bool hasMonthCard = 7;
      case 7: {
        if (tag == 56) {
         parse_hasMonthCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmonthcard_)));
          set_has_hasmonthcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_repCount;
        break;
      }

      // optional int32 repCount = 8 [default = 1];
      case 8: {
        if (tag == 64) {
         parse_repCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repcount_)));
          set_has_repcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_interval;
        break;
      }

      // optional int32 interval = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_notify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_notify)
  return false;
#undef DO_
}

void packetw2c_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_notify)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional int32 notifyType = 3;
  if (has_notifytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->notifytype(), output);
  }

  // optional string talkerNickName = 4;
  if (has_talkernickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talkernickname().data(), this->talkernickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "talkernickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->talkernickname(), output);
  }

  // optional int32 playerId = 5;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->playerid(), output);
  }

  // optional int32 talkerVIPLevel = 6;
  if (has_talkerviplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->talkerviplevel(), output);
  }

  // optional bool hasMonthCard = 7;
  if (has_hasmonthcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->hasmonthcard(), output);
  }

  // optional int32 repCount = 8 [default = 1];
  if (has_repcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->repcount(), output);
  }

  // optional int32 interval = 9 [default = 0];
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_notify)
}

::google::protobuf::uint8* packetw2c_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_notify)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional int32 notifyType = 3;
  if (has_notifytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->notifytype(), target);
  }

  // optional string talkerNickName = 4;
  if (has_talkernickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talkernickname().data(), this->talkernickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "talkernickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->talkernickname(), target);
  }

  // optional int32 playerId = 5;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->playerid(), target);
  }

  // optional int32 talkerVIPLevel = 6;
  if (has_talkerviplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->talkerviplevel(), target);
  }

  // optional bool hasMonthCard = 7;
  if (has_hasmonthcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->hasmonthcard(), target);
  }

  // optional int32 repCount = 8 [default = 1];
  if (has_repcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->repcount(), target);
  }

  // optional int32 interval = 9 [default = 0];
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_notify)
  return target;
}

int packetw2c_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_notify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 notifyType = 3;
    if (has_notifytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notifytype());
    }

    // optional string talkerNickName = 4;
    if (has_talkernickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->talkernickname());
    }

    // optional int32 playerId = 5;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional int32 talkerVIPLevel = 6;
    if (has_talkerviplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talkerviplevel());
    }

    // optional bool hasMonthCard = 7;
    if (has_hasmonthcard()) {
      total_size += 1 + 1;
    }

    // optional int32 repCount = 8 [default = 1];
    if (has_repcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repcount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 interval = 9 [default = 0];
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_notify::MergeFrom(const packetw2c_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_notifytype()) {
      set_notifytype(from.notifytype());
    }
    if (from.has_talkernickname()) {
      set_talkernickname(from.talkernickname());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_talkerviplevel()) {
      set_talkerviplevel(from.talkerviplevel());
    }
    if (from.has_hasmonthcard()) {
      set_hasmonthcard(from.hasmonthcard());
    }
    if (from.has_repcount()) {
      set_repcount(from.repcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_interval()) {
      set_interval(from.interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_notify::CopyFrom(const packetw2c_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_notify::IsInitialized() const {

  return true;
}

void packetw2c_notify::Swap(packetw2c_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(content_, other->content_);
    std::swap(notifytype_, other->notifytype_);
    std::swap(talkernickname_, other->talkernickname_);
    std::swap(playerid_, other->playerid_);
    std::swap(talkerviplevel_, other->talkerviplevel_);
    std::swap(hasmonthcard_, other->hasmonthcard_);
    std::swap(repcount_, other->repcount_);
    std::swap(interval_, other->interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_notify_descriptor_;
  metadata.reflection = packetw2c_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_player_notify::kPacketIdFieldNumber;
const int packetc2w_player_notify::kContentFieldNumber;
#endif  // !_MSC_VER

packetc2w_player_notify::packetc2w_player_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_player_notify)
}

void packetc2w_player_notify::InitAsDefaultInstance() {
}

packetc2w_player_notify::packetc2w_player_notify(const packetc2w_player_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_player_notify)
}

void packetc2w_player_notify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5036;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_player_notify::~packetc2w_player_notify() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_player_notify)
  SharedDtor();
}

void packetc2w_player_notify::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_player_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_player_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_player_notify_descriptor_;
}

const packetc2w_player_notify& packetc2w_player_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fchat_2eproto();
  return *default_instance_;
}

packetc2w_player_notify* packetc2w_player_notify::default_instance_ = NULL;

packetc2w_player_notify* packetc2w_player_notify::New() const {
  return new packetc2w_player_notify;
}

void packetc2w_player_notify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5036;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_player_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_player_notify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_notify];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_player_notify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_player_notify)
  return false;
#undef DO_
}

void packetc2w_player_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_player_notify)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_notify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_player_notify)
}

::google::protobuf::uint8* packetc2w_player_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_player_notify)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_notify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_player_notify)
  return target;
}

int packetc2w_player_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_notify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_player_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_player_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_player_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_player_notify::MergeFrom(const packetc2w_player_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_player_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_player_notify::CopyFrom(const packetc2w_player_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_player_notify::IsInitialized() const {

  return true;
}

void packetc2w_player_notify::Swap(packetc2w_player_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_player_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_player_notify_descriptor_;
  metadata.reflection = packetc2w_player_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_player_notify_result::kPacketIdFieldNumber;
const int packetw2c_player_notify_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_player_notify_result::packetw2c_player_notify_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_player_notify_result)
}

void packetw2c_player_notify_result::InitAsDefaultInstance() {
}

packetw2c_player_notify_result::packetw2c_player_notify_result(const packetw2c_player_notify_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_player_notify_result)
}

void packetw2c_player_notify_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7538;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_player_notify_result::~packetw2c_player_notify_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_player_notify_result)
  SharedDtor();
}

void packetw2c_player_notify_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_player_notify_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_player_notify_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_player_notify_result_descriptor_;
}

const packetw2c_player_notify_result& packetw2c_player_notify_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fchat_2eproto();
  return *default_instance_;
}

packetw2c_player_notify_result* packetw2c_player_notify_result::default_instance_ = NULL;

packetw2c_player_notify_result* packetw2c_player_notify_result::New() const {
  return new packetw2c_player_notify_result;
}

void packetw2c_player_notify_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7538;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_player_notify_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_player_notify_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_notify_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_player_notify_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_player_notify_result)
  return false;
#undef DO_
}

void packetw2c_player_notify_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_player_notify_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_notify_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_player_notify_result)
}

::google::protobuf::uint8* packetw2c_player_notify_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_player_notify_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_notify_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_player_notify_result)
  return target;
}

int packetw2c_player_notify_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_notify_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_player_notify_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_player_notify_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_player_notify_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_player_notify_result::MergeFrom(const packetw2c_player_notify_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_player_notify_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_player_notify_result::CopyFrom(const packetw2c_player_notify_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_player_notify_result::IsInitialized() const {

  return true;
}

void packetw2c_player_notify_result::Swap(packetw2c_player_notify_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_player_notify_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_player_notify_result_descriptor_;
  metadata.reflection = packetw2c_player_notify_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_player_continuous_send_speaker::kPacketIdFieldNumber;
const int packetc2w_player_continuous_send_speaker::kContentFieldNumber;
const int packetc2w_player_continuous_send_speaker::kCountFieldNumber;
#endif  // !_MSC_VER

packetc2w_player_continuous_send_speaker::packetc2w_player_continuous_send_speaker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_player_continuous_send_speaker)
}

void packetc2w_player_continuous_send_speaker::InitAsDefaultInstance() {
}

packetc2w_player_continuous_send_speaker::packetc2w_player_continuous_send_speaker(const packetc2w_player_continuous_send_speaker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_player_continuous_send_speaker)
}

void packetc2w_player_continuous_send_speaker::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5055;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_player_continuous_send_speaker::~packetc2w_player_continuous_send_speaker() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_player_continuous_send_speaker)
  SharedDtor();
}

void packetc2w_player_continuous_send_speaker::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_player_continuous_send_speaker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_player_continuous_send_speaker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_player_continuous_send_speaker_descriptor_;
}

const packetc2w_player_continuous_send_speaker& packetc2w_player_continuous_send_speaker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fchat_2eproto();
  return *default_instance_;
}

packetc2w_player_continuous_send_speaker* packetc2w_player_continuous_send_speaker::default_instance_ = NULL;

packetc2w_player_continuous_send_speaker* packetc2w_player_continuous_send_speaker::New() const {
  return new packetc2w_player_continuous_send_speaker;
}

void packetc2w_player_continuous_send_speaker::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 5055;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_player_continuous_send_speaker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_player_continuous_send_speaker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_continuous_send_speaker];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_player_continuous_send_speaker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_player_continuous_send_speaker)
  return false;
#undef DO_
}

void packetc2w_player_continuous_send_speaker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_player_continuous_send_speaker)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_continuous_send_speaker];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_player_continuous_send_speaker)
}

::google::protobuf::uint8* packetc2w_player_continuous_send_speaker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_player_continuous_send_speaker)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_continuous_send_speaker];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_player_continuous_send_speaker)
  return target;
}

int packetc2w_player_continuous_send_speaker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_continuous_send_speaker];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_player_continuous_send_speaker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_player_continuous_send_speaker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_player_continuous_send_speaker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_player_continuous_send_speaker::MergeFrom(const packetc2w_player_continuous_send_speaker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_player_continuous_send_speaker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_player_continuous_send_speaker::CopyFrom(const packetc2w_player_continuous_send_speaker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_player_continuous_send_speaker::IsInitialized() const {

  return true;
}

void packetc2w_player_continuous_send_speaker::Swap(packetc2w_player_continuous_send_speaker* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(content_, other->content_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_player_continuous_send_speaker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_player_continuous_send_speaker_descriptor_;
  metadata.reflection = packetc2w_player_continuous_send_speaker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_player_continuous_send_speaker_result::kPacketIdFieldNumber;
const int packetw2c_player_continuous_send_speaker_result::kResultFieldNumber;
const int packetw2c_player_continuous_send_speaker_result::kCountFieldNumber;
const int packetw2c_player_continuous_send_speaker_result::kRemainCountFieldNumber;
#endif  // !_MSC_VER

packetw2c_player_continuous_send_speaker_result::packetw2c_player_continuous_send_speaker_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_player_continuous_send_speaker_result)
}

void packetw2c_player_continuous_send_speaker_result::InitAsDefaultInstance() {
}

packetw2c_player_continuous_send_speaker_result::packetw2c_player_continuous_send_speaker_result(const packetw2c_player_continuous_send_speaker_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_player_continuous_send_speaker_result)
}

void packetw2c_player_continuous_send_speaker_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7558;
  result_ = 0;
  count_ = 0;
  remaincount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_player_continuous_send_speaker_result::~packetw2c_player_continuous_send_speaker_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_player_continuous_send_speaker_result)
  SharedDtor();
}

void packetw2c_player_continuous_send_speaker_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_player_continuous_send_speaker_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_player_continuous_send_speaker_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_player_continuous_send_speaker_result_descriptor_;
}

const packetw2c_player_continuous_send_speaker_result& packetw2c_player_continuous_send_speaker_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fchat_2eproto();
  return *default_instance_;
}

packetw2c_player_continuous_send_speaker_result* packetw2c_player_continuous_send_speaker_result::default_instance_ = NULL;

packetw2c_player_continuous_send_speaker_result* packetw2c_player_continuous_send_speaker_result::New() const {
  return new packetw2c_player_continuous_send_speaker_result;
}

void packetw2c_player_continuous_send_speaker_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_player_continuous_send_speaker_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(result_, remaincount_);
    packet_id_ = 7558;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_player_continuous_send_speaker_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_player_continuous_send_speaker_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_continuous_send_speaker_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_remainCount;
        break;
      }

      // optional int32 remainCount = 4;
      case 4: {
        if (tag == 32) {
         parse_remainCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaincount_)));
          set_has_remaincount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_player_continuous_send_speaker_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_player_continuous_send_speaker_result)
  return false;
#undef DO_
}

void packetw2c_player_continuous_send_speaker_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_player_continuous_send_speaker_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_continuous_send_speaker_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional int32 remainCount = 4;
  if (has_remaincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remaincount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_player_continuous_send_speaker_result)
}

::google::protobuf::uint8* packetw2c_player_continuous_send_speaker_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_player_continuous_send_speaker_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_continuous_send_speaker_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional int32 remainCount = 4;
  if (has_remaincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remaincount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_player_continuous_send_speaker_result)
  return target;
}

int packetw2c_player_continuous_send_speaker_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_continuous_send_speaker_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 remainCount = 4;
    if (has_remaincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaincount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_player_continuous_send_speaker_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_player_continuous_send_speaker_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_player_continuous_send_speaker_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_player_continuous_send_speaker_result::MergeFrom(const packetw2c_player_continuous_send_speaker_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_remaincount()) {
      set_remaincount(from.remaincount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_player_continuous_send_speaker_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_player_continuous_send_speaker_result::CopyFrom(const packetw2c_player_continuous_send_speaker_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_player_continuous_send_speaker_result::IsInitialized() const {

  return true;
}

void packetw2c_player_continuous_send_speaker_result::Swap(packetw2c_player_continuous_send_speaker_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(count_, other->count_);
    std::swap(remaincount_, other->remaincount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_player_continuous_send_speaker_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_player_continuous_send_speaker_result_descriptor_;
  metadata.reflection = packetw2c_player_continuous_send_speaker_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
