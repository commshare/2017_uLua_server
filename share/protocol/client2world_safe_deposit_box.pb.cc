// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_safe_deposit_box.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_safe_deposit_box.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2w_set_password_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_set_password_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_set_password_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_set_password_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_modify_password_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_modify_password_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_modify_password_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_modify_password_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_reset_password_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_reset_password_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_reset_password_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_reset_password_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_deposit_gold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_deposit_gold_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_deposit_gold_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_deposit_gold_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_draw_gold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_draw_gold_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_draw_gold_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_draw_gold_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_get_safe_box_security_code_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_get_safe_box_security_code_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_get_safe_box_security_code_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_get_safe_box_security_code_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_check_password_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_check_password_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_check_password_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_check_password_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto() {
  protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_safe_deposit_box.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2w_set_password_descriptor_ = file->message_type(0);
  static const int packetc2w_set_password_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_set_password, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_set_password, pwd1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_set_password, pwd2_),
  };
  packetc2w_set_password_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_set_password_descriptor_,
      packetc2w_set_password::default_instance_,
      packetc2w_set_password_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_set_password, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_set_password, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_set_password));
  packetw2c_set_password_result_descriptor_ = file->message_type(1);
  static const int packetw2c_set_password_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_set_password_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_set_password_result, result_),
  };
  packetw2c_set_password_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_set_password_result_descriptor_,
      packetw2c_set_password_result::default_instance_,
      packetw2c_set_password_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_set_password_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_set_password_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_set_password_result));
  packetc2w_modify_password_descriptor_ = file->message_type(2);
  static const int packetc2w_modify_password_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_modify_password, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_modify_password, old_pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_modify_password, new_pwd1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_modify_password, new_pwd2_),
  };
  packetc2w_modify_password_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_modify_password_descriptor_,
      packetc2w_modify_password::default_instance_,
      packetc2w_modify_password_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_modify_password, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_modify_password, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_modify_password));
  packetw2c_modify_password_result_descriptor_ = file->message_type(3);
  static const int packetw2c_modify_password_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_modify_password_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_modify_password_result, result_),
  };
  packetw2c_modify_password_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_modify_password_result_descriptor_,
      packetw2c_modify_password_result::default_instance_,
      packetw2c_modify_password_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_modify_password_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_modify_password_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_modify_password_result));
  packetc2w_reset_password_descriptor_ = file->message_type(4);
  static const int packetc2w_reset_password_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_reset_password, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_reset_password, pwd1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_reset_password, pwd2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_reset_password, safecode_),
  };
  packetc2w_reset_password_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_reset_password_descriptor_,
      packetc2w_reset_password::default_instance_,
      packetc2w_reset_password_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_reset_password, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_reset_password, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_reset_password));
  packetw2c_reset_password_result_descriptor_ = file->message_type(5);
  static const int packetw2c_reset_password_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_reset_password_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_reset_password_result, result_),
  };
  packetw2c_reset_password_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_reset_password_result_descriptor_,
      packetw2c_reset_password_result::default_instance_,
      packetw2c_reset_password_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_reset_password_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_reset_password_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_reset_password_result));
  packetc2w_deposit_gold_descriptor_ = file->message_type(6);
  static const int packetc2w_deposit_gold_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_deposit_gold, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_deposit_gold, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_deposit_gold, pwd_),
  };
  packetc2w_deposit_gold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_deposit_gold_descriptor_,
      packetc2w_deposit_gold::default_instance_,
      packetc2w_deposit_gold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_deposit_gold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_deposit_gold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_deposit_gold));
  packetw2c_deposit_gold_result_descriptor_ = file->message_type(7);
  static const int packetw2c_deposit_gold_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_deposit_gold_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_deposit_gold_result, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_deposit_gold_result, result_),
  };
  packetw2c_deposit_gold_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_deposit_gold_result_descriptor_,
      packetw2c_deposit_gold_result::default_instance_,
      packetw2c_deposit_gold_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_deposit_gold_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_deposit_gold_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_deposit_gold_result));
  packetc2w_draw_gold_descriptor_ = file->message_type(8);
  static const int packetc2w_draw_gold_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_draw_gold, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_draw_gold, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_draw_gold, pwd_),
  };
  packetc2w_draw_gold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_draw_gold_descriptor_,
      packetc2w_draw_gold::default_instance_,
      packetc2w_draw_gold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_draw_gold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_draw_gold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_draw_gold));
  packetw2c_draw_gold_result_descriptor_ = file->message_type(9);
  static const int packetw2c_draw_gold_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_draw_gold_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_draw_gold_result, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_draw_gold_result, result_),
  };
  packetw2c_draw_gold_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_draw_gold_result_descriptor_,
      packetw2c_draw_gold_result::default_instance_,
      packetw2c_draw_gold_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_draw_gold_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_draw_gold_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_draw_gold_result));
  packetc2w_get_safe_box_security_code_descriptor_ = file->message_type(10);
  static const int packetc2w_get_safe_box_security_code_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_safe_box_security_code, packet_id_),
  };
  packetc2w_get_safe_box_security_code_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_get_safe_box_security_code_descriptor_,
      packetc2w_get_safe_box_security_code::default_instance_,
      packetc2w_get_safe_box_security_code_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_safe_box_security_code, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_safe_box_security_code, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_get_safe_box_security_code));
  packetw2c_get_safe_box_security_code_result_descriptor_ = file->message_type(11);
  static const int packetw2c_get_safe_box_security_code_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_safe_box_security_code_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_safe_box_security_code_result, result_),
  };
  packetw2c_get_safe_box_security_code_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_get_safe_box_security_code_result_descriptor_,
      packetw2c_get_safe_box_security_code_result::default_instance_,
      packetw2c_get_safe_box_security_code_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_safe_box_security_code_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_safe_box_security_code_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_get_safe_box_security_code_result));
  packetc2w_check_password_descriptor_ = file->message_type(12);
  static const int packetc2w_check_password_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_check_password, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_check_password, pwd_),
  };
  packetc2w_check_password_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_check_password_descriptor_,
      packetc2w_check_password::default_instance_,
      packetc2w_check_password_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_check_password, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_check_password, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_check_password));
  packetw2c_check_password_result_descriptor_ = file->message_type(13);
  static const int packetw2c_check_password_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_check_password_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_check_password_result, result_),
  };
  packetw2c_check_password_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_check_password_result_descriptor_,
      packetw2c_check_password_result::default_instance_,
      packetw2c_check_password_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_check_password_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_check_password_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_check_password_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_set_password_descriptor_, &packetc2w_set_password::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_set_password_result_descriptor_, &packetw2c_set_password_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_modify_password_descriptor_, &packetc2w_modify_password::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_modify_password_result_descriptor_, &packetw2c_modify_password_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_reset_password_descriptor_, &packetc2w_reset_password::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_reset_password_result_descriptor_, &packetw2c_reset_password_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_deposit_gold_descriptor_, &packetc2w_deposit_gold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_deposit_gold_result_descriptor_, &packetw2c_deposit_gold_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_draw_gold_descriptor_, &packetc2w_draw_gold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_draw_gold_result_descriptor_, &packetw2c_draw_gold_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_get_safe_box_security_code_descriptor_, &packetc2w_get_safe_box_security_code::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_get_safe_box_security_code_result_descriptor_, &packetw2c_get_safe_box_security_code_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_check_password_descriptor_, &packetc2w_check_password::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_check_password_result_descriptor_, &packetw2c_check_password_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto() {
  delete packetc2w_set_password::default_instance_;
  delete packetc2w_set_password_reflection_;
  delete packetw2c_set_password_result::default_instance_;
  delete packetw2c_set_password_result_reflection_;
  delete packetc2w_modify_password::default_instance_;
  delete packetc2w_modify_password_reflection_;
  delete packetw2c_modify_password_result::default_instance_;
  delete packetw2c_modify_password_result_reflection_;
  delete packetc2w_reset_password::default_instance_;
  delete packetc2w_reset_password_reflection_;
  delete packetw2c_reset_password_result::default_instance_;
  delete packetw2c_reset_password_result_reflection_;
  delete packetc2w_deposit_gold::default_instance_;
  delete packetc2w_deposit_gold_reflection_;
  delete packetw2c_deposit_gold_result::default_instance_;
  delete packetw2c_deposit_gold_result_reflection_;
  delete packetc2w_draw_gold::default_instance_;
  delete packetc2w_draw_gold_reflection_;
  delete packetw2c_draw_gold_result::default_instance_;
  delete packetw2c_draw_gold_result_reflection_;
  delete packetc2w_get_safe_box_security_code::default_instance_;
  delete packetc2w_get_safe_box_security_code_reflection_;
  delete packetw2c_get_safe_box_security_code_result::default_instance_;
  delete packetw2c_get_safe_box_security_code_result_reflection_;
  delete packetc2w_check_password::default_instance_;
  delete packetc2w_check_password_reflection_;
  delete packetw2c_check_password_result::default_instance_;
  delete packetw2c_check_password_result_reflection_;
}

void protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#client2world_safe_deposit_box.proto\022\026c"
    "lient2world_protocols\032\033client2world_msg_"
    "type.proto\032\022msg_type_def.proto\032\022msg_info"
    "_def.proto\"\212\001\n\026packetc2w_set_password\022T\n"
    "\tpacket_id\030\001 \001(\0162).client2world_protocol"
    "s.e_server_msg_type:\026e_mst_c2w_set_passw"
    "ord\022\014\n\004pwd1\030\002 \001(\t\022\014\n\004pwd2\030\003 \001(\t\"\214\001\n\035pack"
    "etw2c_set_password_result\022[\n\tpacket_id\030\001"
    " \001(\0162).client2world_protocols.e_server_m"
    "sg_type:\035e_mst_w2c_set_password_result\022\016"
    "\n\006result\030\002 \001(\005\"\251\001\n\031packetc2w_modify_pass"
    "word\022W\n\tpacket_id\030\001 \001(\0162).client2world_p"
    "rotocols.e_server_msg_type:\031e_mst_c2w_mo"
    "dify_password\022\017\n\007old_pwd\030\002 \001(\t\022\020\n\010new_pw"
    "d1\030\003 \001(\t\022\020\n\010new_pwd2\030\004 \001(\t\"\222\001\n packetw2c"
    "_modify_password_result\022^\n\tpacket_id\030\001 \001"
    "(\0162).client2world_protocols.e_server_msg"
    "_type: e_mst_w2c_modify_password_result\022"
    "\016\n\006result\030\002 \001(\005\"\240\001\n\030packetc2w_reset_pass"
    "word\022V\n\tpacket_id\030\001 \001(\0162).client2world_p"
    "rotocols.e_server_msg_type:\030e_mst_c2w_re"
    "set_password\022\014\n\004pwd1\030\002 \001(\t\022\014\n\004pwd2\030\003 \001(\t"
    "\022\020\n\010safeCode\030\004 \001(\t\"\220\001\n\037packetw2c_reset_p"
    "assword_result\022]\n\tpacket_id\030\001 \001(\0162).clie"
    "nt2world_protocols.e_server_msg_type:\037e_"
    "mst_w2c_reset_password_result\022\016\n\006result\030"
    "\002 \001(\005\"\211\001\n\026packetc2w_deposit_gold\022T\n\tpack"
    "et_id\030\001 \001(\0162).client2world_protocols.e_s"
    "erver_msg_type:\026e_mst_c2w_deposit_gold\022\014"
    "\n\004gold\030\002 \001(\003\022\013\n\003pwd\030\003 \001(\t\"\232\001\n\035packetw2c_"
    "deposit_gold_result\022[\n\tpacket_id\030\001 \001(\0162)"
    ".client2world_protocols.e_server_msg_typ"
    "e:\035e_mst_w2c_deposit_gold_result\022\014\n\004gold"
    "\030\002 \001(\003\022\016\n\006result\030\003 \001(\005\"\203\001\n\023packetc2w_dra"
    "w_gold\022Q\n\tpacket_id\030\001 \001(\0162).client2world"
    "_protocols.e_server_msg_type:\023e_mst_c2w_"
    "draw_gold\022\014\n\004gold\030\002 \001(\003\022\013\n\003pwd\030\003 \001(\t\"\224\001\n"
    "\032packetw2c_draw_gold_result\022X\n\tpacket_id"
    "\030\001 \001(\0162).client2world_protocols.e_server"
    "_msg_type:\032e_mst_w2c_draw_gold_result\022\014\n"
    "\004gold\030\002 \001(\003\022\016\n\006result\030\003 \001(\005\"\212\001\n$packetc2"
    "w_get_safe_box_security_code\022b\n\tpacket_i"
    "d\030\001 \001(\0162).client2world_protocols.e_serve"
    "r_msg_type:$e_mst_c2w_get_safe_box_secur"
    "ity_code\"\250\001\n+packetw2c_get_safe_box_secu"
    "rity_code_result\022i\n\tpacket_id\030\001 \001(\0162).cl"
    "ient2world_protocols.e_server_msg_type:+"
    "e_mst_w2c_get_safe_box_security_code_res"
    "ult\022\016\n\006result\030\002 \001(\005\"\177\n\030packetc2w_check_p"
    "assword\022V\n\tpacket_id\030\001 \001(\0162).client2worl"
    "d_protocols.e_server_msg_type:\030e_mst_c2w"
    "_check_password\022\013\n\003pwd\030\002 \001(\t\"\220\001\n\037packetw"
    "2c_check_password_result\022]\n\tpacket_id\030\001 "
    "\001(\0162).client2world_protocols.e_server_ms"
    "g_type:\037e_mst_w2c_check_password_result\022"
    "\016\n\006result\030\002 \001(\005", 2215);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_safe_deposit_box.proto", &protobuf_RegisterTypes);
  packetc2w_set_password::default_instance_ = new packetc2w_set_password();
  packetw2c_set_password_result::default_instance_ = new packetw2c_set_password_result();
  packetc2w_modify_password::default_instance_ = new packetc2w_modify_password();
  packetw2c_modify_password_result::default_instance_ = new packetw2c_modify_password_result();
  packetc2w_reset_password::default_instance_ = new packetc2w_reset_password();
  packetw2c_reset_password_result::default_instance_ = new packetw2c_reset_password_result();
  packetc2w_deposit_gold::default_instance_ = new packetc2w_deposit_gold();
  packetw2c_deposit_gold_result::default_instance_ = new packetw2c_deposit_gold_result();
  packetc2w_draw_gold::default_instance_ = new packetc2w_draw_gold();
  packetw2c_draw_gold_result::default_instance_ = new packetw2c_draw_gold_result();
  packetc2w_get_safe_box_security_code::default_instance_ = new packetc2w_get_safe_box_security_code();
  packetw2c_get_safe_box_security_code_result::default_instance_ = new packetw2c_get_safe_box_security_code_result();
  packetc2w_check_password::default_instance_ = new packetc2w_check_password();
  packetw2c_check_password_result::default_instance_ = new packetw2c_check_password_result();
  packetc2w_set_password::default_instance_->InitAsDefaultInstance();
  packetw2c_set_password_result::default_instance_->InitAsDefaultInstance();
  packetc2w_modify_password::default_instance_->InitAsDefaultInstance();
  packetw2c_modify_password_result::default_instance_->InitAsDefaultInstance();
  packetc2w_reset_password::default_instance_->InitAsDefaultInstance();
  packetw2c_reset_password_result::default_instance_->InitAsDefaultInstance();
  packetc2w_deposit_gold::default_instance_->InitAsDefaultInstance();
  packetw2c_deposit_gold_result::default_instance_->InitAsDefaultInstance();
  packetc2w_draw_gold::default_instance_->InitAsDefaultInstance();
  packetw2c_draw_gold_result::default_instance_->InitAsDefaultInstance();
  packetc2w_get_safe_box_security_code::default_instance_->InitAsDefaultInstance();
  packetw2c_get_safe_box_security_code_result::default_instance_->InitAsDefaultInstance();
  packetc2w_check_password::default_instance_->InitAsDefaultInstance();
  packetw2c_check_password_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fsafe_5fdeposit_5fbox_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fsafe_5fdeposit_5fbox_2eproto {
  StaticDescriptorInitializer_client2world_5fsafe_5fdeposit_5fbox_2eproto() {
    protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  }
} static_descriptor_initializer_client2world_5fsafe_5fdeposit_5fbox_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2w_set_password::kPacketIdFieldNumber;
const int packetc2w_set_password::kPwd1FieldNumber;
const int packetc2w_set_password::kPwd2FieldNumber;
#endif  // !_MSC_VER

packetc2w_set_password::packetc2w_set_password()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_set_password)
}

void packetc2w_set_password::InitAsDefaultInstance() {
}

packetc2w_set_password::packetc2w_set_password(const packetc2w_set_password& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_set_password)
}

void packetc2w_set_password::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5029;
  pwd1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_set_password::~packetc2w_set_password() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_set_password)
  SharedDtor();
}

void packetc2w_set_password::SharedDtor() {
  if (pwd1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd1_;
  }
  if (pwd2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd2_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_set_password::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_set_password::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_set_password_descriptor_;
}

const packetc2w_set_password& packetc2w_set_password::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  return *default_instance_;
}

packetc2w_set_password* packetc2w_set_password::default_instance_ = NULL;

packetc2w_set_password* packetc2w_set_password::New() const {
  return new packetc2w_set_password;
}

void packetc2w_set_password::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 5029;
    if (has_pwd1()) {
      if (pwd1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd1_->clear();
      }
    }
    if (has_pwd2()) {
      if (pwd2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_set_password::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_set_password)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_set_password];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pwd1;
        break;
      }

      // optional string pwd1 = 2;
      case 2: {
        if (tag == 18) {
         parse_pwd1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd1().data(), this->pwd1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pwd1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pwd2;
        break;
      }

      // optional string pwd2 = 3;
      case 3: {
        if (tag == 26) {
         parse_pwd2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd2().data(), this->pwd2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pwd2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_set_password)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_set_password)
  return false;
#undef DO_
}

void packetc2w_set_password::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_set_password)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_set_password];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string pwd1 = 2;
  if (has_pwd1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd1().data(), this->pwd1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pwd1(), output);
  }

  // optional string pwd2 = 3;
  if (has_pwd2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd2().data(), this->pwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_set_password)
}

::google::protobuf::uint8* packetc2w_set_password::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_set_password)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_set_password];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string pwd1 = 2;
  if (has_pwd1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd1().data(), this->pwd1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pwd1(), target);
  }

  // optional string pwd2 = 3;
  if (has_pwd2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd2().data(), this->pwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_set_password)
  return target;
}

int packetc2w_set_password::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_set_password];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string pwd1 = 2;
    if (has_pwd1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd1());
    }

    // optional string pwd2 = 3;
    if (has_pwd2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_set_password::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_set_password* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_set_password*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_set_password::MergeFrom(const packetc2w_set_password& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_pwd1()) {
      set_pwd1(from.pwd1());
    }
    if (from.has_pwd2()) {
      set_pwd2(from.pwd2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_set_password::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_set_password::CopyFrom(const packetc2w_set_password& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_set_password::IsInitialized() const {

  return true;
}

void packetc2w_set_password::Swap(packetc2w_set_password* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(pwd1_, other->pwd1_);
    std::swap(pwd2_, other->pwd2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_set_password::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_set_password_descriptor_;
  metadata.reflection = packetc2w_set_password_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_set_password_result::kPacketIdFieldNumber;
const int packetw2c_set_password_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_set_password_result::packetw2c_set_password_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_set_password_result)
}

void packetw2c_set_password_result::InitAsDefaultInstance() {
}

packetw2c_set_password_result::packetw2c_set_password_result(const packetw2c_set_password_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_set_password_result)
}

void packetw2c_set_password_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7531;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_set_password_result::~packetw2c_set_password_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_set_password_result)
  SharedDtor();
}

void packetw2c_set_password_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_set_password_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_set_password_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_set_password_result_descriptor_;
}

const packetw2c_set_password_result& packetw2c_set_password_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  return *default_instance_;
}

packetw2c_set_password_result* packetw2c_set_password_result::default_instance_ = NULL;

packetw2c_set_password_result* packetw2c_set_password_result::New() const {
  return new packetw2c_set_password_result;
}

void packetw2c_set_password_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7531;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_set_password_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_set_password_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_set_password_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_set_password_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_set_password_result)
  return false;
#undef DO_
}

void packetw2c_set_password_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_set_password_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_set_password_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_set_password_result)
}

::google::protobuf::uint8* packetw2c_set_password_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_set_password_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_set_password_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_set_password_result)
  return target;
}

int packetw2c_set_password_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_set_password_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_set_password_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_set_password_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_set_password_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_set_password_result::MergeFrom(const packetw2c_set_password_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_set_password_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_set_password_result::CopyFrom(const packetw2c_set_password_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_set_password_result::IsInitialized() const {

  return true;
}

void packetw2c_set_password_result::Swap(packetw2c_set_password_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_set_password_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_set_password_result_descriptor_;
  metadata.reflection = packetw2c_set_password_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_modify_password::kPacketIdFieldNumber;
const int packetc2w_modify_password::kOldPwdFieldNumber;
const int packetc2w_modify_password::kNewPwd1FieldNumber;
const int packetc2w_modify_password::kNewPwd2FieldNumber;
#endif  // !_MSC_VER

packetc2w_modify_password::packetc2w_modify_password()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_modify_password)
}

void packetc2w_modify_password::InitAsDefaultInstance() {
}

packetc2w_modify_password::packetc2w_modify_password(const packetc2w_modify_password& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_modify_password)
}

void packetc2w_modify_password::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5034;
  old_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_pwd1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_pwd2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_modify_password::~packetc2w_modify_password() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_modify_password)
  SharedDtor();
}

void packetc2w_modify_password::SharedDtor() {
  if (old_pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete old_pwd_;
  }
  if (new_pwd1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_pwd1_;
  }
  if (new_pwd2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete new_pwd2_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_modify_password::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_modify_password::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_modify_password_descriptor_;
}

const packetc2w_modify_password& packetc2w_modify_password::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  return *default_instance_;
}

packetc2w_modify_password* packetc2w_modify_password::default_instance_ = NULL;

packetc2w_modify_password* packetc2w_modify_password::New() const {
  return new packetc2w_modify_password;
}

void packetc2w_modify_password::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    packet_id_ = 5034;
    if (has_old_pwd()) {
      if (old_pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        old_pwd_->clear();
      }
    }
    if (has_new_pwd1()) {
      if (new_pwd1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        new_pwd1_->clear();
      }
    }
    if (has_new_pwd2()) {
      if (new_pwd2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        new_pwd2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_modify_password::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_modify_password)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_modify_password];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_old_pwd;
        break;
      }

      // optional string old_pwd = 2;
      case 2: {
        if (tag == 18) {
         parse_old_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->old_pwd().data(), this->old_pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "old_pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_new_pwd1;
        break;
      }

      // optional string new_pwd1 = 3;
      case 3: {
        if (tag == 26) {
         parse_new_pwd1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_pwd1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new_pwd1().data(), this->new_pwd1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_pwd1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_new_pwd2;
        break;
      }

      // optional string new_pwd2 = 4;
      case 4: {
        if (tag == 34) {
         parse_new_pwd2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_pwd2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new_pwd2().data(), this->new_pwd2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_pwd2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_modify_password)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_modify_password)
  return false;
#undef DO_
}

void packetc2w_modify_password::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_modify_password)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_modify_password];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string old_pwd = 2;
  if (has_old_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_pwd().data(), this->old_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "old_pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->old_pwd(), output);
  }

  // optional string new_pwd1 = 3;
  if (has_new_pwd1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_pwd1().data(), this->new_pwd1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_pwd1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->new_pwd1(), output);
  }

  // optional string new_pwd2 = 4;
  if (has_new_pwd2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_pwd2().data(), this->new_pwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_pwd2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->new_pwd2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_modify_password)
}

::google::protobuf::uint8* packetc2w_modify_password::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_modify_password)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_modify_password];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string old_pwd = 2;
  if (has_old_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->old_pwd().data(), this->old_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "old_pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->old_pwd(), target);
  }

  // optional string new_pwd1 = 3;
  if (has_new_pwd1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_pwd1().data(), this->new_pwd1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_pwd1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->new_pwd1(), target);
  }

  // optional string new_pwd2 = 4;
  if (has_new_pwd2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_pwd2().data(), this->new_pwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_pwd2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->new_pwd2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_modify_password)
  return target;
}

int packetc2w_modify_password::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_modify_password];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string old_pwd = 2;
    if (has_old_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_pwd());
    }

    // optional string new_pwd1 = 3;
    if (has_new_pwd1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_pwd1());
    }

    // optional string new_pwd2 = 4;
    if (has_new_pwd2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_pwd2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_modify_password::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_modify_password* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_modify_password*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_modify_password::MergeFrom(const packetc2w_modify_password& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_old_pwd()) {
      set_old_pwd(from.old_pwd());
    }
    if (from.has_new_pwd1()) {
      set_new_pwd1(from.new_pwd1());
    }
    if (from.has_new_pwd2()) {
      set_new_pwd2(from.new_pwd2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_modify_password::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_modify_password::CopyFrom(const packetc2w_modify_password& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_modify_password::IsInitialized() const {

  return true;
}

void packetc2w_modify_password::Swap(packetc2w_modify_password* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(old_pwd_, other->old_pwd_);
    std::swap(new_pwd1_, other->new_pwd1_);
    std::swap(new_pwd2_, other->new_pwd2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_modify_password::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_modify_password_descriptor_;
  metadata.reflection = packetc2w_modify_password_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_modify_password_result::kPacketIdFieldNumber;
const int packetw2c_modify_password_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_modify_password_result::packetw2c_modify_password_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_modify_password_result)
}

void packetw2c_modify_password_result::InitAsDefaultInstance() {
}

packetw2c_modify_password_result::packetw2c_modify_password_result(const packetw2c_modify_password_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_modify_password_result)
}

void packetw2c_modify_password_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7536;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_modify_password_result::~packetw2c_modify_password_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_modify_password_result)
  SharedDtor();
}

void packetw2c_modify_password_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_modify_password_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_modify_password_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_modify_password_result_descriptor_;
}

const packetw2c_modify_password_result& packetw2c_modify_password_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  return *default_instance_;
}

packetw2c_modify_password_result* packetw2c_modify_password_result::default_instance_ = NULL;

packetw2c_modify_password_result* packetw2c_modify_password_result::New() const {
  return new packetw2c_modify_password_result;
}

void packetw2c_modify_password_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7536;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_modify_password_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_modify_password_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_modify_password_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_modify_password_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_modify_password_result)
  return false;
#undef DO_
}

void packetw2c_modify_password_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_modify_password_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_modify_password_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_modify_password_result)
}

::google::protobuf::uint8* packetw2c_modify_password_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_modify_password_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_modify_password_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_modify_password_result)
  return target;
}

int packetw2c_modify_password_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_modify_password_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_modify_password_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_modify_password_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_modify_password_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_modify_password_result::MergeFrom(const packetw2c_modify_password_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_modify_password_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_modify_password_result::CopyFrom(const packetw2c_modify_password_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_modify_password_result::IsInitialized() const {

  return true;
}

void packetw2c_modify_password_result::Swap(packetw2c_modify_password_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_modify_password_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_modify_password_result_descriptor_;
  metadata.reflection = packetw2c_modify_password_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_reset_password::kPacketIdFieldNumber;
const int packetc2w_reset_password::kPwd1FieldNumber;
const int packetc2w_reset_password::kPwd2FieldNumber;
const int packetc2w_reset_password::kSafeCodeFieldNumber;
#endif  // !_MSC_VER

packetc2w_reset_password::packetc2w_reset_password()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_reset_password)
}

void packetc2w_reset_password::InitAsDefaultInstance() {
}

packetc2w_reset_password::packetc2w_reset_password(const packetc2w_reset_password& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_reset_password)
}

void packetc2w_reset_password::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5066;
  pwd1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  safecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_reset_password::~packetc2w_reset_password() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_reset_password)
  SharedDtor();
}

void packetc2w_reset_password::SharedDtor() {
  if (pwd1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd1_;
  }
  if (pwd2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd2_;
  }
  if (safecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete safecode_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_reset_password::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_reset_password::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_reset_password_descriptor_;
}

const packetc2w_reset_password& packetc2w_reset_password::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  return *default_instance_;
}

packetc2w_reset_password* packetc2w_reset_password::default_instance_ = NULL;

packetc2w_reset_password* packetc2w_reset_password::New() const {
  return new packetc2w_reset_password;
}

void packetc2w_reset_password::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    packet_id_ = 5066;
    if (has_pwd1()) {
      if (pwd1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd1_->clear();
      }
    }
    if (has_pwd2()) {
      if (pwd2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd2_->clear();
      }
    }
    if (has_safecode()) {
      if (safecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        safecode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_reset_password::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_reset_password)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_reset_password];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pwd1;
        break;
      }

      // optional string pwd1 = 2;
      case 2: {
        if (tag == 18) {
         parse_pwd1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd1().data(), this->pwd1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pwd1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pwd2;
        break;
      }

      // optional string pwd2 = 3;
      case 3: {
        if (tag == 26) {
         parse_pwd2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd2().data(), this->pwd2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pwd2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_safeCode;
        break;
      }

      // optional string safeCode = 4;
      case 4: {
        if (tag == 34) {
         parse_safeCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_safecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->safecode().data(), this->safecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "safecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_reset_password)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_reset_password)
  return false;
#undef DO_
}

void packetc2w_reset_password::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_reset_password)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_reset_password];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string pwd1 = 2;
  if (has_pwd1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd1().data(), this->pwd1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pwd1(), output);
  }

  // optional string pwd2 = 3;
  if (has_pwd2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd2().data(), this->pwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd2(), output);
  }

  // optional string safeCode = 4;
  if (has_safecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->safecode().data(), this->safecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "safecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->safecode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_reset_password)
}

::google::protobuf::uint8* packetc2w_reset_password::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_reset_password)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_reset_password];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string pwd1 = 2;
  if (has_pwd1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd1().data(), this->pwd1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pwd1(), target);
  }

  // optional string pwd2 = 3;
  if (has_pwd2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd2().data(), this->pwd2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd2(), target);
  }

  // optional string safeCode = 4;
  if (has_safecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->safecode().data(), this->safecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "safecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->safecode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_reset_password)
  return target;
}

int packetc2w_reset_password::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_reset_password];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string pwd1 = 2;
    if (has_pwd1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd1());
    }

    // optional string pwd2 = 3;
    if (has_pwd2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd2());
    }

    // optional string safeCode = 4;
    if (has_safecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->safecode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_reset_password::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_reset_password* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_reset_password*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_reset_password::MergeFrom(const packetc2w_reset_password& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_pwd1()) {
      set_pwd1(from.pwd1());
    }
    if (from.has_pwd2()) {
      set_pwd2(from.pwd2());
    }
    if (from.has_safecode()) {
      set_safecode(from.safecode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_reset_password::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_reset_password::CopyFrom(const packetc2w_reset_password& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_reset_password::IsInitialized() const {

  return true;
}

void packetc2w_reset_password::Swap(packetc2w_reset_password* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(pwd1_, other->pwd1_);
    std::swap(pwd2_, other->pwd2_);
    std::swap(safecode_, other->safecode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_reset_password::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_reset_password_descriptor_;
  metadata.reflection = packetc2w_reset_password_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_reset_password_result::kPacketIdFieldNumber;
const int packetw2c_reset_password_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_reset_password_result::packetw2c_reset_password_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_reset_password_result)
}

void packetw2c_reset_password_result::InitAsDefaultInstance() {
}

packetw2c_reset_password_result::packetw2c_reset_password_result(const packetw2c_reset_password_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_reset_password_result)
}

void packetw2c_reset_password_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7572;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_reset_password_result::~packetw2c_reset_password_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_reset_password_result)
  SharedDtor();
}

void packetw2c_reset_password_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_reset_password_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_reset_password_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_reset_password_result_descriptor_;
}

const packetw2c_reset_password_result& packetw2c_reset_password_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  return *default_instance_;
}

packetw2c_reset_password_result* packetw2c_reset_password_result::default_instance_ = NULL;

packetw2c_reset_password_result* packetw2c_reset_password_result::New() const {
  return new packetw2c_reset_password_result;
}

void packetw2c_reset_password_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7572;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_reset_password_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_reset_password_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_reset_password_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_reset_password_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_reset_password_result)
  return false;
#undef DO_
}

void packetw2c_reset_password_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_reset_password_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_reset_password_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_reset_password_result)
}

::google::protobuf::uint8* packetw2c_reset_password_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_reset_password_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_reset_password_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_reset_password_result)
  return target;
}

int packetw2c_reset_password_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_reset_password_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_reset_password_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_reset_password_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_reset_password_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_reset_password_result::MergeFrom(const packetw2c_reset_password_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_reset_password_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_reset_password_result::CopyFrom(const packetw2c_reset_password_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_reset_password_result::IsInitialized() const {

  return true;
}

void packetw2c_reset_password_result::Swap(packetw2c_reset_password_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_reset_password_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_reset_password_result_descriptor_;
  metadata.reflection = packetw2c_reset_password_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_deposit_gold::kPacketIdFieldNumber;
const int packetc2w_deposit_gold::kGoldFieldNumber;
const int packetc2w_deposit_gold::kPwdFieldNumber;
#endif  // !_MSC_VER

packetc2w_deposit_gold::packetc2w_deposit_gold()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_deposit_gold)
}

void packetc2w_deposit_gold::InitAsDefaultInstance() {
}

packetc2w_deposit_gold::packetc2w_deposit_gold(const packetc2w_deposit_gold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_deposit_gold)
}

void packetc2w_deposit_gold::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5030;
  gold_ = GOOGLE_LONGLONG(0);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_deposit_gold::~packetc2w_deposit_gold() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_deposit_gold)
  SharedDtor();
}

void packetc2w_deposit_gold::SharedDtor() {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_deposit_gold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_deposit_gold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_deposit_gold_descriptor_;
}

const packetc2w_deposit_gold& packetc2w_deposit_gold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  return *default_instance_;
}

packetc2w_deposit_gold* packetc2w_deposit_gold::default_instance_ = NULL;

packetc2w_deposit_gold* packetc2w_deposit_gold::New() const {
  return new packetc2w_deposit_gold;
}

void packetc2w_deposit_gold::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 5030;
    gold_ = GOOGLE_LONGLONG(0);
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_deposit_gold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_deposit_gold)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_deposit_gold];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int64 gold = 2;
      case 2: {
        if (tag == 16) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }

      // optional string pwd = 3;
      case 3: {
        if (tag == 26) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_deposit_gold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_deposit_gold)
  return false;
#undef DO_
}

void packetc2w_deposit_gold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_deposit_gold)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_deposit_gold];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_deposit_gold)
}

::google::protobuf::uint8* packetc2w_deposit_gold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_deposit_gold)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_deposit_gold];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_deposit_gold)
  return target;
}

int packetc2w_deposit_gold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_deposit_gold];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_deposit_gold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_deposit_gold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_deposit_gold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_deposit_gold::MergeFrom(const packetc2w_deposit_gold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_deposit_gold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_deposit_gold::CopyFrom(const packetc2w_deposit_gold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_deposit_gold::IsInitialized() const {

  return true;
}

void packetc2w_deposit_gold::Swap(packetc2w_deposit_gold* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(gold_, other->gold_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_deposit_gold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_deposit_gold_descriptor_;
  metadata.reflection = packetc2w_deposit_gold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_deposit_gold_result::kPacketIdFieldNumber;
const int packetw2c_deposit_gold_result::kGoldFieldNumber;
const int packetw2c_deposit_gold_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_deposit_gold_result::packetw2c_deposit_gold_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_deposit_gold_result)
}

void packetw2c_deposit_gold_result::InitAsDefaultInstance() {
}

packetw2c_deposit_gold_result::packetw2c_deposit_gold_result(const packetw2c_deposit_gold_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_deposit_gold_result)
}

void packetw2c_deposit_gold_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7532;
  gold_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_deposit_gold_result::~packetw2c_deposit_gold_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_deposit_gold_result)
  SharedDtor();
}

void packetw2c_deposit_gold_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_deposit_gold_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_deposit_gold_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_deposit_gold_result_descriptor_;
}

const packetw2c_deposit_gold_result& packetw2c_deposit_gold_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  return *default_instance_;
}

packetw2c_deposit_gold_result* packetw2c_deposit_gold_result::default_instance_ = NULL;

packetw2c_deposit_gold_result* packetw2c_deposit_gold_result::New() const {
  return new packetw2c_deposit_gold_result;
}

void packetw2c_deposit_gold_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 7532;
    gold_ = GOOGLE_LONGLONG(0);
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_deposit_gold_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_deposit_gold_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_deposit_gold_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int64 gold = 2;
      case 2: {
        if (tag == 16) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_deposit_gold_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_deposit_gold_result)
  return false;
#undef DO_
}

void packetw2c_deposit_gold_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_deposit_gold_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_deposit_gold_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_deposit_gold_result)
}

::google::protobuf::uint8* packetw2c_deposit_gold_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_deposit_gold_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_deposit_gold_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_deposit_gold_result)
  return target;
}

int packetw2c_deposit_gold_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_deposit_gold_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_deposit_gold_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_deposit_gold_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_deposit_gold_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_deposit_gold_result::MergeFrom(const packetw2c_deposit_gold_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_deposit_gold_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_deposit_gold_result::CopyFrom(const packetw2c_deposit_gold_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_deposit_gold_result::IsInitialized() const {

  return true;
}

void packetw2c_deposit_gold_result::Swap(packetw2c_deposit_gold_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(gold_, other->gold_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_deposit_gold_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_deposit_gold_result_descriptor_;
  metadata.reflection = packetw2c_deposit_gold_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_draw_gold::kPacketIdFieldNumber;
const int packetc2w_draw_gold::kGoldFieldNumber;
const int packetc2w_draw_gold::kPwdFieldNumber;
#endif  // !_MSC_VER

packetc2w_draw_gold::packetc2w_draw_gold()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_draw_gold)
}

void packetc2w_draw_gold::InitAsDefaultInstance() {
}

packetc2w_draw_gold::packetc2w_draw_gold(const packetc2w_draw_gold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_draw_gold)
}

void packetc2w_draw_gold::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5031;
  gold_ = GOOGLE_LONGLONG(0);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_draw_gold::~packetc2w_draw_gold() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_draw_gold)
  SharedDtor();
}

void packetc2w_draw_gold::SharedDtor() {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_draw_gold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_draw_gold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_draw_gold_descriptor_;
}

const packetc2w_draw_gold& packetc2w_draw_gold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  return *default_instance_;
}

packetc2w_draw_gold* packetc2w_draw_gold::default_instance_ = NULL;

packetc2w_draw_gold* packetc2w_draw_gold::New() const {
  return new packetc2w_draw_gold;
}

void packetc2w_draw_gold::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 5031;
    gold_ = GOOGLE_LONGLONG(0);
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_draw_gold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_draw_gold)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_draw_gold];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int64 gold = 2;
      case 2: {
        if (tag == 16) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }

      // optional string pwd = 3;
      case 3: {
        if (tag == 26) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_draw_gold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_draw_gold)
  return false;
#undef DO_
}

void packetc2w_draw_gold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_draw_gold)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_draw_gold];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_draw_gold)
}

::google::protobuf::uint8* packetc2w_draw_gold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_draw_gold)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_draw_gold];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_draw_gold)
  return target;
}

int packetc2w_draw_gold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_draw_gold];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_draw_gold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_draw_gold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_draw_gold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_draw_gold::MergeFrom(const packetc2w_draw_gold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_draw_gold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_draw_gold::CopyFrom(const packetc2w_draw_gold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_draw_gold::IsInitialized() const {

  return true;
}

void packetc2w_draw_gold::Swap(packetc2w_draw_gold* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(gold_, other->gold_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_draw_gold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_draw_gold_descriptor_;
  metadata.reflection = packetc2w_draw_gold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_draw_gold_result::kPacketIdFieldNumber;
const int packetw2c_draw_gold_result::kGoldFieldNumber;
const int packetw2c_draw_gold_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_draw_gold_result::packetw2c_draw_gold_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_draw_gold_result)
}

void packetw2c_draw_gold_result::InitAsDefaultInstance() {
}

packetw2c_draw_gold_result::packetw2c_draw_gold_result(const packetw2c_draw_gold_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_draw_gold_result)
}

void packetw2c_draw_gold_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7533;
  gold_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_draw_gold_result::~packetw2c_draw_gold_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_draw_gold_result)
  SharedDtor();
}

void packetw2c_draw_gold_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_draw_gold_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_draw_gold_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_draw_gold_result_descriptor_;
}

const packetw2c_draw_gold_result& packetw2c_draw_gold_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  return *default_instance_;
}

packetw2c_draw_gold_result* packetw2c_draw_gold_result::default_instance_ = NULL;

packetw2c_draw_gold_result* packetw2c_draw_gold_result::New() const {
  return new packetw2c_draw_gold_result;
}

void packetw2c_draw_gold_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 7533;
    gold_ = GOOGLE_LONGLONG(0);
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_draw_gold_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_draw_gold_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_draw_gold_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int64 gold = 2;
      case 2: {
        if (tag == 16) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_draw_gold_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_draw_gold_result)
  return false;
#undef DO_
}

void packetw2c_draw_gold_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_draw_gold_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_draw_gold_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_draw_gold_result)
}

::google::protobuf::uint8* packetw2c_draw_gold_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_draw_gold_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_draw_gold_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_draw_gold_result)
  return target;
}

int packetw2c_draw_gold_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_draw_gold_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_draw_gold_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_draw_gold_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_draw_gold_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_draw_gold_result::MergeFrom(const packetw2c_draw_gold_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_draw_gold_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_draw_gold_result::CopyFrom(const packetw2c_draw_gold_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_draw_gold_result::IsInitialized() const {

  return true;
}

void packetw2c_draw_gold_result::Swap(packetw2c_draw_gold_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(gold_, other->gold_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_draw_gold_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_draw_gold_result_descriptor_;
  metadata.reflection = packetw2c_draw_gold_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_get_safe_box_security_code::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_get_safe_box_security_code::packetc2w_get_safe_box_security_code()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_get_safe_box_security_code)
}

void packetc2w_get_safe_box_security_code::InitAsDefaultInstance() {
}

packetc2w_get_safe_box_security_code::packetc2w_get_safe_box_security_code(const packetc2w_get_safe_box_security_code& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_get_safe_box_security_code)
}

void packetc2w_get_safe_box_security_code::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5044;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_get_safe_box_security_code::~packetc2w_get_safe_box_security_code() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_get_safe_box_security_code)
  SharedDtor();
}

void packetc2w_get_safe_box_security_code::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_get_safe_box_security_code::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_get_safe_box_security_code::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_get_safe_box_security_code_descriptor_;
}

const packetc2w_get_safe_box_security_code& packetc2w_get_safe_box_security_code::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  return *default_instance_;
}

packetc2w_get_safe_box_security_code* packetc2w_get_safe_box_security_code::default_instance_ = NULL;

packetc2w_get_safe_box_security_code* packetc2w_get_safe_box_security_code::New() const {
  return new packetc2w_get_safe_box_security_code;
}

void packetc2w_get_safe_box_security_code::Clear() {
  packet_id_ = 5044;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_get_safe_box_security_code::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_get_safe_box_security_code)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_safe_box_security_code];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_get_safe_box_security_code)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_get_safe_box_security_code)
  return false;
#undef DO_
}

void packetc2w_get_safe_box_security_code::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_get_safe_box_security_code)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_safe_box_security_code];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_get_safe_box_security_code)
}

::google::protobuf::uint8* packetc2w_get_safe_box_security_code::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_get_safe_box_security_code)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_safe_box_security_code];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_get_safe_box_security_code)
  return target;
}

int packetc2w_get_safe_box_security_code::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_safe_box_security_code];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_get_safe_box_security_code::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_get_safe_box_security_code* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_get_safe_box_security_code*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_get_safe_box_security_code::MergeFrom(const packetc2w_get_safe_box_security_code& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_get_safe_box_security_code::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_get_safe_box_security_code::CopyFrom(const packetc2w_get_safe_box_security_code& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_get_safe_box_security_code::IsInitialized() const {

  return true;
}

void packetc2w_get_safe_box_security_code::Swap(packetc2w_get_safe_box_security_code* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_get_safe_box_security_code::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_get_safe_box_security_code_descriptor_;
  metadata.reflection = packetc2w_get_safe_box_security_code_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_get_safe_box_security_code_result::kPacketIdFieldNumber;
const int packetw2c_get_safe_box_security_code_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_get_safe_box_security_code_result::packetw2c_get_safe_box_security_code_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_get_safe_box_security_code_result)
}

void packetw2c_get_safe_box_security_code_result::InitAsDefaultInstance() {
}

packetw2c_get_safe_box_security_code_result::packetw2c_get_safe_box_security_code_result(const packetw2c_get_safe_box_security_code_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_get_safe_box_security_code_result)
}

void packetw2c_get_safe_box_security_code_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7548;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_get_safe_box_security_code_result::~packetw2c_get_safe_box_security_code_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_get_safe_box_security_code_result)
  SharedDtor();
}

void packetw2c_get_safe_box_security_code_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_get_safe_box_security_code_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_get_safe_box_security_code_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_get_safe_box_security_code_result_descriptor_;
}

const packetw2c_get_safe_box_security_code_result& packetw2c_get_safe_box_security_code_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  return *default_instance_;
}

packetw2c_get_safe_box_security_code_result* packetw2c_get_safe_box_security_code_result::default_instance_ = NULL;

packetw2c_get_safe_box_security_code_result* packetw2c_get_safe_box_security_code_result::New() const {
  return new packetw2c_get_safe_box_security_code_result;
}

void packetw2c_get_safe_box_security_code_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7548;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_get_safe_box_security_code_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_get_safe_box_security_code_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_safe_box_security_code_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_get_safe_box_security_code_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_get_safe_box_security_code_result)
  return false;
#undef DO_
}

void packetw2c_get_safe_box_security_code_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_get_safe_box_security_code_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_safe_box_security_code_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_get_safe_box_security_code_result)
}

::google::protobuf::uint8* packetw2c_get_safe_box_security_code_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_get_safe_box_security_code_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_safe_box_security_code_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_get_safe_box_security_code_result)
  return target;
}

int packetw2c_get_safe_box_security_code_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_safe_box_security_code_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_get_safe_box_security_code_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_get_safe_box_security_code_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_get_safe_box_security_code_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_get_safe_box_security_code_result::MergeFrom(const packetw2c_get_safe_box_security_code_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_get_safe_box_security_code_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_get_safe_box_security_code_result::CopyFrom(const packetw2c_get_safe_box_security_code_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_get_safe_box_security_code_result::IsInitialized() const {

  return true;
}

void packetw2c_get_safe_box_security_code_result::Swap(packetw2c_get_safe_box_security_code_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_get_safe_box_security_code_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_get_safe_box_security_code_result_descriptor_;
  metadata.reflection = packetw2c_get_safe_box_security_code_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_check_password::kPacketIdFieldNumber;
const int packetc2w_check_password::kPwdFieldNumber;
#endif  // !_MSC_VER

packetc2w_check_password::packetc2w_check_password()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_check_password)
}

void packetc2w_check_password::InitAsDefaultInstance() {
}

packetc2w_check_password::packetc2w_check_password(const packetc2w_check_password& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_check_password)
}

void packetc2w_check_password::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5068;
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_check_password::~packetc2w_check_password() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_check_password)
  SharedDtor();
}

void packetc2w_check_password::SharedDtor() {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_check_password::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_check_password::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_check_password_descriptor_;
}

const packetc2w_check_password& packetc2w_check_password::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  return *default_instance_;
}

packetc2w_check_password* packetc2w_check_password::default_instance_ = NULL;

packetc2w_check_password* packetc2w_check_password::New() const {
  return new packetc2w_check_password;
}

void packetc2w_check_password::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5068;
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_check_password::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_check_password)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_check_password];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pwd;
        break;
      }

      // optional string pwd = 2;
      case 2: {
        if (tag == 18) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_check_password)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_check_password)
  return false;
#undef DO_
}

void packetc2w_check_password::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_check_password)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_check_password];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_check_password)
}

::google::protobuf::uint8* packetc2w_check_password::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_check_password)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_check_password];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_check_password)
  return target;
}

int packetc2w_check_password::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_check_password];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_check_password::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_check_password* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_check_password*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_check_password::MergeFrom(const packetc2w_check_password& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_check_password::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_check_password::CopyFrom(const packetc2w_check_password& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_check_password::IsInitialized() const {

  return true;
}

void packetc2w_check_password::Swap(packetc2w_check_password* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_check_password::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_check_password_descriptor_;
  metadata.reflection = packetc2w_check_password_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_check_password_result::kPacketIdFieldNumber;
const int packetw2c_check_password_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_check_password_result::packetw2c_check_password_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_check_password_result)
}

void packetw2c_check_password_result::InitAsDefaultInstance() {
}

packetw2c_check_password_result::packetw2c_check_password_result(const packetw2c_check_password_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_check_password_result)
}

void packetw2c_check_password_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7574;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_check_password_result::~packetw2c_check_password_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_check_password_result)
  SharedDtor();
}

void packetw2c_check_password_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_check_password_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_check_password_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_check_password_result_descriptor_;
}

const packetw2c_check_password_result& packetw2c_check_password_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fsafe_5fdeposit_5fbox_2eproto();
  return *default_instance_;
}

packetw2c_check_password_result* packetw2c_check_password_result::default_instance_ = NULL;

packetw2c_check_password_result* packetw2c_check_password_result::New() const {
  return new packetw2c_check_password_result;
}

void packetw2c_check_password_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7574;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_check_password_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_check_password_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_check_password_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_check_password_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_check_password_result)
  return false;
#undef DO_
}

void packetw2c_check_password_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_check_password_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_check_password_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_check_password_result)
}

::google::protobuf::uint8* packetw2c_check_password_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_check_password_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_check_password_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_check_password_result)
  return target;
}

int packetw2c_check_password_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_check_password_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_check_password_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_check_password_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_check_password_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_check_password_result::MergeFrom(const packetw2c_check_password_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_check_password_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_check_password_result::CopyFrom(const packetw2c_check_password_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_check_password_result::IsInitialized() const {

  return true;
}

void packetw2c_check_password_result::Swap(packetw2c_check_password_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_check_password_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_check_password_result_descriptor_;
  metadata.reflection = packetw2c_check_password_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
