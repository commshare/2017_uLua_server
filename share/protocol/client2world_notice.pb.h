// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_notice.proto

#ifndef PROTOBUF_client2world_5fnotice_2eproto__INCLUDED
#define PROTOBUF_client2world_5fnotice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5fnotice_2eproto();
void protobuf_AssignDesc_client2world_5fnotice_2eproto();
void protobuf_ShutdownFile_client2world_5fnotice_2eproto();

class packetc2w_req_notice;
class NoticeInfo;
class packetw2c_req_notice_result;

// ===================================================================

class packetc2w_req_notice : public ::google::protobuf::Message {
 public:
  packetc2w_req_notice();
  virtual ~packetc2w_req_notice();

  packetc2w_req_notice(const packetc2w_req_notice& from);

  inline packetc2w_req_notice& operator=(const packetc2w_req_notice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_req_notice& default_instance();

  void Swap(packetc2w_req_notice* other);

  // implements Message ----------------------------------------------

  packetc2w_req_notice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_req_notice& from);
  void MergeFrom(const packetc2w_req_notice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_notice];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 lastTime = 2;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 2;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_req_notice)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 lasttime_;
  friend void  protobuf_AddDesc_client2world_5fnotice_2eproto();
  friend void protobuf_AssignDesc_client2world_5fnotice_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fnotice_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_req_notice* default_instance_;
};
// -------------------------------------------------------------------

class NoticeInfo : public ::google::protobuf::Message {
 public:
  NoticeInfo();
  virtual ~NoticeInfo();

  NoticeInfo(const NoticeInfo& from);

  inline NoticeInfo& operator=(const NoticeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoticeInfo& default_instance();

  void Swap(NoticeInfo* other);

  // implements Message ----------------------------------------------

  NoticeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoticeInfo& from);
  void MergeFrom(const NoticeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 genTime = 1;
  inline bool has_gentime() const;
  inline void clear_gentime();
  static const int kGenTimeFieldNumber = 1;
  inline ::google::protobuf::int32 gentime() const;
  inline void set_gentime(::google::protobuf::int32 value);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 order = 4;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 4;
  inline ::google::protobuf::int32 order() const;
  inline void set_order(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.NoticeInfo)
 private:
  inline void set_has_gentime();
  inline void clear_has_gentime();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_order();
  inline void clear_has_order();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  ::google::protobuf::int32 gentime_;
  ::google::protobuf::int32 order_;
  ::std::string* content_;
  friend void  protobuf_AddDesc_client2world_5fnotice_2eproto();
  friend void protobuf_AssignDesc_client2world_5fnotice_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fnotice_2eproto();

  void InitAsDefaultInstance();
  static NoticeInfo* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_req_notice_result : public ::google::protobuf::Message {
 public:
  packetw2c_req_notice_result();
  virtual ~packetw2c_req_notice_result();

  packetw2c_req_notice_result(const packetw2c_req_notice_result& from);

  inline packetw2c_req_notice_result& operator=(const packetw2c_req_notice_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_req_notice_result& default_instance();

  void Swap(packetw2c_req_notice_result* other);

  // implements Message ----------------------------------------------

  packetw2c_req_notice_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_req_notice_result& from);
  void MergeFrom(const packetw2c_req_notice_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_notice_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // repeated .client2world_protocols.NoticeInfo infoList = 2;
  inline int infolist_size() const;
  inline void clear_infolist();
  static const int kInfoListFieldNumber = 2;
  inline const ::client2world_protocols::NoticeInfo& infolist(int index) const;
  inline ::client2world_protocols::NoticeInfo* mutable_infolist(int index);
  inline ::client2world_protocols::NoticeInfo* add_infolist();
  inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::NoticeInfo >&
      infolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::NoticeInfo >*
      mutable_infolist();

  // optional int32 lastTime = 3;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 3;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_req_notice_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::client2world_protocols::NoticeInfo > infolist_;
  int packet_id_;
  ::google::protobuf::int32 lasttime_;
  friend void  protobuf_AddDesc_client2world_5fnotice_2eproto();
  friend void protobuf_AssignDesc_client2world_5fnotice_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fnotice_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_req_notice_result* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2w_req_notice

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_notice];
inline bool packetc2w_req_notice::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_req_notice::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_req_notice::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_req_notice::clear_packet_id() {
  packet_id_ = 5038;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_req_notice::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_notice.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_req_notice::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_notice.packet_id)
}

// optional int32 lastTime = 2;
inline bool packetc2w_req_notice::has_lasttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_req_notice::set_has_lasttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_req_notice::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_req_notice::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 packetc2w_req_notice::lasttime() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_req_notice.lastTime)
  return lasttime_;
}
inline void packetc2w_req_notice::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_req_notice.lastTime)
}

// -------------------------------------------------------------------

// NoticeInfo

// optional int32 genTime = 1;
inline bool NoticeInfo::has_gentime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoticeInfo::set_has_gentime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoticeInfo::clear_has_gentime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoticeInfo::clear_gentime() {
  gentime_ = 0;
  clear_has_gentime();
}
inline ::google::protobuf::int32 NoticeInfo::gentime() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.NoticeInfo.genTime)
  return gentime_;
}
inline void NoticeInfo::set_gentime(::google::protobuf::int32 value) {
  set_has_gentime();
  gentime_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.NoticeInfo.genTime)
}

// optional string title = 2;
inline bool NoticeInfo::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoticeInfo::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NoticeInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NoticeInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& NoticeInfo::title() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.NoticeInfo.title)
  return *title_;
}
inline void NoticeInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.NoticeInfo.title)
}
inline void NoticeInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.NoticeInfo.title)
}
inline void NoticeInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.NoticeInfo.title)
}
inline ::std::string* NoticeInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.NoticeInfo.title)
  return title_;
}
inline ::std::string* NoticeInfo::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NoticeInfo::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.NoticeInfo.title)
}

// optional string content = 3;
inline bool NoticeInfo::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NoticeInfo::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NoticeInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NoticeInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& NoticeInfo::content() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.NoticeInfo.content)
  return *content_;
}
inline void NoticeInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:client2world_protocols.NoticeInfo.content)
}
inline void NoticeInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:client2world_protocols.NoticeInfo.content)
}
inline void NoticeInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:client2world_protocols.NoticeInfo.content)
}
inline ::std::string* NoticeInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:client2world_protocols.NoticeInfo.content)
  return content_;
}
inline ::std::string* NoticeInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NoticeInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.NoticeInfo.content)
}

// optional int32 order = 4;
inline bool NoticeInfo::has_order() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NoticeInfo::set_has_order() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NoticeInfo::clear_has_order() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NoticeInfo::clear_order() {
  order_ = 0;
  clear_has_order();
}
inline ::google::protobuf::int32 NoticeInfo::order() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.NoticeInfo.order)
  return order_;
}
inline void NoticeInfo::set_order(::google::protobuf::int32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.NoticeInfo.order)
}

// -------------------------------------------------------------------

// packetw2c_req_notice_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_notice_result];
inline bool packetw2c_req_notice_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_req_notice_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_req_notice_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_req_notice_result::clear_packet_id() {
  packet_id_ = 7540;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_req_notice_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_notice_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_req_notice_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_notice_result.packet_id)
}

// repeated .client2world_protocols.NoticeInfo infoList = 2;
inline int packetw2c_req_notice_result::infolist_size() const {
  return infolist_.size();
}
inline void packetw2c_req_notice_result::clear_infolist() {
  infolist_.Clear();
}
inline const ::client2world_protocols::NoticeInfo& packetw2c_req_notice_result::infolist(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_notice_result.infoList)
  return infolist_.Get(index);
}
inline ::client2world_protocols::NoticeInfo* packetw2c_req_notice_result::mutable_infolist(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_req_notice_result.infoList)
  return infolist_.Mutable(index);
}
inline ::client2world_protocols::NoticeInfo* packetw2c_req_notice_result::add_infolist() {
  // @@protoc_insertion_point(field_add:client2world_protocols.packetw2c_req_notice_result.infoList)
  return infolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client2world_protocols::NoticeInfo >&
packetw2c_req_notice_result::infolist() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.packetw2c_req_notice_result.infoList)
  return infolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::client2world_protocols::NoticeInfo >*
packetw2c_req_notice_result::mutable_infolist() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.packetw2c_req_notice_result.infoList)
  return &infolist_;
}

// optional int32 lastTime = 3;
inline bool packetw2c_req_notice_result::has_lasttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_req_notice_result::set_has_lasttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_req_notice_result::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_req_notice_result::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 packetw2c_req_notice_result::lasttime() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_req_notice_result.lastTime)
  return lasttime_;
}
inline void packetw2c_req_notice_result::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_req_notice_result.lastTime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5fnotice_2eproto__INCLUDED
