// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2w_get_mails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_get_mails_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_get_mails_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_get_mails_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_recv_mail_gifts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_recv_mail_gifts_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_recv_mail_gifts_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_recv_mail_gifts_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_send_mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_send_mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_send_mail_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_send_mail_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_remove_mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_remove_mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_remove_mail_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_remove_mail_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_accept_gift_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_accept_gift_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_send_mail_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_send_mail_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMailLogInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMailLogInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_send_mail_log_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_send_mail_log_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_remove_mail_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_remove_mail_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_remove_mail_log_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_remove_mail_log_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fmail_2eproto() {
  protobuf_AddDesc_client2world_5fmail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_mail.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2w_get_mails_descriptor_ = file->message_type(0);
  static const int packetc2w_get_mails_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_mails, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_mails, lasttime_),
  };
  packetc2w_get_mails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_get_mails_descriptor_,
      packetc2w_get_mails::default_instance_,
      packetc2w_get_mails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_mails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_mails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_get_mails));
  mail_info_descriptor_ = file->message_type(1);
  static const int mail_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, isrecvive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, gifts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, senderid_),
  };
  mail_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_info_descriptor_,
      mail_info::default_instance_,
      mail_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_info));
  packetw2c_get_mails_result_descriptor_ = file->message_type(2);
  static const int packetw2c_get_mails_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_mails_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_mails_result, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_mails_result, mails_),
  };
  packetw2c_get_mails_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_get_mails_result_descriptor_,
      packetw2c_get_mails_result::default_instance_,
      packetw2c_get_mails_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_mails_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_mails_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_get_mails_result));
  packetc2w_recv_mail_gifts_descriptor_ = file->message_type(3);
  static const int packetc2w_recv_mail_gifts_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_recv_mail_gifts, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_recv_mail_gifts, mailid_),
  };
  packetc2w_recv_mail_gifts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_recv_mail_gifts_descriptor_,
      packetc2w_recv_mail_gifts::default_instance_,
      packetc2w_recv_mail_gifts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_recv_mail_gifts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_recv_mail_gifts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_recv_mail_gifts));
  packetw2c_recv_mail_gifts_result_descriptor_ = file->message_type(4);
  static const int packetw2c_recv_mail_gifts_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recv_mail_gifts_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recv_mail_gifts_result, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recv_mail_gifts_result, result_),
  };
  packetw2c_recv_mail_gifts_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_recv_mail_gifts_result_descriptor_,
      packetw2c_recv_mail_gifts_result::default_instance_,
      packetw2c_recv_mail_gifts_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recv_mail_gifts_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_recv_mail_gifts_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_recv_mail_gifts_result));
  packetc2w_send_mail_descriptor_ = file->message_type(5);
  static const int packetc2w_send_mail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_send_mail, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_send_mail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_send_mail, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_send_mail, toplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_send_mail, gifts_),
  };
  packetc2w_send_mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_send_mail_descriptor_,
      packetc2w_send_mail::default_instance_,
      packetc2w_send_mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_send_mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_send_mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_send_mail));
  packetw2c_send_mail_result_descriptor_ = file->message_type(6);
  static const int packetw2c_send_mail_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_send_mail_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_send_mail_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_send_mail_result, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_send_mail_result, mailid_),
  };
  packetw2c_send_mail_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_send_mail_result_descriptor_,
      packetw2c_send_mail_result::default_instance_,
      packetw2c_send_mail_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_send_mail_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_send_mail_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_send_mail_result));
  packetc2w_remove_mail_descriptor_ = file->message_type(7);
  static const int packetc2w_remove_mail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_remove_mail, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_remove_mail, mailid_),
  };
  packetc2w_remove_mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_remove_mail_descriptor_,
      packetc2w_remove_mail::default_instance_,
      packetc2w_remove_mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_remove_mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_remove_mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_remove_mail));
  packetw2c_remove_mail_result_descriptor_ = file->message_type(8);
  static const int packetw2c_remove_mail_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_remove_mail_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_remove_mail_result, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_remove_mail_result, result_),
  };
  packetw2c_remove_mail_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_remove_mail_result_descriptor_,
      packetw2c_remove_mail_result::default_instance_,
      packetw2c_remove_mail_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_remove_mail_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_remove_mail_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_remove_mail_result));
  packetw2c_accept_gift_notify_descriptor_ = file->message_type(9);
  static const int packetw2c_accept_gift_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_accept_gift_notify, packet_id_),
  };
  packetw2c_accept_gift_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_accept_gift_notify_descriptor_,
      packetw2c_accept_gift_notify::default_instance_,
      packetw2c_accept_gift_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_accept_gift_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_accept_gift_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_accept_gift_notify));
  packetc2w_req_send_mail_log_descriptor_ = file->message_type(10);
  static const int packetc2w_req_send_mail_log_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_send_mail_log, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_send_mail_log, lasttime_),
  };
  packetc2w_req_send_mail_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_send_mail_log_descriptor_,
      packetc2w_req_send_mail_log::default_instance_,
      packetc2w_req_send_mail_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_send_mail_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_send_mail_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_send_mail_log));
  SendMailLogInfo_descriptor_ = file->message_type(11);
  static const int SendMailLogInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailLogInfo, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailLogInfo, firendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailLogInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailLogInfo, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailLogInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailLogInfo, friendnickname_),
  };
  SendMailLogInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMailLogInfo_descriptor_,
      SendMailLogInfo::default_instance_,
      SendMailLogInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailLogInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailLogInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMailLogInfo));
  packetw2c_req_send_mail_log_result_descriptor_ = file->message_type(12);
  static const int packetw2c_req_send_mail_log_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_send_mail_log_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_send_mail_log_result, loglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_send_mail_log_result, lasttime_),
  };
  packetw2c_req_send_mail_log_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_send_mail_log_result_descriptor_,
      packetw2c_req_send_mail_log_result::default_instance_,
      packetw2c_req_send_mail_log_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_send_mail_log_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_send_mail_log_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_send_mail_log_result));
  packetc2w_remove_mail_log_descriptor_ = file->message_type(13);
  static const int packetc2w_remove_mail_log_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_remove_mail_log, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_remove_mail_log, mailid_),
  };
  packetc2w_remove_mail_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_remove_mail_log_descriptor_,
      packetc2w_remove_mail_log::default_instance_,
      packetc2w_remove_mail_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_remove_mail_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_remove_mail_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_remove_mail_log));
  packetw2c_remove_mail_log_result_descriptor_ = file->message_type(14);
  static const int packetw2c_remove_mail_log_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_remove_mail_log_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_remove_mail_log_result, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_remove_mail_log_result, result_),
  };
  packetw2c_remove_mail_log_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_remove_mail_log_result_descriptor_,
      packetw2c_remove_mail_log_result::default_instance_,
      packetw2c_remove_mail_log_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_remove_mail_log_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_remove_mail_log_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_remove_mail_log_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fmail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_get_mails_descriptor_, &packetc2w_get_mails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_info_descriptor_, &mail_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_get_mails_result_descriptor_, &packetw2c_get_mails_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_recv_mail_gifts_descriptor_, &packetc2w_recv_mail_gifts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_recv_mail_gifts_result_descriptor_, &packetw2c_recv_mail_gifts_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_send_mail_descriptor_, &packetc2w_send_mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_send_mail_result_descriptor_, &packetw2c_send_mail_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_remove_mail_descriptor_, &packetc2w_remove_mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_remove_mail_result_descriptor_, &packetw2c_remove_mail_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_accept_gift_notify_descriptor_, &packetw2c_accept_gift_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_send_mail_log_descriptor_, &packetc2w_req_send_mail_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMailLogInfo_descriptor_, &SendMailLogInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_send_mail_log_result_descriptor_, &packetw2c_req_send_mail_log_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_remove_mail_log_descriptor_, &packetc2w_remove_mail_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_remove_mail_log_result_descriptor_, &packetw2c_remove_mail_log_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fmail_2eproto() {
  delete packetc2w_get_mails::default_instance_;
  delete packetc2w_get_mails_reflection_;
  delete mail_info::default_instance_;
  delete mail_info_reflection_;
  delete packetw2c_get_mails_result::default_instance_;
  delete packetw2c_get_mails_result_reflection_;
  delete packetc2w_recv_mail_gifts::default_instance_;
  delete packetc2w_recv_mail_gifts_reflection_;
  delete packetw2c_recv_mail_gifts_result::default_instance_;
  delete packetw2c_recv_mail_gifts_result_reflection_;
  delete packetc2w_send_mail::default_instance_;
  delete packetc2w_send_mail_reflection_;
  delete packetw2c_send_mail_result::default_instance_;
  delete packetw2c_send_mail_result_reflection_;
  delete packetc2w_remove_mail::default_instance_;
  delete packetc2w_remove_mail_reflection_;
  delete packetw2c_remove_mail_result::default_instance_;
  delete packetw2c_remove_mail_result_reflection_;
  delete packetw2c_accept_gift_notify::default_instance_;
  delete packetw2c_accept_gift_notify_reflection_;
  delete packetc2w_req_send_mail_log::default_instance_;
  delete packetc2w_req_send_mail_log_reflection_;
  delete SendMailLogInfo::default_instance_;
  delete SendMailLogInfo_reflection_;
  delete packetw2c_req_send_mail_log_result::default_instance_;
  delete packetw2c_req_send_mail_log_result_reflection_;
  delete packetc2w_remove_mail_log::default_instance_;
  delete packetc2w_remove_mail_log_reflection_;
  delete packetw2c_remove_mail_log_result::default_instance_;
  delete packetw2c_remove_mail_log_result_reflection_;
}

void protobuf_AddDesc_client2world_5fmail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027client2world_mail.proto\022\026client2world_"
    "protocols\032\033client2world_msg_type.proto\032\022"
    "msg_type_def.proto\032\022msg_info_def.proto\"z"
    "\n\023packetc2w_get_mails\022Q\n\tpacket_id\030\001 \001(\016"
    "2).client2world_protocols.e_server_msg_t"
    "ype:\023e_mst_c2w_get_mails\022\020\n\010lastTime\030\002 \001"
    "(\005\"\245\001\n\tmail_info\022\016\n\006mailId\030\001 \001(\t\022\014\n\004time"
    "\030\002 \001(\005\022\r\n\005title\030\003 \001(\t\022\016\n\006sender\030\004 \001(\t\022\017\n"
    "\007content\030\005 \001(\t\022\021\n\tisRecvive\030\006 \001(\010\022%\n\005gif"
    "ts\030\007 \003(\0132\026.msg_info_def.msg_gift\022\020\n\010send"
    "erId\030\010 \001(\005\"\272\001\n\032packetw2c_get_mails_resul"
    "t\022X\n\tpacket_id\030\001 \001(\0162).client2world_prot"
    "ocols.e_server_msg_type:\032e_mst_w2c_get_m"
    "ails_result\022\020\n\010lastTime\030\002 \001(\005\0220\n\005mails\030\003"
    " \003(\0132!.client2world_protocols.mail_info\""
    "\204\001\n\031packetc2w_recv_mail_gifts\022W\n\tpacket_"
    "id\030\001 \001(\0162).client2world_protocols.e_serv"
    "er_msg_type:\031e_mst_c2w_recv_mail_gifts\022\016"
    "\n\006mailId\030\002 \001(\t\"\242\001\n packetw2c_recv_mail_g"
    "ifts_result\022^\n\tpacket_id\030\001 \001(\0162).client2"
    "world_protocols.e_server_msg_type: e_mst"
    "_w2c_recv_mail_gifts_result\022\016\n\006mailId\030\002 "
    "\001(\t\022\016\n\006result\030\003 \001(\005\"\303\001\n\023packetc2w_send_m"
    "ail\022Q\n\tpacket_id\030\001 \001(\0162).client2world_pr"
    "otocols.e_server_msg_type:\023e_mst_c2w_sen"
    "d_mail\022\r\n\005title\030\002 \001(\t\022\017\n\007content\030\003 \001(\t\022\022"
    "\n\ntoPlayerId\030\004 \001(\005\022%\n\005gifts\030\005 \003(\0132\026.msg_"
    "info_def.msg_gift\"\250\001\n\032packetw2c_send_mai"
    "l_result\022X\n\tpacket_id\030\001 \001(\0162).client2wor"
    "ld_protocols.e_server_msg_type:\032e_mst_w2"
    "c_send_mail_result\022\016\n\006result\030\002 \001(\005\022\020\n\010ma"
    "ilType\030\004 \001(\005\022\016\n\006mailId\030\005 \001(\t\"|\n\025packetc2"
    "w_remove_mail\022S\n\tpacket_id\030\001 \001(\0162).clien"
    "t2world_protocols.e_server_msg_type:\025e_m"
    "st_c2w_remove_mail\022\016\n\006mailId\030\002 \001(\t\"\232\001\n\034p"
    "acketw2c_remove_mail_result\022Z\n\tpacket_id"
    "\030\001 \001(\0162).client2world_protocols.e_server"
    "_msg_type:\034e_mst_w2c_remove_mail_result\022"
    "\016\n\006mailId\030\002 \001(\t\022\016\n\006result\030\003 \001(\005\"z\n\034packe"
    "tw2c_accept_gift_notify\022Z\n\tpacket_id\030\001 \001"
    "(\0162).client2world_protocols.e_server_msg"
    "_type:\034e_mst_w2c_accept_gift_notify\"\212\001\n\033"
    "packetc2w_req_send_mail_log\022Y\n\tpacket_id"
    "\030\001 \001(\0162).client2world_protocols.e_server"
    "_msg_type:\033e_mst_c2w_req_send_mail_log\022\020"
    "\n\010lastTime\030\002 \001(\005\"}\n\017SendMailLogInfo\022\020\n\010s"
    "endTime\030\001 \001(\005\022\020\n\010firendId\030\002 \001(\005\022\017\n\007conte"
    "nt\030\003 \001(\t\022\016\n\006mailId\030\004 \001(\t\022\r\n\005title\030\005 \001(\t\022"
    "\026\n\016friendNickName\030\006 \001(\t\"\322\001\n\"packetw2c_re"
    "q_send_mail_log_result\022`\n\tpacket_id\030\001 \001("
    "\0162).client2world_protocols.e_server_msg_"
    "type:\"e_mst_w2c_req_send_mail_log_result"
    "\0228\n\007logList\030\002 \003(\0132\'.client2world_protoco"
    "ls.SendMailLogInfo\022\020\n\010lastTime\030\003 \001(\005\"\204\001\n"
    "\031packetc2w_remove_mail_log\022W\n\tpacket_id\030"
    "\001 \001(\0162).client2world_protocols.e_server_"
    "msg_type:\031e_mst_c2w_remove_mail_log\022\016\n\006m"
    "ailId\030\002 \001(\t\"\242\001\n packetw2c_remove_mail_lo"
    "g_result\022^\n\tpacket_id\030\001 \001(\0162).client2wor"
    "ld_protocols.e_server_msg_type: e_mst_w2"
    "c_remove_mail_log_result\022\016\n\006mailId\030\002 \001(\t"
    "\022\016\n\006result\030\003 \001(\005", 2456);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_mail.proto", &protobuf_RegisterTypes);
  packetc2w_get_mails::default_instance_ = new packetc2w_get_mails();
  mail_info::default_instance_ = new mail_info();
  packetw2c_get_mails_result::default_instance_ = new packetw2c_get_mails_result();
  packetc2w_recv_mail_gifts::default_instance_ = new packetc2w_recv_mail_gifts();
  packetw2c_recv_mail_gifts_result::default_instance_ = new packetw2c_recv_mail_gifts_result();
  packetc2w_send_mail::default_instance_ = new packetc2w_send_mail();
  packetw2c_send_mail_result::default_instance_ = new packetw2c_send_mail_result();
  packetc2w_remove_mail::default_instance_ = new packetc2w_remove_mail();
  packetw2c_remove_mail_result::default_instance_ = new packetw2c_remove_mail_result();
  packetw2c_accept_gift_notify::default_instance_ = new packetw2c_accept_gift_notify();
  packetc2w_req_send_mail_log::default_instance_ = new packetc2w_req_send_mail_log();
  SendMailLogInfo::default_instance_ = new SendMailLogInfo();
  packetw2c_req_send_mail_log_result::default_instance_ = new packetw2c_req_send_mail_log_result();
  packetc2w_remove_mail_log::default_instance_ = new packetc2w_remove_mail_log();
  packetw2c_remove_mail_log_result::default_instance_ = new packetw2c_remove_mail_log_result();
  packetc2w_get_mails::default_instance_->InitAsDefaultInstance();
  mail_info::default_instance_->InitAsDefaultInstance();
  packetw2c_get_mails_result::default_instance_->InitAsDefaultInstance();
  packetc2w_recv_mail_gifts::default_instance_->InitAsDefaultInstance();
  packetw2c_recv_mail_gifts_result::default_instance_->InitAsDefaultInstance();
  packetc2w_send_mail::default_instance_->InitAsDefaultInstance();
  packetw2c_send_mail_result::default_instance_->InitAsDefaultInstance();
  packetc2w_remove_mail::default_instance_->InitAsDefaultInstance();
  packetw2c_remove_mail_result::default_instance_->InitAsDefaultInstance();
  packetw2c_accept_gift_notify::default_instance_->InitAsDefaultInstance();
  packetc2w_req_send_mail_log::default_instance_->InitAsDefaultInstance();
  SendMailLogInfo::default_instance_->InitAsDefaultInstance();
  packetw2c_req_send_mail_log_result::default_instance_->InitAsDefaultInstance();
  packetc2w_remove_mail_log::default_instance_->InitAsDefaultInstance();
  packetw2c_remove_mail_log_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fmail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fmail_2eproto {
  StaticDescriptorInitializer_client2world_5fmail_2eproto() {
    protobuf_AddDesc_client2world_5fmail_2eproto();
  }
} static_descriptor_initializer_client2world_5fmail_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2w_get_mails::kPacketIdFieldNumber;
const int packetc2w_get_mails::kLastTimeFieldNumber;
#endif  // !_MSC_VER

packetc2w_get_mails::packetc2w_get_mails()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_get_mails)
}

void packetc2w_get_mails::InitAsDefaultInstance() {
}

packetc2w_get_mails::packetc2w_get_mails(const packetc2w_get_mails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_get_mails)
}

void packetc2w_get_mails::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5014;
  lasttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_get_mails::~packetc2w_get_mails() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_get_mails)
  SharedDtor();
}

void packetc2w_get_mails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_get_mails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_get_mails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_get_mails_descriptor_;
}

const packetc2w_get_mails& packetc2w_get_mails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fmail_2eproto();
  return *default_instance_;
}

packetc2w_get_mails* packetc2w_get_mails::default_instance_ = NULL;

packetc2w_get_mails* packetc2w_get_mails::New() const {
  return new packetc2w_get_mails;
}

void packetc2w_get_mails::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5014;
    lasttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_get_mails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_get_mails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_mails];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lastTime;
        break;
      }

      // optional int32 lastTime = 2;
      case 2: {
        if (tag == 16) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_get_mails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_get_mails)
  return false;
#undef DO_
}

void packetc2w_get_mails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_get_mails)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_mails];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_get_mails)
}

::google::protobuf::uint8* packetc2w_get_mails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_get_mails)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_mails];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_get_mails)
  return target;
}

int packetc2w_get_mails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_mails];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 lastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_get_mails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_get_mails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_get_mails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_get_mails::MergeFrom(const packetc2w_get_mails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_get_mails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_get_mails::CopyFrom(const packetc2w_get_mails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_get_mails::IsInitialized() const {

  return true;
}

void packetc2w_get_mails::Swap(packetc2w_get_mails* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_get_mails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_get_mails_descriptor_;
  metadata.reflection = packetc2w_get_mails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_info::kMailIdFieldNumber;
const int mail_info::kTimeFieldNumber;
const int mail_info::kTitleFieldNumber;
const int mail_info::kSenderFieldNumber;
const int mail_info::kContentFieldNumber;
const int mail_info::kIsRecviveFieldNumber;
const int mail_info::kGiftsFieldNumber;
const int mail_info::kSenderIdFieldNumber;
#endif  // !_MSC_VER

mail_info::mail_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.mail_info)
}

void mail_info::InitAsDefaultInstance() {
}

mail_info::mail_info(const mail_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.mail_info)
}

void mail_info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isrecvive_ = false;
  senderid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_info::~mail_info() {
  // @@protoc_insertion_point(destructor:client2world_protocols.mail_info)
  SharedDtor();
}

void mail_info::SharedDtor() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void mail_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_info_descriptor_;
}

const mail_info& mail_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fmail_2eproto();
  return *default_instance_;
}

mail_info* mail_info::default_instance_ = NULL;

mail_info* mail_info::New() const {
  return new mail_info;
}

void mail_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mail_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(time_, isrecvive_);
    if (has_mailid()) {
      if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mailid_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    senderid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  gifts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.mail_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mailId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mailid().data(), this->mailid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mailid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sender;
        break;
      }

      // optional string sender = 4;
      case 4: {
        if (tag == 34) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (tag == 42) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isRecvive;
        break;
      }

      // optional bool isRecvive = 6;
      case 6: {
        if (tag == 48) {
         parse_isRecvive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecvive_)));
          set_has_isrecvive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gifts;
        break;
      }

      // repeated .msg_info_def.msg_gift gifts = 7;
      case 7: {
        if (tag == 58) {
         parse_gifts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gifts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gifts;
        if (input->ExpectTag(64)) goto parse_senderId;
        break;
      }

      // optional int32 senderId = 8;
      case 8: {
        if (tag == 64) {
         parse_senderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senderid_)));
          set_has_senderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.mail_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.mail_info)
  return false;
#undef DO_
}

void mail_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.mail_info)
  // optional string mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mailid(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string sender = 4;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sender(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->content(), output);
  }

  // optional bool isRecvive = 6;
  if (has_isrecvive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isrecvive(), output);
  }

  // repeated .msg_info_def.msg_gift gifts = 7;
  for (int i = 0; i < this->gifts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gifts(i), output);
  }

  // optional int32 senderId = 8;
  if (has_senderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->senderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.mail_info)
}

::google::protobuf::uint8* mail_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.mail_info)
  // optional string mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mailid(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string sender = 4;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sender(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // optional bool isRecvive = 6;
  if (has_isrecvive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isrecvive(), target);
  }

  // repeated .msg_info_def.msg_gift gifts = 7;
  for (int i = 0; i < this->gifts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->gifts(i), target);
  }

  // optional int32 senderId = 8;
  if (has_senderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->senderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.mail_info)
  return target;
}

int mail_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailid());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string sender = 4;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional bool isRecvive = 6;
    if (has_isrecvive()) {
      total_size += 1 + 1;
    }

    // optional int32 senderId = 8;
    if (has_senderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senderid());
    }

  }
  // repeated .msg_info_def.msg_gift gifts = 7;
  total_size += 1 * this->gifts_size();
  for (int i = 0; i < this->gifts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gifts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_info::MergeFrom(const mail_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  gifts_.MergeFrom(from.gifts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_isrecvive()) {
      set_isrecvive(from.isrecvive());
    }
    if (from.has_senderid()) {
      set_senderid(from.senderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_info::CopyFrom(const mail_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_info::IsInitialized() const {

  return true;
}

void mail_info::Swap(mail_info* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(time_, other->time_);
    std::swap(title_, other->title_);
    std::swap(sender_, other->sender_);
    std::swap(content_, other->content_);
    std::swap(isrecvive_, other->isrecvive_);
    gifts_.Swap(&other->gifts_);
    std::swap(senderid_, other->senderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_info_descriptor_;
  metadata.reflection = mail_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_get_mails_result::kPacketIdFieldNumber;
const int packetw2c_get_mails_result::kLastTimeFieldNumber;
const int packetw2c_get_mails_result::kMailsFieldNumber;
#endif  // !_MSC_VER

packetw2c_get_mails_result::packetw2c_get_mails_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_get_mails_result)
}

void packetw2c_get_mails_result::InitAsDefaultInstance() {
}

packetw2c_get_mails_result::packetw2c_get_mails_result(const packetw2c_get_mails_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_get_mails_result)
}

void packetw2c_get_mails_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7513;
  lasttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_get_mails_result::~packetw2c_get_mails_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_get_mails_result)
  SharedDtor();
}

void packetw2c_get_mails_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_get_mails_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_get_mails_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_get_mails_result_descriptor_;
}

const packetw2c_get_mails_result& packetw2c_get_mails_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fmail_2eproto();
  return *default_instance_;
}

packetw2c_get_mails_result* packetw2c_get_mails_result::default_instance_ = NULL;

packetw2c_get_mails_result* packetw2c_get_mails_result::New() const {
  return new packetw2c_get_mails_result;
}

void packetw2c_get_mails_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7513;
    lasttime_ = 0;
  }
  mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_get_mails_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_get_mails_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_mails_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lastTime;
        break;
      }

      // optional int32 lastTime = 2;
      case 2: {
        if (tag == 16) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mails;
        break;
      }

      // repeated .client2world_protocols.mail_info mails = 3;
      case 3: {
        if (tag == 26) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mails;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_get_mails_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_get_mails_result)
  return false;
#undef DO_
}

void packetw2c_get_mails_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_get_mails_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_mails_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lasttime(), output);
  }

  // repeated .client2world_protocols.mail_info mails = 3;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_get_mails_result)
}

::google::protobuf::uint8* packetw2c_get_mails_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_get_mails_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_mails_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lasttime(), target);
  }

  // repeated .client2world_protocols.mail_info mails = 3;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_get_mails_result)
  return target;
}

int packetw2c_get_mails_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_mails_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 lastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

  }
  // repeated .client2world_protocols.mail_info mails = 3;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_get_mails_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_get_mails_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_get_mails_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_get_mails_result::MergeFrom(const packetw2c_get_mails_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_get_mails_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_get_mails_result::CopyFrom(const packetw2c_get_mails_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_get_mails_result::IsInitialized() const {

  return true;
}

void packetw2c_get_mails_result::Swap(packetw2c_get_mails_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(lasttime_, other->lasttime_);
    mails_.Swap(&other->mails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_get_mails_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_get_mails_result_descriptor_;
  metadata.reflection = packetw2c_get_mails_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_recv_mail_gifts::kPacketIdFieldNumber;
const int packetc2w_recv_mail_gifts::kMailIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_recv_mail_gifts::packetc2w_recv_mail_gifts()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_recv_mail_gifts)
}

void packetc2w_recv_mail_gifts::InitAsDefaultInstance() {
}

packetc2w_recv_mail_gifts::packetc2w_recv_mail_gifts(const packetc2w_recv_mail_gifts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_recv_mail_gifts)
}

void packetc2w_recv_mail_gifts::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5015;
  mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_recv_mail_gifts::~packetc2w_recv_mail_gifts() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_recv_mail_gifts)
  SharedDtor();
}

void packetc2w_recv_mail_gifts::SharedDtor() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_recv_mail_gifts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_recv_mail_gifts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_recv_mail_gifts_descriptor_;
}

const packetc2w_recv_mail_gifts& packetc2w_recv_mail_gifts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fmail_2eproto();
  return *default_instance_;
}

packetc2w_recv_mail_gifts* packetc2w_recv_mail_gifts::default_instance_ = NULL;

packetc2w_recv_mail_gifts* packetc2w_recv_mail_gifts::New() const {
  return new packetc2w_recv_mail_gifts;
}

void packetc2w_recv_mail_gifts::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5015;
    if (has_mailid()) {
      if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mailid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_recv_mail_gifts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_recv_mail_gifts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_recv_mail_gifts];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mailId;
        break;
      }

      // optional string mailId = 2;
      case 2: {
        if (tag == 18) {
         parse_mailId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mailid().data(), this->mailid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mailid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_recv_mail_gifts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_recv_mail_gifts)
  return false;
#undef DO_
}

void packetc2w_recv_mail_gifts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_recv_mail_gifts)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_recv_mail_gifts];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_recv_mail_gifts)
}

::google::protobuf::uint8* packetc2w_recv_mail_gifts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_recv_mail_gifts)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_recv_mail_gifts];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_recv_mail_gifts)
  return target;
}

int packetc2w_recv_mail_gifts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_recv_mail_gifts];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string mailId = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_recv_mail_gifts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_recv_mail_gifts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_recv_mail_gifts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_recv_mail_gifts::MergeFrom(const packetc2w_recv_mail_gifts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_recv_mail_gifts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_recv_mail_gifts::CopyFrom(const packetc2w_recv_mail_gifts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_recv_mail_gifts::IsInitialized() const {

  return true;
}

void packetc2w_recv_mail_gifts::Swap(packetc2w_recv_mail_gifts* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_recv_mail_gifts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_recv_mail_gifts_descriptor_;
  metadata.reflection = packetc2w_recv_mail_gifts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_recv_mail_gifts_result::kPacketIdFieldNumber;
const int packetw2c_recv_mail_gifts_result::kMailIdFieldNumber;
const int packetw2c_recv_mail_gifts_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_recv_mail_gifts_result::packetw2c_recv_mail_gifts_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_recv_mail_gifts_result)
}

void packetw2c_recv_mail_gifts_result::InitAsDefaultInstance() {
}

packetw2c_recv_mail_gifts_result::packetw2c_recv_mail_gifts_result(const packetw2c_recv_mail_gifts_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_recv_mail_gifts_result)
}

void packetw2c_recv_mail_gifts_result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 7514;
  mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_recv_mail_gifts_result::~packetw2c_recv_mail_gifts_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_recv_mail_gifts_result)
  SharedDtor();
}

void packetw2c_recv_mail_gifts_result::SharedDtor() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_recv_mail_gifts_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_recv_mail_gifts_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_recv_mail_gifts_result_descriptor_;
}

const packetw2c_recv_mail_gifts_result& packetw2c_recv_mail_gifts_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fmail_2eproto();
  return *default_instance_;
}

packetw2c_recv_mail_gifts_result* packetw2c_recv_mail_gifts_result::default_instance_ = NULL;

packetw2c_recv_mail_gifts_result* packetw2c_recv_mail_gifts_result::New() const {
  return new packetw2c_recv_mail_gifts_result;
}

void packetw2c_recv_mail_gifts_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 7514;
    if (has_mailid()) {
      if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mailid_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_recv_mail_gifts_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_recv_mail_gifts_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recv_mail_gifts_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mailId;
        break;
      }

      // optional string mailId = 2;
      case 2: {
        if (tag == 18) {
         parse_mailId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mailid().data(), this->mailid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mailid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_recv_mail_gifts_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_recv_mail_gifts_result)
  return false;
#undef DO_
}

void packetw2c_recv_mail_gifts_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_recv_mail_gifts_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recv_mail_gifts_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mailid(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_recv_mail_gifts_result)
}

::google::protobuf::uint8* packetw2c_recv_mail_gifts_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_recv_mail_gifts_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recv_mail_gifts_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mailid(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_recv_mail_gifts_result)
  return target;
}

int packetw2c_recv_mail_gifts_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_recv_mail_gifts_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string mailId = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailid());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_recv_mail_gifts_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_recv_mail_gifts_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_recv_mail_gifts_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_recv_mail_gifts_result::MergeFrom(const packetw2c_recv_mail_gifts_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_recv_mail_gifts_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_recv_mail_gifts_result::CopyFrom(const packetw2c_recv_mail_gifts_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_recv_mail_gifts_result::IsInitialized() const {

  return true;
}

void packetw2c_recv_mail_gifts_result::Swap(packetw2c_recv_mail_gifts_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(mailid_, other->mailid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_recv_mail_gifts_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_recv_mail_gifts_result_descriptor_;
  metadata.reflection = packetw2c_recv_mail_gifts_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_send_mail::kPacketIdFieldNumber;
const int packetc2w_send_mail::kTitleFieldNumber;
const int packetc2w_send_mail::kContentFieldNumber;
const int packetc2w_send_mail::kToPlayerIdFieldNumber;
const int packetc2w_send_mail::kGiftsFieldNumber;
#endif  // !_MSC_VER

packetc2w_send_mail::packetc2w_send_mail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_send_mail)
}

void packetc2w_send_mail::InitAsDefaultInstance() {
}

packetc2w_send_mail::packetc2w_send_mail(const packetc2w_send_mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_send_mail)
}

void packetc2w_send_mail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5016;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toplayerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_send_mail::~packetc2w_send_mail() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_send_mail)
  SharedDtor();
}

void packetc2w_send_mail::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_send_mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_send_mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_send_mail_descriptor_;
}

const packetc2w_send_mail& packetc2w_send_mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fmail_2eproto();
  return *default_instance_;
}

packetc2w_send_mail* packetc2w_send_mail::default_instance_ = NULL;

packetc2w_send_mail* packetc2w_send_mail::New() const {
  return new packetc2w_send_mail;
}

void packetc2w_send_mail::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    packet_id_ = 5016;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    toplayerid_ = 0;
  }
  gifts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_send_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_send_mail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_send_mail];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_toPlayerId;
        break;
      }

      // optional int32 toPlayerId = 4;
      case 4: {
        if (tag == 32) {
         parse_toPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toplayerid_)));
          set_has_toplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_gifts;
        break;
      }

      // repeated .msg_info_def.msg_gift gifts = 5;
      case 5: {
        if (tag == 42) {
         parse_gifts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gifts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_gifts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_send_mail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_send_mail)
  return false;
#undef DO_
}

void packetc2w_send_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_send_mail)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_send_mail];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // optional int32 toPlayerId = 4;
  if (has_toplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->toplayerid(), output);
  }

  // repeated .msg_info_def.msg_gift gifts = 5;
  for (int i = 0; i < this->gifts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gifts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_send_mail)
}

::google::protobuf::uint8* packetc2w_send_mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_send_mail)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_send_mail];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional int32 toPlayerId = 4;
  if (has_toplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->toplayerid(), target);
  }

  // repeated .msg_info_def.msg_gift gifts = 5;
  for (int i = 0; i < this->gifts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gifts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_send_mail)
  return target;
}

int packetc2w_send_mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_send_mail];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 toPlayerId = 4;
    if (has_toplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toplayerid());
    }

  }
  // repeated .msg_info_def.msg_gift gifts = 5;
  total_size += 1 * this->gifts_size();
  for (int i = 0; i < this->gifts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gifts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_send_mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_send_mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_send_mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_send_mail::MergeFrom(const packetc2w_send_mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  gifts_.MergeFrom(from.gifts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_toplayerid()) {
      set_toplayerid(from.toplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_send_mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_send_mail::CopyFrom(const packetc2w_send_mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_send_mail::IsInitialized() const {

  return true;
}

void packetc2w_send_mail::Swap(packetc2w_send_mail* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(toplayerid_, other->toplayerid_);
    gifts_.Swap(&other->gifts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_send_mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_send_mail_descriptor_;
  metadata.reflection = packetc2w_send_mail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_send_mail_result::kPacketIdFieldNumber;
const int packetw2c_send_mail_result::kResultFieldNumber;
const int packetw2c_send_mail_result::kMailTypeFieldNumber;
const int packetw2c_send_mail_result::kMailIdFieldNumber;
#endif  // !_MSC_VER

packetw2c_send_mail_result::packetw2c_send_mail_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_send_mail_result)
}

void packetw2c_send_mail_result::InitAsDefaultInstance() {
}

packetw2c_send_mail_result::packetw2c_send_mail_result(const packetw2c_send_mail_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_send_mail_result)
}

void packetw2c_send_mail_result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 7515;
  result_ = 0;
  mailtype_ = 0;
  mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_send_mail_result::~packetw2c_send_mail_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_send_mail_result)
  SharedDtor();
}

void packetw2c_send_mail_result::SharedDtor() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_send_mail_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_send_mail_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_send_mail_result_descriptor_;
}

const packetw2c_send_mail_result& packetw2c_send_mail_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fmail_2eproto();
  return *default_instance_;
}

packetw2c_send_mail_result* packetw2c_send_mail_result::default_instance_ = NULL;

packetw2c_send_mail_result* packetw2c_send_mail_result::New() const {
  return new packetw2c_send_mail_result;
}

void packetw2c_send_mail_result::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    packet_id_ = 7515;
    result_ = 0;
    mailtype_ = 0;
    if (has_mailid()) {
      if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mailid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_send_mail_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_send_mail_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_send_mail_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mailType;
        break;
      }

      // optional int32 mailType = 4;
      case 4: {
        if (tag == 32) {
         parse_mailType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mailId;
        break;
      }

      // optional string mailId = 5;
      case 5: {
        if (tag == 42) {
         parse_mailId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mailid().data(), this->mailid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mailid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_send_mail_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_send_mail_result)
  return false;
#undef DO_
}

void packetw2c_send_mail_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_send_mail_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_send_mail_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 mailType = 4;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mailtype(), output);
  }

  // optional string mailId = 5;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_send_mail_result)
}

::google::protobuf::uint8* packetw2c_send_mail_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_send_mail_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_send_mail_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 mailType = 4;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mailtype(), target);
  }

  // optional string mailId = 5;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_send_mail_result)
  return target;
}

int packetw2c_send_mail_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_send_mail_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 mailType = 4;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailtype());
    }

    // optional string mailId = 5;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_send_mail_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_send_mail_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_send_mail_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_send_mail_result::MergeFrom(const packetw2c_send_mail_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_send_mail_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_send_mail_result::CopyFrom(const packetw2c_send_mail_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_send_mail_result::IsInitialized() const {

  return true;
}

void packetw2c_send_mail_result::Swap(packetw2c_send_mail_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_send_mail_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_send_mail_result_descriptor_;
  metadata.reflection = packetw2c_send_mail_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_remove_mail::kPacketIdFieldNumber;
const int packetc2w_remove_mail::kMailIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_remove_mail::packetc2w_remove_mail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_remove_mail)
}

void packetc2w_remove_mail::InitAsDefaultInstance() {
}

packetc2w_remove_mail::packetc2w_remove_mail(const packetc2w_remove_mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_remove_mail)
}

void packetc2w_remove_mail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5017;
  mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_remove_mail::~packetc2w_remove_mail() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_remove_mail)
  SharedDtor();
}

void packetc2w_remove_mail::SharedDtor() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_remove_mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_remove_mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_remove_mail_descriptor_;
}

const packetc2w_remove_mail& packetc2w_remove_mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fmail_2eproto();
  return *default_instance_;
}

packetc2w_remove_mail* packetc2w_remove_mail::default_instance_ = NULL;

packetc2w_remove_mail* packetc2w_remove_mail::New() const {
  return new packetc2w_remove_mail;
}

void packetc2w_remove_mail::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5017;
    if (has_mailid()) {
      if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mailid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_remove_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_remove_mail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_remove_mail];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mailId;
        break;
      }

      // optional string mailId = 2;
      case 2: {
        if (tag == 18) {
         parse_mailId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mailid().data(), this->mailid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mailid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_remove_mail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_remove_mail)
  return false;
#undef DO_
}

void packetc2w_remove_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_remove_mail)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_remove_mail];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_remove_mail)
}

::google::protobuf::uint8* packetc2w_remove_mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_remove_mail)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_remove_mail];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_remove_mail)
  return target;
}

int packetc2w_remove_mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_remove_mail];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string mailId = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_remove_mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_remove_mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_remove_mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_remove_mail::MergeFrom(const packetc2w_remove_mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_remove_mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_remove_mail::CopyFrom(const packetc2w_remove_mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_remove_mail::IsInitialized() const {

  return true;
}

void packetc2w_remove_mail::Swap(packetc2w_remove_mail* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_remove_mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_remove_mail_descriptor_;
  metadata.reflection = packetc2w_remove_mail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_remove_mail_result::kPacketIdFieldNumber;
const int packetw2c_remove_mail_result::kMailIdFieldNumber;
const int packetw2c_remove_mail_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_remove_mail_result::packetw2c_remove_mail_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_remove_mail_result)
}

void packetw2c_remove_mail_result::InitAsDefaultInstance() {
}

packetw2c_remove_mail_result::packetw2c_remove_mail_result(const packetw2c_remove_mail_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_remove_mail_result)
}

void packetw2c_remove_mail_result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 7516;
  mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_remove_mail_result::~packetw2c_remove_mail_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_remove_mail_result)
  SharedDtor();
}

void packetw2c_remove_mail_result::SharedDtor() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_remove_mail_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_remove_mail_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_remove_mail_result_descriptor_;
}

const packetw2c_remove_mail_result& packetw2c_remove_mail_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fmail_2eproto();
  return *default_instance_;
}

packetw2c_remove_mail_result* packetw2c_remove_mail_result::default_instance_ = NULL;

packetw2c_remove_mail_result* packetw2c_remove_mail_result::New() const {
  return new packetw2c_remove_mail_result;
}

void packetw2c_remove_mail_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 7516;
    if (has_mailid()) {
      if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mailid_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_remove_mail_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_remove_mail_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_remove_mail_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mailId;
        break;
      }

      // optional string mailId = 2;
      case 2: {
        if (tag == 18) {
         parse_mailId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mailid().data(), this->mailid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mailid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_remove_mail_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_remove_mail_result)
  return false;
#undef DO_
}

void packetw2c_remove_mail_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_remove_mail_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_remove_mail_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mailid(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_remove_mail_result)
}

::google::protobuf::uint8* packetw2c_remove_mail_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_remove_mail_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_remove_mail_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mailid(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_remove_mail_result)
  return target;
}

int packetw2c_remove_mail_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_remove_mail_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string mailId = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailid());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_remove_mail_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_remove_mail_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_remove_mail_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_remove_mail_result::MergeFrom(const packetw2c_remove_mail_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_remove_mail_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_remove_mail_result::CopyFrom(const packetw2c_remove_mail_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_remove_mail_result::IsInitialized() const {

  return true;
}

void packetw2c_remove_mail_result::Swap(packetw2c_remove_mail_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(mailid_, other->mailid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_remove_mail_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_remove_mail_result_descriptor_;
  metadata.reflection = packetw2c_remove_mail_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_accept_gift_notify::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetw2c_accept_gift_notify::packetw2c_accept_gift_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_accept_gift_notify)
}

void packetw2c_accept_gift_notify::InitAsDefaultInstance() {
}

packetw2c_accept_gift_notify::packetw2c_accept_gift_notify(const packetw2c_accept_gift_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_accept_gift_notify)
}

void packetw2c_accept_gift_notify::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7546;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_accept_gift_notify::~packetw2c_accept_gift_notify() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_accept_gift_notify)
  SharedDtor();
}

void packetw2c_accept_gift_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_accept_gift_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_accept_gift_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_accept_gift_notify_descriptor_;
}

const packetw2c_accept_gift_notify& packetw2c_accept_gift_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fmail_2eproto();
  return *default_instance_;
}

packetw2c_accept_gift_notify* packetw2c_accept_gift_notify::default_instance_ = NULL;

packetw2c_accept_gift_notify* packetw2c_accept_gift_notify::New() const {
  return new packetw2c_accept_gift_notify;
}

void packetw2c_accept_gift_notify::Clear() {
  packet_id_ = 7546;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_accept_gift_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_accept_gift_notify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_accept_gift_notify];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_accept_gift_notify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_accept_gift_notify)
  return false;
#undef DO_
}

void packetw2c_accept_gift_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_accept_gift_notify)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_accept_gift_notify];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_accept_gift_notify)
}

::google::protobuf::uint8* packetw2c_accept_gift_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_accept_gift_notify)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_accept_gift_notify];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_accept_gift_notify)
  return target;
}

int packetw2c_accept_gift_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_accept_gift_notify];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_accept_gift_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_accept_gift_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_accept_gift_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_accept_gift_notify::MergeFrom(const packetw2c_accept_gift_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_accept_gift_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_accept_gift_notify::CopyFrom(const packetw2c_accept_gift_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_accept_gift_notify::IsInitialized() const {

  return true;
}

void packetw2c_accept_gift_notify::Swap(packetw2c_accept_gift_notify* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_accept_gift_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_accept_gift_notify_descriptor_;
  metadata.reflection = packetw2c_accept_gift_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_send_mail_log::kPacketIdFieldNumber;
const int packetc2w_req_send_mail_log::kLastTimeFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_send_mail_log::packetc2w_req_send_mail_log()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_send_mail_log)
}

void packetc2w_req_send_mail_log::InitAsDefaultInstance() {
}

packetc2w_req_send_mail_log::packetc2w_req_send_mail_log(const packetc2w_req_send_mail_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_send_mail_log)
}

void packetc2w_req_send_mail_log::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5045;
  lasttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_send_mail_log::~packetc2w_req_send_mail_log() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_send_mail_log)
  SharedDtor();
}

void packetc2w_req_send_mail_log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_send_mail_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_send_mail_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_send_mail_log_descriptor_;
}

const packetc2w_req_send_mail_log& packetc2w_req_send_mail_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fmail_2eproto();
  return *default_instance_;
}

packetc2w_req_send_mail_log* packetc2w_req_send_mail_log::default_instance_ = NULL;

packetc2w_req_send_mail_log* packetc2w_req_send_mail_log::New() const {
  return new packetc2w_req_send_mail_log;
}

void packetc2w_req_send_mail_log::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5045;
    lasttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_send_mail_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_send_mail_log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_send_mail_log];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lastTime;
        break;
      }

      // optional int32 lastTime = 2;
      case 2: {
        if (tag == 16) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_send_mail_log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_send_mail_log)
  return false;
#undef DO_
}

void packetc2w_req_send_mail_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_send_mail_log)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_send_mail_log];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_send_mail_log)
}

::google::protobuf::uint8* packetc2w_req_send_mail_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_send_mail_log)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_send_mail_log];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_send_mail_log)
  return target;
}

int packetc2w_req_send_mail_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_send_mail_log];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 lastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_send_mail_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_send_mail_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_send_mail_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_send_mail_log::MergeFrom(const packetc2w_req_send_mail_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_send_mail_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_send_mail_log::CopyFrom(const packetc2w_req_send_mail_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_send_mail_log::IsInitialized() const {

  return true;
}

void packetc2w_req_send_mail_log::Swap(packetc2w_req_send_mail_log* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_send_mail_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_send_mail_log_descriptor_;
  metadata.reflection = packetc2w_req_send_mail_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMailLogInfo::kSendTimeFieldNumber;
const int SendMailLogInfo::kFirendIdFieldNumber;
const int SendMailLogInfo::kContentFieldNumber;
const int SendMailLogInfo::kMailIdFieldNumber;
const int SendMailLogInfo::kTitleFieldNumber;
const int SendMailLogInfo::kFriendNickNameFieldNumber;
#endif  // !_MSC_VER

SendMailLogInfo::SendMailLogInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.SendMailLogInfo)
}

void SendMailLogInfo::InitAsDefaultInstance() {
}

SendMailLogInfo::SendMailLogInfo(const SendMailLogInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.SendMailLogInfo)
}

void SendMailLogInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sendtime_ = 0;
  firendid_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMailLogInfo::~SendMailLogInfo() {
  // @@protoc_insertion_point(destructor:client2world_protocols.SendMailLogInfo)
  SharedDtor();
}

void SendMailLogInfo::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (friendnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friendnickname_;
  }
  if (this != default_instance_) {
  }
}

void SendMailLogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMailLogInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMailLogInfo_descriptor_;
}

const SendMailLogInfo& SendMailLogInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fmail_2eproto();
  return *default_instance_;
}

SendMailLogInfo* SendMailLogInfo::default_instance_ = NULL;

SendMailLogInfo* SendMailLogInfo::New() const {
  return new SendMailLogInfo;
}

void SendMailLogInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendMailLogInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(sendtime_, firendid_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_mailid()) {
      if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mailid_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_friendnickname()) {
      if (friendnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        friendnickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMailLogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.SendMailLogInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sendTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_firendId;
        break;
      }

      // optional int32 firendId = 2;
      case 2: {
        if (tag == 16) {
         parse_firendId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firendid_)));
          set_has_firendid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mailId;
        break;
      }

      // optional string mailId = 4;
      case 4: {
        if (tag == 34) {
         parse_mailId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mailid().data(), this->mailid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mailid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }

      // optional string title = 5;
      case 5: {
        if (tag == 42) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_friendNickName;
        break;
      }

      // optional string friendNickName = 6;
      case 6: {
        if (tag == 50) {
         parse_friendNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friendnickname().data(), this->friendnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "friendnickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.SendMailLogInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.SendMailLogInfo)
  return false;
#undef DO_
}

void SendMailLogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.SendMailLogInfo)
  // optional int32 sendTime = 1;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sendtime(), output);
  }

  // optional int32 firendId = 2;
  if (has_firendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->firendid(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // optional string mailId = 4;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mailid(), output);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // optional string friendNickName = 6;
  if (has_friendnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendnickname().data(), this->friendnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "friendnickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->friendnickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.SendMailLogInfo)
}

::google::protobuf::uint8* SendMailLogInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.SendMailLogInfo)
  // optional int32 sendTime = 1;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sendtime(), target);
  }

  // optional int32 firendId = 2;
  if (has_firendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->firendid(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional string mailId = 4;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mailid(), target);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional string friendNickName = 6;
  if (has_friendnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendnickname().data(), this->friendnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "friendnickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->friendnickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.SendMailLogInfo)
  return target;
}

int SendMailLogInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sendTime = 1;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendtime());
    }

    // optional int32 firendId = 2;
    if (has_firendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firendid());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string mailId = 4;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailid());
    }

    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string friendNickName = 6;
    if (has_friendnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendnickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMailLogInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMailLogInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMailLogInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMailLogInfo::MergeFrom(const SendMailLogInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_firendid()) {
      set_firendid(from.firendid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_friendnickname()) {
      set_friendnickname(from.friendnickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMailLogInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMailLogInfo::CopyFrom(const SendMailLogInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMailLogInfo::IsInitialized() const {

  return true;
}

void SendMailLogInfo::Swap(SendMailLogInfo* other) {
  if (other != this) {
    std::swap(sendtime_, other->sendtime_);
    std::swap(firendid_, other->firendid_);
    std::swap(content_, other->content_);
    std::swap(mailid_, other->mailid_);
    std::swap(title_, other->title_);
    std::swap(friendnickname_, other->friendnickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMailLogInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMailLogInfo_descriptor_;
  metadata.reflection = SendMailLogInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_send_mail_log_result::kPacketIdFieldNumber;
const int packetw2c_req_send_mail_log_result::kLogListFieldNumber;
const int packetw2c_req_send_mail_log_result::kLastTimeFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_send_mail_log_result::packetw2c_req_send_mail_log_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_req_send_mail_log_result)
}

void packetw2c_req_send_mail_log_result::InitAsDefaultInstance() {
}

packetw2c_req_send_mail_log_result::packetw2c_req_send_mail_log_result(const packetw2c_req_send_mail_log_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_req_send_mail_log_result)
}

void packetw2c_req_send_mail_log_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7549;
  lasttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_send_mail_log_result::~packetw2c_req_send_mail_log_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_req_send_mail_log_result)
  SharedDtor();
}

void packetw2c_req_send_mail_log_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_send_mail_log_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_send_mail_log_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_send_mail_log_result_descriptor_;
}

const packetw2c_req_send_mail_log_result& packetw2c_req_send_mail_log_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fmail_2eproto();
  return *default_instance_;
}

packetw2c_req_send_mail_log_result* packetw2c_req_send_mail_log_result::default_instance_ = NULL;

packetw2c_req_send_mail_log_result* packetw2c_req_send_mail_log_result::New() const {
  return new packetw2c_req_send_mail_log_result;
}

void packetw2c_req_send_mail_log_result::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    packet_id_ = 7549;
    lasttime_ = 0;
  }
  loglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_send_mail_log_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_req_send_mail_log_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_send_mail_log_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_logList;
        break;
      }

      // repeated .client2world_protocols.SendMailLogInfo logList = 2;
      case 2: {
        if (tag == 18) {
         parse_logList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_logList;
        if (input->ExpectTag(24)) goto parse_lastTime;
        break;
      }

      // optional int32 lastTime = 3;
      case 3: {
        if (tag == 24) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_req_send_mail_log_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_req_send_mail_log_result)
  return false;
#undef DO_
}

void packetw2c_req_send_mail_log_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_req_send_mail_log_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_send_mail_log_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.SendMailLogInfo logList = 2;
  for (int i = 0; i < this->loglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loglist(i), output);
  }

  // optional int32 lastTime = 3;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_req_send_mail_log_result)
}

::google::protobuf::uint8* packetw2c_req_send_mail_log_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_req_send_mail_log_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_send_mail_log_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.SendMailLogInfo logList = 2;
  for (int i = 0; i < this->loglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loglist(i), target);
  }

  // optional int32 lastTime = 3;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_req_send_mail_log_result)
  return target;
}

int packetw2c_req_send_mail_log_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_send_mail_log_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 lastTime = 3;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

  }
  // repeated .client2world_protocols.SendMailLogInfo logList = 2;
  total_size += 1 * this->loglist_size();
  for (int i = 0; i < this->loglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_send_mail_log_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_send_mail_log_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_send_mail_log_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_send_mail_log_result::MergeFrom(const packetw2c_req_send_mail_log_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  loglist_.MergeFrom(from.loglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_send_mail_log_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_send_mail_log_result::CopyFrom(const packetw2c_req_send_mail_log_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_send_mail_log_result::IsInitialized() const {

  return true;
}

void packetw2c_req_send_mail_log_result::Swap(packetw2c_req_send_mail_log_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    loglist_.Swap(&other->loglist_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_send_mail_log_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_send_mail_log_result_descriptor_;
  metadata.reflection = packetw2c_req_send_mail_log_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_remove_mail_log::kPacketIdFieldNumber;
const int packetc2w_remove_mail_log::kMailIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_remove_mail_log::packetc2w_remove_mail_log()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_remove_mail_log)
}

void packetc2w_remove_mail_log::InitAsDefaultInstance() {
}

packetc2w_remove_mail_log::packetc2w_remove_mail_log(const packetc2w_remove_mail_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_remove_mail_log)
}

void packetc2w_remove_mail_log::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5046;
  mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_remove_mail_log::~packetc2w_remove_mail_log() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_remove_mail_log)
  SharedDtor();
}

void packetc2w_remove_mail_log::SharedDtor() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_remove_mail_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_remove_mail_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_remove_mail_log_descriptor_;
}

const packetc2w_remove_mail_log& packetc2w_remove_mail_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fmail_2eproto();
  return *default_instance_;
}

packetc2w_remove_mail_log* packetc2w_remove_mail_log::default_instance_ = NULL;

packetc2w_remove_mail_log* packetc2w_remove_mail_log::New() const {
  return new packetc2w_remove_mail_log;
}

void packetc2w_remove_mail_log::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5046;
    if (has_mailid()) {
      if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mailid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_remove_mail_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_remove_mail_log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_remove_mail_log];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mailId;
        break;
      }

      // optional string mailId = 2;
      case 2: {
        if (tag == 18) {
         parse_mailId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mailid().data(), this->mailid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mailid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_remove_mail_log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_remove_mail_log)
  return false;
#undef DO_
}

void packetc2w_remove_mail_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_remove_mail_log)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_remove_mail_log];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_remove_mail_log)
}

::google::protobuf::uint8* packetc2w_remove_mail_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_remove_mail_log)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_remove_mail_log];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_remove_mail_log)
  return target;
}

int packetc2w_remove_mail_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_remove_mail_log];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string mailId = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_remove_mail_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_remove_mail_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_remove_mail_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_remove_mail_log::MergeFrom(const packetc2w_remove_mail_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_remove_mail_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_remove_mail_log::CopyFrom(const packetc2w_remove_mail_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_remove_mail_log::IsInitialized() const {

  return true;
}

void packetc2w_remove_mail_log::Swap(packetc2w_remove_mail_log* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_remove_mail_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_remove_mail_log_descriptor_;
  metadata.reflection = packetc2w_remove_mail_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_remove_mail_log_result::kPacketIdFieldNumber;
const int packetw2c_remove_mail_log_result::kMailIdFieldNumber;
const int packetw2c_remove_mail_log_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_remove_mail_log_result::packetw2c_remove_mail_log_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_remove_mail_log_result)
}

void packetw2c_remove_mail_log_result::InitAsDefaultInstance() {
}

packetw2c_remove_mail_log_result::packetw2c_remove_mail_log_result(const packetw2c_remove_mail_log_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_remove_mail_log_result)
}

void packetw2c_remove_mail_log_result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 7550;
  mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_remove_mail_log_result::~packetw2c_remove_mail_log_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_remove_mail_log_result)
  SharedDtor();
}

void packetw2c_remove_mail_log_result::SharedDtor() {
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_remove_mail_log_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_remove_mail_log_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_remove_mail_log_result_descriptor_;
}

const packetw2c_remove_mail_log_result& packetw2c_remove_mail_log_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fmail_2eproto();
  return *default_instance_;
}

packetw2c_remove_mail_log_result* packetw2c_remove_mail_log_result::default_instance_ = NULL;

packetw2c_remove_mail_log_result* packetw2c_remove_mail_log_result::New() const {
  return new packetw2c_remove_mail_log_result;
}

void packetw2c_remove_mail_log_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 7550;
    if (has_mailid()) {
      if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mailid_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_remove_mail_log_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_remove_mail_log_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_remove_mail_log_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mailId;
        break;
      }

      // optional string mailId = 2;
      case 2: {
        if (tag == 18) {
         parse_mailId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mailid().data(), this->mailid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mailid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_remove_mail_log_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_remove_mail_log_result)
  return false;
#undef DO_
}

void packetw2c_remove_mail_log_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_remove_mail_log_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_remove_mail_log_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mailid(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_remove_mail_log_result)
}

::google::protobuf::uint8* packetw2c_remove_mail_log_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_remove_mail_log_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_remove_mail_log_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string mailId = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mailid(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_remove_mail_log_result)
  return target;
}

int packetw2c_remove_mail_log_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_remove_mail_log_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string mailId = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailid());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_remove_mail_log_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_remove_mail_log_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_remove_mail_log_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_remove_mail_log_result::MergeFrom(const packetw2c_remove_mail_log_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_remove_mail_log_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_remove_mail_log_result::CopyFrom(const packetw2c_remove_mail_log_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_remove_mail_log_result::IsInitialized() const {

  return true;
}

void packetw2c_remove_mail_log_result::Swap(packetw2c_remove_mail_log_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(mailid_, other->mailid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_remove_mail_log_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_remove_mail_log_result_descriptor_;
  metadata.reflection = packetw2c_remove_mail_log_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
