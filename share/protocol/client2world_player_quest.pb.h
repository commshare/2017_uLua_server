// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_player_quest.proto

#ifndef PROTOBUF_client2world_5fplayer_5fquest_2eproto__INCLUDED
#define PROTOBUF_client2world_5fplayer_5fquest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "client2world_msg_type.pb.h"
#include "msg_type_def.pb.h"
#include "msg_info_def.pb.h"
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
void protobuf_AssignDesc_client2world_5fplayer_5fquest_2eproto();
void protobuf_ShutdownFile_client2world_5fplayer_5fquest_2eproto();

class packetc2w_get_questlist;
class packetw2c_get_questlist_result;
class packetc2w_receive_questreward;
class packetw2c_receive_questreward_result;
class packetw2c_change_quest;

// ===================================================================

class packetc2w_get_questlist : public ::google::protobuf::Message {
 public:
  packetc2w_get_questlist();
  virtual ~packetc2w_get_questlist();

  packetc2w_get_questlist(const packetc2w_get_questlist& from);

  inline packetc2w_get_questlist& operator=(const packetc2w_get_questlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_get_questlist& default_instance();

  void Swap(packetc2w_get_questlist* other);

  // implements Message ----------------------------------------------

  packetc2w_get_questlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_get_questlist& from);
  void MergeFrom(const packetc2w_get_questlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_questlist];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 type = 2 [default = 1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_get_questlist)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fquest_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fquest_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_get_questlist* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_get_questlist_result : public ::google::protobuf::Message {
 public:
  packetw2c_get_questlist_result();
  virtual ~packetw2c_get_questlist_result();

  packetw2c_get_questlist_result(const packetw2c_get_questlist_result& from);

  inline packetw2c_get_questlist_result& operator=(const packetw2c_get_questlist_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_get_questlist_result& default_instance();

  void Swap(packetw2c_get_questlist_result* other);

  // implements Message ----------------------------------------------

  packetw2c_get_questlist_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_get_questlist_result& from);
  void MergeFrom(const packetw2c_get_questlist_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_questlist_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 type = 2 [default = 1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated .msg_info_def.msg_quest_info questlist = 3;
  inline int questlist_size() const;
  inline void clear_questlist();
  static const int kQuestlistFieldNumber = 3;
  inline const ::msg_info_def::msg_quest_info& questlist(int index) const;
  inline ::msg_info_def::msg_quest_info* mutable_questlist(int index);
  inline ::msg_info_def::msg_quest_info* add_questlist();
  inline const ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_quest_info >&
      questlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_quest_info >*
      mutable_questlist();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_get_questlist_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_quest_info > questlist_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fquest_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fquest_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_get_questlist_result* default_instance_;
};
// -------------------------------------------------------------------

class packetc2w_receive_questreward : public ::google::protobuf::Message {
 public:
  packetc2w_receive_questreward();
  virtual ~packetc2w_receive_questreward();

  packetc2w_receive_questreward(const packetc2w_receive_questreward& from);

  inline packetc2w_receive_questreward& operator=(const packetc2w_receive_questreward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetc2w_receive_questreward& default_instance();

  void Swap(packetc2w_receive_questreward* other);

  // implements Message ----------------------------------------------

  packetc2w_receive_questreward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetc2w_receive_questreward& from);
  void MergeFrom(const packetc2w_receive_questreward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_questreward];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 questid = 3;
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 3;
  inline ::google::protobuf::int32 questid() const;
  inline void set_questid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetc2w_receive_questreward)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_questid();
  inline void clear_has_questid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 questid_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fquest_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fquest_2eproto();

  void InitAsDefaultInstance();
  static packetc2w_receive_questreward* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_receive_questreward_result : public ::google::protobuf::Message {
 public:
  packetw2c_receive_questreward_result();
  virtual ~packetw2c_receive_questreward_result();

  packetw2c_receive_questreward_result(const packetw2c_receive_questreward_result& from);

  inline packetw2c_receive_questreward_result& operator=(const packetw2c_receive_questreward_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_receive_questreward_result& default_instance();

  void Swap(packetw2c_receive_questreward_result* other);

  // implements Message ----------------------------------------------

  packetw2c_receive_questreward_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_receive_questreward_result& from);
  void MergeFrom(const packetw2c_receive_questreward_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_questreward_result];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 questid = 3;
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 3;
  inline ::google::protobuf::int32 questid() const;
  inline void set_questid(::google::protobuf::int32 value);

  // optional .msg_type_def.e_msg_result_def result = 4 [default = e_rmt_unknow];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::msg_type_def::e_msg_result_def result() const;
  inline void set_result(::msg_type_def::e_msg_result_def value);

  // repeated .msg_info_def.ItemInfo items = 5;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 5;
  inline const ::msg_info_def::ItemInfo& items(int index) const;
  inline ::msg_info_def::ItemInfo* mutable_items(int index);
  inline ::msg_info_def::ItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::msg_info_def::ItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::msg_info_def::ItemInfo >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_receive_questreward_result)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 questid_;
  int result_;
  ::google::protobuf::RepeatedPtrField< ::msg_info_def::ItemInfo > items_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fquest_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fquest_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_receive_questreward_result* default_instance_;
};
// -------------------------------------------------------------------

class packetw2c_change_quest : public ::google::protobuf::Message {
 public:
  packetw2c_change_quest();
  virtual ~packetw2c_change_quest();

  packetw2c_change_quest(const packetw2c_change_quest& from);

  inline packetw2c_change_quest& operator=(const packetw2c_change_quest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const packetw2c_change_quest& default_instance();

  void Swap(packetw2c_change_quest* other);

  // implements Message ----------------------------------------------

  packetw2c_change_quest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const packetw2c_change_quest& from);
  void MergeFrom(const packetw2c_change_quest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_quest];
  inline bool has_packet_id() const;
  inline void clear_packet_id();
  static const int kPacketIdFieldNumber = 1;
  inline ::client2world_protocols::e_server_msg_type packet_id() const;
  inline void set_packet_id(::client2world_protocols::e_server_msg_type value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .msg_info_def.msg_quest_info qinfo = 3;
  inline bool has_qinfo() const;
  inline void clear_qinfo();
  static const int kQinfoFieldNumber = 3;
  inline const ::msg_info_def::msg_quest_info& qinfo() const;
  inline ::msg_info_def::msg_quest_info* mutable_qinfo();
  inline ::msg_info_def::msg_quest_info* release_qinfo();
  inline void set_allocated_qinfo(::msg_info_def::msg_quest_info* qinfo);

  // @@protoc_insertion_point(class_scope:client2world_protocols.packetw2c_change_quest)
 private:
  inline void set_has_packet_id();
  inline void clear_has_packet_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_qinfo();
  inline void clear_has_qinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int packet_id_;
  ::google::protobuf::int32 type_;
  ::msg_info_def::msg_quest_info* qinfo_;
  friend void  protobuf_AddDesc_client2world_5fplayer_5fquest_2eproto();
  friend void protobuf_AssignDesc_client2world_5fplayer_5fquest_2eproto();
  friend void protobuf_ShutdownFile_client2world_5fplayer_5fquest_2eproto();

  void InitAsDefaultInstance();
  static packetw2c_change_quest* default_instance_;
};
// ===================================================================


// ===================================================================

// packetc2w_get_questlist

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_questlist];
inline bool packetc2w_get_questlist::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_get_questlist::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_get_questlist::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_get_questlist::clear_packet_id() {
  packet_id_ = 5058;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_get_questlist::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_get_questlist.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_get_questlist::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_get_questlist.packet_id)
}

// optional int32 type = 2 [default = 1];
inline bool packetc2w_get_questlist::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_get_questlist::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_get_questlist::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_get_questlist::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::google::protobuf::int32 packetc2w_get_questlist::type() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_get_questlist.type)
  return type_;
}
inline void packetc2w_get_questlist::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_get_questlist.type)
}

// -------------------------------------------------------------------

// packetw2c_get_questlist_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_questlist_result];
inline bool packetw2c_get_questlist_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_get_questlist_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_get_questlist_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_get_questlist_result::clear_packet_id() {
  packet_id_ = 7561;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_get_questlist_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_questlist_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_get_questlist_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_get_questlist_result.packet_id)
}

// optional int32 type = 2 [default = 1];
inline bool packetw2c_get_questlist_result::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_get_questlist_result::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_get_questlist_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_get_questlist_result::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::google::protobuf::int32 packetw2c_get_questlist_result::type() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_questlist_result.type)
  return type_;
}
inline void packetw2c_get_questlist_result::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_get_questlist_result.type)
}

// repeated .msg_info_def.msg_quest_info questlist = 3;
inline int packetw2c_get_questlist_result::questlist_size() const {
  return questlist_.size();
}
inline void packetw2c_get_questlist_result::clear_questlist() {
  questlist_.Clear();
}
inline const ::msg_info_def::msg_quest_info& packetw2c_get_questlist_result::questlist(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_get_questlist_result.questlist)
  return questlist_.Get(index);
}
inline ::msg_info_def::msg_quest_info* packetw2c_get_questlist_result::mutable_questlist(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_get_questlist_result.questlist)
  return questlist_.Mutable(index);
}
inline ::msg_info_def::msg_quest_info* packetw2c_get_questlist_result::add_questlist() {
  // @@protoc_insertion_point(field_add:client2world_protocols.packetw2c_get_questlist_result.questlist)
  return questlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_quest_info >&
packetw2c_get_questlist_result::questlist() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.packetw2c_get_questlist_result.questlist)
  return questlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::msg_info_def::msg_quest_info >*
packetw2c_get_questlist_result::mutable_questlist() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.packetw2c_get_questlist_result.questlist)
  return &questlist_;
}

// -------------------------------------------------------------------

// packetc2w_receive_questreward

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_receive_questreward];
inline bool packetc2w_receive_questreward::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetc2w_receive_questreward::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetc2w_receive_questreward::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetc2w_receive_questreward::clear_packet_id() {
  packet_id_ = 5059;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetc2w_receive_questreward::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_receive_questreward.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetc2w_receive_questreward::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_receive_questreward.packet_id)
}

// optional int32 type = 2;
inline bool packetc2w_receive_questreward::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetc2w_receive_questreward::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetc2w_receive_questreward::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetc2w_receive_questreward::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 packetc2w_receive_questreward::type() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_receive_questreward.type)
  return type_;
}
inline void packetc2w_receive_questreward::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_receive_questreward.type)
}

// optional int32 questid = 3;
inline bool packetc2w_receive_questreward::has_questid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetc2w_receive_questreward::set_has_questid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetc2w_receive_questreward::clear_has_questid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetc2w_receive_questreward::clear_questid() {
  questid_ = 0;
  clear_has_questid();
}
inline ::google::protobuf::int32 packetc2w_receive_questreward::questid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetc2w_receive_questreward.questid)
  return questid_;
}
inline void packetc2w_receive_questreward::set_questid(::google::protobuf::int32 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetc2w_receive_questreward.questid)
}

// -------------------------------------------------------------------

// packetw2c_receive_questreward_result

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_questreward_result];
inline bool packetw2c_receive_questreward_result::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_receive_questreward_result::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_receive_questreward_result::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_receive_questreward_result::clear_packet_id() {
  packet_id_ = 7562;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_receive_questreward_result::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_receive_questreward_result.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_receive_questreward_result::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_receive_questreward_result.packet_id)
}

// optional int32 type = 2;
inline bool packetw2c_receive_questreward_result::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_receive_questreward_result::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_receive_questreward_result::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_receive_questreward_result::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 packetw2c_receive_questreward_result::type() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_receive_questreward_result.type)
  return type_;
}
inline void packetw2c_receive_questreward_result::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_receive_questreward_result.type)
}

// optional int32 questid = 3;
inline bool packetw2c_receive_questreward_result::has_questid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_receive_questreward_result::set_has_questid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_receive_questreward_result::clear_has_questid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_receive_questreward_result::clear_questid() {
  questid_ = 0;
  clear_has_questid();
}
inline ::google::protobuf::int32 packetw2c_receive_questreward_result::questid() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_receive_questreward_result.questid)
  return questid_;
}
inline void packetw2c_receive_questreward_result::set_questid(::google::protobuf::int32 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_receive_questreward_result.questid)
}

// optional .msg_type_def.e_msg_result_def result = 4 [default = e_rmt_unknow];
inline bool packetw2c_receive_questreward_result::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void packetw2c_receive_questreward_result::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void packetw2c_receive_questreward_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void packetw2c_receive_questreward_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::msg_type_def::e_msg_result_def packetw2c_receive_questreward_result::result() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_receive_questreward_result.result)
  return static_cast< ::msg_type_def::e_msg_result_def >(result_);
}
inline void packetw2c_receive_questreward_result::set_result(::msg_type_def::e_msg_result_def value) {
  assert(::msg_type_def::e_msg_result_def_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_receive_questreward_result.result)
}

// repeated .msg_info_def.ItemInfo items = 5;
inline int packetw2c_receive_questreward_result::items_size() const {
  return items_.size();
}
inline void packetw2c_receive_questreward_result::clear_items() {
  items_.Clear();
}
inline const ::msg_info_def::ItemInfo& packetw2c_receive_questreward_result::items(int index) const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_receive_questreward_result.items)
  return items_.Get(index);
}
inline ::msg_info_def::ItemInfo* packetw2c_receive_questreward_result::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_receive_questreward_result.items)
  return items_.Mutable(index);
}
inline ::msg_info_def::ItemInfo* packetw2c_receive_questreward_result::add_items() {
  // @@protoc_insertion_point(field_add:client2world_protocols.packetw2c_receive_questreward_result.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::msg_info_def::ItemInfo >&
packetw2c_receive_questreward_result::items() const {
  // @@protoc_insertion_point(field_list:client2world_protocols.packetw2c_receive_questreward_result.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::msg_info_def::ItemInfo >*
packetw2c_receive_questreward_result::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:client2world_protocols.packetw2c_receive_questreward_result.items)
  return &items_;
}

// -------------------------------------------------------------------

// packetw2c_change_quest

// optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_quest];
inline bool packetw2c_change_quest::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void packetw2c_change_quest::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void packetw2c_change_quest::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void packetw2c_change_quest::clear_packet_id() {
  packet_id_ = 7563;
  clear_has_packet_id();
}
inline ::client2world_protocols::e_server_msg_type packetw2c_change_quest::packet_id() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_change_quest.packet_id)
  return static_cast< ::client2world_protocols::e_server_msg_type >(packet_id_);
}
inline void packetw2c_change_quest::set_packet_id(::client2world_protocols::e_server_msg_type value) {
  assert(::client2world_protocols::e_server_msg_type_IsValid(value));
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_change_quest.packet_id)
}

// optional int32 type = 2;
inline bool packetw2c_change_quest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void packetw2c_change_quest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void packetw2c_change_quest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void packetw2c_change_quest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 packetw2c_change_quest::type() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_change_quest.type)
  return type_;
}
inline void packetw2c_change_quest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:client2world_protocols.packetw2c_change_quest.type)
}

// optional .msg_info_def.msg_quest_info qinfo = 3;
inline bool packetw2c_change_quest::has_qinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void packetw2c_change_quest::set_has_qinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void packetw2c_change_quest::clear_has_qinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void packetw2c_change_quest::clear_qinfo() {
  if (qinfo_ != NULL) qinfo_->::msg_info_def::msg_quest_info::Clear();
  clear_has_qinfo();
}
inline const ::msg_info_def::msg_quest_info& packetw2c_change_quest::qinfo() const {
  // @@protoc_insertion_point(field_get:client2world_protocols.packetw2c_change_quest.qinfo)
  return qinfo_ != NULL ? *qinfo_ : *default_instance_->qinfo_;
}
inline ::msg_info_def::msg_quest_info* packetw2c_change_quest::mutable_qinfo() {
  set_has_qinfo();
  if (qinfo_ == NULL) qinfo_ = new ::msg_info_def::msg_quest_info;
  // @@protoc_insertion_point(field_mutable:client2world_protocols.packetw2c_change_quest.qinfo)
  return qinfo_;
}
inline ::msg_info_def::msg_quest_info* packetw2c_change_quest::release_qinfo() {
  clear_has_qinfo();
  ::msg_info_def::msg_quest_info* temp = qinfo_;
  qinfo_ = NULL;
  return temp;
}
inline void packetw2c_change_quest::set_allocated_qinfo(::msg_info_def::msg_quest_info* qinfo) {
  delete qinfo_;
  qinfo_ = qinfo;
  if (qinfo) {
    set_has_qinfo();
  } else {
    clear_has_qinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:client2world_protocols.packetw2c_change_quest.qinfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client2world_5fplayer_5fquest_2eproto__INCLUDED
