// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2w_player_connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_player_connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_player_connect_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_player_connect_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_c2w_timesync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_c2w_timesync_reflection_ = NULL;
const ::google::protobuf::Descriptor* packet_w2c_timesync_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_w2c_timesync_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_ask_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_ask_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_game_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_game_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_ask_login_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_ask_login_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_enter_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_enter_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_enter_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_enter_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_gm_command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_gm_command_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_gm_command_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_gm_command_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_ask_check_payment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_ask_check_payment_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_ask_test_payment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_ask_test_payment_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_ask_check_payment_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_ask_check_payment_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_ask_check_payment_result2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_ask_check_payment_result2_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_leave_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_leave_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_leave_game_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_leave_game_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_player_kick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_player_kick_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_get_gamelist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_get_gamelist_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_get_gamelist_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_get_gamelist_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_first_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_first_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_first_login_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_first_login_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fprotocol_2eproto() {
  protobuf_AddDesc_client2world_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2w_player_connect_descriptor_ = file->message_type(0);
  static const int packetc2w_player_connect_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, login_platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, machine_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, machine_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, channelid_),
  };
  packetc2w_player_connect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_player_connect_descriptor_,
      packetc2w_player_connect::default_instance_,
      packetc2w_player_connect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_player_connect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_player_connect));
  packetw2c_player_connect_result_descriptor_ = file->message_type(1);
  static const int packetw2c_player_connect_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_connect_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_connect_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_connect_result, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_connect_result, gaming_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_connect_result, ver_),
  };
  packetw2c_player_connect_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_player_connect_result_descriptor_,
      packetw2c_player_connect_result::default_instance_,
      packetw2c_player_connect_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_connect_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_connect_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_player_connect_result));
  packet_c2w_timesync_descriptor_ = file->message_type(2);
  static const int packet_c2w_timesync_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_c2w_timesync, packet_id_),
  };
  packet_c2w_timesync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_c2w_timesync_descriptor_,
      packet_c2w_timesync::default_instance_,
      packet_c2w_timesync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_c2w_timesync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_c2w_timesync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_c2w_timesync));
  packet_w2c_timesync_result_descriptor_ = file->message_type(3);
  static const int packet_w2c_timesync_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_w2c_timesync_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_w2c_timesync_result, server_time_),
  };
  packet_w2c_timesync_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_w2c_timesync_result_descriptor_,
      packet_w2c_timesync_result::default_instance_,
      packet_w2c_timesync_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_w2c_timesync_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet_w2c_timesync_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet_w2c_timesync_result));
  packetc2w_ask_login_descriptor_ = file->message_type(4);
  static const int packetc2w_ask_login_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_login, packet_id_),
  };
  packetc2w_ask_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_ask_login_descriptor_,
      packetc2w_ask_login::default_instance_,
      packetc2w_ask_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_ask_login));
  msg_game_info_descriptor_ = file->message_type(5);
  static const int msg_game_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_info, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_info, gamever_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_info, curonlinenum_),
  };
  msg_game_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_game_info_descriptor_,
      msg_game_info::default_instance_,
      msg_game_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_game_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_game_info));
  packetw2c_ask_login_result_descriptor_ = file->message_type(6);
  static const int packetw2c_ask_login_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_login_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_login_result, account_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_login_result, game_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_login_result, gaming_),
  };
  packetw2c_ask_login_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_ask_login_result_descriptor_,
      packetw2c_ask_login_result::default_instance_,
      packetw2c_ask_login_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_login_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_login_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_ask_login_result));
  packetc2w_enter_game_descriptor_ = file->message_type(7);
  static const int packetc2w_enter_game_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_enter_game, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_enter_game, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_enter_game, gamever_),
  };
  packetc2w_enter_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_enter_game_descriptor_,
      packetc2w_enter_game::default_instance_,
      packetc2w_enter_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_enter_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_enter_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_enter_game));
  packetw2c_enter_game_result_descriptor_ = file->message_type(8);
  static const int packetw2c_enter_game_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_enter_game_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_enter_game_result, result_),
  };
  packetw2c_enter_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_enter_game_result_descriptor_,
      packetw2c_enter_game_result::default_instance_,
      packetw2c_enter_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_enter_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_enter_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_enter_game_result));
  packetc2w_gm_command_descriptor_ = file->message_type(9);
  static const int packetc2w_gm_command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_gm_command, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_gm_command, command_),
  };
  packetc2w_gm_command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_gm_command_descriptor_,
      packetc2w_gm_command::default_instance_,
      packetc2w_gm_command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_gm_command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_gm_command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_gm_command));
  packetw2c_gm_command_result_descriptor_ = file->message_type(10);
  static const int packetw2c_gm_command_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_gm_command_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_gm_command_result, result_),
  };
  packetw2c_gm_command_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_gm_command_result_descriptor_,
      packetw2c_gm_command_result::default_instance_,
      packetw2c_gm_command_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_gm_command_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_gm_command_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_gm_command_result));
  packetc2w_ask_check_payment_descriptor_ = file->message_type(11);
  static const int packetc2w_ask_check_payment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_check_payment, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_check_payment, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_check_payment, ex_mark_),
  };
  packetc2w_ask_check_payment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_ask_check_payment_descriptor_,
      packetc2w_ask_check_payment::default_instance_,
      packetc2w_ask_check_payment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_check_payment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_check_payment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_ask_check_payment));
  packetc2w_ask_test_payment_descriptor_ = file->message_type(12);
  static const int packetc2w_ask_test_payment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_test_payment, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_test_payment, payid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_test_payment, ex_mark_),
  };
  packetc2w_ask_test_payment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_ask_test_payment_descriptor_,
      packetc2w_ask_test_payment::default_instance_,
      packetc2w_ask_test_payment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_test_payment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_ask_test_payment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_ask_test_payment));
  packetw2c_ask_check_payment_result_descriptor_ = file->message_type(13);
  static const int packetw2c_ask_check_payment_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_check_payment_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_check_payment_result, payid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_check_payment_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_check_payment_result, lottery_rate_),
  };
  packetw2c_ask_check_payment_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_ask_check_payment_result_descriptor_,
      packetw2c_ask_check_payment_result::default_instance_,
      packetw2c_ask_check_payment_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_check_payment_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_check_payment_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_ask_check_payment_result));
  packetw2c_ask_check_payment_result2_descriptor_ = file->message_type(14);
  static const int packetw2c_ask_check_payment_result2_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_check_payment_result2, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_check_payment_result2, pay_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_check_payment_result2, pay_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_check_payment_result2, vip_exp_),
  };
  packetw2c_ask_check_payment_result2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_ask_check_payment_result2_descriptor_,
      packetw2c_ask_check_payment_result2::default_instance_,
      packetw2c_ask_check_payment_result2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_check_payment_result2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_ask_check_payment_result2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_ask_check_payment_result2));
  packetc2w_leave_game_descriptor_ = file->message_type(15);
  static const int packetc2w_leave_game_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_leave_game, packet_id_),
  };
  packetc2w_leave_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_leave_game_descriptor_,
      packetc2w_leave_game::default_instance_,
      packetc2w_leave_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_leave_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_leave_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_leave_game));
  packetw2c_leave_game_result_descriptor_ = file->message_type(16);
  static const int packetw2c_leave_game_result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_leave_game_result, packet_id_),
  };
  packetw2c_leave_game_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_leave_game_result_descriptor_,
      packetw2c_leave_game_result::default_instance_,
      packetw2c_leave_game_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_leave_game_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_leave_game_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_leave_game_result));
  packetw2c_player_kick_descriptor_ = file->message_type(17);
  static const int packetw2c_player_kick_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_kick, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_kick, kick_type_),
  };
  packetw2c_player_kick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_player_kick_descriptor_,
      packetw2c_player_kick::default_instance_,
      packetw2c_player_kick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_kick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_player_kick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_player_kick));
  packetc2w_get_gamelist_descriptor_ = file->message_type(18);
  static const int packetc2w_get_gamelist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_gamelist, packet_id_),
  };
  packetc2w_get_gamelist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_get_gamelist_descriptor_,
      packetc2w_get_gamelist::default_instance_,
      packetc2w_get_gamelist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_gamelist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_get_gamelist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_get_gamelist));
  packetw2c_get_gamelist_result_descriptor_ = file->message_type(19);
  static const int packetw2c_get_gamelist_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_gamelist_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_gamelist_result, game_list_),
  };
  packetw2c_get_gamelist_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_get_gamelist_result_descriptor_,
      packetw2c_get_gamelist_result::default_instance_,
      packetw2c_get_gamelist_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_gamelist_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_get_gamelist_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_get_gamelist_result));
  packetc2w_first_login_descriptor_ = file->message_type(20);
  static const int packetc2w_first_login_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_first_login, packet_id_),
  };
  packetc2w_first_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_first_login_descriptor_,
      packetc2w_first_login::default_instance_,
      packetc2w_first_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_first_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_first_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_first_login));
  packetw2c_first_login_result_descriptor_ = file->message_type(21);
  static const int packetw2c_first_login_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_first_login_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_first_login_result, result_),
  };
  packetw2c_first_login_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_first_login_result_descriptor_,
      packetw2c_first_login_result::default_instance_,
      packetw2c_first_login_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_first_login_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_first_login_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_first_login_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_player_connect_descriptor_, &packetc2w_player_connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_player_connect_result_descriptor_, &packetw2c_player_connect_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_c2w_timesync_descriptor_, &packet_c2w_timesync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_w2c_timesync_result_descriptor_, &packet_w2c_timesync_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_ask_login_descriptor_, &packetc2w_ask_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_game_info_descriptor_, &msg_game_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_ask_login_result_descriptor_, &packetw2c_ask_login_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_enter_game_descriptor_, &packetc2w_enter_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_enter_game_result_descriptor_, &packetw2c_enter_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_gm_command_descriptor_, &packetc2w_gm_command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_gm_command_result_descriptor_, &packetw2c_gm_command_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_ask_check_payment_descriptor_, &packetc2w_ask_check_payment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_ask_test_payment_descriptor_, &packetc2w_ask_test_payment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_ask_check_payment_result_descriptor_, &packetw2c_ask_check_payment_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_ask_check_payment_result2_descriptor_, &packetw2c_ask_check_payment_result2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_leave_game_descriptor_, &packetc2w_leave_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_leave_game_result_descriptor_, &packetw2c_leave_game_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_player_kick_descriptor_, &packetw2c_player_kick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_get_gamelist_descriptor_, &packetc2w_get_gamelist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_get_gamelist_result_descriptor_, &packetw2c_get_gamelist_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_first_login_descriptor_, &packetc2w_first_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_first_login_result_descriptor_, &packetw2c_first_login_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fprotocol_2eproto() {
  delete packetc2w_player_connect::default_instance_;
  delete packetc2w_player_connect_reflection_;
  delete packetw2c_player_connect_result::default_instance_;
  delete packetw2c_player_connect_result_reflection_;
  delete packet_c2w_timesync::default_instance_;
  delete packet_c2w_timesync_reflection_;
  delete packet_w2c_timesync_result::default_instance_;
  delete packet_w2c_timesync_result_reflection_;
  delete packetc2w_ask_login::default_instance_;
  delete packetc2w_ask_login_reflection_;
  delete msg_game_info::default_instance_;
  delete msg_game_info_reflection_;
  delete packetw2c_ask_login_result::default_instance_;
  delete packetw2c_ask_login_result_reflection_;
  delete packetc2w_enter_game::default_instance_;
  delete packetc2w_enter_game_reflection_;
  delete packetw2c_enter_game_result::default_instance_;
  delete packetw2c_enter_game_result_reflection_;
  delete packetc2w_gm_command::default_instance_;
  delete packetc2w_gm_command_reflection_;
  delete packetw2c_gm_command_result::default_instance_;
  delete packetw2c_gm_command_result_reflection_;
  delete packetc2w_ask_check_payment::default_instance_;
  delete packetc2w_ask_check_payment_reflection_;
  delete packetc2w_ask_test_payment::default_instance_;
  delete packetc2w_ask_test_payment_reflection_;
  delete packetw2c_ask_check_payment_result::default_instance_;
  delete packetw2c_ask_check_payment_result_reflection_;
  delete packetw2c_ask_check_payment_result2::default_instance_;
  delete packetw2c_ask_check_payment_result2_reflection_;
  delete packetc2w_leave_game::default_instance_;
  delete packetc2w_leave_game_reflection_;
  delete packetw2c_leave_game_result::default_instance_;
  delete packetw2c_leave_game_result_reflection_;
  delete packetw2c_player_kick::default_instance_;
  delete packetw2c_player_kick_reflection_;
  delete packetc2w_get_gamelist::default_instance_;
  delete packetc2w_get_gamelist_reflection_;
  delete packetw2c_get_gamelist_result::default_instance_;
  delete packetw2c_get_gamelist_result_reflection_;
  delete packetc2w_first_login::default_instance_;
  delete packetc2w_first_login_reflection_;
  delete packetw2c_first_login_result::default_instance_;
  delete packetw2c_first_login_result_reflection_;
}

void protobuf_AddDesc_client2world_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033client2world_protocol.proto\022\026client2wo"
    "rld_protocols\032\033client2world_msg_type.pro"
    "to\032\022msg_type_def.proto\032\022msg_info_def.pro"
    "to\"\211\002\n\030packetc2w_player_connect\022V\n\tpacke"
    "t_id\030\001 \001(\0162).client2world_protocols.e_se"
    "rver_msg_type:\030e_mst_c2w_player_connect\022"
    "\017\n\007account\030\002 \001(\t\022\r\n\005token\030\003 \001(\t\022\014\n\004sign\030"
    "\004 \001(\t\022\020\n\010platform\030\005 \001(\t\022\026\n\016login_platfor"
    "m\030\006 \001(\t\022\024\n\014Machine_code\030\007 \001(\t\022\024\n\014Machine"
    "_type\030\010 \001(\t\022\021\n\tchannelid\030\t \001(\005\"\360\001\n\037packe"
    "tw2c_player_connect_result\022]\n\tpacket_id\030"
    "\001 \001(\0162).client2world_protocols.e_server_"
    "msg_type:\037e_mst_w2c_player_connect_resul"
    "t\022:\n\006result\030\002 \001(\0162\036.msg_type_def.e_msg_r"
    "esult_def:\ne_rmt_fail\022\022\n\nservertime\030\003 \001("
    "\005\022\021\n\006gaming\030\004 \001(\005:\0010\022\013\n\003ver\030\005 \001(\t\"g\n\023pac"
    "ket_c2w_timesync\022P\n\tpacket_id\030\001 \001(\0162).cl"
    "ient2world_protocols.e_server_msg_type:\022"
    "e_mst_c2w_timesync\"\212\001\n\032packet_w2c_timesy"
    "nc_result\022W\n\tpacket_id\030\001 \001(\0162).client2wo"
    "rld_protocols.e_server_msg_type:\031e_mst_w"
    "2c_timesync_result\022\023\n\013server_time\030\002 \001(\005\""
    "g\n\023packetc2w_ask_login\022P\n\tpacket_id\030\001 \001("
    "\0162).client2world_protocols.e_server_msg_"
    "type:\022e_mst_c2w_asklogin\"F\n\rmsg_game_inf"
    "o\022\016\n\006gameid\030\001 \001(\005\022\017\n\007gamever\030\002 \001(\005\022\024\n\014cu"
    "rOnlineNum\030\003 \001(\005\"\370\001\n\032packetw2c_ask_login"
    "_result\022W\n\tpacket_id\030\001 \001(\0162).client2worl"
    "d_protocols.e_server_msg_type:\031e_mst_w2c"
    "_asklogin_result\0224\n\014account_info\030\002 \001(\0132\036"
    ".msg_info_def.msg_account_info\0228\n\tgame_l"
    "ist\030\003 \003(\0132%.client2world_protocols.msg_g"
    "ame_info\022\021\n\006gaming\030\004 \001(\005:\0010\"\213\001\n\024packetc2"
    "w_enter_game\022R\n\tpacket_id\030\001 \001(\0162).client"
    "2world_protocols.e_server_msg_type:\024e_ms"
    "t_c2w_enter_game\022\016\n\006gameid\030\002 \001(\005\022\017\n\007game"
    "ver\030\003 \001(\005\"\264\001\n\033packetw2c_enter_game_resul"
    "t\022Y\n\tpacket_id\030\001 \001(\0162).client2world_prot"
    "ocols.e_server_msg_type:\033e_mst_w2c_enter"
    "_game_result\022:\n\006result\030\002 \001(\0162\036.msg_type_"
    "def.e_msg_result_def:\ne_rmt_fail\"x\n\024pack"
    "etc2w_gm_command\022O\n\tpacket_id\030\001 \001(\0162).cl"
    "ient2world_protocols.e_server_msg_type:\021"
    "e_mst_c2w_command\022\017\n\007command\030\002 \001(\t\"\261\001\n\033p"
    "acketw2c_gm_command_result\022V\n\tpacket_id\030"
    "\001 \001(\0162).client2world_protocols.e_server_"
    "msg_type:\030e_mst_w2c_command_result\022:\n\006re"
    "sult\030\002 \001(\0162\036.msg_type_def.e_msg_result_d"
    "ef:\ne_rmt_fail\"\241\001\n\033packetc2w_ask_check_p"
    "ayment\022Y\n\tpacket_id\030\001 \001(\0162).client2world"
    "_protocols.e_server_msg_type:\033e_mst_c2w_"
    "ask_check_payment\022\017\n\007orderid\030\002 \001(\t\022\026\n\007ex"
    "_mark\030\003 \001(\010:\005false\"\235\001\n\032packetc2w_ask_tes"
    "t_payment\022X\n\tpacket_id\030\001 \001(\0162).client2wo"
    "rld_protocols.e_server_msg_type:\032e_mst_c"
    "2w_ask_test_payment\022\r\n\005payid\030\002 \001(\005\022\026\n\007ex"
    "_mark\030\003 \001(\010:\005false\"\304\001\n\"packetw2c_ask_che"
    "ck_payment_result\022`\n\tpacket_id\030\001 \001(\0162).c"
    "lient2world_protocols.e_server_msg_type:"
    "\"e_mst_w2c_ask_check_payment_result\022\r\n\005p"
    "ayid\030\002 \001(\005\022\024\n\006result\030\003 \001(\010:\004true\022\027\n\014lott"
    "ery_rate\030\004 \001(\005:\0010\"\276\001\n#packetw2c_ask_chec"
    "k_payment_result2\022a\n\tpacket_id\030\001 \001(\0162).c"
    "lient2world_protocols.e_server_msg_type:"
    "#e_mst_w2c_ask_check_payment_result2\022\020\n\010"
    "pay_type\030\002 \001(\005\022\021\n\tpay_value\030\003 \001(\005\022\017\n\007vip"
    "_exp\030\004 \001(\005\"j\n\024packetc2w_leave_game\022R\n\tpa"
    "cket_id\030\001 \001(\0162).client2world_protocols.e"
    "_server_msg_type:\024e_mst_c2w_leave_game\"x"
    "\n\033packetw2c_leave_game_result\022Y\n\tpacket_"
    "id\030\001 \001(\0162).client2world_protocols.e_serv"
    "er_msg_type:\033e_mst_w2c_leave_game_result"
    "\"\202\001\n\025packetw2c_player_kick\022S\n\tpacket_id\030"
    "\001 \001(\0162).client2world_protocols.e_server_"
    "msg_type:\025e_mst_w2c_player_kick\022\024\n\tkick_"
    "type\030\002 \001(\005:\0010\"n\n\026packetc2w_get_gamelist\022"
    "T\n\tpacket_id\030\001 \001(\0162).client2world_protoc"
    "ols.e_server_msg_type:\026e_mst_c2w_get_gam"
    "elist\"\266\001\n\035packetw2c_get_gamelist_result\022"
    "[\n\tpacket_id\030\001 \001(\0162).client2world_protoc"
    "ols.e_server_msg_type:\035e_mst_w2c_get_gam"
    "elist_result\0228\n\tgame_list\030\002 \003(\0132%.client"
    "2world_protocols.msg_game_info\"l\n\025packet"
    "c2w_first_login\022S\n\tpacket_id\030\001 \001(\0162).cli"
    "ent2world_protocols.e_server_msg_type:\025e"
    "_mst_c2w_first_login\"\266\001\n\034packetw2c_first"
    "_login_result\022Z\n\tpacket_id\030\001 \001(\0162).clien"
    "t2world_protocols.e_server_msg_type:\034e_m"
    "st_w2c_first_login_result\022:\n\006result\030\002 \001("
    "\0162\036.msg_type_def.e_msg_result_def:\ne_rmt"
    "_fail", 3605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_protocol.proto", &protobuf_RegisterTypes);
  packetc2w_player_connect::default_instance_ = new packetc2w_player_connect();
  packetw2c_player_connect_result::default_instance_ = new packetw2c_player_connect_result();
  packet_c2w_timesync::default_instance_ = new packet_c2w_timesync();
  packet_w2c_timesync_result::default_instance_ = new packet_w2c_timesync_result();
  packetc2w_ask_login::default_instance_ = new packetc2w_ask_login();
  msg_game_info::default_instance_ = new msg_game_info();
  packetw2c_ask_login_result::default_instance_ = new packetw2c_ask_login_result();
  packetc2w_enter_game::default_instance_ = new packetc2w_enter_game();
  packetw2c_enter_game_result::default_instance_ = new packetw2c_enter_game_result();
  packetc2w_gm_command::default_instance_ = new packetc2w_gm_command();
  packetw2c_gm_command_result::default_instance_ = new packetw2c_gm_command_result();
  packetc2w_ask_check_payment::default_instance_ = new packetc2w_ask_check_payment();
  packetc2w_ask_test_payment::default_instance_ = new packetc2w_ask_test_payment();
  packetw2c_ask_check_payment_result::default_instance_ = new packetw2c_ask_check_payment_result();
  packetw2c_ask_check_payment_result2::default_instance_ = new packetw2c_ask_check_payment_result2();
  packetc2w_leave_game::default_instance_ = new packetc2w_leave_game();
  packetw2c_leave_game_result::default_instance_ = new packetw2c_leave_game_result();
  packetw2c_player_kick::default_instance_ = new packetw2c_player_kick();
  packetc2w_get_gamelist::default_instance_ = new packetc2w_get_gamelist();
  packetw2c_get_gamelist_result::default_instance_ = new packetw2c_get_gamelist_result();
  packetc2w_first_login::default_instance_ = new packetc2w_first_login();
  packetw2c_first_login_result::default_instance_ = new packetw2c_first_login_result();
  packetc2w_player_connect::default_instance_->InitAsDefaultInstance();
  packetw2c_player_connect_result::default_instance_->InitAsDefaultInstance();
  packet_c2w_timesync::default_instance_->InitAsDefaultInstance();
  packet_w2c_timesync_result::default_instance_->InitAsDefaultInstance();
  packetc2w_ask_login::default_instance_->InitAsDefaultInstance();
  msg_game_info::default_instance_->InitAsDefaultInstance();
  packetw2c_ask_login_result::default_instance_->InitAsDefaultInstance();
  packetc2w_enter_game::default_instance_->InitAsDefaultInstance();
  packetw2c_enter_game_result::default_instance_->InitAsDefaultInstance();
  packetc2w_gm_command::default_instance_->InitAsDefaultInstance();
  packetw2c_gm_command_result::default_instance_->InitAsDefaultInstance();
  packetc2w_ask_check_payment::default_instance_->InitAsDefaultInstance();
  packetc2w_ask_test_payment::default_instance_->InitAsDefaultInstance();
  packetw2c_ask_check_payment_result::default_instance_->InitAsDefaultInstance();
  packetw2c_ask_check_payment_result2::default_instance_->InitAsDefaultInstance();
  packetc2w_leave_game::default_instance_->InitAsDefaultInstance();
  packetw2c_leave_game_result::default_instance_->InitAsDefaultInstance();
  packetw2c_player_kick::default_instance_->InitAsDefaultInstance();
  packetc2w_get_gamelist::default_instance_->InitAsDefaultInstance();
  packetw2c_get_gamelist_result::default_instance_->InitAsDefaultInstance();
  packetc2w_first_login::default_instance_->InitAsDefaultInstance();
  packetw2c_first_login_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fprotocol_2eproto {
  StaticDescriptorInitializer_client2world_5fprotocol_2eproto() {
    protobuf_AddDesc_client2world_5fprotocol_2eproto();
  }
} static_descriptor_initializer_client2world_5fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2w_player_connect::kPacketIdFieldNumber;
const int packetc2w_player_connect::kAccountFieldNumber;
const int packetc2w_player_connect::kTokenFieldNumber;
const int packetc2w_player_connect::kSignFieldNumber;
const int packetc2w_player_connect::kPlatformFieldNumber;
const int packetc2w_player_connect::kLoginPlatformFieldNumber;
const int packetc2w_player_connect::kMachineCodeFieldNumber;
const int packetc2w_player_connect::kMachineTypeFieldNumber;
const int packetc2w_player_connect::kChannelidFieldNumber;
#endif  // !_MSC_VER

packetc2w_player_connect::packetc2w_player_connect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_player_connect)
}

void packetc2w_player_connect::InitAsDefaultInstance() {
}

packetc2w_player_connect::packetc2w_player_connect(const packetc2w_player_connect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_player_connect)
}

void packetc2w_player_connect::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5001;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  machine_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_player_connect::~packetc2w_player_connect() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_player_connect)
  SharedDtor();
}

void packetc2w_player_connect::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (login_platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_platform_;
  }
  if (machine_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete machine_code_;
  }
  if (machine_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete machine_type_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_player_connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_player_connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_player_connect_descriptor_;
}

const packetc2w_player_connect& packetc2w_player_connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_player_connect* packetc2w_player_connect::default_instance_ = NULL;

packetc2w_player_connect* packetc2w_player_connect::New() const {
  return new packetc2w_player_connect;
}

void packetc2w_player_connect::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    packet_id_ = 5001;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
    if (has_login_platform()) {
      if (login_platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_platform_->clear();
      }
    }
    if (has_machine_code()) {
      if (machine_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        machine_code_->clear();
      }
    }
    if (has_machine_type()) {
      if (machine_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        machine_type_->clear();
      }
    }
  }
  channelid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_player_connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_player_connect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_connect];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (tag == 18) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sign;
        break;
      }

      // optional string sign = 4;
      case 4: {
        if (tag == 34) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_platform;
        break;
      }

      // optional string platform = 5;
      case 5: {
        if (tag == 42) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_login_platform;
        break;
      }

      // optional string login_platform = 6;
      case 6: {
        if (tag == 50) {
         parse_login_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login_platform().data(), this->login_platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login_platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Machine_code;
        break;
      }

      // optional string Machine_code = 7;
      case 7: {
        if (tag == 58) {
         parse_Machine_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_code().data(), this->machine_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "machine_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Machine_type;
        break;
      }

      // optional string Machine_type = 8;
      case 8: {
        if (tag == 66) {
         parse_Machine_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->machine_type().data(), this->machine_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "machine_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_channelid;
        break;
      }

      // optional int32 channelid = 9;
      case 9: {
        if (tag == 72) {
         parse_channelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_player_connect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_player_connect)
  return false;
#undef DO_
}

void packetc2w_player_connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_player_connect)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_connect];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sign(), output);
  }

  // optional string platform = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->platform(), output);
  }

  // optional string login_platform = 6;
  if (has_login_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_platform().data(), this->login_platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->login_platform(), output);
  }

  // optional string Machine_code = 7;
  if (has_machine_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_code().data(), this->machine_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "machine_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->machine_code(), output);
  }

  // optional string Machine_type = 8;
  if (has_machine_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "machine_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->machine_type(), output);
  }

  // optional int32 channelid = 9;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->channelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_player_connect)
}

::google::protobuf::uint8* packetc2w_player_connect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_player_connect)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_connect];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sign(), target);
  }

  // optional string platform = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platform(), target);
  }

  // optional string login_platform = 6;
  if (has_login_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_platform().data(), this->login_platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->login_platform(), target);
  }

  // optional string Machine_code = 7;
  if (has_machine_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_code().data(), this->machine_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "machine_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->machine_code(), target);
  }

  // optional string Machine_type = 8;
  if (has_machine_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "machine_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->machine_type(), target);
  }

  // optional int32 channelid = 9;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->channelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_player_connect)
  return target;
}

int packetc2w_player_connect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_player_connect];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string sign = 4;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string platform = 5;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string login_platform = 6;
    if (has_login_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_platform());
    }

    // optional string Machine_code = 7;
    if (has_machine_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_code());
    }

    // optional string Machine_type = 8;
    if (has_machine_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 channelid = 9;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_player_connect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_player_connect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_player_connect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_player_connect::MergeFrom(const packetc2w_player_connect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_login_platform()) {
      set_login_platform(from.login_platform());
    }
    if (from.has_machine_code()) {
      set_machine_code(from.machine_code());
    }
    if (from.has_machine_type()) {
      set_machine_type(from.machine_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_player_connect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_player_connect::CopyFrom(const packetc2w_player_connect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_player_connect::IsInitialized() const {

  return true;
}

void packetc2w_player_connect::Swap(packetc2w_player_connect* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(account_, other->account_);
    std::swap(token_, other->token_);
    std::swap(sign_, other->sign_);
    std::swap(platform_, other->platform_);
    std::swap(login_platform_, other->login_platform_);
    std::swap(machine_code_, other->machine_code_);
    std::swap(machine_type_, other->machine_type_);
    std::swap(channelid_, other->channelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_player_connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_player_connect_descriptor_;
  metadata.reflection = packetc2w_player_connect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_player_connect_result::kPacketIdFieldNumber;
const int packetw2c_player_connect_result::kResultFieldNumber;
const int packetw2c_player_connect_result::kServertimeFieldNumber;
const int packetw2c_player_connect_result::kGamingFieldNumber;
const int packetw2c_player_connect_result::kVerFieldNumber;
#endif  // !_MSC_VER

packetw2c_player_connect_result::packetw2c_player_connect_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_player_connect_result)
}

void packetw2c_player_connect_result::InitAsDefaultInstance() {
}

packetw2c_player_connect_result::packetw2c_player_connect_result(const packetw2c_player_connect_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_player_connect_result)
}

void packetw2c_player_connect_result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 7501;
  result_ = 2;
  servertime_ = 0;
  gaming_ = 0;
  ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_player_connect_result::~packetw2c_player_connect_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_player_connect_result)
  SharedDtor();
}

void packetw2c_player_connect_result::SharedDtor() {
  if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ver_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_player_connect_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_player_connect_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_player_connect_result_descriptor_;
}

const packetw2c_player_connect_result& packetw2c_player_connect_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_player_connect_result* packetw2c_player_connect_result::default_instance_ = NULL;

packetw2c_player_connect_result* packetw2c_player_connect_result::New() const {
  return new packetw2c_player_connect_result;
}

void packetw2c_player_connect_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_player_connect_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(servertime_, gaming_);
    packet_id_ = 7501;
    result_ = 2;
    if (has_ver()) {
      if (ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ver_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_player_connect_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_player_connect_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_connect_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_servertime;
        break;
      }

      // optional int32 servertime = 3;
      case 3: {
        if (tag == 24) {
         parse_servertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gaming;
        break;
      }

      // optional int32 gaming = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_gaming:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gaming_)));
          set_has_gaming();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ver;
        break;
      }

      // optional string ver = 5;
      case 5: {
        if (tag == 42) {
         parse_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_player_connect_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_player_connect_result)
  return false;
#undef DO_
}

void packetw2c_player_connect_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_player_connect_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_connect_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 servertime = 3;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->servertime(), output);
  }

  // optional int32 gaming = 4 [default = 0];
  if (has_gaming()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gaming(), output);
  }

  // optional string ver = 5;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_player_connect_result)
}

::google::protobuf::uint8* packetw2c_player_connect_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_player_connect_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_connect_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 servertime = 3;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->servertime(), target);
  }

  // optional int32 gaming = 4 [default = 0];
  if (has_gaming()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gaming(), target);
  }

  // optional string ver = 5;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_player_connect_result)
  return target;
}

int packetw2c_player_connect_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_connect_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 servertime = 3;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertime());
    }

    // optional int32 gaming = 4 [default = 0];
    if (has_gaming()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gaming());
    }

    // optional string ver = 5;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_player_connect_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_player_connect_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_player_connect_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_player_connect_result::MergeFrom(const packetw2c_player_connect_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_gaming()) {
      set_gaming(from.gaming());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_player_connect_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_player_connect_result::CopyFrom(const packetw2c_player_connect_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_player_connect_result::IsInitialized() const {

  return true;
}

void packetw2c_player_connect_result::Swap(packetw2c_player_connect_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(servertime_, other->servertime_);
    std::swap(gaming_, other->gaming_);
    std::swap(ver_, other->ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_player_connect_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_player_connect_result_descriptor_;
  metadata.reflection = packetw2c_player_connect_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_c2w_timesync::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packet_c2w_timesync::packet_c2w_timesync()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packet_c2w_timesync)
}

void packet_c2w_timesync::InitAsDefaultInstance() {
}

packet_c2w_timesync::packet_c2w_timesync(const packet_c2w_timesync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packet_c2w_timesync)
}

void packet_c2w_timesync::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5002;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_c2w_timesync::~packet_c2w_timesync() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packet_c2w_timesync)
  SharedDtor();
}

void packet_c2w_timesync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_c2w_timesync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_c2w_timesync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_c2w_timesync_descriptor_;
}

const packet_c2w_timesync& packet_c2w_timesync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packet_c2w_timesync* packet_c2w_timesync::default_instance_ = NULL;

packet_c2w_timesync* packet_c2w_timesync::New() const {
  return new packet_c2w_timesync;
}

void packet_c2w_timesync::Clear() {
  packet_id_ = 5002;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_c2w_timesync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packet_c2w_timesync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_timesync];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packet_c2w_timesync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packet_c2w_timesync)
  return false;
#undef DO_
}

void packet_c2w_timesync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packet_c2w_timesync)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_timesync];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packet_c2w_timesync)
}

::google::protobuf::uint8* packet_c2w_timesync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packet_c2w_timesync)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_timesync];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packet_c2w_timesync)
  return target;
}

int packet_c2w_timesync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_timesync];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_c2w_timesync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_c2w_timesync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_c2w_timesync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_c2w_timesync::MergeFrom(const packet_c2w_timesync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_c2w_timesync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_c2w_timesync::CopyFrom(const packet_c2w_timesync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_c2w_timesync::IsInitialized() const {

  return true;
}

void packet_c2w_timesync::Swap(packet_c2w_timesync* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_c2w_timesync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_c2w_timesync_descriptor_;
  metadata.reflection = packet_c2w_timesync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packet_w2c_timesync_result::kPacketIdFieldNumber;
const int packet_w2c_timesync_result::kServerTimeFieldNumber;
#endif  // !_MSC_VER

packet_w2c_timesync_result::packet_w2c_timesync_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packet_w2c_timesync_result)
}

void packet_w2c_timesync_result::InitAsDefaultInstance() {
}

packet_w2c_timesync_result::packet_w2c_timesync_result(const packet_w2c_timesync_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packet_w2c_timesync_result)
}

void packet_w2c_timesync_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7502;
  server_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet_w2c_timesync_result::~packet_w2c_timesync_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packet_w2c_timesync_result)
  SharedDtor();
}

void packet_w2c_timesync_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packet_w2c_timesync_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet_w2c_timesync_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_w2c_timesync_result_descriptor_;
}

const packet_w2c_timesync_result& packet_w2c_timesync_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packet_w2c_timesync_result* packet_w2c_timesync_result::default_instance_ = NULL;

packet_w2c_timesync_result* packet_w2c_timesync_result::New() const {
  return new packet_w2c_timesync_result;
}

void packet_w2c_timesync_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7502;
    server_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet_w2c_timesync_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packet_w2c_timesync_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_timesync_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_server_time;
        break;
      }

      // optional int32 server_time = 2;
      case 2: {
        if (tag == 16) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packet_w2c_timesync_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packet_w2c_timesync_result)
  return false;
#undef DO_
}

void packet_w2c_timesync_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packet_w2c_timesync_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_timesync_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 server_time = 2;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packet_w2c_timesync_result)
}

::google::protobuf::uint8* packet_w2c_timesync_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packet_w2c_timesync_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_timesync_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 server_time = 2;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packet_w2c_timesync_result)
  return target;
}

int packet_w2c_timesync_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_timesync_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 server_time = 2;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet_w2c_timesync_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet_w2c_timesync_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet_w2c_timesync_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet_w2c_timesync_result::MergeFrom(const packet_w2c_timesync_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet_w2c_timesync_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet_w2c_timesync_result::CopyFrom(const packet_w2c_timesync_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet_w2c_timesync_result::IsInitialized() const {

  return true;
}

void packet_w2c_timesync_result::Swap(packet_w2c_timesync_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(server_time_, other->server_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet_w2c_timesync_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_w2c_timesync_result_descriptor_;
  metadata.reflection = packet_w2c_timesync_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_ask_login::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_ask_login::packetc2w_ask_login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_ask_login)
}

void packetc2w_ask_login::InitAsDefaultInstance() {
}

packetc2w_ask_login::packetc2w_ask_login(const packetc2w_ask_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_ask_login)
}

void packetc2w_ask_login::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_ask_login::~packetc2w_ask_login() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_ask_login)
  SharedDtor();
}

void packetc2w_ask_login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_ask_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_ask_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_ask_login_descriptor_;
}

const packetc2w_ask_login& packetc2w_ask_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_ask_login* packetc2w_ask_login::default_instance_ = NULL;

packetc2w_ask_login* packetc2w_ask_login::New() const {
  return new packetc2w_ask_login;
}

void packetc2w_ask_login::Clear() {
  packet_id_ = 5003;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_ask_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_ask_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_asklogin];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_ask_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_ask_login)
  return false;
#undef DO_
}

void packetc2w_ask_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_ask_login)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_asklogin];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_ask_login)
}

::google::protobuf::uint8* packetc2w_ask_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_ask_login)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_asklogin];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_ask_login)
  return target;
}

int packetc2w_ask_login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_asklogin];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_ask_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_ask_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_ask_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_ask_login::MergeFrom(const packetc2w_ask_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_ask_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_ask_login::CopyFrom(const packetc2w_ask_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_ask_login::IsInitialized() const {

  return true;
}

void packetc2w_ask_login::Swap(packetc2w_ask_login* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_ask_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_ask_login_descriptor_;
  metadata.reflection = packetc2w_ask_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_game_info::kGameidFieldNumber;
const int msg_game_info::kGameverFieldNumber;
const int msg_game_info::kCurOnlineNumFieldNumber;
#endif  // !_MSC_VER

msg_game_info::msg_game_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.msg_game_info)
}

void msg_game_info::InitAsDefaultInstance() {
}

msg_game_info::msg_game_info(const msg_game_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.msg_game_info)
}

void msg_game_info::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gamever_ = 0;
  curonlinenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_game_info::~msg_game_info() {
  // @@protoc_insertion_point(destructor:client2world_protocols.msg_game_info)
  SharedDtor();
}

void msg_game_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_game_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_game_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_game_info_descriptor_;
}

const msg_game_info& msg_game_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

msg_game_info* msg_game_info::default_instance_ = NULL;

msg_game_info* msg_game_info::New() const {
  return new msg_game_info;
}

void msg_game_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<msg_game_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gameid_, curonlinenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_game_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.msg_game_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gamever;
        break;
      }

      // optional int32 gamever = 2;
      case 2: {
        if (tag == 16) {
         parse_gamever:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamever_)));
          set_has_gamever();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curOnlineNum;
        break;
      }

      // optional int32 curOnlineNum = 3;
      case 3: {
        if (tag == 24) {
         parse_curOnlineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curonlinenum_)));
          set_has_curonlinenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.msg_game_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.msg_game_info)
  return false;
#undef DO_
}

void msg_game_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.msg_game_info)
  // optional int32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // optional int32 gamever = 2;
  if (has_gamever()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gamever(), output);
  }

  // optional int32 curOnlineNum = 3;
  if (has_curonlinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curonlinenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.msg_game_info)
}

::google::protobuf::uint8* msg_game_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.msg_game_info)
  // optional int32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // optional int32 gamever = 2;
  if (has_gamever()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gamever(), target);
  }

  // optional int32 curOnlineNum = 3;
  if (has_curonlinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curonlinenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.msg_game_info)
  return target;
}

int msg_game_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional int32 gamever = 2;
    if (has_gamever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamever());
    }

    // optional int32 curOnlineNum = 3;
    if (has_curonlinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curonlinenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_game_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_game_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_game_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_game_info::MergeFrom(const msg_game_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gamever()) {
      set_gamever(from.gamever());
    }
    if (from.has_curonlinenum()) {
      set_curonlinenum(from.curonlinenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_game_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_game_info::CopyFrom(const msg_game_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_game_info::IsInitialized() const {

  return true;
}

void msg_game_info::Swap(msg_game_info* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gamever_, other->gamever_);
    std::swap(curonlinenum_, other->curonlinenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_game_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_game_info_descriptor_;
  metadata.reflection = msg_game_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_ask_login_result::kPacketIdFieldNumber;
const int packetw2c_ask_login_result::kAccountInfoFieldNumber;
const int packetw2c_ask_login_result::kGameListFieldNumber;
const int packetw2c_ask_login_result::kGamingFieldNumber;
#endif  // !_MSC_VER

packetw2c_ask_login_result::packetw2c_ask_login_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_ask_login_result)
}

void packetw2c_ask_login_result::InitAsDefaultInstance() {
  account_info_ = const_cast< ::msg_info_def::msg_account_info*>(&::msg_info_def::msg_account_info::default_instance());
}

packetw2c_ask_login_result::packetw2c_ask_login_result(const packetw2c_ask_login_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_ask_login_result)
}

void packetw2c_ask_login_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7503;
  account_info_ = NULL;
  gaming_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_ask_login_result::~packetw2c_ask_login_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_ask_login_result)
  SharedDtor();
}

void packetw2c_ask_login_result::SharedDtor() {
  if (this != default_instance_) {
    delete account_info_;
  }
}

void packetw2c_ask_login_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_ask_login_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_ask_login_result_descriptor_;
}

const packetw2c_ask_login_result& packetw2c_ask_login_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_ask_login_result* packetw2c_ask_login_result::default_instance_ = NULL;

packetw2c_ask_login_result* packetw2c_ask_login_result::New() const {
  return new packetw2c_ask_login_result;
}

void packetw2c_ask_login_result::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    packet_id_ = 7503;
    if (has_account_info()) {
      if (account_info_ != NULL) account_info_->::msg_info_def::msg_account_info::Clear();
    }
    gaming_ = 0;
  }
  game_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_ask_login_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_ask_login_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_asklogin_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account_info;
        break;
      }

      // optional .msg_info_def.msg_account_info account_info = 2;
      case 2: {
        if (tag == 18) {
         parse_account_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_game_list;
        break;
      }

      // repeated .client2world_protocols.msg_game_info game_list = 3;
      case 3: {
        if (tag == 26) {
         parse_game_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_game_list;
        if (input->ExpectTag(32)) goto parse_gaming;
        break;
      }

      // optional int32 gaming = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_gaming:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gaming_)));
          set_has_gaming();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_ask_login_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_ask_login_result)
  return false;
#undef DO_
}

void packetw2c_ask_login_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_ask_login_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_asklogin_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_info_def.msg_account_info account_info = 2;
  if (has_account_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_info(), output);
  }

  // repeated .client2world_protocols.msg_game_info game_list = 3;
  for (int i = 0; i < this->game_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->game_list(i), output);
  }

  // optional int32 gaming = 4 [default = 0];
  if (has_gaming()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gaming(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_ask_login_result)
}

::google::protobuf::uint8* packetw2c_ask_login_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_ask_login_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_asklogin_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_info_def.msg_account_info account_info = 2;
  if (has_account_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account_info(), target);
  }

  // repeated .client2world_protocols.msg_game_info game_list = 3;
  for (int i = 0; i < this->game_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->game_list(i), target);
  }

  // optional int32 gaming = 4 [default = 0];
  if (has_gaming()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gaming(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_ask_login_result)
  return target;
}

int packetw2c_ask_login_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_asklogin_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_info_def.msg_account_info account_info = 2;
    if (has_account_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_info());
    }

    // optional int32 gaming = 4 [default = 0];
    if (has_gaming()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gaming());
    }

  }
  // repeated .client2world_protocols.msg_game_info game_list = 3;
  total_size += 1 * this->game_list_size();
  for (int i = 0; i < this->game_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->game_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_ask_login_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_ask_login_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_ask_login_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_ask_login_result::MergeFrom(const packetw2c_ask_login_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  game_list_.MergeFrom(from.game_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_account_info()) {
      mutable_account_info()->::msg_info_def::msg_account_info::MergeFrom(from.account_info());
    }
    if (from.has_gaming()) {
      set_gaming(from.gaming());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_ask_login_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_ask_login_result::CopyFrom(const packetw2c_ask_login_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_ask_login_result::IsInitialized() const {

  return true;
}

void packetw2c_ask_login_result::Swap(packetw2c_ask_login_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(account_info_, other->account_info_);
    game_list_.Swap(&other->game_list_);
    std::swap(gaming_, other->gaming_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_ask_login_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_ask_login_result_descriptor_;
  metadata.reflection = packetw2c_ask_login_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_enter_game::kPacketIdFieldNumber;
const int packetc2w_enter_game::kGameidFieldNumber;
const int packetc2w_enter_game::kGameverFieldNumber;
#endif  // !_MSC_VER

packetc2w_enter_game::packetc2w_enter_game()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_enter_game)
}

void packetc2w_enter_game::InitAsDefaultInstance() {
}

packetc2w_enter_game::packetc2w_enter_game(const packetc2w_enter_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_enter_game)
}

void packetc2w_enter_game::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5004;
  gameid_ = 0;
  gamever_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_enter_game::~packetc2w_enter_game() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_enter_game)
  SharedDtor();
}

void packetc2w_enter_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_enter_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_enter_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_enter_game_descriptor_;
}

const packetc2w_enter_game& packetc2w_enter_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_enter_game* packetc2w_enter_game::default_instance_ = NULL;

packetc2w_enter_game* packetc2w_enter_game::New() const {
  return new packetc2w_enter_game;
}

void packetc2w_enter_game::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetc2w_enter_game*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gameid_, gamever_);
    packet_id_ = 5004;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_enter_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_enter_game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_enter_game];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameid;
        break;
      }

      // optional int32 gameid = 2;
      case 2: {
        if (tag == 16) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gamever;
        break;
      }

      // optional int32 gamever = 3;
      case 3: {
        if (tag == 24) {
         parse_gamever:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamever_)));
          set_has_gamever();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_enter_game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_enter_game)
  return false;
#undef DO_
}

void packetc2w_enter_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_enter_game)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_enter_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // optional int32 gamever = 3;
  if (has_gamever()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamever(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_enter_game)
}

::google::protobuf::uint8* packetc2w_enter_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_enter_game)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_enter_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 gameid = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  // optional int32 gamever = 3;
  if (has_gamever()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamever(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_enter_game)
  return target;
}

int packetc2w_enter_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_enter_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional int32 gamever = 3;
    if (has_gamever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamever());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_enter_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_enter_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_enter_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_enter_game::MergeFrom(const packetc2w_enter_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gamever()) {
      set_gamever(from.gamever());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_enter_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_enter_game::CopyFrom(const packetc2w_enter_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_enter_game::IsInitialized() const {

  return true;
}

void packetc2w_enter_game::Swap(packetc2w_enter_game* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(gameid_, other->gameid_);
    std::swap(gamever_, other->gamever_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_enter_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_enter_game_descriptor_;
  metadata.reflection = packetc2w_enter_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_enter_game_result::kPacketIdFieldNumber;
const int packetw2c_enter_game_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_enter_game_result::packetw2c_enter_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_enter_game_result)
}

void packetw2c_enter_game_result::InitAsDefaultInstance() {
}

packetw2c_enter_game_result::packetw2c_enter_game_result(const packetw2c_enter_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_enter_game_result)
}

void packetw2c_enter_game_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7504;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_enter_game_result::~packetw2c_enter_game_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_enter_game_result)
  SharedDtor();
}

void packetw2c_enter_game_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_enter_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_enter_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_enter_game_result_descriptor_;
}

const packetw2c_enter_game_result& packetw2c_enter_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_enter_game_result* packetw2c_enter_game_result::default_instance_ = NULL;

packetw2c_enter_game_result* packetw2c_enter_game_result::New() const {
  return new packetw2c_enter_game_result;
}

void packetw2c_enter_game_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7504;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_enter_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_enter_game_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_enter_game_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_enter_game_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_enter_game_result)
  return false;
#undef DO_
}

void packetw2c_enter_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_enter_game_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_enter_game_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_enter_game_result)
}

::google::protobuf::uint8* packetw2c_enter_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_enter_game_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_enter_game_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_enter_game_result)
  return target;
}

int packetw2c_enter_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_enter_game_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_enter_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_enter_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_enter_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_enter_game_result::MergeFrom(const packetw2c_enter_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_enter_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_enter_game_result::CopyFrom(const packetw2c_enter_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_enter_game_result::IsInitialized() const {

  return true;
}

void packetw2c_enter_game_result::Swap(packetw2c_enter_game_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_enter_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_enter_game_result_descriptor_;
  metadata.reflection = packetw2c_enter_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_gm_command::kPacketIdFieldNumber;
const int packetc2w_gm_command::kCommandFieldNumber;
#endif  // !_MSC_VER

packetc2w_gm_command::packetc2w_gm_command()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_gm_command)
}

void packetc2w_gm_command::InitAsDefaultInstance() {
}

packetc2w_gm_command::packetc2w_gm_command(const packetc2w_gm_command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_gm_command)
}

void packetc2w_gm_command::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5005;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_gm_command::~packetc2w_gm_command() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_gm_command)
  SharedDtor();
}

void packetc2w_gm_command::SharedDtor() {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_gm_command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_gm_command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_gm_command_descriptor_;
}

const packetc2w_gm_command& packetc2w_gm_command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_gm_command* packetc2w_gm_command::default_instance_ = NULL;

packetc2w_gm_command* packetc2w_gm_command::New() const {
  return new packetc2w_gm_command;
}

void packetc2w_gm_command::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5005;
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        command_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_gm_command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_gm_command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_command];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_command;
        break;
      }

      // optional string command = 2;
      case 2: {
        if (tag == 18) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "command");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_gm_command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_gm_command)
  return false;
#undef DO_
}

void packetc2w_gm_command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_gm_command)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_command];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_gm_command)
}

::google::protobuf::uint8* packetc2w_gm_command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_gm_command)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_command];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_gm_command)
  return target;
}

int packetc2w_gm_command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_command];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_gm_command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_gm_command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_gm_command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_gm_command::MergeFrom(const packetc2w_gm_command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_gm_command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_gm_command::CopyFrom(const packetc2w_gm_command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_gm_command::IsInitialized() const {

  return true;
}

void packetc2w_gm_command::Swap(packetc2w_gm_command* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_gm_command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_gm_command_descriptor_;
  metadata.reflection = packetc2w_gm_command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_gm_command_result::kPacketIdFieldNumber;
const int packetw2c_gm_command_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_gm_command_result::packetw2c_gm_command_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_gm_command_result)
}

void packetw2c_gm_command_result::InitAsDefaultInstance() {
}

packetw2c_gm_command_result::packetw2c_gm_command_result(const packetw2c_gm_command_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_gm_command_result)
}

void packetw2c_gm_command_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7505;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_gm_command_result::~packetw2c_gm_command_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_gm_command_result)
  SharedDtor();
}

void packetw2c_gm_command_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_gm_command_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_gm_command_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_gm_command_result_descriptor_;
}

const packetw2c_gm_command_result& packetw2c_gm_command_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_gm_command_result* packetw2c_gm_command_result::default_instance_ = NULL;

packetw2c_gm_command_result* packetw2c_gm_command_result::New() const {
  return new packetw2c_gm_command_result;
}

void packetw2c_gm_command_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7505;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_gm_command_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_gm_command_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_command_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_gm_command_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_gm_command_result)
  return false;
#undef DO_
}

void packetw2c_gm_command_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_gm_command_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_command_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_gm_command_result)
}

::google::protobuf::uint8* packetw2c_gm_command_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_gm_command_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_command_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_gm_command_result)
  return target;
}

int packetw2c_gm_command_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_command_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_gm_command_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_gm_command_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_gm_command_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_gm_command_result::MergeFrom(const packetw2c_gm_command_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_gm_command_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_gm_command_result::CopyFrom(const packetw2c_gm_command_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_gm_command_result::IsInitialized() const {

  return true;
}

void packetw2c_gm_command_result::Swap(packetw2c_gm_command_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_gm_command_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_gm_command_result_descriptor_;
  metadata.reflection = packetw2c_gm_command_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_ask_check_payment::kPacketIdFieldNumber;
const int packetc2w_ask_check_payment::kOrderidFieldNumber;
const int packetc2w_ask_check_payment::kExMarkFieldNumber;
#endif  // !_MSC_VER

packetc2w_ask_check_payment::packetc2w_ask_check_payment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_ask_check_payment)
}

void packetc2w_ask_check_payment::InitAsDefaultInstance() {
}

packetc2w_ask_check_payment::packetc2w_ask_check_payment(const packetc2w_ask_check_payment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_ask_check_payment)
}

void packetc2w_ask_check_payment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5006;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ex_mark_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_ask_check_payment::~packetc2w_ask_check_payment() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_ask_check_payment)
  SharedDtor();
}

void packetc2w_ask_check_payment::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orderid_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_ask_check_payment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_ask_check_payment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_ask_check_payment_descriptor_;
}

const packetc2w_ask_check_payment& packetc2w_ask_check_payment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_ask_check_payment* packetc2w_ask_check_payment::default_instance_ = NULL;

packetc2w_ask_check_payment* packetc2w_ask_check_payment::New() const {
  return new packetc2w_ask_check_payment;
}

void packetc2w_ask_check_payment::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 5006;
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orderid_->clear();
      }
    }
    ex_mark_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_ask_check_payment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_ask_check_payment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_check_payment];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orderid;
        break;
      }

      // optional string orderid = 2;
      case 2: {
        if (tag == 18) {
         parse_orderid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orderid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ex_mark;
        break;
      }

      // optional bool ex_mark = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_ex_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ex_mark_)));
          set_has_ex_mark();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_ask_check_payment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_ask_check_payment)
  return false;
#undef DO_
}

void packetc2w_ask_check_payment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_ask_check_payment)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_check_payment];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string orderid = 2;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->orderid(), output);
  }

  // optional bool ex_mark = 3 [default = false];
  if (has_ex_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ex_mark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_ask_check_payment)
}

::google::protobuf::uint8* packetc2w_ask_check_payment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_ask_check_payment)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_check_payment];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string orderid = 2;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderid(), target);
  }

  // optional bool ex_mark = 3 [default = false];
  if (has_ex_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ex_mark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_ask_check_payment)
  return target;
}

int packetc2w_ask_check_payment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_check_payment];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string orderid = 2;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // optional bool ex_mark = 3 [default = false];
    if (has_ex_mark()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_ask_check_payment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_ask_check_payment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_ask_check_payment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_ask_check_payment::MergeFrom(const packetc2w_ask_check_payment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_ex_mark()) {
      set_ex_mark(from.ex_mark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_ask_check_payment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_ask_check_payment::CopyFrom(const packetc2w_ask_check_payment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_ask_check_payment::IsInitialized() const {

  return true;
}

void packetc2w_ask_check_payment::Swap(packetc2w_ask_check_payment* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(orderid_, other->orderid_);
    std::swap(ex_mark_, other->ex_mark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_ask_check_payment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_ask_check_payment_descriptor_;
  metadata.reflection = packetc2w_ask_check_payment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_ask_test_payment::kPacketIdFieldNumber;
const int packetc2w_ask_test_payment::kPayidFieldNumber;
const int packetc2w_ask_test_payment::kExMarkFieldNumber;
#endif  // !_MSC_VER

packetc2w_ask_test_payment::packetc2w_ask_test_payment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_ask_test_payment)
}

void packetc2w_ask_test_payment::InitAsDefaultInstance() {
}

packetc2w_ask_test_payment::packetc2w_ask_test_payment(const packetc2w_ask_test_payment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_ask_test_payment)
}

void packetc2w_ask_test_payment::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5007;
  payid_ = 0;
  ex_mark_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_ask_test_payment::~packetc2w_ask_test_payment() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_ask_test_payment)
  SharedDtor();
}

void packetc2w_ask_test_payment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_ask_test_payment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_ask_test_payment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_ask_test_payment_descriptor_;
}

const packetc2w_ask_test_payment& packetc2w_ask_test_payment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_ask_test_payment* packetc2w_ask_test_payment::default_instance_ = NULL;

packetc2w_ask_test_payment* packetc2w_ask_test_payment::New() const {
  return new packetc2w_ask_test_payment;
}

void packetc2w_ask_test_payment::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetc2w_ask_test_payment*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(payid_, ex_mark_);
    packet_id_ = 5007;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_ask_test_payment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_ask_test_payment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_test_payment];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_payid;
        break;
      }

      // optional int32 payid = 2;
      case 2: {
        if (tag == 16) {
         parse_payid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payid_)));
          set_has_payid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ex_mark;
        break;
      }

      // optional bool ex_mark = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_ex_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ex_mark_)));
          set_has_ex_mark();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_ask_test_payment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_ask_test_payment)
  return false;
#undef DO_
}

void packetc2w_ask_test_payment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_ask_test_payment)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_test_payment];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 payid = 2;
  if (has_payid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->payid(), output);
  }

  // optional bool ex_mark = 3 [default = false];
  if (has_ex_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ex_mark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_ask_test_payment)
}

::google::protobuf::uint8* packetc2w_ask_test_payment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_ask_test_payment)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_test_payment];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 payid = 2;
  if (has_payid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->payid(), target);
  }

  // optional bool ex_mark = 3 [default = false];
  if (has_ex_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ex_mark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_ask_test_payment)
  return target;
}

int packetc2w_ask_test_payment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_ask_test_payment];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 payid = 2;
    if (has_payid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payid());
    }

    // optional bool ex_mark = 3 [default = false];
    if (has_ex_mark()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_ask_test_payment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_ask_test_payment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_ask_test_payment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_ask_test_payment::MergeFrom(const packetc2w_ask_test_payment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_payid()) {
      set_payid(from.payid());
    }
    if (from.has_ex_mark()) {
      set_ex_mark(from.ex_mark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_ask_test_payment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_ask_test_payment::CopyFrom(const packetc2w_ask_test_payment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_ask_test_payment::IsInitialized() const {

  return true;
}

void packetc2w_ask_test_payment::Swap(packetc2w_ask_test_payment* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(payid_, other->payid_);
    std::swap(ex_mark_, other->ex_mark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_ask_test_payment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_ask_test_payment_descriptor_;
  metadata.reflection = packetc2w_ask_test_payment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_ask_check_payment_result::kPacketIdFieldNumber;
const int packetw2c_ask_check_payment_result::kPayidFieldNumber;
const int packetw2c_ask_check_payment_result::kResultFieldNumber;
const int packetw2c_ask_check_payment_result::kLotteryRateFieldNumber;
#endif  // !_MSC_VER

packetw2c_ask_check_payment_result::packetw2c_ask_check_payment_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_ask_check_payment_result)
}

void packetw2c_ask_check_payment_result::InitAsDefaultInstance() {
}

packetw2c_ask_check_payment_result::packetw2c_ask_check_payment_result(const packetw2c_ask_check_payment_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_ask_check_payment_result)
}

void packetw2c_ask_check_payment_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7506;
  payid_ = 0;
  result_ = true;
  lottery_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_ask_check_payment_result::~packetw2c_ask_check_payment_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_ask_check_payment_result)
  SharedDtor();
}

void packetw2c_ask_check_payment_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_ask_check_payment_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_ask_check_payment_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_ask_check_payment_result_descriptor_;
}

const packetw2c_ask_check_payment_result& packetw2c_ask_check_payment_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_ask_check_payment_result* packetw2c_ask_check_payment_result::default_instance_ = NULL;

packetw2c_ask_check_payment_result* packetw2c_ask_check_payment_result::New() const {
  return new packetw2c_ask_check_payment_result;
}

void packetw2c_ask_check_payment_result::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    packet_id_ = 7506;
    payid_ = 0;
    result_ = true;
    lottery_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_ask_check_payment_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_ask_check_payment_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_payid;
        break;
      }

      // optional int32 payid = 2;
      case 2: {
        if (tag == 16) {
         parse_payid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payid_)));
          set_has_payid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional bool result = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lottery_rate;
        break;
      }

      // optional int32 lottery_rate = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_lottery_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lottery_rate_)));
          set_has_lottery_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_ask_check_payment_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_ask_check_payment_result)
  return false;
#undef DO_
}

void packetw2c_ask_check_payment_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_ask_check_payment_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 payid = 2;
  if (has_payid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->payid(), output);
  }

  // optional bool result = 3 [default = true];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }

  // optional int32 lottery_rate = 4 [default = 0];
  if (has_lottery_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lottery_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_ask_check_payment_result)
}

::google::protobuf::uint8* packetw2c_ask_check_payment_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_ask_check_payment_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 payid = 2;
  if (has_payid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->payid(), target);
  }

  // optional bool result = 3 [default = true];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }

  // optional int32 lottery_rate = 4 [default = 0];
  if (has_lottery_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lottery_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_ask_check_payment_result)
  return target;
}

int packetw2c_ask_check_payment_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 payid = 2;
    if (has_payid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payid());
    }

    // optional bool result = 3 [default = true];
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional int32 lottery_rate = 4 [default = 0];
    if (has_lottery_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lottery_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_ask_check_payment_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_ask_check_payment_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_ask_check_payment_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_ask_check_payment_result::MergeFrom(const packetw2c_ask_check_payment_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_payid()) {
      set_payid(from.payid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_lottery_rate()) {
      set_lottery_rate(from.lottery_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_ask_check_payment_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_ask_check_payment_result::CopyFrom(const packetw2c_ask_check_payment_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_ask_check_payment_result::IsInitialized() const {

  return true;
}

void packetw2c_ask_check_payment_result::Swap(packetw2c_ask_check_payment_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(payid_, other->payid_);
    std::swap(result_, other->result_);
    std::swap(lottery_rate_, other->lottery_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_ask_check_payment_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_ask_check_payment_result_descriptor_;
  metadata.reflection = packetw2c_ask_check_payment_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_ask_check_payment_result2::kPacketIdFieldNumber;
const int packetw2c_ask_check_payment_result2::kPayTypeFieldNumber;
const int packetw2c_ask_check_payment_result2::kPayValueFieldNumber;
const int packetw2c_ask_check_payment_result2::kVipExpFieldNumber;
#endif  // !_MSC_VER

packetw2c_ask_check_payment_result2::packetw2c_ask_check_payment_result2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_ask_check_payment_result2)
}

void packetw2c_ask_check_payment_result2::InitAsDefaultInstance() {
}

packetw2c_ask_check_payment_result2::packetw2c_ask_check_payment_result2(const packetw2c_ask_check_payment_result2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_ask_check_payment_result2)
}

void packetw2c_ask_check_payment_result2::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7569;
  pay_type_ = 0;
  pay_value_ = 0;
  vip_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_ask_check_payment_result2::~packetw2c_ask_check_payment_result2() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_ask_check_payment_result2)
  SharedDtor();
}

void packetw2c_ask_check_payment_result2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_ask_check_payment_result2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_ask_check_payment_result2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_ask_check_payment_result2_descriptor_;
}

const packetw2c_ask_check_payment_result2& packetw2c_ask_check_payment_result2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_ask_check_payment_result2* packetw2c_ask_check_payment_result2::default_instance_ = NULL;

packetw2c_ask_check_payment_result2* packetw2c_ask_check_payment_result2::New() const {
  return new packetw2c_ask_check_payment_result2;
}

void packetw2c_ask_check_payment_result2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_ask_check_payment_result2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(pay_type_, vip_exp_);
    packet_id_ = 7569;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_ask_check_payment_result2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_ask_check_payment_result2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result2];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pay_type;
        break;
      }

      // optional int32 pay_type = 2;
      case 2: {
        if (tag == 16) {
         parse_pay_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pay_type_)));
          set_has_pay_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pay_value;
        break;
      }

      // optional int32 pay_value = 3;
      case 3: {
        if (tag == 24) {
         parse_pay_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pay_value_)));
          set_has_pay_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vip_exp;
        break;
      }

      // optional int32 vip_exp = 4;
      case 4: {
        if (tag == 32) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_ask_check_payment_result2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_ask_check_payment_result2)
  return false;
#undef DO_
}

void packetw2c_ask_check_payment_result2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_ask_check_payment_result2)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result2];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 pay_type = 2;
  if (has_pay_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pay_type(), output);
  }

  // optional int32 pay_value = 3;
  if (has_pay_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pay_value(), output);
  }

  // optional int32 vip_exp = 4;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_ask_check_payment_result2)
}

::google::protobuf::uint8* packetw2c_ask_check_payment_result2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_ask_check_payment_result2)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result2];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 pay_type = 2;
  if (has_pay_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pay_type(), target);
  }

  // optional int32 pay_value = 3;
  if (has_pay_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pay_value(), target);
  }

  // optional int32 vip_exp = 4;
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_ask_check_payment_result2)
  return target;
}

int packetw2c_ask_check_payment_result2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_ask_check_payment_result2];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 pay_type = 2;
    if (has_pay_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pay_type());
    }

    // optional int32 pay_value = 3;
    if (has_pay_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pay_value());
    }

    // optional int32 vip_exp = 4;
    if (has_vip_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_ask_check_payment_result2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_ask_check_payment_result2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_ask_check_payment_result2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_ask_check_payment_result2::MergeFrom(const packetw2c_ask_check_payment_result2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_pay_type()) {
      set_pay_type(from.pay_type());
    }
    if (from.has_pay_value()) {
      set_pay_value(from.pay_value());
    }
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_ask_check_payment_result2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_ask_check_payment_result2::CopyFrom(const packetw2c_ask_check_payment_result2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_ask_check_payment_result2::IsInitialized() const {

  return true;
}

void packetw2c_ask_check_payment_result2::Swap(packetw2c_ask_check_payment_result2* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(pay_type_, other->pay_type_);
    std::swap(pay_value_, other->pay_value_);
    std::swap(vip_exp_, other->vip_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_ask_check_payment_result2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_ask_check_payment_result2_descriptor_;
  metadata.reflection = packetw2c_ask_check_payment_result2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_leave_game::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_leave_game::packetc2w_leave_game()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_leave_game)
}

void packetc2w_leave_game::InitAsDefaultInstance() {
}

packetc2w_leave_game::packetc2w_leave_game(const packetc2w_leave_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_leave_game)
}

void packetc2w_leave_game::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5008;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_leave_game::~packetc2w_leave_game() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_leave_game)
  SharedDtor();
}

void packetc2w_leave_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_leave_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_leave_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_leave_game_descriptor_;
}

const packetc2w_leave_game& packetc2w_leave_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_leave_game* packetc2w_leave_game::default_instance_ = NULL;

packetc2w_leave_game* packetc2w_leave_game::New() const {
  return new packetc2w_leave_game;
}

void packetc2w_leave_game::Clear() {
  packet_id_ = 5008;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_leave_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_leave_game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_leave_game];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_leave_game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_leave_game)
  return false;
#undef DO_
}

void packetc2w_leave_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_leave_game)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_leave_game];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_leave_game)
}

::google::protobuf::uint8* packetc2w_leave_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_leave_game)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_leave_game];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_leave_game)
  return target;
}

int packetc2w_leave_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_leave_game];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_leave_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_leave_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_leave_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_leave_game::MergeFrom(const packetc2w_leave_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_leave_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_leave_game::CopyFrom(const packetc2w_leave_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_leave_game::IsInitialized() const {

  return true;
}

void packetc2w_leave_game::Swap(packetc2w_leave_game* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_leave_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_leave_game_descriptor_;
  metadata.reflection = packetc2w_leave_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_leave_game_result::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetw2c_leave_game_result::packetw2c_leave_game_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_leave_game_result)
}

void packetw2c_leave_game_result::InitAsDefaultInstance() {
}

packetw2c_leave_game_result::packetw2c_leave_game_result(const packetw2c_leave_game_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_leave_game_result)
}

void packetw2c_leave_game_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7507;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_leave_game_result::~packetw2c_leave_game_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_leave_game_result)
  SharedDtor();
}

void packetw2c_leave_game_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_leave_game_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_leave_game_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_leave_game_result_descriptor_;
}

const packetw2c_leave_game_result& packetw2c_leave_game_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_leave_game_result* packetw2c_leave_game_result::default_instance_ = NULL;

packetw2c_leave_game_result* packetw2c_leave_game_result::New() const {
  return new packetw2c_leave_game_result;
}

void packetw2c_leave_game_result::Clear() {
  packet_id_ = 7507;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_leave_game_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_leave_game_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_leave_game_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_leave_game_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_leave_game_result)
  return false;
#undef DO_
}

void packetw2c_leave_game_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_leave_game_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_leave_game_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_leave_game_result)
}

::google::protobuf::uint8* packetw2c_leave_game_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_leave_game_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_leave_game_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_leave_game_result)
  return target;
}

int packetw2c_leave_game_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_leave_game_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_leave_game_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_leave_game_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_leave_game_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_leave_game_result::MergeFrom(const packetw2c_leave_game_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_leave_game_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_leave_game_result::CopyFrom(const packetw2c_leave_game_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_leave_game_result::IsInitialized() const {

  return true;
}

void packetw2c_leave_game_result::Swap(packetw2c_leave_game_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_leave_game_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_leave_game_result_descriptor_;
  metadata.reflection = packetw2c_leave_game_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_player_kick::kPacketIdFieldNumber;
const int packetw2c_player_kick::kKickTypeFieldNumber;
#endif  // !_MSC_VER

packetw2c_player_kick::packetw2c_player_kick()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_player_kick)
}

void packetw2c_player_kick::InitAsDefaultInstance() {
}

packetw2c_player_kick::packetw2c_player_kick(const packetw2c_player_kick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_player_kick)
}

void packetw2c_player_kick::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7541;
  kick_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_player_kick::~packetw2c_player_kick() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_player_kick)
  SharedDtor();
}

void packetw2c_player_kick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_player_kick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_player_kick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_player_kick_descriptor_;
}

const packetw2c_player_kick& packetw2c_player_kick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_player_kick* packetw2c_player_kick::default_instance_ = NULL;

packetw2c_player_kick* packetw2c_player_kick::New() const {
  return new packetw2c_player_kick;
}

void packetw2c_player_kick::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7541;
    kick_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_player_kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_player_kick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_kick];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kick_type;
        break;
      }

      // optional int32 kick_type = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_kick_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kick_type_)));
          set_has_kick_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_player_kick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_player_kick)
  return false;
#undef DO_
}

void packetw2c_player_kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_player_kick)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_kick];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 kick_type = 2 [default = 0];
  if (has_kick_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kick_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_player_kick)
}

::google::protobuf::uint8* packetw2c_player_kick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_player_kick)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_kick];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 kick_type = 2 [default = 0];
  if (has_kick_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kick_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_player_kick)
  return target;
}

int packetw2c_player_kick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_player_kick];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 kick_type = 2 [default = 0];
    if (has_kick_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kick_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_player_kick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_player_kick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_player_kick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_player_kick::MergeFrom(const packetw2c_player_kick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_kick_type()) {
      set_kick_type(from.kick_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_player_kick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_player_kick::CopyFrom(const packetw2c_player_kick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_player_kick::IsInitialized() const {

  return true;
}

void packetw2c_player_kick::Swap(packetw2c_player_kick* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(kick_type_, other->kick_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_player_kick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_player_kick_descriptor_;
  metadata.reflection = packetw2c_player_kick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_get_gamelist::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_get_gamelist::packetc2w_get_gamelist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_get_gamelist)
}

void packetc2w_get_gamelist::InitAsDefaultInstance() {
}

packetc2w_get_gamelist::packetc2w_get_gamelist(const packetc2w_get_gamelist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_get_gamelist)
}

void packetc2w_get_gamelist::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5048;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_get_gamelist::~packetc2w_get_gamelist() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_get_gamelist)
  SharedDtor();
}

void packetc2w_get_gamelist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_get_gamelist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_get_gamelist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_get_gamelist_descriptor_;
}

const packetc2w_get_gamelist& packetc2w_get_gamelist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_get_gamelist* packetc2w_get_gamelist::default_instance_ = NULL;

packetc2w_get_gamelist* packetc2w_get_gamelist::New() const {
  return new packetc2w_get_gamelist;
}

void packetc2w_get_gamelist::Clear() {
  packet_id_ = 5048;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_get_gamelist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_get_gamelist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_gamelist];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_get_gamelist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_get_gamelist)
  return false;
#undef DO_
}

void packetc2w_get_gamelist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_get_gamelist)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_gamelist];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_get_gamelist)
}

::google::protobuf::uint8* packetc2w_get_gamelist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_get_gamelist)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_gamelist];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_get_gamelist)
  return target;
}

int packetc2w_get_gamelist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_get_gamelist];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_get_gamelist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_get_gamelist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_get_gamelist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_get_gamelist::MergeFrom(const packetc2w_get_gamelist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_get_gamelist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_get_gamelist::CopyFrom(const packetc2w_get_gamelist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_get_gamelist::IsInitialized() const {

  return true;
}

void packetc2w_get_gamelist::Swap(packetc2w_get_gamelist* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_get_gamelist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_get_gamelist_descriptor_;
  metadata.reflection = packetc2w_get_gamelist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_get_gamelist_result::kPacketIdFieldNumber;
const int packetw2c_get_gamelist_result::kGameListFieldNumber;
#endif  // !_MSC_VER

packetw2c_get_gamelist_result::packetw2c_get_gamelist_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_get_gamelist_result)
}

void packetw2c_get_gamelist_result::InitAsDefaultInstance() {
}

packetw2c_get_gamelist_result::packetw2c_get_gamelist_result(const packetw2c_get_gamelist_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_get_gamelist_result)
}

void packetw2c_get_gamelist_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7552;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_get_gamelist_result::~packetw2c_get_gamelist_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_get_gamelist_result)
  SharedDtor();
}

void packetw2c_get_gamelist_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_get_gamelist_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_get_gamelist_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_get_gamelist_result_descriptor_;
}

const packetw2c_get_gamelist_result& packetw2c_get_gamelist_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_get_gamelist_result* packetw2c_get_gamelist_result::default_instance_ = NULL;

packetw2c_get_gamelist_result* packetw2c_get_gamelist_result::New() const {
  return new packetw2c_get_gamelist_result;
}

void packetw2c_get_gamelist_result::Clear() {
  packet_id_ = 7552;
  game_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_get_gamelist_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_get_gamelist_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_gamelist_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_game_list;
        break;
      }

      // repeated .client2world_protocols.msg_game_info game_list = 2;
      case 2: {
        if (tag == 18) {
         parse_game_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_game_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_get_gamelist_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_get_gamelist_result)
  return false;
#undef DO_
}

void packetw2c_get_gamelist_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_get_gamelist_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_gamelist_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.msg_game_info game_list = 2;
  for (int i = 0; i < this->game_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->game_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_get_gamelist_result)
}

::google::protobuf::uint8* packetw2c_get_gamelist_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_get_gamelist_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_gamelist_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.msg_game_info game_list = 2;
  for (int i = 0; i < this->game_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->game_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_get_gamelist_result)
  return target;
}

int packetw2c_get_gamelist_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_get_gamelist_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  // repeated .client2world_protocols.msg_game_info game_list = 2;
  total_size += 1 * this->game_list_size();
  for (int i = 0; i < this->game_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->game_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_get_gamelist_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_get_gamelist_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_get_gamelist_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_get_gamelist_result::MergeFrom(const packetw2c_get_gamelist_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  game_list_.MergeFrom(from.game_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_get_gamelist_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_get_gamelist_result::CopyFrom(const packetw2c_get_gamelist_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_get_gamelist_result::IsInitialized() const {

  return true;
}

void packetw2c_get_gamelist_result::Swap(packetw2c_get_gamelist_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    game_list_.Swap(&other->game_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_get_gamelist_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_get_gamelist_result_descriptor_;
  metadata.reflection = packetw2c_get_gamelist_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_first_login::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_first_login::packetc2w_first_login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_first_login)
}

void packetc2w_first_login::InitAsDefaultInstance() {
}

packetc2w_first_login::packetc2w_first_login(const packetc2w_first_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_first_login)
}

void packetc2w_first_login::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5062;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_first_login::~packetc2w_first_login() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_first_login)
  SharedDtor();
}

void packetc2w_first_login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_first_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_first_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_first_login_descriptor_;
}

const packetc2w_first_login& packetc2w_first_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetc2w_first_login* packetc2w_first_login::default_instance_ = NULL;

packetc2w_first_login* packetc2w_first_login::New() const {
  return new packetc2w_first_login;
}

void packetc2w_first_login::Clear() {
  packet_id_ = 5062;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_first_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_first_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_first_login];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_first_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_first_login)
  return false;
#undef DO_
}

void packetc2w_first_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_first_login)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_first_login];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_first_login)
}

::google::protobuf::uint8* packetc2w_first_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_first_login)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_first_login];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_first_login)
  return target;
}

int packetc2w_first_login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_first_login];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_first_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_first_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_first_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_first_login::MergeFrom(const packetc2w_first_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_first_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_first_login::CopyFrom(const packetc2w_first_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_first_login::IsInitialized() const {

  return true;
}

void packetc2w_first_login::Swap(packetc2w_first_login* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_first_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_first_login_descriptor_;
  metadata.reflection = packetc2w_first_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_first_login_result::kPacketIdFieldNumber;
const int packetw2c_first_login_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_first_login_result::packetw2c_first_login_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_first_login_result)
}

void packetw2c_first_login_result::InitAsDefaultInstance() {
}

packetw2c_first_login_result::packetw2c_first_login_result(const packetw2c_first_login_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_first_login_result)
}

void packetw2c_first_login_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7566;
  result_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_first_login_result::~packetw2c_first_login_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_first_login_result)
  SharedDtor();
}

void packetw2c_first_login_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_first_login_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_first_login_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_first_login_result_descriptor_;
}

const packetw2c_first_login_result& packetw2c_first_login_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fprotocol_2eproto();
  return *default_instance_;
}

packetw2c_first_login_result* packetw2c_first_login_result::default_instance_ = NULL;

packetw2c_first_login_result* packetw2c_first_login_result::New() const {
  return new packetw2c_first_login_result;
}

void packetw2c_first_login_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7566;
    result_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_first_login_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_first_login_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_first_login_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_type_def::e_msg_result_def_IsValid(value)) {
            set_result(static_cast< ::msg_type_def::e_msg_result_def >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_first_login_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_first_login_result)
  return false;
#undef DO_
}

void packetw2c_first_login_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_first_login_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_first_login_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_first_login_result)
}

::google::protobuf::uint8* packetw2c_first_login_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_first_login_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_first_login_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_first_login_result)
  return target;
}

int packetw2c_first_login_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_first_login_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional .msg_type_def.e_msg_result_def result = 2 [default = e_rmt_fail];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_first_login_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_first_login_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_first_login_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_first_login_result::MergeFrom(const packetw2c_first_login_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_first_login_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_first_login_result::CopyFrom(const packetw2c_first_login_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_first_login_result::IsInitialized() const {

  return true;
}

void packetw2c_first_login_result::Swap(packetw2c_first_login_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_first_login_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_first_login_result_descriptor_;
  metadata.reflection = packetw2c_first_login_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
