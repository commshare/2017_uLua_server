// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2world_player_property.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client2world_player_property.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client2world_protocols {

namespace {

const ::google::protobuf::Descriptor* packetc2w_update_playerhead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_update_playerhead_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_update_playerhead_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_update_playerhead_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_update_nickname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_update_nickname_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_update_nickname_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_update_nickname_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_update_sex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_update_sex_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_update_sex_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_update_sex_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_update_signature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_update_signature_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_update_signature_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_update_signature_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_change_photo_frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_change_photo_frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_change_photo_frame_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_change_photo_frame_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_game_stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_game_stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_fishlord_stat_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_fishlord_stat_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_dice_stat_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_dice_stat_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_crocodile_stat_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_crocodile_stat_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_self_record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_self_record_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_self_record_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_self_record_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_finish_one_new_guild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_finish_one_new_guild_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_finish_one_new_guild_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_finish_one_new_guild_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_send_gift_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_send_gift_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendGiftLogInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendGiftLogInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_send_gift_log_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_send_gift_log_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_req_safebox_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_req_safebox_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* SafeBoxLogInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SafeBoxLogInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_req_safebox_log_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_req_safebox_log_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetc2w_inform_playerhead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetc2w_inform_playerhead_reflection_ = NULL;
const ::google::protobuf::Descriptor* packetw2c_inform_playerhead_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packetw2c_inform_playerhead_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto() {
  protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client2world_player_property.proto");
  GOOGLE_CHECK(file != NULL);
  packetc2w_update_playerhead_descriptor_ = file->message_type(0);
  static const int packetc2w_update_playerhead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_playerhead, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_playerhead, headstr_),
  };
  packetc2w_update_playerhead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_update_playerhead_descriptor_,
      packetc2w_update_playerhead::default_instance_,
      packetc2w_update_playerhead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_playerhead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_playerhead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_update_playerhead));
  packetw2c_update_playerhead_result_descriptor_ = file->message_type(1);
  static const int packetw2c_update_playerhead_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_playerhead_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_playerhead_result, headstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_playerhead_result, result_),
  };
  packetw2c_update_playerhead_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_update_playerhead_result_descriptor_,
      packetw2c_update_playerhead_result::default_instance_,
      packetw2c_update_playerhead_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_playerhead_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_playerhead_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_update_playerhead_result));
  packetc2w_update_nickname_descriptor_ = file->message_type(2);
  static const int packetc2w_update_nickname_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_nickname, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_nickname, nickname_),
  };
  packetc2w_update_nickname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_update_nickname_descriptor_,
      packetc2w_update_nickname::default_instance_,
      packetc2w_update_nickname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_nickname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_nickname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_update_nickname));
  packetw2c_update_nickname_result_descriptor_ = file->message_type(3);
  static const int packetw2c_update_nickname_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_nickname_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_nickname_result, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_nickname_result, result_),
  };
  packetw2c_update_nickname_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_update_nickname_result_descriptor_,
      packetw2c_update_nickname_result::default_instance_,
      packetw2c_update_nickname_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_nickname_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_nickname_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_update_nickname_result));
  packetc2w_update_sex_descriptor_ = file->message_type(4);
  static const int packetc2w_update_sex_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_sex, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_sex, sex_),
  };
  packetc2w_update_sex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_update_sex_descriptor_,
      packetc2w_update_sex::default_instance_,
      packetc2w_update_sex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_sex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_sex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_update_sex));
  packetw2c_update_sex_result_descriptor_ = file->message_type(5);
  static const int packetw2c_update_sex_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_sex_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_sex_result, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_sex_result, result_),
  };
  packetw2c_update_sex_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_update_sex_result_descriptor_,
      packetw2c_update_sex_result::default_instance_,
      packetw2c_update_sex_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_sex_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_sex_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_update_sex_result));
  packetc2w_update_signature_descriptor_ = file->message_type(6);
  static const int packetc2w_update_signature_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_signature, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_signature, signature_),
  };
  packetc2w_update_signature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_update_signature_descriptor_,
      packetc2w_update_signature::default_instance_,
      packetc2w_update_signature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_signature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_update_signature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_update_signature));
  packetw2c_update_signature_result_descriptor_ = file->message_type(7);
  static const int packetw2c_update_signature_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_signature_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_signature_result, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_signature_result, result_),
  };
  packetw2c_update_signature_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_update_signature_result_descriptor_,
      packetw2c_update_signature_result::default_instance_,
      packetw2c_update_signature_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_signature_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_update_signature_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_update_signature_result));
  packetc2w_change_photo_frame_descriptor_ = file->message_type(8);
  static const int packetc2w_change_photo_frame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_change_photo_frame, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_change_photo_frame, photoframeid_),
  };
  packetc2w_change_photo_frame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_change_photo_frame_descriptor_,
      packetc2w_change_photo_frame::default_instance_,
      packetc2w_change_photo_frame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_change_photo_frame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_change_photo_frame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_change_photo_frame));
  packetw2c_change_photo_frame_result_descriptor_ = file->message_type(9);
  static const int packetw2c_change_photo_frame_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_photo_frame_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_photo_frame_result, photoframeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_photo_frame_result, result_),
  };
  packetw2c_change_photo_frame_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_change_photo_frame_result_descriptor_,
      packetw2c_change_photo_frame_result::default_instance_,
      packetw2c_change_photo_frame_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_photo_frame_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_change_photo_frame_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_change_photo_frame_result));
  packetc2w_req_game_stat_descriptor_ = file->message_type(10);
  static const int packetc2w_req_game_stat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_game_stat, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_game_stat, gameid_),
  };
  packetc2w_req_game_stat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_game_stat_descriptor_,
      packetc2w_req_game_stat::default_instance_,
      packetc2w_req_game_stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_game_stat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_game_stat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_game_stat));
  packetw2c_fishlord_stat_result_descriptor_ = file->message_type(11);
  static const int packetw2c_fishlord_stat_result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fishlord_stat_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fishlord_stat_result, maxcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fishlord_stat_result, maxticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fishlord_stat_result, hitblackdagoncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fishlord_stat_result, hitbluedagoncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fishlord_stat_result, hitgolddagonbombcount_),
  };
  packetw2c_fishlord_stat_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_fishlord_stat_result_descriptor_,
      packetw2c_fishlord_stat_result::default_instance_,
      packetw2c_fishlord_stat_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fishlord_stat_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_fishlord_stat_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_fishlord_stat_result));
  packetw2c_dice_stat_result_descriptor_ = file->message_type(12);
  static const int packetw2c_dice_stat_result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_dice_stat_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_dice_stat_result, maxcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_dice_stat_result, maxticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_dice_stat_result, hitleopardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_dice_stat_result, maxsuccessioncount_),
  };
  packetw2c_dice_stat_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_dice_stat_result_descriptor_,
      packetw2c_dice_stat_result::default_instance_,
      packetw2c_dice_stat_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_dice_stat_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_dice_stat_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_dice_stat_result));
  packetw2c_crocodile_stat_result_descriptor_ = file->message_type(13);
  static const int packetw2c_crocodile_stat_result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_crocodile_stat_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_crocodile_stat_result, maxcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_crocodile_stat_result, maxticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_crocodile_stat_result, hitwinningscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_crocodile_stat_result, hitspotlightcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_crocodile_stat_result, hiteveryonehasawardcount_),
  };
  packetw2c_crocodile_stat_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_crocodile_stat_result_descriptor_,
      packetw2c_crocodile_stat_result::default_instance_,
      packetw2c_crocodile_stat_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_crocodile_stat_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_crocodile_stat_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_crocodile_stat_result));
  packetc2w_req_self_record_descriptor_ = file->message_type(14);
  static const int packetc2w_req_self_record_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_self_record, packet_id_),
  };
  packetc2w_req_self_record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_self_record_descriptor_,
      packetc2w_req_self_record::default_instance_,
      packetc2w_req_self_record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_self_record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_self_record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_self_record));
  packetw2c_req_self_record_result_descriptor_ = file->message_type(15);
  static const int packetw2c_req_self_record_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_self_record_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_self_record_result, maxcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_self_record_result, maxticket_),
  };
  packetw2c_req_self_record_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_self_record_result_descriptor_,
      packetw2c_req_self_record_result::default_instance_,
      packetw2c_req_self_record_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_self_record_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_self_record_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_self_record_result));
  packetc2w_finish_one_new_guild_descriptor_ = file->message_type(16);
  static const int packetc2w_finish_one_new_guild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_finish_one_new_guild, packet_id_),
  };
  packetc2w_finish_one_new_guild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_finish_one_new_guild_descriptor_,
      packetc2w_finish_one_new_guild::default_instance_,
      packetc2w_finish_one_new_guild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_finish_one_new_guild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_finish_one_new_guild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_finish_one_new_guild));
  packetw2c_finish_one_new_guild_result_descriptor_ = file->message_type(17);
  static const int packetw2c_finish_one_new_guild_result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_finish_one_new_guild_result, packet_id_),
  };
  packetw2c_finish_one_new_guild_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_finish_one_new_guild_result_descriptor_,
      packetw2c_finish_one_new_guild_result::default_instance_,
      packetw2c_finish_one_new_guild_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_finish_one_new_guild_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_finish_one_new_guild_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_finish_one_new_guild_result));
  packetc2w_req_send_gift_log_descriptor_ = file->message_type(18);
  static const int packetc2w_req_send_gift_log_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_send_gift_log, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_send_gift_log, lasttime_),
  };
  packetc2w_req_send_gift_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_send_gift_log_descriptor_,
      packetc2w_req_send_gift_log::default_instance_,
      packetc2w_req_send_gift_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_send_gift_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_send_gift_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_send_gift_log));
  SendGiftLogInfo_descriptor_ = file->message_type(19);
  static const int SendGiftLogInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftLogInfo, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftLogInfo, firendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftLogInfo, friendnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftLogInfo, giftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftLogInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftLogInfo, sendgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftLogInfo, mailid_),
  };
  SendGiftLogInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendGiftLogInfo_descriptor_,
      SendGiftLogInfo::default_instance_,
      SendGiftLogInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftLogInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftLogInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendGiftLogInfo));
  packetw2c_req_send_gift_log_result_descriptor_ = file->message_type(20);
  static const int packetw2c_req_send_gift_log_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_send_gift_log_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_send_gift_log_result, loglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_send_gift_log_result, lasttime_),
  };
  packetw2c_req_send_gift_log_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_send_gift_log_result_descriptor_,
      packetw2c_req_send_gift_log_result::default_instance_,
      packetw2c_req_send_gift_log_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_send_gift_log_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_send_gift_log_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_send_gift_log_result));
  packetc2w_req_safebox_log_descriptor_ = file->message_type(21);
  static const int packetc2w_req_safebox_log_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_safebox_log, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_safebox_log, lasttime_),
  };
  packetc2w_req_safebox_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_req_safebox_log_descriptor_,
      packetc2w_req_safebox_log::default_instance_,
      packetc2w_req_safebox_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_safebox_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_req_safebox_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_req_safebox_log));
  SafeBoxLogInfo_descriptor_ = file->message_type(22);
  static const int SafeBoxLogInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeBoxLogInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeBoxLogInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeBoxLogInfo, player_gold_),
  };
  SafeBoxLogInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SafeBoxLogInfo_descriptor_,
      SafeBoxLogInfo::default_instance_,
      SafeBoxLogInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeBoxLogInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeBoxLogInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SafeBoxLogInfo));
  packetw2c_req_safebox_log_result_descriptor_ = file->message_type(23);
  static const int packetw2c_req_safebox_log_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_safebox_log_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_safebox_log_result, loglist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_safebox_log_result, lasttime_),
  };
  packetw2c_req_safebox_log_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_req_safebox_log_result_descriptor_,
      packetw2c_req_safebox_log_result::default_instance_,
      packetw2c_req_safebox_log_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_safebox_log_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_req_safebox_log_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_req_safebox_log_result));
  packetc2w_inform_playerhead_descriptor_ = file->message_type(24);
  static const int packetc2w_inform_playerhead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_inform_playerhead, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_inform_playerhead, informdstplayerid_),
  };
  packetc2w_inform_playerhead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetc2w_inform_playerhead_descriptor_,
      packetc2w_inform_playerhead::default_instance_,
      packetc2w_inform_playerhead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_inform_playerhead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetc2w_inform_playerhead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetc2w_inform_playerhead));
  packetw2c_inform_playerhead_result_descriptor_ = file->message_type(25);
  static const int packetw2c_inform_playerhead_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_inform_playerhead_result, packet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_inform_playerhead_result, result_),
  };
  packetw2c_inform_playerhead_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packetw2c_inform_playerhead_result_descriptor_,
      packetw2c_inform_playerhead_result::default_instance_,
      packetw2c_inform_playerhead_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_inform_playerhead_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packetw2c_inform_playerhead_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packetw2c_inform_playerhead_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client2world_5fplayer_5fproperty_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_update_playerhead_descriptor_, &packetc2w_update_playerhead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_update_playerhead_result_descriptor_, &packetw2c_update_playerhead_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_update_nickname_descriptor_, &packetc2w_update_nickname::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_update_nickname_result_descriptor_, &packetw2c_update_nickname_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_update_sex_descriptor_, &packetc2w_update_sex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_update_sex_result_descriptor_, &packetw2c_update_sex_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_update_signature_descriptor_, &packetc2w_update_signature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_update_signature_result_descriptor_, &packetw2c_update_signature_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_change_photo_frame_descriptor_, &packetc2w_change_photo_frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_change_photo_frame_result_descriptor_, &packetw2c_change_photo_frame_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_game_stat_descriptor_, &packetc2w_req_game_stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_fishlord_stat_result_descriptor_, &packetw2c_fishlord_stat_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_dice_stat_result_descriptor_, &packetw2c_dice_stat_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_crocodile_stat_result_descriptor_, &packetw2c_crocodile_stat_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_self_record_descriptor_, &packetc2w_req_self_record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_self_record_result_descriptor_, &packetw2c_req_self_record_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_finish_one_new_guild_descriptor_, &packetc2w_finish_one_new_guild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_finish_one_new_guild_result_descriptor_, &packetw2c_finish_one_new_guild_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_send_gift_log_descriptor_, &packetc2w_req_send_gift_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendGiftLogInfo_descriptor_, &SendGiftLogInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_send_gift_log_result_descriptor_, &packetw2c_req_send_gift_log_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_req_safebox_log_descriptor_, &packetc2w_req_safebox_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SafeBoxLogInfo_descriptor_, &SafeBoxLogInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_req_safebox_log_result_descriptor_, &packetw2c_req_safebox_log_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetc2w_inform_playerhead_descriptor_, &packetc2w_inform_playerhead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packetw2c_inform_playerhead_result_descriptor_, &packetw2c_inform_playerhead_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto() {
  delete packetc2w_update_playerhead::default_instance_;
  delete packetc2w_update_playerhead_reflection_;
  delete packetw2c_update_playerhead_result::default_instance_;
  delete packetw2c_update_playerhead_result_reflection_;
  delete packetc2w_update_nickname::default_instance_;
  delete packetc2w_update_nickname_reflection_;
  delete packetw2c_update_nickname_result::default_instance_;
  delete packetw2c_update_nickname_result_reflection_;
  delete packetc2w_update_sex::default_instance_;
  delete packetc2w_update_sex_reflection_;
  delete packetw2c_update_sex_result::default_instance_;
  delete packetw2c_update_sex_result_reflection_;
  delete packetc2w_update_signature::default_instance_;
  delete packetc2w_update_signature_reflection_;
  delete packetw2c_update_signature_result::default_instance_;
  delete packetw2c_update_signature_result_reflection_;
  delete packetc2w_change_photo_frame::default_instance_;
  delete packetc2w_change_photo_frame_reflection_;
  delete packetw2c_change_photo_frame_result::default_instance_;
  delete packetw2c_change_photo_frame_result_reflection_;
  delete packetc2w_req_game_stat::default_instance_;
  delete packetc2w_req_game_stat_reflection_;
  delete packetw2c_fishlord_stat_result::default_instance_;
  delete packetw2c_fishlord_stat_result_reflection_;
  delete packetw2c_dice_stat_result::default_instance_;
  delete packetw2c_dice_stat_result_reflection_;
  delete packetw2c_crocodile_stat_result::default_instance_;
  delete packetw2c_crocodile_stat_result_reflection_;
  delete packetc2w_req_self_record::default_instance_;
  delete packetc2w_req_self_record_reflection_;
  delete packetw2c_req_self_record_result::default_instance_;
  delete packetw2c_req_self_record_result_reflection_;
  delete packetc2w_finish_one_new_guild::default_instance_;
  delete packetc2w_finish_one_new_guild_reflection_;
  delete packetw2c_finish_one_new_guild_result::default_instance_;
  delete packetw2c_finish_one_new_guild_result_reflection_;
  delete packetc2w_req_send_gift_log::default_instance_;
  delete packetc2w_req_send_gift_log_reflection_;
  delete SendGiftLogInfo::default_instance_;
  delete SendGiftLogInfo_reflection_;
  delete packetw2c_req_send_gift_log_result::default_instance_;
  delete packetw2c_req_send_gift_log_result_reflection_;
  delete packetc2w_req_safebox_log::default_instance_;
  delete packetc2w_req_safebox_log_reflection_;
  delete SafeBoxLogInfo::default_instance_;
  delete SafeBoxLogInfo_reflection_;
  delete packetw2c_req_safebox_log_result::default_instance_;
  delete packetw2c_req_safebox_log_result_reflection_;
  delete packetc2w_inform_playerhead::default_instance_;
  delete packetc2w_inform_playerhead_reflection_;
  delete packetw2c_inform_playerhead_result::default_instance_;
  delete packetw2c_inform_playerhead_result_reflection_;
}

void protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::client2world_protocols::protobuf_AddDesc_client2world_5fmsg_5ftype_2eproto();
  ::msg_type_def::protobuf_AddDesc_msg_5ftype_5fdef_2eproto();
  ::msg_info_def::protobuf_AddDesc_msg_5finfo_5fdef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"client2world_player_property.proto\022\026cl"
    "ient2world_protocols\032\033client2world_msg_t"
    "ype.proto\032\022msg_type_def.proto\032\022msg_info_"
    "def.proto\"\211\001\n\033packetc2w_update_playerhea"
    "d\022Y\n\tpacket_id\030\001 \001(\0162).client2world_prot"
    "ocols.e_server_msg_type:\033e_mst_c2w_updat"
    "e_playerhead\022\017\n\007headstr\030\002 \001(\t\"\247\001\n\"packet"
    "w2c_update_playerhead_result\022`\n\tpacket_i"
    "d\030\001 \001(\0162).client2world_protocols.e_serve"
    "r_msg_type:\"e_mst_w2c_update_playerhead_"
    "result\022\017\n\007headstr\030\002 \001(\t\022\016\n\006result\030\003 \001(\005\""
    "\206\001\n\031packetc2w_update_nickname\022W\n\tpacket_"
    "id\030\001 \001(\0162).client2world_protocols.e_serv"
    "er_msg_type:\031e_mst_c2w_update_nickname\022\020"
    "\n\010nickName\030\002 \001(\t\"\244\001\n packetw2c_update_ni"
    "ckname_result\022^\n\tpacket_id\030\001 \001(\0162).clien"
    "t2world_protocols.e_server_msg_type: e_m"
    "st_w2c_update_nickname_result\022\020\n\010nickNam"
    "e\030\002 \001(\t\022\016\n\006result\030\003 \001(\005\"w\n\024packetc2w_upd"
    "ate_sex\022R\n\tpacket_id\030\001 \001(\0162).client2worl"
    "d_protocols.e_server_msg_type:\024e_mst_c2w"
    "_update_sex\022\013\n\003sex\030\002 \001(\005\"\225\001\n\033packetw2c_u"
    "pdate_sex_result\022Y\n\tpacket_id\030\001 \001(\0162).cl"
    "ient2world_protocols.e_server_msg_type:\033"
    "e_mst_w2c_update_sex_result\022\013\n\003sex\030\002 \001(\005"
    "\022\016\n\006result\030\003 \001(\005\"\211\001\n\032packetc2w_update_si"
    "gnature\022X\n\tpacket_id\030\001 \001(\0162).client2worl"
    "d_protocols.e_server_msg_type:\032e_mst_c2w"
    "_update_signature\022\021\n\tsignature\030\002 \001(\t\"\247\001\n"
    "!packetw2c_update_signature_result\022_\n\tpa"
    "cket_id\030\001 \001(\0162).client2world_protocols.e"
    "_server_msg_type:!e_mst_w2c_update_signa"
    "ture_result\022\021\n\tsignature\030\002 \001(\t\022\016\n\006result"
    "\030\003 \001(\005\"\220\001\n\034packetc2w_change_photo_frame\022"
    "Z\n\tpacket_id\030\001 \001(\0162).client2world_protoc"
    "ols.e_server_msg_type:\034e_mst_c2w_change_"
    "photo_frame\022\024\n\014photoFrameId\030\002 \001(\005\"\256\001\n#pa"
    "cketw2c_change_photo_frame_result\022a\n\tpac"
    "ket_id\030\001 \001(\0162).client2world_protocols.e_"
    "server_msg_type:#e_mst_w2c_change_photo_"
    "frame_result\022\024\n\014photoFrameId\030\002 \001(\005\022\016\n\006re"
    "sult\030\003 \001(\005\"\200\001\n\027packetc2w_req_game_stat\022U"
    "\n\tpacket_id\030\001 \001(\0162).client2world_protoco"
    "ls.e_server_msg_type:\027e_mst_c2w_req_game"
    "_stat\022\016\n\006gameId\030\002 \001(\005\"\370\001\n\036packetw2c_fish"
    "lord_stat_result\022\\\n\tpacket_id\030\001 \001(\0162).cl"
    "ient2world_protocols.e_server_msg_type:\036"
    "e_mst_w2c_fishlord_stat_result\022\017\n\007maxCoi"
    "n\030\002 \001(\005\022\021\n\tmaxTicket\030\003 \001(\005\022\032\n\022hitBlackDa"
    "gonCount\030\004 \001(\005\022\031\n\021hitBlueDagonCount\030\005 \001("
    "\005\022\035\n\025hitGoldDagonBombCount\030\006 \001(\005\"\317\001\n\032pac"
    "ketw2c_dice_stat_result\022X\n\tpacket_id\030\001 \001"
    "(\0162).client2world_protocols.e_server_msg"
    "_type:\032e_mst_w2c_dice_stat_result\022\017\n\007max"
    "Coin\030\002 \001(\005\022\021\n\tmaxTicket\030\003 \001(\005\022\027\n\017hitLeop"
    "ardCount\030\004 \001(\005\022\032\n\022maxSuccessionCount\030\005 \001"
    "(\005\"\373\001\n\037packetw2c_crocodile_stat_result\022]"
    "\n\tpacket_id\030\001 \001(\0162).client2world_protoco"
    "ls.e_server_msg_type:\037e_mst_w2c_crocodil"
    "e_stat_result\022\017\n\007maxCoin\030\002 \001(\005\022\021\n\tmaxTic"
    "ket\030\003 \001(\005\022\030\n\020hitWinningsCount\030\004 \001(\005\022\031\n\021h"
    "itSpotlightCount\030\005 \001(\005\022 \n\030hitEveryoneHas"
    "AwardCount\030\006 \001(\005\"t\n\031packetc2w_req_self_r"
    "ecord\022W\n\tpacket_id\030\001 \001(\0162).client2world_"
    "protocols.e_server_msg_type:\031e_mst_c2w_r"
    "eq_self_record\"\246\001\n packetw2c_req_self_re"
    "cord_result\022^\n\tpacket_id\030\001 \001(\0162).client2"
    "world_protocols.e_server_msg_type: e_mst"
    "_w2c_req_self_record_result\022\017\n\007maxCoin\030\002"
    " \001(\005\022\021\n\tmaxTicket\030\003 \001(\005\"~\n\036packetc2w_fin"
    "ish_one_new_guild\022\\\n\tpacket_id\030\001 \001(\0162).c"
    "lient2world_protocols.e_server_msg_type:"
    "\036e_mst_c2w_finish_one_new_guild\"\214\001\n%pack"
    "etw2c_finish_one_new_guild_result\022c\n\tpac"
    "ket_id\030\001 \001(\0162).client2world_protocols.e_"
    "server_msg_type:%e_mst_w2c_finish_one_ne"
    "w_guild_result\"\212\001\n\033packetc2w_req_send_gi"
    "ft_log\022Y\n\tpacket_id\030\001 \001(\0162).client2world"
    "_protocols.e_server_msg_type:\033e_mst_c2w_"
    "req_send_gift_log\022\020\n\010lastTime\030\002 \001(\005\"\216\001\n\017"
    "SendGiftLogInfo\022\020\n\010sendTime\030\001 \001(\005\022\020\n\010fir"
    "endId\030\002 \001(\005\022\026\n\016friendNickName\030\003 \001(\t\022\016\n\006g"
    "iftId\030\004 \001(\005\022\r\n\005count\030\005 \001(\005\022\020\n\010sendgold\030\006"
    " \001(\010\022\016\n\006mailid\030\007 \001(\t\"\322\001\n\"packetw2c_req_s"
    "end_gift_log_result\022`\n\tpacket_id\030\001 \001(\0162)"
    ".client2world_protocols.e_server_msg_typ"
    "e:\"e_mst_w2c_req_send_gift_log_result\0228\n"
    "\007logList\030\002 \003(\0132\'.client2world_protocols."
    "SendGiftLogInfo\022\020\n\010lastTime\030\003 \001(\005\"\206\001\n\031pa"
    "cketc2w_req_safebox_log\022W\n\tpacket_id\030\001 \001"
    "(\0162).client2world_protocols.e_server_msg"
    "_type:\031e_mst_c2w_req_safebox_log\022\020\n\010last"
    "Time\030\002 \001(\005\"A\n\016SafeBoxLogInfo\022\014\n\004time\030\001 \001"
    "(\005\022\014\n\004gold\030\002 \001(\003\022\023\n\013player_gold\030\003 \001(\003\"\315\001"
    "\n packetw2c_req_safebox_log_result\022^\n\tpa"
    "cket_id\030\001 \001(\0162).client2world_protocols.e"
    "_server_msg_type: e_mst_w2c_req_safebox_"
    "log_result\0227\n\007logList\030\002 \003(\0132&.client2wor"
    "ld_protocols.SafeBoxLogInfo\022\020\n\010lastTime\030"
    "\003 \001(\005\"\223\001\n\033packetc2w_inform_playerhead\022Y\n"
    "\tpacket_id\030\001 \001(\0162).client2world_protocol"
    "s.e_server_msg_type:\033e_mst_c2w_inform_pl"
    "ayerhead\022\031\n\021informDstPlayerId\030\002 \001(\005\"\226\001\n\""
    "packetw2c_inform_playerhead_result\022`\n\tpa"
    "cket_id\030\001 \001(\0162).client2world_protocols.e"
    "_server_msg_type:\"e_mst_w2c_inform_playe"
    "rhead_result\022\016\n\006result\030\002 \001(\005", 4268);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client2world_player_property.proto", &protobuf_RegisterTypes);
  packetc2w_update_playerhead::default_instance_ = new packetc2w_update_playerhead();
  packetw2c_update_playerhead_result::default_instance_ = new packetw2c_update_playerhead_result();
  packetc2w_update_nickname::default_instance_ = new packetc2w_update_nickname();
  packetw2c_update_nickname_result::default_instance_ = new packetw2c_update_nickname_result();
  packetc2w_update_sex::default_instance_ = new packetc2w_update_sex();
  packetw2c_update_sex_result::default_instance_ = new packetw2c_update_sex_result();
  packetc2w_update_signature::default_instance_ = new packetc2w_update_signature();
  packetw2c_update_signature_result::default_instance_ = new packetw2c_update_signature_result();
  packetc2w_change_photo_frame::default_instance_ = new packetc2w_change_photo_frame();
  packetw2c_change_photo_frame_result::default_instance_ = new packetw2c_change_photo_frame_result();
  packetc2w_req_game_stat::default_instance_ = new packetc2w_req_game_stat();
  packetw2c_fishlord_stat_result::default_instance_ = new packetw2c_fishlord_stat_result();
  packetw2c_dice_stat_result::default_instance_ = new packetw2c_dice_stat_result();
  packetw2c_crocodile_stat_result::default_instance_ = new packetw2c_crocodile_stat_result();
  packetc2w_req_self_record::default_instance_ = new packetc2w_req_self_record();
  packetw2c_req_self_record_result::default_instance_ = new packetw2c_req_self_record_result();
  packetc2w_finish_one_new_guild::default_instance_ = new packetc2w_finish_one_new_guild();
  packetw2c_finish_one_new_guild_result::default_instance_ = new packetw2c_finish_one_new_guild_result();
  packetc2w_req_send_gift_log::default_instance_ = new packetc2w_req_send_gift_log();
  SendGiftLogInfo::default_instance_ = new SendGiftLogInfo();
  packetw2c_req_send_gift_log_result::default_instance_ = new packetw2c_req_send_gift_log_result();
  packetc2w_req_safebox_log::default_instance_ = new packetc2w_req_safebox_log();
  SafeBoxLogInfo::default_instance_ = new SafeBoxLogInfo();
  packetw2c_req_safebox_log_result::default_instance_ = new packetw2c_req_safebox_log_result();
  packetc2w_inform_playerhead::default_instance_ = new packetc2w_inform_playerhead();
  packetw2c_inform_playerhead_result::default_instance_ = new packetw2c_inform_playerhead_result();
  packetc2w_update_playerhead::default_instance_->InitAsDefaultInstance();
  packetw2c_update_playerhead_result::default_instance_->InitAsDefaultInstance();
  packetc2w_update_nickname::default_instance_->InitAsDefaultInstance();
  packetw2c_update_nickname_result::default_instance_->InitAsDefaultInstance();
  packetc2w_update_sex::default_instance_->InitAsDefaultInstance();
  packetw2c_update_sex_result::default_instance_->InitAsDefaultInstance();
  packetc2w_update_signature::default_instance_->InitAsDefaultInstance();
  packetw2c_update_signature_result::default_instance_->InitAsDefaultInstance();
  packetc2w_change_photo_frame::default_instance_->InitAsDefaultInstance();
  packetw2c_change_photo_frame_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_game_stat::default_instance_->InitAsDefaultInstance();
  packetw2c_fishlord_stat_result::default_instance_->InitAsDefaultInstance();
  packetw2c_dice_stat_result::default_instance_->InitAsDefaultInstance();
  packetw2c_crocodile_stat_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_self_record::default_instance_->InitAsDefaultInstance();
  packetw2c_req_self_record_result::default_instance_->InitAsDefaultInstance();
  packetc2w_finish_one_new_guild::default_instance_->InitAsDefaultInstance();
  packetw2c_finish_one_new_guild_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_send_gift_log::default_instance_->InitAsDefaultInstance();
  SendGiftLogInfo::default_instance_->InitAsDefaultInstance();
  packetw2c_req_send_gift_log_result::default_instance_->InitAsDefaultInstance();
  packetc2w_req_safebox_log::default_instance_->InitAsDefaultInstance();
  SafeBoxLogInfo::default_instance_->InitAsDefaultInstance();
  packetw2c_req_safebox_log_result::default_instance_->InitAsDefaultInstance();
  packetc2w_inform_playerhead::default_instance_->InitAsDefaultInstance();
  packetw2c_inform_playerhead_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client2world_5fplayer_5fproperty_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client2world_5fplayer_5fproperty_2eproto {
  StaticDescriptorInitializer_client2world_5fplayer_5fproperty_2eproto() {
    protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  }
} static_descriptor_initializer_client2world_5fplayer_5fproperty_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int packetc2w_update_playerhead::kPacketIdFieldNumber;
const int packetc2w_update_playerhead::kHeadstrFieldNumber;
#endif  // !_MSC_VER

packetc2w_update_playerhead::packetc2w_update_playerhead()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_update_playerhead)
}

void packetc2w_update_playerhead::InitAsDefaultInstance() {
}

packetc2w_update_playerhead::packetc2w_update_playerhead(const packetc2w_update_playerhead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_update_playerhead)
}

void packetc2w_update_playerhead::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5010;
  headstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_update_playerhead::~packetc2w_update_playerhead() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_update_playerhead)
  SharedDtor();
}

void packetc2w_update_playerhead::SharedDtor() {
  if (headstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete headstr_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_update_playerhead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_update_playerhead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_update_playerhead_descriptor_;
}

const packetc2w_update_playerhead& packetc2w_update_playerhead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_update_playerhead* packetc2w_update_playerhead::default_instance_ = NULL;

packetc2w_update_playerhead* packetc2w_update_playerhead::New() const {
  return new packetc2w_update_playerhead;
}

void packetc2w_update_playerhead::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5010;
    if (has_headstr()) {
      if (headstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        headstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_update_playerhead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_update_playerhead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_playerhead];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_headstr;
        break;
      }

      // optional string headstr = 2;
      case 2: {
        if (tag == 18) {
         parse_headstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headstr().data(), this->headstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "headstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_update_playerhead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_update_playerhead)
  return false;
#undef DO_
}

void packetc2w_update_playerhead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_update_playerhead)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_playerhead];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string headstr = 2;
  if (has_headstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headstr().data(), this->headstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->headstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_update_playerhead)
}

::google::protobuf::uint8* packetc2w_update_playerhead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_update_playerhead)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_playerhead];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string headstr = 2;
  if (has_headstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headstr().data(), this->headstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->headstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_update_playerhead)
  return target;
}

int packetc2w_update_playerhead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_playerhead];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string headstr = 2;
    if (has_headstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_update_playerhead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_update_playerhead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_update_playerhead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_update_playerhead::MergeFrom(const packetc2w_update_playerhead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_headstr()) {
      set_headstr(from.headstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_update_playerhead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_update_playerhead::CopyFrom(const packetc2w_update_playerhead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_update_playerhead::IsInitialized() const {

  return true;
}

void packetc2w_update_playerhead::Swap(packetc2w_update_playerhead* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(headstr_, other->headstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_update_playerhead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_update_playerhead_descriptor_;
  metadata.reflection = packetc2w_update_playerhead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_update_playerhead_result::kPacketIdFieldNumber;
const int packetw2c_update_playerhead_result::kHeadstrFieldNumber;
const int packetw2c_update_playerhead_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_update_playerhead_result::packetw2c_update_playerhead_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_update_playerhead_result)
}

void packetw2c_update_playerhead_result::InitAsDefaultInstance() {
}

packetw2c_update_playerhead_result::packetw2c_update_playerhead_result(const packetw2c_update_playerhead_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_update_playerhead_result)
}

void packetw2c_update_playerhead_result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 7509;
  headstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_update_playerhead_result::~packetw2c_update_playerhead_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_update_playerhead_result)
  SharedDtor();
}

void packetw2c_update_playerhead_result::SharedDtor() {
  if (headstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete headstr_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_update_playerhead_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_update_playerhead_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_update_playerhead_result_descriptor_;
}

const packetw2c_update_playerhead_result& packetw2c_update_playerhead_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_update_playerhead_result* packetw2c_update_playerhead_result::default_instance_ = NULL;

packetw2c_update_playerhead_result* packetw2c_update_playerhead_result::New() const {
  return new packetw2c_update_playerhead_result;
}

void packetw2c_update_playerhead_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 7509;
    if (has_headstr()) {
      if (headstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        headstr_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_update_playerhead_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_update_playerhead_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_playerhead_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_headstr;
        break;
      }

      // optional string headstr = 2;
      case 2: {
        if (tag == 18) {
         parse_headstr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headstr().data(), this->headstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "headstr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_update_playerhead_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_update_playerhead_result)
  return false;
#undef DO_
}

void packetw2c_update_playerhead_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_update_playerhead_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_playerhead_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string headstr = 2;
  if (has_headstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headstr().data(), this->headstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headstr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->headstr(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_update_playerhead_result)
}

::google::protobuf::uint8* packetw2c_update_playerhead_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_update_playerhead_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_playerhead_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string headstr = 2;
  if (has_headstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headstr().data(), this->headstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headstr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->headstr(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_update_playerhead_result)
  return target;
}

int packetw2c_update_playerhead_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_playerhead_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string headstr = 2;
    if (has_headstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headstr());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_update_playerhead_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_update_playerhead_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_update_playerhead_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_update_playerhead_result::MergeFrom(const packetw2c_update_playerhead_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_headstr()) {
      set_headstr(from.headstr());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_update_playerhead_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_update_playerhead_result::CopyFrom(const packetw2c_update_playerhead_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_update_playerhead_result::IsInitialized() const {

  return true;
}

void packetw2c_update_playerhead_result::Swap(packetw2c_update_playerhead_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(headstr_, other->headstr_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_update_playerhead_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_update_playerhead_result_descriptor_;
  metadata.reflection = packetw2c_update_playerhead_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_update_nickname::kPacketIdFieldNumber;
const int packetc2w_update_nickname::kNickNameFieldNumber;
#endif  // !_MSC_VER

packetc2w_update_nickname::packetc2w_update_nickname()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_update_nickname)
}

void packetc2w_update_nickname::InitAsDefaultInstance() {
}

packetc2w_update_nickname::packetc2w_update_nickname(const packetc2w_update_nickname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_update_nickname)
}

void packetc2w_update_nickname::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5011;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_update_nickname::~packetc2w_update_nickname() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_update_nickname)
  SharedDtor();
}

void packetc2w_update_nickname::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_update_nickname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_update_nickname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_update_nickname_descriptor_;
}

const packetc2w_update_nickname& packetc2w_update_nickname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_update_nickname* packetc2w_update_nickname::default_instance_ = NULL;

packetc2w_update_nickname* packetc2w_update_nickname::New() const {
  return new packetc2w_update_nickname;
}

void packetc2w_update_nickname::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5011;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_update_nickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_update_nickname)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_nickname];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // optional string nickName = 2;
      case 2: {
        if (tag == 18) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_update_nickname)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_update_nickname)
  return false;
#undef DO_
}

void packetc2w_update_nickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_update_nickname)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_nickname];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_update_nickname)
}

::google::protobuf::uint8* packetc2w_update_nickname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_update_nickname)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_nickname];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_update_nickname)
  return target;
}

int packetc2w_update_nickname::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_nickname];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_update_nickname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_update_nickname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_update_nickname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_update_nickname::MergeFrom(const packetc2w_update_nickname& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_update_nickname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_update_nickname::CopyFrom(const packetc2w_update_nickname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_update_nickname::IsInitialized() const {

  return true;
}

void packetc2w_update_nickname::Swap(packetc2w_update_nickname* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_update_nickname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_update_nickname_descriptor_;
  metadata.reflection = packetc2w_update_nickname_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_update_nickname_result::kPacketIdFieldNumber;
const int packetw2c_update_nickname_result::kNickNameFieldNumber;
const int packetw2c_update_nickname_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_update_nickname_result::packetw2c_update_nickname_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_update_nickname_result)
}

void packetw2c_update_nickname_result::InitAsDefaultInstance() {
}

packetw2c_update_nickname_result::packetw2c_update_nickname_result(const packetw2c_update_nickname_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_update_nickname_result)
}

void packetw2c_update_nickname_result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 7510;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_update_nickname_result::~packetw2c_update_nickname_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_update_nickname_result)
  SharedDtor();
}

void packetw2c_update_nickname_result::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_update_nickname_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_update_nickname_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_update_nickname_result_descriptor_;
}

const packetw2c_update_nickname_result& packetw2c_update_nickname_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_update_nickname_result* packetw2c_update_nickname_result::default_instance_ = NULL;

packetw2c_update_nickname_result* packetw2c_update_nickname_result::New() const {
  return new packetw2c_update_nickname_result;
}

void packetw2c_update_nickname_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 7510;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_update_nickname_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_update_nickname_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_nickname_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // optional string nickName = 2;
      case 2: {
        if (tag == 18) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_update_nickname_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_update_nickname_result)
  return false;
#undef DO_
}

void packetw2c_update_nickname_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_update_nickname_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_nickname_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_update_nickname_result)
}

::google::protobuf::uint8* packetw2c_update_nickname_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_update_nickname_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_nickname_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_update_nickname_result)
  return target;
}

int packetw2c_update_nickname_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_nickname_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_update_nickname_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_update_nickname_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_update_nickname_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_update_nickname_result::MergeFrom(const packetw2c_update_nickname_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_update_nickname_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_update_nickname_result::CopyFrom(const packetw2c_update_nickname_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_update_nickname_result::IsInitialized() const {

  return true;
}

void packetw2c_update_nickname_result::Swap(packetw2c_update_nickname_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_update_nickname_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_update_nickname_result_descriptor_;
  metadata.reflection = packetw2c_update_nickname_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_update_sex::kPacketIdFieldNumber;
const int packetc2w_update_sex::kSexFieldNumber;
#endif  // !_MSC_VER

packetc2w_update_sex::packetc2w_update_sex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_update_sex)
}

void packetc2w_update_sex::InitAsDefaultInstance() {
}

packetc2w_update_sex::packetc2w_update_sex(const packetc2w_update_sex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_update_sex)
}

void packetc2w_update_sex::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5012;
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_update_sex::~packetc2w_update_sex() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_update_sex)
  SharedDtor();
}

void packetc2w_update_sex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_update_sex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_update_sex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_update_sex_descriptor_;
}

const packetc2w_update_sex& packetc2w_update_sex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_update_sex* packetc2w_update_sex::default_instance_ = NULL;

packetc2w_update_sex* packetc2w_update_sex::New() const {
  return new packetc2w_update_sex;
}

void packetc2w_update_sex::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5012;
    sex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_update_sex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_update_sex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_sex];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }

      // optional int32 sex = 2;
      case 2: {
        if (tag == 16) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_update_sex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_update_sex)
  return false;
#undef DO_
}

void packetc2w_update_sex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_update_sex)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_sex];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_update_sex)
}

::google::protobuf::uint8* packetc2w_update_sex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_update_sex)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_sex];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_update_sex)
  return target;
}

int packetc2w_update_sex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_sex];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_update_sex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_update_sex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_update_sex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_update_sex::MergeFrom(const packetc2w_update_sex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_update_sex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_update_sex::CopyFrom(const packetc2w_update_sex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_update_sex::IsInitialized() const {

  return true;
}

void packetc2w_update_sex::Swap(packetc2w_update_sex* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_update_sex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_update_sex_descriptor_;
  metadata.reflection = packetc2w_update_sex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_update_sex_result::kPacketIdFieldNumber;
const int packetw2c_update_sex_result::kSexFieldNumber;
const int packetw2c_update_sex_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_update_sex_result::packetw2c_update_sex_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_update_sex_result)
}

void packetw2c_update_sex_result::InitAsDefaultInstance() {
}

packetw2c_update_sex_result::packetw2c_update_sex_result(const packetw2c_update_sex_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_update_sex_result)
}

void packetw2c_update_sex_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7511;
  sex_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_update_sex_result::~packetw2c_update_sex_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_update_sex_result)
  SharedDtor();
}

void packetw2c_update_sex_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_update_sex_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_update_sex_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_update_sex_result_descriptor_;
}

const packetw2c_update_sex_result& packetw2c_update_sex_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_update_sex_result* packetw2c_update_sex_result::default_instance_ = NULL;

packetw2c_update_sex_result* packetw2c_update_sex_result::New() const {
  return new packetw2c_update_sex_result;
}

void packetw2c_update_sex_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_update_sex_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(sex_, result_);
    packet_id_ = 7511;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_update_sex_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_update_sex_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_sex_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }

      // optional int32 sex = 2;
      case 2: {
        if (tag == 16) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_update_sex_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_update_sex_result)
  return false;
#undef DO_
}

void packetw2c_update_sex_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_update_sex_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_sex_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sex(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_update_sex_result)
}

::google::protobuf::uint8* packetw2c_update_sex_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_update_sex_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_sex_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sex(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_update_sex_result)
  return target;
}

int packetw2c_update_sex_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_sex_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_update_sex_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_update_sex_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_update_sex_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_update_sex_result::MergeFrom(const packetw2c_update_sex_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_update_sex_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_update_sex_result::CopyFrom(const packetw2c_update_sex_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_update_sex_result::IsInitialized() const {

  return true;
}

void packetw2c_update_sex_result::Swap(packetw2c_update_sex_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(sex_, other->sex_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_update_sex_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_update_sex_result_descriptor_;
  metadata.reflection = packetw2c_update_sex_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_update_signature::kPacketIdFieldNumber;
const int packetc2w_update_signature::kSignatureFieldNumber;
#endif  // !_MSC_VER

packetc2w_update_signature::packetc2w_update_signature()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_update_signature)
}

void packetc2w_update_signature::InitAsDefaultInstance() {
}

packetc2w_update_signature::packetc2w_update_signature(const packetc2w_update_signature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_update_signature)
}

void packetc2w_update_signature::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 5013;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_update_signature::~packetc2w_update_signature() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_update_signature)
  SharedDtor();
}

void packetc2w_update_signature::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void packetc2w_update_signature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_update_signature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_update_signature_descriptor_;
}

const packetc2w_update_signature& packetc2w_update_signature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_update_signature* packetc2w_update_signature::default_instance_ = NULL;

packetc2w_update_signature* packetc2w_update_signature::New() const {
  return new packetc2w_update_signature;
}

void packetc2w_update_signature::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5013;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_update_signature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_update_signature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_signature];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // optional string signature = 2;
      case 2: {
        if (tag == 18) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signature");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_update_signature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_update_signature)
  return false;
#undef DO_
}

void packetc2w_update_signature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_update_signature)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_signature];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_update_signature)
}

::google::protobuf::uint8* packetc2w_update_signature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_update_signature)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_signature];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_update_signature)
  return target;
}

int packetc2w_update_signature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_update_signature];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_update_signature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_update_signature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_update_signature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_update_signature::MergeFrom(const packetc2w_update_signature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_update_signature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_update_signature::CopyFrom(const packetc2w_update_signature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_update_signature::IsInitialized() const {

  return true;
}

void packetc2w_update_signature::Swap(packetc2w_update_signature* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_update_signature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_update_signature_descriptor_;
  metadata.reflection = packetc2w_update_signature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_update_signature_result::kPacketIdFieldNumber;
const int packetw2c_update_signature_result::kSignatureFieldNumber;
const int packetw2c_update_signature_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_update_signature_result::packetw2c_update_signature_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_update_signature_result)
}

void packetw2c_update_signature_result::InitAsDefaultInstance() {
}

packetw2c_update_signature_result::packetw2c_update_signature_result(const packetw2c_update_signature_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_update_signature_result)
}

void packetw2c_update_signature_result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  packet_id_ = 7512;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_update_signature_result::~packetw2c_update_signature_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_update_signature_result)
  SharedDtor();
}

void packetw2c_update_signature_result::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void packetw2c_update_signature_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_update_signature_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_update_signature_result_descriptor_;
}

const packetw2c_update_signature_result& packetw2c_update_signature_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_update_signature_result* packetw2c_update_signature_result::default_instance_ = NULL;

packetw2c_update_signature_result* packetw2c_update_signature_result::New() const {
  return new packetw2c_update_signature_result;
}

void packetw2c_update_signature_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    packet_id_ = 7512;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signature_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_update_signature_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_update_signature_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_signature_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // optional string signature = 2;
      case 2: {
        if (tag == 18) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signature");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_update_signature_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_update_signature_result)
  return false;
#undef DO_
}

void packetw2c_update_signature_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_update_signature_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_signature_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional string signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signature(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_update_signature_result)
}

::google::protobuf::uint8* packetw2c_update_signature_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_update_signature_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_signature_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional string signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signature(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_update_signature_result)
  return target;
}

int packetw2c_update_signature_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_update_signature_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional string signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_update_signature_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_update_signature_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_update_signature_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_update_signature_result::MergeFrom(const packetw2c_update_signature_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_update_signature_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_update_signature_result::CopyFrom(const packetw2c_update_signature_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_update_signature_result::IsInitialized() const {

  return true;
}

void packetw2c_update_signature_result::Swap(packetw2c_update_signature_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(signature_, other->signature_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_update_signature_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_update_signature_result_descriptor_;
  metadata.reflection = packetw2c_update_signature_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_change_photo_frame::kPacketIdFieldNumber;
const int packetc2w_change_photo_frame::kPhotoFrameIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_change_photo_frame::packetc2w_change_photo_frame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_change_photo_frame)
}

void packetc2w_change_photo_frame::InitAsDefaultInstance() {
}

packetc2w_change_photo_frame::packetc2w_change_photo_frame(const packetc2w_change_photo_frame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_change_photo_frame)
}

void packetc2w_change_photo_frame::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5032;
  photoframeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_change_photo_frame::~packetc2w_change_photo_frame() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_change_photo_frame)
  SharedDtor();
}

void packetc2w_change_photo_frame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_change_photo_frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_change_photo_frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_change_photo_frame_descriptor_;
}

const packetc2w_change_photo_frame& packetc2w_change_photo_frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_change_photo_frame* packetc2w_change_photo_frame::default_instance_ = NULL;

packetc2w_change_photo_frame* packetc2w_change_photo_frame::New() const {
  return new packetc2w_change_photo_frame;
}

void packetc2w_change_photo_frame::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5032;
    photoframeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_change_photo_frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_change_photo_frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_change_photo_frame];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_photoFrameId;
        break;
      }

      // optional int32 photoFrameId = 2;
      case 2: {
        if (tag == 16) {
         parse_photoFrameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photoframeid_)));
          set_has_photoframeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_change_photo_frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_change_photo_frame)
  return false;
#undef DO_
}

void packetc2w_change_photo_frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_change_photo_frame)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_change_photo_frame];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 photoFrameId = 2;
  if (has_photoframeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->photoframeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_change_photo_frame)
}

::google::protobuf::uint8* packetc2w_change_photo_frame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_change_photo_frame)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_change_photo_frame];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 photoFrameId = 2;
  if (has_photoframeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->photoframeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_change_photo_frame)
  return target;
}

int packetc2w_change_photo_frame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_change_photo_frame];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 photoFrameId = 2;
    if (has_photoframeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photoframeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_change_photo_frame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_change_photo_frame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_change_photo_frame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_change_photo_frame::MergeFrom(const packetc2w_change_photo_frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_photoframeid()) {
      set_photoframeid(from.photoframeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_change_photo_frame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_change_photo_frame::CopyFrom(const packetc2w_change_photo_frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_change_photo_frame::IsInitialized() const {

  return true;
}

void packetc2w_change_photo_frame::Swap(packetc2w_change_photo_frame* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(photoframeid_, other->photoframeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_change_photo_frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_change_photo_frame_descriptor_;
  metadata.reflection = packetc2w_change_photo_frame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_change_photo_frame_result::kPacketIdFieldNumber;
const int packetw2c_change_photo_frame_result::kPhotoFrameIdFieldNumber;
const int packetw2c_change_photo_frame_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_change_photo_frame_result::packetw2c_change_photo_frame_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_change_photo_frame_result)
}

void packetw2c_change_photo_frame_result::InitAsDefaultInstance() {
}

packetw2c_change_photo_frame_result::packetw2c_change_photo_frame_result(const packetw2c_change_photo_frame_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_change_photo_frame_result)
}

void packetw2c_change_photo_frame_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7534;
  photoframeid_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_change_photo_frame_result::~packetw2c_change_photo_frame_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_change_photo_frame_result)
  SharedDtor();
}

void packetw2c_change_photo_frame_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_change_photo_frame_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_change_photo_frame_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_change_photo_frame_result_descriptor_;
}

const packetw2c_change_photo_frame_result& packetw2c_change_photo_frame_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_change_photo_frame_result* packetw2c_change_photo_frame_result::default_instance_ = NULL;

packetw2c_change_photo_frame_result* packetw2c_change_photo_frame_result::New() const {
  return new packetw2c_change_photo_frame_result;
}

void packetw2c_change_photo_frame_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_change_photo_frame_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(photoframeid_, result_);
    packet_id_ = 7534;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_change_photo_frame_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_change_photo_frame_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_photo_frame_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_photoFrameId;
        break;
      }

      // optional int32 photoFrameId = 2;
      case 2: {
        if (tag == 16) {
         parse_photoFrameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photoframeid_)));
          set_has_photoframeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_change_photo_frame_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_change_photo_frame_result)
  return false;
#undef DO_
}

void packetw2c_change_photo_frame_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_change_photo_frame_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_photo_frame_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 photoFrameId = 2;
  if (has_photoframeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->photoframeid(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_change_photo_frame_result)
}

::google::protobuf::uint8* packetw2c_change_photo_frame_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_change_photo_frame_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_photo_frame_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 photoFrameId = 2;
  if (has_photoframeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->photoframeid(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_change_photo_frame_result)
  return target;
}

int packetw2c_change_photo_frame_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_change_photo_frame_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 photoFrameId = 2;
    if (has_photoframeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photoframeid());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_change_photo_frame_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_change_photo_frame_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_change_photo_frame_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_change_photo_frame_result::MergeFrom(const packetw2c_change_photo_frame_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_photoframeid()) {
      set_photoframeid(from.photoframeid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_change_photo_frame_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_change_photo_frame_result::CopyFrom(const packetw2c_change_photo_frame_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_change_photo_frame_result::IsInitialized() const {

  return true;
}

void packetw2c_change_photo_frame_result::Swap(packetw2c_change_photo_frame_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(photoframeid_, other->photoframeid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_change_photo_frame_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_change_photo_frame_result_descriptor_;
  metadata.reflection = packetw2c_change_photo_frame_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_game_stat::kPacketIdFieldNumber;
const int packetc2w_req_game_stat::kGameIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_game_stat::packetc2w_req_game_stat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_game_stat)
}

void packetc2w_req_game_stat::InitAsDefaultInstance() {
}

packetc2w_req_game_stat::packetc2w_req_game_stat(const packetc2w_req_game_stat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_game_stat)
}

void packetc2w_req_game_stat::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5018;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_game_stat::~packetc2w_req_game_stat() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_game_stat)
  SharedDtor();
}

void packetc2w_req_game_stat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_game_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_game_stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_game_stat_descriptor_;
}

const packetc2w_req_game_stat& packetc2w_req_game_stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_req_game_stat* packetc2w_req_game_stat::default_instance_ = NULL;

packetc2w_req_game_stat* packetc2w_req_game_stat::New() const {
  return new packetc2w_req_game_stat;
}

void packetc2w_req_game_stat::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5018;
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_game_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_game_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_game_stat];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }

      // optional int32 gameId = 2;
      case 2: {
        if (tag == 16) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_game_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_game_stat)
  return false;
#undef DO_
}

void packetc2w_req_game_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_game_stat)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_game_stat];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_game_stat)
}

::google::protobuf::uint8* packetc2w_req_game_stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_game_stat)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_game_stat];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 gameId = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_game_stat)
  return target;
}

int packetc2w_req_game_stat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_game_stat];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_game_stat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_game_stat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_game_stat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_game_stat::MergeFrom(const packetc2w_req_game_stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_game_stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_game_stat::CopyFrom(const packetc2w_req_game_stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_game_stat::IsInitialized() const {

  return true;
}

void packetc2w_req_game_stat::Swap(packetc2w_req_game_stat* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_game_stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_game_stat_descriptor_;
  metadata.reflection = packetc2w_req_game_stat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_fishlord_stat_result::kPacketIdFieldNumber;
const int packetw2c_fishlord_stat_result::kMaxCoinFieldNumber;
const int packetw2c_fishlord_stat_result::kMaxTicketFieldNumber;
const int packetw2c_fishlord_stat_result::kHitBlackDagonCountFieldNumber;
const int packetw2c_fishlord_stat_result::kHitBlueDagonCountFieldNumber;
const int packetw2c_fishlord_stat_result::kHitGoldDagonBombCountFieldNumber;
#endif  // !_MSC_VER

packetw2c_fishlord_stat_result::packetw2c_fishlord_stat_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_fishlord_stat_result)
}

void packetw2c_fishlord_stat_result::InitAsDefaultInstance() {
}

packetw2c_fishlord_stat_result::packetw2c_fishlord_stat_result(const packetw2c_fishlord_stat_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_fishlord_stat_result)
}

void packetw2c_fishlord_stat_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7517;
  maxcoin_ = 0;
  maxticket_ = 0;
  hitblackdagoncount_ = 0;
  hitbluedagoncount_ = 0;
  hitgolddagonbombcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_fishlord_stat_result::~packetw2c_fishlord_stat_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_fishlord_stat_result)
  SharedDtor();
}

void packetw2c_fishlord_stat_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_fishlord_stat_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_fishlord_stat_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_fishlord_stat_result_descriptor_;
}

const packetw2c_fishlord_stat_result& packetw2c_fishlord_stat_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_fishlord_stat_result* packetw2c_fishlord_stat_result::default_instance_ = NULL;

packetw2c_fishlord_stat_result* packetw2c_fishlord_stat_result::New() const {
  return new packetw2c_fishlord_stat_result;
}

void packetw2c_fishlord_stat_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_fishlord_stat_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(maxcoin_, hitgolddagonbombcount_);
    packet_id_ = 7517;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_fishlord_stat_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_fishlord_stat_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_fishlord_stat_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxCoin;
        break;
      }

      // optional int32 maxCoin = 2;
      case 2: {
        if (tag == 16) {
         parse_maxCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcoin_)));
          set_has_maxcoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxTicket;
        break;
      }

      // optional int32 maxTicket = 3;
      case 3: {
        if (tag == 24) {
         parse_maxTicket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxticket_)));
          set_has_maxticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hitBlackDagonCount;
        break;
      }

      // optional int32 hitBlackDagonCount = 4;
      case 4: {
        if (tag == 32) {
         parse_hitBlackDagonCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitblackdagoncount_)));
          set_has_hitblackdagoncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hitBlueDagonCount;
        break;
      }

      // optional int32 hitBlueDagonCount = 5;
      case 5: {
        if (tag == 40) {
         parse_hitBlueDagonCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitbluedagoncount_)));
          set_has_hitbluedagoncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hitGoldDagonBombCount;
        break;
      }

      // optional int32 hitGoldDagonBombCount = 6;
      case 6: {
        if (tag == 48) {
         parse_hitGoldDagonBombCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitgolddagonbombcount_)));
          set_has_hitgolddagonbombcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_fishlord_stat_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_fishlord_stat_result)
  return false;
#undef DO_
}

void packetw2c_fishlord_stat_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_fishlord_stat_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_fishlord_stat_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 maxCoin = 2;
  if (has_maxcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxcoin(), output);
  }

  // optional int32 maxTicket = 3;
  if (has_maxticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxticket(), output);
  }

  // optional int32 hitBlackDagonCount = 4;
  if (has_hitblackdagoncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hitblackdagoncount(), output);
  }

  // optional int32 hitBlueDagonCount = 5;
  if (has_hitbluedagoncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hitbluedagoncount(), output);
  }

  // optional int32 hitGoldDagonBombCount = 6;
  if (has_hitgolddagonbombcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hitgolddagonbombcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_fishlord_stat_result)
}

::google::protobuf::uint8* packetw2c_fishlord_stat_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_fishlord_stat_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_fishlord_stat_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 maxCoin = 2;
  if (has_maxcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxcoin(), target);
  }

  // optional int32 maxTicket = 3;
  if (has_maxticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxticket(), target);
  }

  // optional int32 hitBlackDagonCount = 4;
  if (has_hitblackdagoncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hitblackdagoncount(), target);
  }

  // optional int32 hitBlueDagonCount = 5;
  if (has_hitbluedagoncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hitbluedagoncount(), target);
  }

  // optional int32 hitGoldDagonBombCount = 6;
  if (has_hitgolddagonbombcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hitgolddagonbombcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_fishlord_stat_result)
  return target;
}

int packetw2c_fishlord_stat_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_fishlord_stat_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 maxCoin = 2;
    if (has_maxcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcoin());
    }

    // optional int32 maxTicket = 3;
    if (has_maxticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxticket());
    }

    // optional int32 hitBlackDagonCount = 4;
    if (has_hitblackdagoncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitblackdagoncount());
    }

    // optional int32 hitBlueDagonCount = 5;
    if (has_hitbluedagoncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitbluedagoncount());
    }

    // optional int32 hitGoldDagonBombCount = 6;
    if (has_hitgolddagonbombcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitgolddagonbombcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_fishlord_stat_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_fishlord_stat_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_fishlord_stat_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_fishlord_stat_result::MergeFrom(const packetw2c_fishlord_stat_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_maxcoin()) {
      set_maxcoin(from.maxcoin());
    }
    if (from.has_maxticket()) {
      set_maxticket(from.maxticket());
    }
    if (from.has_hitblackdagoncount()) {
      set_hitblackdagoncount(from.hitblackdagoncount());
    }
    if (from.has_hitbluedagoncount()) {
      set_hitbluedagoncount(from.hitbluedagoncount());
    }
    if (from.has_hitgolddagonbombcount()) {
      set_hitgolddagonbombcount(from.hitgolddagonbombcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_fishlord_stat_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_fishlord_stat_result::CopyFrom(const packetw2c_fishlord_stat_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_fishlord_stat_result::IsInitialized() const {

  return true;
}

void packetw2c_fishlord_stat_result::Swap(packetw2c_fishlord_stat_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(maxcoin_, other->maxcoin_);
    std::swap(maxticket_, other->maxticket_);
    std::swap(hitblackdagoncount_, other->hitblackdagoncount_);
    std::swap(hitbluedagoncount_, other->hitbluedagoncount_);
    std::swap(hitgolddagonbombcount_, other->hitgolddagonbombcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_fishlord_stat_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_fishlord_stat_result_descriptor_;
  metadata.reflection = packetw2c_fishlord_stat_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_dice_stat_result::kPacketIdFieldNumber;
const int packetw2c_dice_stat_result::kMaxCoinFieldNumber;
const int packetw2c_dice_stat_result::kMaxTicketFieldNumber;
const int packetw2c_dice_stat_result::kHitLeopardCountFieldNumber;
const int packetw2c_dice_stat_result::kMaxSuccessionCountFieldNumber;
#endif  // !_MSC_VER

packetw2c_dice_stat_result::packetw2c_dice_stat_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_dice_stat_result)
}

void packetw2c_dice_stat_result::InitAsDefaultInstance() {
}

packetw2c_dice_stat_result::packetw2c_dice_stat_result(const packetw2c_dice_stat_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_dice_stat_result)
}

void packetw2c_dice_stat_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7518;
  maxcoin_ = 0;
  maxticket_ = 0;
  hitleopardcount_ = 0;
  maxsuccessioncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_dice_stat_result::~packetw2c_dice_stat_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_dice_stat_result)
  SharedDtor();
}

void packetw2c_dice_stat_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_dice_stat_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_dice_stat_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_dice_stat_result_descriptor_;
}

const packetw2c_dice_stat_result& packetw2c_dice_stat_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_dice_stat_result* packetw2c_dice_stat_result::default_instance_ = NULL;

packetw2c_dice_stat_result* packetw2c_dice_stat_result::New() const {
  return new packetw2c_dice_stat_result;
}

void packetw2c_dice_stat_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_dice_stat_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(maxcoin_, maxsuccessioncount_);
    packet_id_ = 7518;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_dice_stat_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_dice_stat_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_dice_stat_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxCoin;
        break;
      }

      // optional int32 maxCoin = 2;
      case 2: {
        if (tag == 16) {
         parse_maxCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcoin_)));
          set_has_maxcoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxTicket;
        break;
      }

      // optional int32 maxTicket = 3;
      case 3: {
        if (tag == 24) {
         parse_maxTicket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxticket_)));
          set_has_maxticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hitLeopardCount;
        break;
      }

      // optional int32 hitLeopardCount = 4;
      case 4: {
        if (tag == 32) {
         parse_hitLeopardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitleopardcount_)));
          set_has_hitleopardcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxSuccessionCount;
        break;
      }

      // optional int32 maxSuccessionCount = 5;
      case 5: {
        if (tag == 40) {
         parse_maxSuccessionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxsuccessioncount_)));
          set_has_maxsuccessioncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_dice_stat_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_dice_stat_result)
  return false;
#undef DO_
}

void packetw2c_dice_stat_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_dice_stat_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_dice_stat_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 maxCoin = 2;
  if (has_maxcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxcoin(), output);
  }

  // optional int32 maxTicket = 3;
  if (has_maxticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxticket(), output);
  }

  // optional int32 hitLeopardCount = 4;
  if (has_hitleopardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hitleopardcount(), output);
  }

  // optional int32 maxSuccessionCount = 5;
  if (has_maxsuccessioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxsuccessioncount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_dice_stat_result)
}

::google::protobuf::uint8* packetw2c_dice_stat_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_dice_stat_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_dice_stat_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 maxCoin = 2;
  if (has_maxcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxcoin(), target);
  }

  // optional int32 maxTicket = 3;
  if (has_maxticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxticket(), target);
  }

  // optional int32 hitLeopardCount = 4;
  if (has_hitleopardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hitleopardcount(), target);
  }

  // optional int32 maxSuccessionCount = 5;
  if (has_maxsuccessioncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxsuccessioncount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_dice_stat_result)
  return target;
}

int packetw2c_dice_stat_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_dice_stat_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 maxCoin = 2;
    if (has_maxcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcoin());
    }

    // optional int32 maxTicket = 3;
    if (has_maxticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxticket());
    }

    // optional int32 hitLeopardCount = 4;
    if (has_hitleopardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitleopardcount());
    }

    // optional int32 maxSuccessionCount = 5;
    if (has_maxsuccessioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxsuccessioncount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_dice_stat_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_dice_stat_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_dice_stat_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_dice_stat_result::MergeFrom(const packetw2c_dice_stat_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_maxcoin()) {
      set_maxcoin(from.maxcoin());
    }
    if (from.has_maxticket()) {
      set_maxticket(from.maxticket());
    }
    if (from.has_hitleopardcount()) {
      set_hitleopardcount(from.hitleopardcount());
    }
    if (from.has_maxsuccessioncount()) {
      set_maxsuccessioncount(from.maxsuccessioncount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_dice_stat_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_dice_stat_result::CopyFrom(const packetw2c_dice_stat_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_dice_stat_result::IsInitialized() const {

  return true;
}

void packetw2c_dice_stat_result::Swap(packetw2c_dice_stat_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(maxcoin_, other->maxcoin_);
    std::swap(maxticket_, other->maxticket_);
    std::swap(hitleopardcount_, other->hitleopardcount_);
    std::swap(maxsuccessioncount_, other->maxsuccessioncount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_dice_stat_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_dice_stat_result_descriptor_;
  metadata.reflection = packetw2c_dice_stat_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_crocodile_stat_result::kPacketIdFieldNumber;
const int packetw2c_crocodile_stat_result::kMaxCoinFieldNumber;
const int packetw2c_crocodile_stat_result::kMaxTicketFieldNumber;
const int packetw2c_crocodile_stat_result::kHitWinningsCountFieldNumber;
const int packetw2c_crocodile_stat_result::kHitSpotlightCountFieldNumber;
const int packetw2c_crocodile_stat_result::kHitEveryoneHasAwardCountFieldNumber;
#endif  // !_MSC_VER

packetw2c_crocodile_stat_result::packetw2c_crocodile_stat_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_crocodile_stat_result)
}

void packetw2c_crocodile_stat_result::InitAsDefaultInstance() {
}

packetw2c_crocodile_stat_result::packetw2c_crocodile_stat_result(const packetw2c_crocodile_stat_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_crocodile_stat_result)
}

void packetw2c_crocodile_stat_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7519;
  maxcoin_ = 0;
  maxticket_ = 0;
  hitwinningscount_ = 0;
  hitspotlightcount_ = 0;
  hiteveryonehasawardcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_crocodile_stat_result::~packetw2c_crocodile_stat_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_crocodile_stat_result)
  SharedDtor();
}

void packetw2c_crocodile_stat_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_crocodile_stat_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_crocodile_stat_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_crocodile_stat_result_descriptor_;
}

const packetw2c_crocodile_stat_result& packetw2c_crocodile_stat_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_crocodile_stat_result* packetw2c_crocodile_stat_result::default_instance_ = NULL;

packetw2c_crocodile_stat_result* packetw2c_crocodile_stat_result::New() const {
  return new packetw2c_crocodile_stat_result;
}

void packetw2c_crocodile_stat_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_crocodile_stat_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(maxcoin_, hiteveryonehasawardcount_);
    packet_id_ = 7519;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_crocodile_stat_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_crocodile_stat_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_crocodile_stat_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxCoin;
        break;
      }

      // optional int32 maxCoin = 2;
      case 2: {
        if (tag == 16) {
         parse_maxCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcoin_)));
          set_has_maxcoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxTicket;
        break;
      }

      // optional int32 maxTicket = 3;
      case 3: {
        if (tag == 24) {
         parse_maxTicket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxticket_)));
          set_has_maxticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hitWinningsCount;
        break;
      }

      // optional int32 hitWinningsCount = 4;
      case 4: {
        if (tag == 32) {
         parse_hitWinningsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitwinningscount_)));
          set_has_hitwinningscount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hitSpotlightCount;
        break;
      }

      // optional int32 hitSpotlightCount = 5;
      case 5: {
        if (tag == 40) {
         parse_hitSpotlightCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitspotlightcount_)));
          set_has_hitspotlightcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hitEveryoneHasAwardCount;
        break;
      }

      // optional int32 hitEveryoneHasAwardCount = 6;
      case 6: {
        if (tag == 48) {
         parse_hitEveryoneHasAwardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hiteveryonehasawardcount_)));
          set_has_hiteveryonehasawardcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_crocodile_stat_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_crocodile_stat_result)
  return false;
#undef DO_
}

void packetw2c_crocodile_stat_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_crocodile_stat_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_crocodile_stat_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 maxCoin = 2;
  if (has_maxcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxcoin(), output);
  }

  // optional int32 maxTicket = 3;
  if (has_maxticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxticket(), output);
  }

  // optional int32 hitWinningsCount = 4;
  if (has_hitwinningscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hitwinningscount(), output);
  }

  // optional int32 hitSpotlightCount = 5;
  if (has_hitspotlightcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hitspotlightcount(), output);
  }

  // optional int32 hitEveryoneHasAwardCount = 6;
  if (has_hiteveryonehasawardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hiteveryonehasawardcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_crocodile_stat_result)
}

::google::protobuf::uint8* packetw2c_crocodile_stat_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_crocodile_stat_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_crocodile_stat_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 maxCoin = 2;
  if (has_maxcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxcoin(), target);
  }

  // optional int32 maxTicket = 3;
  if (has_maxticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxticket(), target);
  }

  // optional int32 hitWinningsCount = 4;
  if (has_hitwinningscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hitwinningscount(), target);
  }

  // optional int32 hitSpotlightCount = 5;
  if (has_hitspotlightcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hitspotlightcount(), target);
  }

  // optional int32 hitEveryoneHasAwardCount = 6;
  if (has_hiteveryonehasawardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hiteveryonehasawardcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_crocodile_stat_result)
  return target;
}

int packetw2c_crocodile_stat_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_crocodile_stat_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 maxCoin = 2;
    if (has_maxcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcoin());
    }

    // optional int32 maxTicket = 3;
    if (has_maxticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxticket());
    }

    // optional int32 hitWinningsCount = 4;
    if (has_hitwinningscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitwinningscount());
    }

    // optional int32 hitSpotlightCount = 5;
    if (has_hitspotlightcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitspotlightcount());
    }

    // optional int32 hitEveryoneHasAwardCount = 6;
    if (has_hiteveryonehasawardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hiteveryonehasawardcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_crocodile_stat_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_crocodile_stat_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_crocodile_stat_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_crocodile_stat_result::MergeFrom(const packetw2c_crocodile_stat_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_maxcoin()) {
      set_maxcoin(from.maxcoin());
    }
    if (from.has_maxticket()) {
      set_maxticket(from.maxticket());
    }
    if (from.has_hitwinningscount()) {
      set_hitwinningscount(from.hitwinningscount());
    }
    if (from.has_hitspotlightcount()) {
      set_hitspotlightcount(from.hitspotlightcount());
    }
    if (from.has_hiteveryonehasawardcount()) {
      set_hiteveryonehasawardcount(from.hiteveryonehasawardcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_crocodile_stat_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_crocodile_stat_result::CopyFrom(const packetw2c_crocodile_stat_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_crocodile_stat_result::IsInitialized() const {

  return true;
}

void packetw2c_crocodile_stat_result::Swap(packetw2c_crocodile_stat_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(maxcoin_, other->maxcoin_);
    std::swap(maxticket_, other->maxticket_);
    std::swap(hitwinningscount_, other->hitwinningscount_);
    std::swap(hitspotlightcount_, other->hitspotlightcount_);
    std::swap(hiteveryonehasawardcount_, other->hiteveryonehasawardcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_crocodile_stat_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_crocodile_stat_result_descriptor_;
  metadata.reflection = packetw2c_crocodile_stat_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_self_record::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_self_record::packetc2w_req_self_record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_self_record)
}

void packetc2w_req_self_record::InitAsDefaultInstance() {
}

packetc2w_req_self_record::packetc2w_req_self_record(const packetc2w_req_self_record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_self_record)
}

void packetc2w_req_self_record::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5033;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_self_record::~packetc2w_req_self_record() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_self_record)
  SharedDtor();
}

void packetc2w_req_self_record::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_self_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_self_record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_self_record_descriptor_;
}

const packetc2w_req_self_record& packetc2w_req_self_record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_req_self_record* packetc2w_req_self_record::default_instance_ = NULL;

packetc2w_req_self_record* packetc2w_req_self_record::New() const {
  return new packetc2w_req_self_record;
}

void packetc2w_req_self_record::Clear() {
  packet_id_ = 5033;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_self_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_self_record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_self_record];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_self_record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_self_record)
  return false;
#undef DO_
}

void packetc2w_req_self_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_self_record)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_self_record];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_self_record)
}

::google::protobuf::uint8* packetc2w_req_self_record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_self_record)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_self_record];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_self_record)
  return target;
}

int packetc2w_req_self_record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_self_record];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_self_record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_self_record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_self_record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_self_record::MergeFrom(const packetc2w_req_self_record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_self_record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_self_record::CopyFrom(const packetc2w_req_self_record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_self_record::IsInitialized() const {

  return true;
}

void packetc2w_req_self_record::Swap(packetc2w_req_self_record* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_self_record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_self_record_descriptor_;
  metadata.reflection = packetc2w_req_self_record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_self_record_result::kPacketIdFieldNumber;
const int packetw2c_req_self_record_result::kMaxCoinFieldNumber;
const int packetw2c_req_self_record_result::kMaxTicketFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_self_record_result::packetw2c_req_self_record_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_req_self_record_result)
}

void packetw2c_req_self_record_result::InitAsDefaultInstance() {
}

packetw2c_req_self_record_result::packetw2c_req_self_record_result(const packetw2c_req_self_record_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_req_self_record_result)
}

void packetw2c_req_self_record_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7535;
  maxcoin_ = 0;
  maxticket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_self_record_result::~packetw2c_req_self_record_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_req_self_record_result)
  SharedDtor();
}

void packetw2c_req_self_record_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_self_record_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_self_record_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_self_record_result_descriptor_;
}

const packetw2c_req_self_record_result& packetw2c_req_self_record_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_req_self_record_result* packetw2c_req_self_record_result::default_instance_ = NULL;

packetw2c_req_self_record_result* packetw2c_req_self_record_result::New() const {
  return new packetw2c_req_self_record_result;
}

void packetw2c_req_self_record_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<packetw2c_req_self_record_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(maxcoin_, maxticket_);
    packet_id_ = 7535;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_self_record_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_req_self_record_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_self_record_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxCoin;
        break;
      }

      // optional int32 maxCoin = 2;
      case 2: {
        if (tag == 16) {
         parse_maxCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcoin_)));
          set_has_maxcoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxTicket;
        break;
      }

      // optional int32 maxTicket = 3;
      case 3: {
        if (tag == 24) {
         parse_maxTicket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxticket_)));
          set_has_maxticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_req_self_record_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_req_self_record_result)
  return false;
#undef DO_
}

void packetw2c_req_self_record_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_req_self_record_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_self_record_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 maxCoin = 2;
  if (has_maxcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxcoin(), output);
  }

  // optional int32 maxTicket = 3;
  if (has_maxticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_req_self_record_result)
}

::google::protobuf::uint8* packetw2c_req_self_record_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_req_self_record_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_self_record_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 maxCoin = 2;
  if (has_maxcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxcoin(), target);
  }

  // optional int32 maxTicket = 3;
  if (has_maxticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_req_self_record_result)
  return target;
}

int packetw2c_req_self_record_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_self_record_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 maxCoin = 2;
    if (has_maxcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcoin());
    }

    // optional int32 maxTicket = 3;
    if (has_maxticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxticket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_self_record_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_self_record_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_self_record_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_self_record_result::MergeFrom(const packetw2c_req_self_record_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_maxcoin()) {
      set_maxcoin(from.maxcoin());
    }
    if (from.has_maxticket()) {
      set_maxticket(from.maxticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_self_record_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_self_record_result::CopyFrom(const packetw2c_req_self_record_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_self_record_result::IsInitialized() const {

  return true;
}

void packetw2c_req_self_record_result::Swap(packetw2c_req_self_record_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(maxcoin_, other->maxcoin_);
    std::swap(maxticket_, other->maxticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_self_record_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_self_record_result_descriptor_;
  metadata.reflection = packetw2c_req_self_record_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_finish_one_new_guild::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_finish_one_new_guild::packetc2w_finish_one_new_guild()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_finish_one_new_guild)
}

void packetc2w_finish_one_new_guild::InitAsDefaultInstance() {
}

packetc2w_finish_one_new_guild::packetc2w_finish_one_new_guild(const packetc2w_finish_one_new_guild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_finish_one_new_guild)
}

void packetc2w_finish_one_new_guild::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5042;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_finish_one_new_guild::~packetc2w_finish_one_new_guild() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_finish_one_new_guild)
  SharedDtor();
}

void packetc2w_finish_one_new_guild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_finish_one_new_guild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_finish_one_new_guild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_finish_one_new_guild_descriptor_;
}

const packetc2w_finish_one_new_guild& packetc2w_finish_one_new_guild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_finish_one_new_guild* packetc2w_finish_one_new_guild::default_instance_ = NULL;

packetc2w_finish_one_new_guild* packetc2w_finish_one_new_guild::New() const {
  return new packetc2w_finish_one_new_guild;
}

void packetc2w_finish_one_new_guild::Clear() {
  packet_id_ = 5042;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_finish_one_new_guild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_finish_one_new_guild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_finish_one_new_guild];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_finish_one_new_guild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_finish_one_new_guild)
  return false;
#undef DO_
}

void packetc2w_finish_one_new_guild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_finish_one_new_guild)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_finish_one_new_guild];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_finish_one_new_guild)
}

::google::protobuf::uint8* packetc2w_finish_one_new_guild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_finish_one_new_guild)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_finish_one_new_guild];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_finish_one_new_guild)
  return target;
}

int packetc2w_finish_one_new_guild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_finish_one_new_guild];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_finish_one_new_guild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_finish_one_new_guild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_finish_one_new_guild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_finish_one_new_guild::MergeFrom(const packetc2w_finish_one_new_guild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_finish_one_new_guild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_finish_one_new_guild::CopyFrom(const packetc2w_finish_one_new_guild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_finish_one_new_guild::IsInitialized() const {

  return true;
}

void packetc2w_finish_one_new_guild::Swap(packetc2w_finish_one_new_guild* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_finish_one_new_guild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_finish_one_new_guild_descriptor_;
  metadata.reflection = packetc2w_finish_one_new_guild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_finish_one_new_guild_result::kPacketIdFieldNumber;
#endif  // !_MSC_VER

packetw2c_finish_one_new_guild_result::packetw2c_finish_one_new_guild_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_finish_one_new_guild_result)
}

void packetw2c_finish_one_new_guild_result::InitAsDefaultInstance() {
}

packetw2c_finish_one_new_guild_result::packetw2c_finish_one_new_guild_result(const packetw2c_finish_one_new_guild_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_finish_one_new_guild_result)
}

void packetw2c_finish_one_new_guild_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7545;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_finish_one_new_guild_result::~packetw2c_finish_one_new_guild_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_finish_one_new_guild_result)
  SharedDtor();
}

void packetw2c_finish_one_new_guild_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_finish_one_new_guild_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_finish_one_new_guild_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_finish_one_new_guild_result_descriptor_;
}

const packetw2c_finish_one_new_guild_result& packetw2c_finish_one_new_guild_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_finish_one_new_guild_result* packetw2c_finish_one_new_guild_result::default_instance_ = NULL;

packetw2c_finish_one_new_guild_result* packetw2c_finish_one_new_guild_result::New() const {
  return new packetw2c_finish_one_new_guild_result;
}

void packetw2c_finish_one_new_guild_result::Clear() {
  packet_id_ = 7545;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_finish_one_new_guild_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_finish_one_new_guild_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_finish_one_new_guild_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_finish_one_new_guild_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_finish_one_new_guild_result)
  return false;
#undef DO_
}

void packetw2c_finish_one_new_guild_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_finish_one_new_guild_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_finish_one_new_guild_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_finish_one_new_guild_result)
}

::google::protobuf::uint8* packetw2c_finish_one_new_guild_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_finish_one_new_guild_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_finish_one_new_guild_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_finish_one_new_guild_result)
  return target;
}

int packetw2c_finish_one_new_guild_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_finish_one_new_guild_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_finish_one_new_guild_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_finish_one_new_guild_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_finish_one_new_guild_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_finish_one_new_guild_result::MergeFrom(const packetw2c_finish_one_new_guild_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_finish_one_new_guild_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_finish_one_new_guild_result::CopyFrom(const packetw2c_finish_one_new_guild_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_finish_one_new_guild_result::IsInitialized() const {

  return true;
}

void packetw2c_finish_one_new_guild_result::Swap(packetw2c_finish_one_new_guild_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_finish_one_new_guild_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_finish_one_new_guild_result_descriptor_;
  metadata.reflection = packetw2c_finish_one_new_guild_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_send_gift_log::kPacketIdFieldNumber;
const int packetc2w_req_send_gift_log::kLastTimeFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_send_gift_log::packetc2w_req_send_gift_log()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_send_gift_log)
}

void packetc2w_req_send_gift_log::InitAsDefaultInstance() {
}

packetc2w_req_send_gift_log::packetc2w_req_send_gift_log(const packetc2w_req_send_gift_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_send_gift_log)
}

void packetc2w_req_send_gift_log::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5043;
  lasttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_send_gift_log::~packetc2w_req_send_gift_log() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_send_gift_log)
  SharedDtor();
}

void packetc2w_req_send_gift_log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_send_gift_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_send_gift_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_send_gift_log_descriptor_;
}

const packetc2w_req_send_gift_log& packetc2w_req_send_gift_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_req_send_gift_log* packetc2w_req_send_gift_log::default_instance_ = NULL;

packetc2w_req_send_gift_log* packetc2w_req_send_gift_log::New() const {
  return new packetc2w_req_send_gift_log;
}

void packetc2w_req_send_gift_log::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5043;
    lasttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_send_gift_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_send_gift_log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_send_gift_log];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lastTime;
        break;
      }

      // optional int32 lastTime = 2;
      case 2: {
        if (tag == 16) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_send_gift_log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_send_gift_log)
  return false;
#undef DO_
}

void packetc2w_req_send_gift_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_send_gift_log)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_send_gift_log];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_send_gift_log)
}

::google::protobuf::uint8* packetc2w_req_send_gift_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_send_gift_log)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_send_gift_log];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_send_gift_log)
  return target;
}

int packetc2w_req_send_gift_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_send_gift_log];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 lastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_send_gift_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_send_gift_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_send_gift_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_send_gift_log::MergeFrom(const packetc2w_req_send_gift_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_send_gift_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_send_gift_log::CopyFrom(const packetc2w_req_send_gift_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_send_gift_log::IsInitialized() const {

  return true;
}

void packetc2w_req_send_gift_log::Swap(packetc2w_req_send_gift_log* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_send_gift_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_send_gift_log_descriptor_;
  metadata.reflection = packetc2w_req_send_gift_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendGiftLogInfo::kSendTimeFieldNumber;
const int SendGiftLogInfo::kFirendIdFieldNumber;
const int SendGiftLogInfo::kFriendNickNameFieldNumber;
const int SendGiftLogInfo::kGiftIdFieldNumber;
const int SendGiftLogInfo::kCountFieldNumber;
const int SendGiftLogInfo::kSendgoldFieldNumber;
const int SendGiftLogInfo::kMailidFieldNumber;
#endif  // !_MSC_VER

SendGiftLogInfo::SendGiftLogInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.SendGiftLogInfo)
}

void SendGiftLogInfo::InitAsDefaultInstance() {
}

SendGiftLogInfo::SendGiftLogInfo(const SendGiftLogInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.SendGiftLogInfo)
}

void SendGiftLogInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sendtime_ = 0;
  firendid_ = 0;
  friendnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  giftid_ = 0;
  count_ = 0;
  sendgold_ = false;
  mailid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendGiftLogInfo::~SendGiftLogInfo() {
  // @@protoc_insertion_point(destructor:client2world_protocols.SendGiftLogInfo)
  SharedDtor();
}

void SendGiftLogInfo::SharedDtor() {
  if (friendnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete friendnickname_;
  }
  if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mailid_;
  }
  if (this != default_instance_) {
  }
}

void SendGiftLogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendGiftLogInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendGiftLogInfo_descriptor_;
}

const SendGiftLogInfo& SendGiftLogInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

SendGiftLogInfo* SendGiftLogInfo::default_instance_ = NULL;

SendGiftLogInfo* SendGiftLogInfo::New() const {
  return new SendGiftLogInfo;
}

void SendGiftLogInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendGiftLogInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(sendtime_, firendid_);
    ZR_(giftid_, count_);
    if (has_friendnickname()) {
      if (friendnickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        friendnickname_->clear();
      }
    }
    sendgold_ = false;
    if (has_mailid()) {
      if (mailid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mailid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendGiftLogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.SendGiftLogInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sendTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_firendId;
        break;
      }

      // optional int32 firendId = 2;
      case 2: {
        if (tag == 16) {
         parse_firendId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firendid_)));
          set_has_firendid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_friendNickName;
        break;
      }

      // optional string friendNickName = 3;
      case 3: {
        if (tag == 26) {
         parse_friendNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friendnickname().data(), this->friendnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "friendnickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_giftId;
        break;
      }

      // optional int32 giftId = 4;
      case 4: {
        if (tag == 32) {
         parse_giftId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional int32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sendgold;
        break;
      }

      // optional bool sendgold = 6;
      case 6: {
        if (tag == 48) {
         parse_sendgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sendgold_)));
          set_has_sendgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mailid;
        break;
      }

      // optional string mailid = 7;
      case 7: {
        if (tag == 58) {
         parse_mailid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mailid().data(), this->mailid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mailid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.SendGiftLogInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.SendGiftLogInfo)
  return false;
#undef DO_
}

void SendGiftLogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.SendGiftLogInfo)
  // optional int32 sendTime = 1;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sendtime(), output);
  }

  // optional int32 firendId = 2;
  if (has_firendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->firendid(), output);
  }

  // optional string friendNickName = 3;
  if (has_friendnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendnickname().data(), this->friendnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "friendnickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->friendnickname(), output);
  }

  // optional int32 giftId = 4;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->giftid(), output);
  }

  // optional int32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  // optional bool sendgold = 6;
  if (has_sendgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sendgold(), output);
  }

  // optional string mailid = 7;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.SendGiftLogInfo)
}

::google::protobuf::uint8* SendGiftLogInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.SendGiftLogInfo)
  // optional int32 sendTime = 1;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sendtime(), target);
  }

  // optional int32 firendId = 2;
  if (has_firendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->firendid(), target);
  }

  // optional string friendNickName = 3;
  if (has_friendnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendnickname().data(), this->friendnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "friendnickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->friendnickname(), target);
  }

  // optional int32 giftId = 4;
  if (has_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->giftid(), target);
  }

  // optional int32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  // optional bool sendgold = 6;
  if (has_sendgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->sendgold(), target);
  }

  // optional string mailid = 7;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mailid().data(), this->mailid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mailid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.SendGiftLogInfo)
  return target;
}

int SendGiftLogInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sendTime = 1;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendtime());
    }

    // optional int32 firendId = 2;
    if (has_firendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firendid());
    }

    // optional string friendNickName = 3;
    if (has_friendnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendnickname());
    }

    // optional int32 giftId = 4;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftid());
    }

    // optional int32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional bool sendgold = 6;
    if (has_sendgold()) {
      total_size += 1 + 1;
    }

    // optional string mailid = 7;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendGiftLogInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendGiftLogInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendGiftLogInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendGiftLogInfo::MergeFrom(const SendGiftLogInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_firendid()) {
      set_firendid(from.firendid());
    }
    if (from.has_friendnickname()) {
      set_friendnickname(from.friendnickname());
    }
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_sendgold()) {
      set_sendgold(from.sendgold());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendGiftLogInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendGiftLogInfo::CopyFrom(const SendGiftLogInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendGiftLogInfo::IsInitialized() const {

  return true;
}

void SendGiftLogInfo::Swap(SendGiftLogInfo* other) {
  if (other != this) {
    std::swap(sendtime_, other->sendtime_);
    std::swap(firendid_, other->firendid_);
    std::swap(friendnickname_, other->friendnickname_);
    std::swap(giftid_, other->giftid_);
    std::swap(count_, other->count_);
    std::swap(sendgold_, other->sendgold_);
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendGiftLogInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendGiftLogInfo_descriptor_;
  metadata.reflection = SendGiftLogInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_send_gift_log_result::kPacketIdFieldNumber;
const int packetw2c_req_send_gift_log_result::kLogListFieldNumber;
const int packetw2c_req_send_gift_log_result::kLastTimeFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_send_gift_log_result::packetw2c_req_send_gift_log_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_req_send_gift_log_result)
}

void packetw2c_req_send_gift_log_result::InitAsDefaultInstance() {
}

packetw2c_req_send_gift_log_result::packetw2c_req_send_gift_log_result(const packetw2c_req_send_gift_log_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_req_send_gift_log_result)
}

void packetw2c_req_send_gift_log_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7547;
  lasttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_send_gift_log_result::~packetw2c_req_send_gift_log_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_req_send_gift_log_result)
  SharedDtor();
}

void packetw2c_req_send_gift_log_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_send_gift_log_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_send_gift_log_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_send_gift_log_result_descriptor_;
}

const packetw2c_req_send_gift_log_result& packetw2c_req_send_gift_log_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_req_send_gift_log_result* packetw2c_req_send_gift_log_result::default_instance_ = NULL;

packetw2c_req_send_gift_log_result* packetw2c_req_send_gift_log_result::New() const {
  return new packetw2c_req_send_gift_log_result;
}

void packetw2c_req_send_gift_log_result::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    packet_id_ = 7547;
    lasttime_ = 0;
  }
  loglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_send_gift_log_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_req_send_gift_log_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_send_gift_log_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_logList;
        break;
      }

      // repeated .client2world_protocols.SendGiftLogInfo logList = 2;
      case 2: {
        if (tag == 18) {
         parse_logList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_logList;
        if (input->ExpectTag(24)) goto parse_lastTime;
        break;
      }

      // optional int32 lastTime = 3;
      case 3: {
        if (tag == 24) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_req_send_gift_log_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_req_send_gift_log_result)
  return false;
#undef DO_
}

void packetw2c_req_send_gift_log_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_req_send_gift_log_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_send_gift_log_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.SendGiftLogInfo logList = 2;
  for (int i = 0; i < this->loglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loglist(i), output);
  }

  // optional int32 lastTime = 3;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_req_send_gift_log_result)
}

::google::protobuf::uint8* packetw2c_req_send_gift_log_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_req_send_gift_log_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_send_gift_log_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.SendGiftLogInfo logList = 2;
  for (int i = 0; i < this->loglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loglist(i), target);
  }

  // optional int32 lastTime = 3;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_req_send_gift_log_result)
  return target;
}

int packetw2c_req_send_gift_log_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_send_gift_log_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 lastTime = 3;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

  }
  // repeated .client2world_protocols.SendGiftLogInfo logList = 2;
  total_size += 1 * this->loglist_size();
  for (int i = 0; i < this->loglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_send_gift_log_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_send_gift_log_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_send_gift_log_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_send_gift_log_result::MergeFrom(const packetw2c_req_send_gift_log_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  loglist_.MergeFrom(from.loglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_send_gift_log_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_send_gift_log_result::CopyFrom(const packetw2c_req_send_gift_log_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_send_gift_log_result::IsInitialized() const {

  return true;
}

void packetw2c_req_send_gift_log_result::Swap(packetw2c_req_send_gift_log_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    loglist_.Swap(&other->loglist_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_send_gift_log_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_send_gift_log_result_descriptor_;
  metadata.reflection = packetw2c_req_send_gift_log_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_req_safebox_log::kPacketIdFieldNumber;
const int packetc2w_req_safebox_log::kLastTimeFieldNumber;
#endif  // !_MSC_VER

packetc2w_req_safebox_log::packetc2w_req_safebox_log()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_req_safebox_log)
}

void packetc2w_req_safebox_log::InitAsDefaultInstance() {
}

packetc2w_req_safebox_log::packetc2w_req_safebox_log(const packetc2w_req_safebox_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_req_safebox_log)
}

void packetc2w_req_safebox_log::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5067;
  lasttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_req_safebox_log::~packetc2w_req_safebox_log() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_req_safebox_log)
  SharedDtor();
}

void packetc2w_req_safebox_log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_req_safebox_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_req_safebox_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_req_safebox_log_descriptor_;
}

const packetc2w_req_safebox_log& packetc2w_req_safebox_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_req_safebox_log* packetc2w_req_safebox_log::default_instance_ = NULL;

packetc2w_req_safebox_log* packetc2w_req_safebox_log::New() const {
  return new packetc2w_req_safebox_log;
}

void packetc2w_req_safebox_log::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5067;
    lasttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_req_safebox_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_req_safebox_log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_safebox_log];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lastTime;
        break;
      }

      // optional int32 lastTime = 2;
      case 2: {
        if (tag == 16) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_req_safebox_log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_req_safebox_log)
  return false;
#undef DO_
}

void packetc2w_req_safebox_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_req_safebox_log)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_safebox_log];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_req_safebox_log)
}

::google::protobuf::uint8* packetc2w_req_safebox_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_req_safebox_log)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_safebox_log];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_req_safebox_log)
  return target;
}

int packetc2w_req_safebox_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_req_safebox_log];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 lastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_req_safebox_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_req_safebox_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_req_safebox_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_req_safebox_log::MergeFrom(const packetc2w_req_safebox_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_req_safebox_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_req_safebox_log::CopyFrom(const packetc2w_req_safebox_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_req_safebox_log::IsInitialized() const {

  return true;
}

void packetc2w_req_safebox_log::Swap(packetc2w_req_safebox_log* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_req_safebox_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_req_safebox_log_descriptor_;
  metadata.reflection = packetc2w_req_safebox_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SafeBoxLogInfo::kTimeFieldNumber;
const int SafeBoxLogInfo::kGoldFieldNumber;
const int SafeBoxLogInfo::kPlayerGoldFieldNumber;
#endif  // !_MSC_VER

SafeBoxLogInfo::SafeBoxLogInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.SafeBoxLogInfo)
}

void SafeBoxLogInfo::InitAsDefaultInstance() {
}

SafeBoxLogInfo::SafeBoxLogInfo(const SafeBoxLogInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.SafeBoxLogInfo)
}

void SafeBoxLogInfo::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  gold_ = GOOGLE_LONGLONG(0);
  player_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SafeBoxLogInfo::~SafeBoxLogInfo() {
  // @@protoc_insertion_point(destructor:client2world_protocols.SafeBoxLogInfo)
  SharedDtor();
}

void SafeBoxLogInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SafeBoxLogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SafeBoxLogInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafeBoxLogInfo_descriptor_;
}

const SafeBoxLogInfo& SafeBoxLogInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

SafeBoxLogInfo* SafeBoxLogInfo::default_instance_ = NULL;

SafeBoxLogInfo* SafeBoxLogInfo::New() const {
  return new SafeBoxLogInfo;
}

void SafeBoxLogInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SafeBoxLogInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gold_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SafeBoxLogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.SafeBoxLogInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional int64 gold = 2;
      case 2: {
        if (tag == 16) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_gold;
        break;
      }

      // optional int64 player_gold = 3;
      case 3: {
        if (tag == 24) {
         parse_player_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_gold_)));
          set_has_player_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.SafeBoxLogInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.SafeBoxLogInfo)
  return false;
#undef DO_
}

void SafeBoxLogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.SafeBoxLogInfo)
  // optional int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  // optional int64 player_gold = 3;
  if (has_player_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->player_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.SafeBoxLogInfo)
}

::google::protobuf::uint8* SafeBoxLogInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.SafeBoxLogInfo)
  // optional int32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  // optional int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  // optional int64 player_gold = 3;
  if (has_player_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->player_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.SafeBoxLogInfo)
  return target;
}

int SafeBoxLogInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int64 player_gold = 3;
    if (has_player_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SafeBoxLogInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SafeBoxLogInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SafeBoxLogInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SafeBoxLogInfo::MergeFrom(const SafeBoxLogInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_player_gold()) {
      set_player_gold(from.player_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SafeBoxLogInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafeBoxLogInfo::CopyFrom(const SafeBoxLogInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafeBoxLogInfo::IsInitialized() const {

  return true;
}

void SafeBoxLogInfo::Swap(SafeBoxLogInfo* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(gold_, other->gold_);
    std::swap(player_gold_, other->player_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SafeBoxLogInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SafeBoxLogInfo_descriptor_;
  metadata.reflection = SafeBoxLogInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_req_safebox_log_result::kPacketIdFieldNumber;
const int packetw2c_req_safebox_log_result::kLogListFieldNumber;
const int packetw2c_req_safebox_log_result::kLastTimeFieldNumber;
#endif  // !_MSC_VER

packetw2c_req_safebox_log_result::packetw2c_req_safebox_log_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_req_safebox_log_result)
}

void packetw2c_req_safebox_log_result::InitAsDefaultInstance() {
}

packetw2c_req_safebox_log_result::packetw2c_req_safebox_log_result(const packetw2c_req_safebox_log_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_req_safebox_log_result)
}

void packetw2c_req_safebox_log_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7573;
  lasttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_req_safebox_log_result::~packetw2c_req_safebox_log_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_req_safebox_log_result)
  SharedDtor();
}

void packetw2c_req_safebox_log_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_req_safebox_log_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_req_safebox_log_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_req_safebox_log_result_descriptor_;
}

const packetw2c_req_safebox_log_result& packetw2c_req_safebox_log_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_req_safebox_log_result* packetw2c_req_safebox_log_result::default_instance_ = NULL;

packetw2c_req_safebox_log_result* packetw2c_req_safebox_log_result::New() const {
  return new packetw2c_req_safebox_log_result;
}

void packetw2c_req_safebox_log_result::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    packet_id_ = 7573;
    lasttime_ = 0;
  }
  loglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_req_safebox_log_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_req_safebox_log_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_safebox_log_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_logList;
        break;
      }

      // repeated .client2world_protocols.SafeBoxLogInfo logList = 2;
      case 2: {
        if (tag == 18) {
         parse_logList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_logList;
        if (input->ExpectTag(24)) goto parse_lastTime;
        break;
      }

      // optional int32 lastTime = 3;
      case 3: {
        if (tag == 24) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_req_safebox_log_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_req_safebox_log_result)
  return false;
#undef DO_
}

void packetw2c_req_safebox_log_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_req_safebox_log_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_safebox_log_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // repeated .client2world_protocols.SafeBoxLogInfo logList = 2;
  for (int i = 0; i < this->loglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loglist(i), output);
  }

  // optional int32 lastTime = 3;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_req_safebox_log_result)
}

::google::protobuf::uint8* packetw2c_req_safebox_log_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_req_safebox_log_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_safebox_log_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // repeated .client2world_protocols.SafeBoxLogInfo logList = 2;
  for (int i = 0; i < this->loglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loglist(i), target);
  }

  // optional int32 lastTime = 3;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_req_safebox_log_result)
  return target;
}

int packetw2c_req_safebox_log_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_req_safebox_log_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 lastTime = 3;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

  }
  // repeated .client2world_protocols.SafeBoxLogInfo logList = 2;
  total_size += 1 * this->loglist_size();
  for (int i = 0; i < this->loglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_req_safebox_log_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_req_safebox_log_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_req_safebox_log_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_req_safebox_log_result::MergeFrom(const packetw2c_req_safebox_log_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  loglist_.MergeFrom(from.loglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_req_safebox_log_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_req_safebox_log_result::CopyFrom(const packetw2c_req_safebox_log_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_req_safebox_log_result::IsInitialized() const {

  return true;
}

void packetw2c_req_safebox_log_result::Swap(packetw2c_req_safebox_log_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    loglist_.Swap(&other->loglist_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_req_safebox_log_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_req_safebox_log_result_descriptor_;
  metadata.reflection = packetw2c_req_safebox_log_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetc2w_inform_playerhead::kPacketIdFieldNumber;
const int packetc2w_inform_playerhead::kInformDstPlayerIdFieldNumber;
#endif  // !_MSC_VER

packetc2w_inform_playerhead::packetc2w_inform_playerhead()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetc2w_inform_playerhead)
}

void packetc2w_inform_playerhead::InitAsDefaultInstance() {
}

packetc2w_inform_playerhead::packetc2w_inform_playerhead(const packetc2w_inform_playerhead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetc2w_inform_playerhead)
}

void packetc2w_inform_playerhead::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 5063;
  informdstplayerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetc2w_inform_playerhead::~packetc2w_inform_playerhead() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetc2w_inform_playerhead)
  SharedDtor();
}

void packetc2w_inform_playerhead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetc2w_inform_playerhead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetc2w_inform_playerhead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetc2w_inform_playerhead_descriptor_;
}

const packetc2w_inform_playerhead& packetc2w_inform_playerhead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetc2w_inform_playerhead* packetc2w_inform_playerhead::default_instance_ = NULL;

packetc2w_inform_playerhead* packetc2w_inform_playerhead::New() const {
  return new packetc2w_inform_playerhead;
}

void packetc2w_inform_playerhead::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 5063;
    informdstplayerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetc2w_inform_playerhead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetc2w_inform_playerhead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_inform_playerhead];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_informDstPlayerId;
        break;
      }

      // optional int32 informDstPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_informDstPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &informdstplayerid_)));
          set_has_informdstplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetc2w_inform_playerhead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetc2w_inform_playerhead)
  return false;
#undef DO_
}

void packetc2w_inform_playerhead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetc2w_inform_playerhead)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_inform_playerhead];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 informDstPlayerId = 2;
  if (has_informdstplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->informdstplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetc2w_inform_playerhead)
}

::google::protobuf::uint8* packetc2w_inform_playerhead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetc2w_inform_playerhead)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_inform_playerhead];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 informDstPlayerId = 2;
  if (has_informdstplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->informdstplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetc2w_inform_playerhead)
  return target;
}

int packetc2w_inform_playerhead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_c2w_inform_playerhead];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 informDstPlayerId = 2;
    if (has_informdstplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->informdstplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetc2w_inform_playerhead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetc2w_inform_playerhead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetc2w_inform_playerhead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetc2w_inform_playerhead::MergeFrom(const packetc2w_inform_playerhead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_informdstplayerid()) {
      set_informdstplayerid(from.informdstplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetc2w_inform_playerhead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetc2w_inform_playerhead::CopyFrom(const packetc2w_inform_playerhead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetc2w_inform_playerhead::IsInitialized() const {

  return true;
}

void packetc2w_inform_playerhead::Swap(packetc2w_inform_playerhead* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(informdstplayerid_, other->informdstplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetc2w_inform_playerhead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetc2w_inform_playerhead_descriptor_;
  metadata.reflection = packetc2w_inform_playerhead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int packetw2c_inform_playerhead_result::kPacketIdFieldNumber;
const int packetw2c_inform_playerhead_result::kResultFieldNumber;
#endif  // !_MSC_VER

packetw2c_inform_playerhead_result::packetw2c_inform_playerhead_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:client2world_protocols.packetw2c_inform_playerhead_result)
}

void packetw2c_inform_playerhead_result::InitAsDefaultInstance() {
}

packetw2c_inform_playerhead_result::packetw2c_inform_playerhead_result(const packetw2c_inform_playerhead_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:client2world_protocols.packetw2c_inform_playerhead_result)
}

void packetw2c_inform_playerhead_result::SharedCtor() {
  _cached_size_ = 0;
  packet_id_ = 7567;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packetw2c_inform_playerhead_result::~packetw2c_inform_playerhead_result() {
  // @@protoc_insertion_point(destructor:client2world_protocols.packetw2c_inform_playerhead_result)
  SharedDtor();
}

void packetw2c_inform_playerhead_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void packetw2c_inform_playerhead_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packetw2c_inform_playerhead_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packetw2c_inform_playerhead_result_descriptor_;
}

const packetw2c_inform_playerhead_result& packetw2c_inform_playerhead_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client2world_5fplayer_5fproperty_2eproto();
  return *default_instance_;
}

packetw2c_inform_playerhead_result* packetw2c_inform_playerhead_result::default_instance_ = NULL;

packetw2c_inform_playerhead_result* packetw2c_inform_playerhead_result::New() const {
  return new packetw2c_inform_playerhead_result;
}

void packetw2c_inform_playerhead_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    packet_id_ = 7567;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packetw2c_inform_playerhead_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client2world_protocols.packetw2c_inform_playerhead_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_inform_playerhead_result];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::client2world_protocols::e_server_msg_type_IsValid(value)) {
            set_packet_id(static_cast< ::client2world_protocols::e_server_msg_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client2world_protocols.packetw2c_inform_playerhead_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client2world_protocols.packetw2c_inform_playerhead_result)
  return false;
#undef DO_
}

void packetw2c_inform_playerhead_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client2world_protocols.packetw2c_inform_playerhead_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_inform_playerhead_result];
  if (has_packet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->packet_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:client2world_protocols.packetw2c_inform_playerhead_result)
}

::google::protobuf::uint8* packetw2c_inform_playerhead_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:client2world_protocols.packetw2c_inform_playerhead_result)
  // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_inform_playerhead_result];
  if (has_packet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->packet_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client2world_protocols.packetw2c_inform_playerhead_result)
  return target;
}

int packetw2c_inform_playerhead_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .client2world_protocols.e_server_msg_type packet_id = 1 [default = e_mst_w2c_inform_playerhead_result];
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packetw2c_inform_playerhead_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packetw2c_inform_playerhead_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packetw2c_inform_playerhead_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packetw2c_inform_playerhead_result::MergeFrom(const packetw2c_inform_playerhead_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_id()) {
      set_packet_id(from.packet_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packetw2c_inform_playerhead_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packetw2c_inform_playerhead_result::CopyFrom(const packetw2c_inform_playerhead_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packetw2c_inform_playerhead_result::IsInitialized() const {

  return true;
}

void packetw2c_inform_playerhead_result::Swap(packetw2c_inform_playerhead_result* other) {
  if (other != this) {
    std::swap(packet_id_, other->packet_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packetw2c_inform_playerhead_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packetw2c_inform_playerhead_result_descriptor_;
  metadata.reflection = packetw2c_inform_playerhead_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client2world_protocols

// @@protoc_insertion_point(global_scope)
